function ValidatorFactory ( outgoing , incoming ) { this . _outgoing = outgoing ; this . _incoming = incoming ; }
function ( value ) { if ( _time !== value ) { _time = value ; obj . buffer = new Float32Array ( value ) ; Gibberish . dirty ( that ) ; } }
function ( ) { for ( var i = 0 ; i < arguments . length ; i ++ ) { this . ugens . push ( arguments [ i ] ) ; } Gibberish . dirty ( ) ; }
function ( ) { for ( var i = 0 ; i < arguments . length ; i ++ ) { this . ugens . remove ( arguments [ i ] ) ; } Gibberish . dirty ( ) ; }
function ( value ) { damping = value / 100 ; that . dampingValue = .5 - damping ; Gibberish . dirty ( this ) ; }
function ( value ) { damping = value / 100 ; that . dampingValue = .5 - damping ; Gibberish . dirty ( this ) ; }
function ( speed ) { this . speed = speed ; if ( this . _function !== null ) { this . _function . setPhase ( 0 ) ; Gibberish . dirty ( this ) ; } }
function ( value ) { if ( waveform !== value ) { waveform = value ; that . osc = Gibberish . make [ value ] ( ) ; Gibberish . dirty ( that ) ; } }
function ( value ) { if ( waveform !== value ) { waveform = value ; that . osc = Gibberish . make [ value ] ( ) ; Gibberish . dirty ( that ) ; } }
function ( value ) { if ( waveform !== value ) { waveform = value ; that . osc = Gibberish . make [ value ] ( ) ; Gibberish . dirty ( that ) ; } }
function ( args ) { _ ( this ) . bindAll ( 'render' , 'renderHabit' , 'renderGoal' , 'renderAmount' , 'currencyTextChanged' , 'sliderChanged' , 'applyCostToSlider' , 'initializeListeners' , 'save' ) ; $ ( this . el ) . live ( 'pageinit' , this . initializeListeners ) ; }
function ( ) { this . renderHabit ( ) ; this . renderGoal ( ) ; this . renderAmount ( ) ; }
function ( i , value ) { select . find ( 'option[value="' + value + '"]' ) . attr ( 'disabled' , true ) ; }
function ( feature ) { return feature . setMap ( _this . map , force ) ; }
function ( ) { this . setMap ( this . map , { geometry : true } ) ; return this . setVisible ( true ) ; }
function pf_main ( ) { obstacleList = getObstacleList ( ) ; particleList = randomDistribution ( NUM_PARTICLES , obstacleList ) ; oldAveParticles = [ ] ; }
function ( global ) { files [ result . file ] . push ( { severity : 'warning' , line : global . line , column : 0 , message : "Implied global '" + global . name + "'" , source : 'jshint.implied-globals' } ) ; }
function ( unused ) { files [ result . file ] . push ( { severity : 'warning' , line : unused . line , column : 0 , message : "Unused variable: '" + unused . name + "'" , source : 'jshint.implied-unuseds' } ) ; }
function ( data ) { self . die ( ) ; console . log ( 'Player with this session Id,' + _ . pluck ( io . sockets , 'sessionid' ) + ', has died.' ) ; }
function ( x , y , username , sessionId ) { this . x = x ; this . y = y ; this . username = username ; this . sessionId = sessionId ; }
function ( error , result ) { if ( error ) { console . log ( "create_categorie error with category: " + categoryData . category_id + " " + categoryData . name ) ; console . log ( error ) ; } else { console . log ( "categorie created" ) } }
function ( error , result ) { if ( error ) { console . log ( "update_categorie error with category: " + categoryData . category_id + " " + categoryData . name ) ; console . log ( error ) ; } else { console . log ( "categorie updated" ) } }
function ( key ) { return ( this . _keys . indexOf ( key ) >= 0 ) ; }
function ( name ) { fn ( name , methods ) ; }
function initializeClasses ( ) { initializeClass ( object ) ; simpleArrayEach ( ClassNames , function ( name ) { initializeClass ( globalContext [ name ] ) ; } ) ; }
function ( f , h , m ) { return padNumber ( h , format . length ) ; }
function ( d ) { var d = d . getDate ( ) ; return d + getOrdinalizedSuffix ( d ) ; }
function ( i , u ) { if ( isDefined ( set [ u . unit ] ) ) { unit = u . unit ; return false ; } }
function getYearFromAbbreviation ( year ) { return round ( new date ( ) . getFullYear ( ) / 100 ) * 100 - round ( year / 100 ) * 100 + year ; }
function ( u , i ) { next = round ( ams / u . multiplier ( ) * 10 ) / 10 | 0 ; if ( next >= 1 ) { value = next ; unit = i + 1 ; } }
function ( f , localeCode ) { return round ( ( this . getTime ( ) - date . create ( f , localeCode ) . getTime ( ) ) / multiplier ) ; }
function ( f , localeCode ) { return round ( ( date . create ( f , localeCode ) . getTime ( ) - this . getTime ( ) ) / multiplier ) ; }
function base ( ) { return round ( this * multiplier ) ; }
function ( ) { var scope = globalContext ; iterateOverObject ( this . split ( '.' ) , function ( i , s ) { return ! ! ( scope = scope [ s ] ) ; } ) ; return scope ; }
function ( name , methods ) { methods [ name ] = function ( precision ) { return round ( this , precision , name ) ; } }
function ( name , methods ) { methods [ name ] = function ( a , b ) { return math [ name ] ( this , a , b ) ; } }
function ( e ) { if ( String . fromCharCode ( e . charCode ) . toLocaleUpperCase ( ) === 'N' ) { instructions . firstElementChild . innerHTML = "choose Up or down, corresponding to whether the yellow box goes in the top or bottom red boxes." ; routineFix ( ) ; } }
function ( args ) { console . log ( 'fix paragraphs' ) ; console . log ( args ) ; args . en ; args . jp ; args . ex ; }
function ( callback ) { for ( key in this ) { if ( callback ( key , this [ key ] ) === false ) { return this ; } } return this ; }
function ( data ) { console . log ( "fetched locale data for " + lang ) ; locale [ lang ] = data ; }
function ( options ) { if ( this . element . midgardNotifications ) { return jQuery ( this . element ) . data ( 'midgardNotifications' ) . create ( options ) ; } }
function ( ) { _ . each ( restorables , function ( instance ) { widget . _readLocal ( instance ) ; } ) ; restorables = [ ] ; restorer = null ; }
function ( options ) { if ( this . element . midgardNotifications ) { return jQuery ( this . element ) . data ( 'midgardNotifications' ) . create ( options ) ; } }
function ( ) { _ . each ( restorables , function ( instance ) { widget . _readLocal ( instance ) ; } ) ; restorables = [ ] ; restorer = null ; }
function ( ) { if ( ! this . reloadInProgress && ! pimcore . globalmanager . get ( "pimcore_reload_in_progress" ) ) { return t ( "do_you_really_want_to_leave_the_editmode" ) ; } }
function ( ) { $rootScope . $broadcast ( name , message ) ; }
function ( ) { data . results . fetchMultipleUserDataInWidget = true ; sakai . api . Content . prepareContentForRender ( data . results , sakai . data . me , function ( parsedContent ) { callback ( data ) ; } ) ; }
function ( ) { $ ( "#collectionviewer_expanded_content_container .s3d-search-result.hovered" , $rootel ) . removeClass ( "hovered" ) ; }
function ( ) { return collectionviewer . collectionName ; }
function ( ) { getComments ( ) ; $window . trigger ( 'sakai.entity.updatecountcache' , { increment : false } ) ; }
function ( data ) { if ( sakai_global . content_profile ) { contentData = data || sakai_global . content_profile . content_data ; if ( contentData ) { doInit ( ) ; } } }
function ( ) { return this . _dirty ; }
function ( e ) { if ( e . fake ) return ; e . fake = true ; target . dispatchEvent ( e ) ; }
function ( time ) { this . _target . setVisible ( ! this . _target . isVisible ( ) ) ; }
function ( ) { this . _targets = [ ] ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . pauseTarget ( this ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . pauseTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . resumeTarget ( this ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . resumeTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getActionManager ( ) . removeAllActionsFromTarget ( this ) ; }
function ( dt ) { this . unschedule ( this . unpause ) ; var node = this . getChildByTag ( TAG_GROSSINI ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . resumeTarget ( node ) ; }
function ( time ) { this . unschedule ( this . resumeGrossini ) ; var grossini = this . getChildByTag ( TAG_GROSSINI ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . resumeTarget ( grossini ) ; }
function ( ) { return new ActionTargeted ( ) }
function ( ) { try { return ! ! this . peerWindowObject_ && ! Boolean ( this . peerWindowObject_ . closed ) ; } catch ( e ) { return false ; } }
function ( ) { localStorage . removeItem ( opts . objName ) ; }
function ( ) { $form . trigger ( "reset_state" ) ; $ ( window ) . unbind ( "unload.remember_state" ) ; }
function ( ) { var params = get_params ( ) ; if ( params . type == 'undelegated' ) { add_nameserver ( ) ; } else if ( tree_view ) { hide_results ( ) ; } }
function ( item ) { return { registrationId : item . registrationId ( ) , time : item . time ( ) , item : item } ; }
function ( file ) { dictionary_locations . push ( path . resolve ( file ) ) ; }
function handleTouchEnd ( actionId , menuItem ) { if ( menuItem ) { menuItem . className = 'menuItem peekItem' ; } window . qnx . webplatform . getController ( ) . remoteExec ( 1 , 'executeMenuAction' , [ actionId ] ) ; }
function ( parent_id ) { if ( parent_id > 0 ) { jQuery ( '#comment-editor-' + parent_id ) . remove ( ) ; } else { jQuery ( '#jform_description_' + parent_id ) . val ( '' ) ; } }
function ( user ) { if ( typeof user == 'string' ) { return this . pipes [ user ] ; } else { return this . pipes [ user . getPubid ( ) ] ; } }
function ( ) { if ( this . transport . id == 0 ) this . poller = setTimeout ( ( function ( ) { this . check ( ) } ) . bind ( this ) , this . options . poll ) ; }
function ( channel ) { channel = channel . toLowerCase ( ) ; if ( channel in this . channels ) { return this . channels [ channel ] ; } return false ; }
function ( ed , e ) { if ( e . keyCode == 13 ) return t . handleEnter ( ed ) ; }
function hasParentInList ( ed , e , list ) { return ed . dom . getParent ( e , function ( p ) { return tinymce . inArray ( list , p ) !== - 1 ; } ) ; }
function attemptMergeWithNext ( e , allowDifferentListStyles , mergeParagraphs ) { var next = skipWhitespaceNodesForwards ( e . nextSibling ) ; if ( next ) { return attemptMerge ( e , next , allowDifferentListStyles ? next : false , mergeParagraphs ) ; } else { return e ; } }
function ( pZone ) { var newFrame = new cc . AnimationFrame ( ) ; newFrame . initWithSpriteFrame ( this . _spriteFrame , this . _delayPerUnit , this . _userInfo ) ; return newFrame ; }
function ( ) { namespace . app . userState . loggedIn = false ; context . navBarView . insertView ( "#loginanchor" , context . loginForm ) ; context . navBarView . render ( ) ; }
function ( ) { App . Controllers . Base . apply ( this , arguments ) ; this . initTracking ( ) ; this . initPlugins ( ) ; }
function ( corpusid ) { this . corpusEditLeftSideView . render ( ) ; this . corpusEditEmbeddedView . render ( ) ; this . corpusEditFullscreenView . render ( ) ; }
function ( sessionid ) { this . sessionEditLeftSideView . render ( ) ; this . sessionEditEmbeddedView . render ( ) ; this . sessionEditFullscreenView . render ( ) ; this . sessionModalView . render ( ) ; }
function ( datalistid ) { this . dataListEditLeftSideView . render ( ) ; this . dataListEditFullscreenView . render ( ) ; }
function ( format ) { this . datumsView . format = format ; this . datumsView . render ( ) ; }
function ( userid ) { this . fullScreenEditUserView . render ( ) ; this . modalEditUserView . render ( ) ; }
function ( ) { var form ; if ( Modernizr . inlinesvg && Modernizr . svg ) { this . form = form = new Views . State ( { el : $ ( ".state-form" ) } ) ; form . disableButton ( ) ; } }
function bindClick ( view , fn , context ) { hd . binders [ "event" ] ( view , { "click" : fn } , context ) ; if ( hd . isCommand ( fn ) ) { hd . bindEnablement ( fn , view ) ; } }
function ( behavior ) { if ( behavior . variable ) { behavior . variable ( vv ) ; } }
function addComputedVariable ( cellType , fn ) { var initialValue ; var vv = this . addVariable ( cellType , initialValue ) ; vv . dependsOnSelf = true ; this . addOneWayConstraint ( [ vv ] , fn ) ; return vv ; }
function ( v ) { var value = this [ v ] ; if ( hd . isVariable ( value ) ) { value = value ( ) ; } if ( typeof value !== "function" ) { data [ v ] = value ; } }
function nextUpstream ( ) { if ( this . upstream === Number . MAX_VALUE ) { this . upstream = Mark . INITIAL_UPSTREAM ; } return ++ this . upstream ; }
function nextDownstream ( ) { if ( this . downstream === - Number . MAX_VALUE ) { this . downstream = Mark . INITIAL_DOWNSTREAM ; } return -- this . downstream ; }
function setText ( text ) { if ( this . getText ( ) === text ) { return ; } this . tbox . val ( text ) ; }
function write ( view , value ) { ASSERT ( view instanceof BetterTextbox , "expected a better textbox" ) ; if ( typeof value !== "string" ) { value = JSON . stringify ( value ) ; } view . setText ( value ) ; }
function ( ) { var elt = $ ( this ) ; if ( bindElement ( elt , context ) ) { return ; } bindTree ( elt . children ( ) , context ) ; }
function ( nn ) { if ( nn . outputs . has ( vv ) ) { return false ; } return nn . outputs . some ( function ( ww ) { return this . canBeRelevant ( ww ) ; } , this ) ; }
function ConstraintFactory ( variables ) { this . variables = variables ; this . methods = [ ] ; this . cc = undefined ; this . solver = new hd . __private . Solver ( ) ; }
function ( ) { waitingNodes ( dataTable_marketplace ) ; Sunstone . runAction ( 'Marketplace.list' ) ; }
function waitingNodes ( dataTable ) { $ ( 'tr input.check_item:visible' , dataTable ) . replaceWith ( spinner ) ; }
function ( ) { components . containerWidth += $ ( this ) . outerWidth ( true ) ; }
function ( ) { menu . swipePanel ( { container : menu . find ( 'ul' ) , children : '> ul > li' } ) ; }
function ( value ) { return { xtype : 'toolbar' , defaultType : 'button' , items : value , dock : 'bottom' , layout : { pack : 'end' } } }
function ( value ) { return { xtype : 'toolbar' , defaultType : 'button' , items : value , dock : 'bottom' , layout : { pack : 'end' } } }
function ( ) { _advanceYear_MYP ( - 1 ) ; self . _instInputFocus_MYP ( inst ) ; }
function ( ) { _advanceYear_MYP ( 1 ) ; self . _instInputFocus_MYP ( inst ) ; }
function ( feature ) { if ( feature ) bean . fire ( interaction , 'on' , { parent : parent ( ) , data : feature , formatter : gm . formatter ( ) . format , e : e } ) ; }
function ( monuments ) { $ ( '#results' ) . data ( 'monuments' , monuments ) ; mapFocusNeeded = true ; showMonumentsMap ( monuments , { lat : pos . coords . latitude , lon : pos . coords . longitude } , 10 ) ; }
function ( ) { this . initPhysics ( ) ; this . setupLevel ( 0 ) ; }
function ( user ) { me . fetch ( ) ; users . fetch ( ) ; }
function ( response ) { var elapsed = ( ( new Date ) - starttime ) ; ok ( elapsed < timeout , str ( 'Check that the repository manager invoked	  \ 								this callback before the timeout was reached. \ 								\nThis callback was invoked after ' + elapsed + ' milliseconds.' ) ) ; start ( ) ; runNextTest ( ) ; }
function ( response ) { var elapsed = ( ( new Date ) - starttime ) ; ok ( elapsed < timeout , str ( 'Check that the repository manager invoked	  \ 								this callback before the timeout was reached. \ 								\nThis callback was invoked after ' + elapsed + ' milliseconds.' ) ) ; start ( ) ; runNextTest ( ) ; }
function ( ) { app . use ( express . errorHandler ( { dumpExceptions : true , showStack : true } ) ) ; var config = require ( './config' ) ; db = mongoskin . db ( config . db ) ; }
function ( ) { loop ( element ) ; }
function ( image ) { bunny . css ( "top" , ( - image . height ( ) ) + "px" ) ; loop ( bunny ) ; }
function ( ) { $ ( '.metricblock' ) . formset ( { formCssClass : 'dynamic-metric-form' , prefix : 'metrics' , addBtnObj : $ ( '#events-add-metric-button' ) , addDeleteButton : null } ) ; }
function ( ) { $ ( this . element ) . trigger ( 'step_shown' , this . _state ( ) ) ; }
function ( ) { var aParents = oUL . getParents ( "*:not(html,body)" ) , aFiltered = aParents . filter ( function ( oEl ) { return oEl . getStyle ( "position" ) === "fixed" ; } ) ; return ! ! aFiltered . length ; }
function ( ) { this . _clearCustomEvents ( ) ; this . list . set ( "html" , "" ) ; }
function ( value ) { if ( value === null ) { return '' ; } return value . toString ( ) . replace ( /(^ +| +$)/g , '' ) ; }
function ( value ) { if ( value === null ) { return '' ; } return this . strip ( value . toString ( ) . toLowerCase ( ) ) . replace ( /\W+/g , '_' ) . replace ( /_+$/g , '' ) ; }
function ( ) { be . slug ( ' tests string ' ) . should . equal ( 'tests_string' ) }
function ( ) { be . slug ( 'Test is String' ) . should . equal ( 'test_is_string' ) }
function ( v , k ) { if ( v === null ) return ; if ( typeof v . data !== "undefined" && typeof v . data . teardown === "function" ) v . data . teardown ( ) ; }
function ( ) { var m = new Comment ( { "text" : this . $el . find ( ".add-comment" ) . val ( ) , } ) ; this . model . get ( "comments" ) . add ( m ) ; }
function ( size , initFun ) { var result = new Array ( size ) ; for ( var i = 0 ; i < size ; i ++ ) { result [ i ] = initFun ( i ) ; } return result ; }
function ( ) { ok ( ! butter . cornfield . user ( ) , "Username is \"\"" ) ; }
function ( res ) { deepEqual ( res , { error : "unauthorized" } , "Response is unauthorized" ) ; start ( ) ; }
function ( res ) { deepEqual ( res , { email : butter . cornfield . user ( ) , name : butter . cornfield . user ( ) , username : butter . cornfield . user ( ) } , "Response contains user information" ) ; start ( ) ; }
function ( ) { delete data . spiedEvents [ [ this . selector , this . eventName ] ] ; }
function ( __unused_display , the_window ) { if ( INTELLIHIDE ) this . _addWindowSignals ( the_window ) ; }
function ( p , n ) { posn = positions [ n ] ; if ( posn && posn . enableSelect !== false && posn . enableDisplay !== false ) { selection [ n ] = p ; } }
function ( frame ) { robotReady = true ; robotFrame = frame ; doh . robot . _run = _run ; if ( iframeUrl ) { attachIframe ( iframeUrl ) ; } }
function ( url ) { if ( robotReady ) { attachIframe ( url ) ; } else { iframeUrl = url ; } }
function ( ) { PathExpander . expandDirectoryWithRegexp ( directory , regexp ) ; expect ( walkdir . sync ) . toHaveBeenCalledWith ( directory ) ; }
function ( ) { console . log ( "WARNING: Error during MULTI command of Multi/Exec" ) }
function ( response ) { responseHandler ( response , viz_name + "" + id , refresh_interval ) ; }
function ( ) { var THIS = this ; THIS . is_initialized = true ; if ( winkstart . apps [ 'pbxs' ] [ 'default' ] ) { $ ( '[data-whapp="pbxs"] > a' ) . addClass ( 'activate' ) ; THIS . setup_page ( ) ; } }
function ( t ) { t . executeSql ( "CREATE TABLE IF NOT EXISTS toSendQueue (id INTEGER PRIMARY KEY AUTOINCREMENT, category varchar(100), country varchar(3), location varchar(100), interest varchar(100), reason varchar(100), isp varchar(255), url varchar(4000),  accessible boolean, comment varchar(255))" , [ ] , function ( t , r ) { } , function ( t , e ) { alert ( e . message ) ; } ) ; }
function ( ) { if ( this . urlqueue . length > 0 ) { ajaxlibobj = this . urlqueue . shift ( ) ; if ( ! this . _go ( ajaxlibobj ) ) this . urlqueue . unshift ( ajaxlibobj ) ; } }
function ( res ) { delete my . creq ; }
function ( ) { bb . menuBar . hideMenuBar ( ) ; }
function ( ) { bb . menuBar . hideMenuBar ( ) ; }
function ( ) { bb . menuBar . hideMenuBar ( ) ; }
function ( err , uuids ) { if ( err ) { return callback ( err ) ; } else { callback ( err , uuids [ 0 ] . toString ( ) ) ; } }
function ( context , tile ) { TerrainProvider . createTileEllipsoidGeometryFromBuffers ( context , tile , tile . transformedGeometry ) ; tile . transformedGeometry = undefined ; tile . state = TileState . READY ; }
function ( ) { socket . emit ( ev , _emitObj ) ; }
function ( offset ) { $ ( document ) . scrollTop ( this . $el . offset ( ) . top + offset ) ; return this ; }
function ( ) { $tip . css ( { 'left' : - 999 , 'top' : 0 } ) ; }
function ( chart ) { chart . trigger ( 'error' ) }
function ( chart ) { chart . trigger ( 'error' ) }
function ( chart ) { chart . trigger ( 'error' ) }
function ( chart ) { chart . trigger ( 'error' ) }
function ( ) { this . adjustIframeColumns ( ) ; }
function ( enabled ) { Services . prefs . setBoolPref ( 'devtools.debugger.remote-enabled' , value ) ; }
function ( value ) { Services . prefs . setIntPref ( 'devtools.debugger.remote-port' , value ) ; }
function ( ) { var data = $ ( this ) . data ( 'slider' ) ; if ( data ) values . push ( data . value ) ; }
function ( resJSON ) { mydir . displayDesc ( dbname , resJSON ) ; }
function ( dbname , desc ) { dmod . setTitle ( dbname ) . setBody ( desc ) . show ( ) ; }
function ( result ) { alert ( "Scanned Code: " + result . text ) ; }
function ( response ) { var res = JSON . parse ( response ) ; if ( "success" in res ) { alert ( "success: " + res . success ) ; } else { alert ( "failed: " + res . error ) ; } }
function ( ind , vertex ) { if ( selectedFeature . geometry . containsPoint ( vertex ) ) { listResult = true ; return false ; } }
function ( ) { elem . toggleClass ( options . closed_css ) . toggleClass ( options . open_css ) ; options . on_toggle ( elem , options ) ; }
function ( req , res ) { res . writeHead ( 200 , { "Cache-Control" : "max-age=0" , "Content-Type" : "text/html" } ) ; res . end ( doc ) ; }
function ( ) { systemEvent . deviceBatteryStateChange ( null ) ; }
function ( ) { expect ( listener ) . toHaveBeenCalledWith ( 3 ) ; }
function ( message ) { if ( ! Game . debugPrint ) { return ; } return console . log ( message ) ; }
function ( ) { return new Kinetic . Rect ( { x : 0 , y : 0 , width : 20 , height : 20 , strokeWidth : 1 , offset : [ 10 , 10 ] } ) ; }
function ( ) { this . $el . html ( this . tmpl ( { list : this . model . get ( 'path' ) , length : this . model . get ( 'path' ) . length } ) ) ; this . focusOnSearchBox ( ) ; }
function ( data , textStatus , jqXHR ) { mutiny . retry = 1 ; mutiny . render ( data ) ; }
function ( err ) { if ( err ) return ; this . attr ( { y : 150 , x : 150 , scale : 0.5 , filters : filter . hueRotate ( 90 ) } ) ; stage . addChild ( this ) ; }
function ( err ) { if ( err ) return ; this . attr ( { y : 150 , x : 290 , scale : 0.5 , filters : filter . invert ( 1 ) } ) ; stage . addChild ( this ) ; }
function ( err ) { if ( err ) return ; this . attr ( { y : 290 , x : 10 , scale : 0.5 , filters : filter . brightness ( 2 ) } ) ; stage . addChild ( this ) ; }
function ( err ) { if ( err ) return ; this . attr ( { y : 290 , x : 150 , scale : 0.5 , filters : filter . contrast ( 2 ) } ) ; stage . addChild ( this ) ; }
function ( err ) { if ( err ) return ; this . attr ( { y : 290 , x : 290 , scale : 0.5 , filters : filter . opacity ( 0.5 ) } ) ; stage . addChild ( this ) ; }
function ( err , movie ) { movie . addTo ( stage ) ; }
function ( err , movie ) { movie . addTo ( stage ) ; }
function ( ) { return [ 'login' , 'screener' , 'registration' , 'registrationextjs4' , 'pharmacy' , 'chw' , 'outpatient' ] ; }
function ( ) { var addr = app . address ( ) ; logger . info ( "%s started on %s:%s" , pkgInfo . name , addr . address , addr . port ) ; }
function ( req , res , next , cid ) { if ( chconf [ req . params . cid ] ) { next ( ) ; } else { res . json ( { error : "Channel Not Found" , reason : "The specified channel is not registered in this server. Try GET /channels/ to check registered." } , 404 ) ; } }
function ( err ) { console . log ( [ self . name , err ] ) ; self . closed = true ; }
function ( ) { var regexTree = noamRe . array . toTree ( [ ] ) ; var automaton = noamRe . tree . toAutomaton ( regexTree ) ; expect ( noamFsm . isLanguageNonEmpty ( automaton ) ) . toBeFalsy ( ) ; }
function MouseClickResponder ( params ) { this . _model = params . exposedModel ; }
function ( ) { PerformanceReporter . logTestWindow ( /Open File:\t,*/ , path ) ; PerformanceReporter . clearTestWindow ( ) ; }
function ( ) { var promise = CommandManager . execute ( Commands . FILE_OPEN , { fullPath : fullPath } ) ; waitsForDone ( promise ) ; }
function isBracketsDoneLoading ( ) { return _testWindow . brackets && _testWindow . brackets . test && _testWindow . brackets . test . doneLoading ; }
function ( ) { var result = _testWindow . brackets . test . ProjectManager . openProject ( path ) ; result . done ( function ( ) { isReady = true ; } ) ; }
function toggleQuickEditAtOffset ( editor , offset ) { editor . setCursorPos ( offset . line , offset . ch ) ; return _testWindow . executeCommand ( Commands . TOGGLE_QUICK_EDIT ) ; }
function getTestWindow ( ) { return _testWindow ; }
function disableSection ( section ) { section . addClass ( 'sectionDisabled' ) ; section . siblings ( 'ul' ) . children ( 'li' ) . eq ( $ ( section ) . index ( ) - 1 ) . addClass ( 'sectionDisabled' ) ; }
function enableSection ( section ) { section . removeClass ( 'sectionDisabled' ) ; section . siblings ( 'ul' ) . children ( 'li' ) . eq ( $ ( section ) . index ( ) - 1 ) . removeClass ( 'sectionDisabled' ) ; }
function ( e , ui ) { _this . settings . onStart ( ) ; }
function ( mKey ) { if ( mKey ) newKeywords . addToSet ( mKey ) ; }
function ( ) { return playlist . getSongs ( ) ; }
function ( id ) { currentSong = playlist . getSongById ( id ) ; }
function ( enable ) { exploreEnabled = enable ; }
function ( volume ) { if ( volume ) { player . setVolume ( volume ) ; } else { player . mute ( ) ; } }
function ( ) { this . selected = false ; _save ( ) ; }
function songsTab ( ) { var contentHeader = contentHeader ( '#CurrentSongDisplay' , 'Add Songs' , 'Search for artists or songs' ) ; urlInput ( contentHeader ) ; return { setContentHeaderTitle : function ( title ) { contentHeader . setTitle ( title ) ; } } ; }
function ( ) { tabsProcessed ++ ; restrictedSongs . push ( song ) ; if ( tabsProcessed === tabs . length ) { showRestrictedSongDialog ( restrictedSongs ) ; } }
function ( ) { timeoutId = setTimeout ( function ( ) { clickEvent = addButton . click ; addButton . off ( 'click' ) ; addSongsFromOpenTabs ( ) ; } , 3000 ) ; }
function ( ) { localStorage . setItem ( 'playlists' , JSON . stringify ( playlists ) ) ; }
function ( ) { var playlist = new Playlist ( this . id , this . title ) ; playlists . push ( playlist ) ; }
function ( ) { return playlists . length ; }
function ( ) { return playlists ; }
function ( ) { addInput . css ( 'opacity' , 1 ) . css ( 'cursor' , "auto" ) . focus ( ) ; addCancelIcon . css ( 'right' , '0px' ) . one ( 'click' , contract ) ; addButton . width ( '350px' ) ; }
function ( title ) { headerTitle . text ( title ) ; }
function ( ) { addInput . attr ( 'placeholder' , placeholder ) ; }
function ( currentSong ) { var text = currentSong ? currentSong . name : defaultCaption ; title . text ( text ) ; }
function ( ) { var isMuted = volumeSlider . toggleMute ( ) ; var title = isMuted ? 'Unmute' : 'Mute' ; $ ( this ) . attr ( 'title' , title ) ; }
function ( title ) { contentHeader . setTitle ( title ) ; }
function ( ) { userChangingValue = false ; }
function ( ) { Player . seekTo ( selector . val ( ) ) ; setTimeout ( function ( ) { userChangingValue = false ; } , 1500 ) ; }
function ( ) { repaint ( ) ; timeDisplay . update ( selector . val ( ) ) ; }
function ( ) { return update ( ) ; }
function ( ) { if ( ! userChangingValue ) { var currentTime = Player . getCurrentTime ( ) ; progressbar . setElapsedTime ( currentTime ) ; var totalTime = Player . getTotalTime ( ) ; progressbar . setTotalTime ( totalTime ) ; } }
function ( value ) { selector . val ( value ) ; repaint ( ) ; }
function ( ) { Player . setExploreEnabled ( exploreCheckBox . prop ( 'checked' ) ) ; }
function ( XMLHttpRequest ) { if ( $ ( options . content_type ) . val ( ) ) { options . loader . show ( ) ; } else { return false ; } }
function ( feature , index , orig ) { if ( ! me . loadedFeatures [ feature . wikimapia_id ] ) { feature . setMap ( me . komooMap ) ; me . loadedFeatures [ feature . wikimapia_id ] = feature ; } }
function ( e ) { komooMap . tooltip . feature = undefined ; }
function ( e ) { google . maps . event . trigger ( komooMap . tooltip . feature , "click" , { latLng : komooMap . tooltip . getPosition ( ) } ) ; }
function ( ) { this . tooltip . close ( ) ; this . tooltip . feature = undefined ; }
function ( opts ) { this . closeTooltip ( ) ; this . infoWindow . open ( opts ) ; }
function ( item , index , orig ) { callback ( komooMap . featuresByType [ type . type ] [ item ] , item , orig ) ; }
function ( category , index_ , orig_ ) { komooMap . featuresByType [ type . type ] [ category ] = komoo . collections . makeFeatureCollection ( opts ) ; }
function ( feature , index , orig ) { if ( ! bounds . intersects ( feature . getBounds ( ) ) ) { feature . setMap ( null ) ; } }
function ( opt_mapType ) { var mapType = opt_mapType || this . googleMap . getMapTypeId ( ) ; komoo . utils . createCookie ( 'mapType' , mapType , 90 ) ; }
function ( ) { var mapType = komoo . utils . readCookie ( 'mapType' ) ; if ( mapType ) { this . googleMap . setMapTypeId ( mapType ) ; return true ; } return false ; }
function ( category , index , orig ) { if ( featuresByType [ category . name ] ) { featuresByType [ category . name ] . push ( feature ) ; } }
function ( feature , index , orig ) { geoms . push ( feature . getGeoJsonGeometry ( ) ) ; }
function ( features , category , orig ) { categories . push ( category ) ; }
function ( features ) { return features . hide ( ) ; }
function ( type , opt_categories , opt_strict ) { return this . getFeaturesByType ( type , opt_categories , opt_strict ) . hide ( ) ; }
function ( ) { komooMap . openInfoWindow ( { feature : feature_ , position : e . latLng } ) }
function ( ) { if ( komooMap . tooltip . isMouseover || komooMap . addPanel . is ( ":visible" ) || komooMap . mode == komoo . Mode . SELECT_CENTER ) { return ; } komooMap . openTooltip ( feature , e . latLng ) ; }
function ( e ) { komooMap . setDrawingMode ( komoo . GeometryType . POLYGON ) ; }
function ( e ) { komooMap . setDrawingMode ( komoo . GeometryType . POLYLINE ) ; }
function ( e ) { komooMap . setDrawingMode ( komoo . GeometryType . POINT ) ; }
function ( type , index , orig ) { komooMap . featureOptions [ type . type ] = type ; }
function ( ) { button_click ( ) ; komooMap . event . trigger ( "finish_click" , komooMap . featureOptions [ komooMap . type ] ) ; komooMap . type = null ; komooMap . setEditMode ( undefined ) ; }
function ( featureType , id ) { return this . loadedFeatures [ featureType + "_" + id ] ; }
function ( e ) { this . event . trigger ( "featureclick" , e ) ; }
function ( opts ) { this . initOverlay ( opts ) ; }
function ( eventName , index , orig ) { google . maps . event . addListener ( that . overlay_ , eventName , function ( e , args ) { komoo . event . trigger ( that , eventName , e , args ) ; } ) ; }
function ( overlay ) { this . overlay_ = overlay ; this . initEvents ( ) ; }
function ( ) { return this . overlay_ ; }
function ( map ) { if ( map instanceof komoo . Map ) return this . overlay_ . setMap ( map . googleMap ) ; else return this . overlay_ . setMap ( map ) ; }
function ( ) { return this . overlay_ . getMap ( ) ; }
function ( visible ) { return this . overlay_ . setVisible ( visible ) ; }
function ( ) { return this . overlay_ . getVisible ( ) ; }
function ( options ) { return this . overlay_ . setOptions ( options ) ; }
function ( opts ) { var options = opts || { clickable : true , zIndex : this . getDefaultZIndex ( ) , } ; this . setOverlay ( new google . maps . Marker ( options ) ) ; }
function ( eventName , index , orig ) { google . maps . event . addListener ( that . overlay_ , eventName , function ( e , args ) { komoo . event . trigger ( that , eventName , e , args ) ; } ) ; }
function ( latlng ) { return this . overlay_ . setPosition ( latlng ) ; }
function ( ) { return this . overlay_ . getPosition ( ) ; }
function ( icon ) { return this . overlay_ . setIcon ( icon ) ; }
function ( ) { return this . overlay_ . getIcon ( ) ; }
function ( draggable ) { return this . overlay_ . setDraggable ( draggable ) ; }
function ( ) { return this . overlay_ . getDraggable ( ) ; }
function ( opts ) { var options = opts || { clickable : true , visible : true , zIndex : this . getDefaultZIndex ( ) , } ; this . setOverlay ( new MultiMarker ( options ) ) ; }
function ( points ) { this . overlay_ . addMarkers ( points ) ; }
function ( ) { return this . overlay_ . getMarkers ( ) . getArray ( ) ; }
function ( positions ) { return this . overlay_ . setPositions ( positions ) ; }
function ( ) { return this . overlay_ . getPositions ( ) . getArray ( ) ; }
function ( markers ) { this . overlay_ . addMarkers ( markers ) ; }
function ( ) { return this . overlay_ . getMarkers ( ) ; }
function ( marker ) { this . overlay_ . addMarker ( marker ) ; }
function ( icon ) { return this . overlay_ . setIcon ( icon ) ; }
function ( ) { return this . overlay_ . getIcon ( ) ; }
function ( path ) { return this . overlay_ . setPath ( path ) ; }
function ( ) { return this . overlay_ . getPath ( ) ; }
function ( flag ) { return this . overlay_ . setEditable ( flag ) ; }
function ( lines ) { this . overlay_ . addPolylines ( lines ) ; }
function ( ) { return this . overlay_ . getPolylines ( ) . getArray ( ) ; }
function ( paths ) { return this . overlay_ . setPaths ( paths ) ; }
function ( ) { return this . overlay_ . getPaths ( ) . getArray ( ) ; }
function ( ) { return this . overlay_ . getPaths ( ) . getAt ( 0 ) ; }
function ( paths ) { return this . overlay_ . setPaths ( paths ) ; }
function ( ) { return this . overlay_ . getPaths ( ) ; }
function ( e ) { if ( editor . addPanel . is ( ":visible" ) ) { return ; } editor . setDrawingMode ( type , geometryType ) ; $ ( "#map-panel-add .selected" ) . removeClass ( "selected" ) ; $subitem . addClass ( "selected" ) ; }
function ( r ) { return r . id ; }
function ( ) { this . DEFAULT_NEWVERSION = 0.0 , this . DEFAULT_UPDATECHECK = 0 ; this . newversion = GM_getValue ( "newver" , this . DEFAULT_NEWVERSION ) , this . updateCheck = GM_getValue ( "updtTime" , this . DEFAULT_UPDATECHECK ) ; return this ; }
function ( array ) { var max = array [ 0 ] ; for ( var i = 0 ; i < array . length ; ++ i ) if ( max < array [ i ] ) max = array [ i ] ; return max ; }
function ( array ) { var min = array [ 0 ] ; for ( var i = 0 ; i < array . length ; ++ i ) if ( min > array [ i ] ) min = array [ i ] ; return min ; }
function ( ) { testGenerator . close ( ) ; }
function imageIt ( ) { var selection = selectedText ; if ( selection == '' ) { alert ( 'Select some text with which to find images.' ) ; return ; } var iurl = 'http://images.search.yahoo.com/search/images?p=' + escape ( selection ) ; newWindowIFrame ( 'Image results for: ' + selection , iurl ) ; }
function ( err , events ) { if ( err ) { res . send ( 500 , 'Error #301: ' + err ) ; } else { res . send ( events ) ; } }
function ( err ) { if ( err ) { res . send ( 500 , 'Error #302: ' + err ) ; } else { res . send ( req . url + '/' + event . _id ) ; } }
function ( err , doc ) { if ( err ) res . send ( 500 , 'Error #304: ' + err ) ; else if ( venue == null ) res . send ( 404 , "The requested event has not been found" ) ; else res . send ( doc ) ; }
function ( err , docs ) { if ( err ) res . send ( 500 , 'Error #201: ' + err ) ; else res . send ( docs ) ; }
function ( err ) { if ( err ) res . send ( 500 , 'Error #202: ' + err ) ; else res . send ( '/events/' + patch . _id ) ; }
function ( err ) { if ( err ) res . send ( 500 , 'Error #203: ' + err ) ; else res . send ( req . url ) ; }
function ( err , doc ) { if ( err ) res . send ( 500 , 'Error #204: ' + err ) ; else if ( doc == null ) res . send ( 404 , "The requested patch has not been found" ) ; else res . send ( doc ) ; }
function ( err ) { if ( ! err ) { res . send ( req . url + '/' + user . _id ) ; } else res . send ( 500 , 'Error #006: ' + err ) ; }
function ( err ) { if ( ! err ) { res . send ( req . url ) ; } else res . send ( 500 , 'Error #007: ' + err ) ; }
function ( err , doc ) { if ( err ) res . send ( 500 , 'Error #008: ' + err ) ; else if ( doc == null ) res . send ( 404 , 'The requested user has not been found' ) ; else res . send ( doc ) ; }
f if ( ! err ) { res . send ( 'users/' + user . _id ) ; } else { res . send ( 500 , 'Error #011: ' + err ) ; } } ) ;
f if ( ! err ) { res . send ( '/users/' + user . _id ) ; } else { res . send ( 500 , 'Error #013: ' + err ) ; } } ) ;
function ( err ) { if ( err ) res . send ( 500 , 'Error #019: ' + err ) ; else { count ++ ; if ( count == friends . length ) { res . send ( '/users/' + _id ) ; } } }
function ( err ) { if ( err ) res . send ( 500 , 'Error #102: ' + err ) ; else res . send ( '/venues/' + venue . _id ) ; }
function ( err ) { if ( err ) res . send ( 500 , 'Error #103: ' + err ) ; else res . send ( '/venues/' ) ; }
function ( err ) { if ( err ) res . send ( 500 , 'Error #105: ' + err ) ; else res . send ( req . url ) ; }
function ( err , doc ) { if ( err ) res . send ( 500 , 'Error #106: ' + err ) ; else res . send ( '/venues/' ) ; }
function ( ) { for ( var i = this . pool . length - 1 ; i >= 0 ; i -- ) { this . pool [ i ] . close ( ) ; } }
function ( template ) { $ ( '.sliderCtn' ) . append ( $ ( '#toolbox-tmpl' ) . html ( ) ) ; attachEvents ( ) ; done ( ) ; }
function ( ) { this . showAllMode = ! this . showAllMode ; if ( this . changedData && this . initialData ) { this . setRootNode ( ) ; } }
function ( ) { console . log ( [ "enable_save" ] ) ; $ ( '.NB-profile-save-button' , this . $modal ) . removeClass ( 'NB-modal-submit-grey' ) . addClass ( 'NB-modal-submit-green' ) . text ( 'Save My Profile' ) ; }
function ( ) { $ ( '.NB-profile-save-button' , this . $modal ) . addClass ( 'NB-modal-submit-grey' ) . removeClass ( 'NB-modal-submit-green' ) . text ( 'Change what you like above...' ) ; }
function ( ) { if ( NEWSBLUR . app . story_list ) { NEWSBLUR . app . story_list . fetch_story_locations_in_feed_view ( ) ; } }
function ( ) { if ( NEWSBLUR . app . story_list ) { NEWSBLUR . app . story_list . fetch_story_locations_in_feed_view ( ) ; } }
function ( i , user ) { if ( user != null ) { $ ( ".results" ) . append ( Card . build ( user ) . fadeIn ( 1000 ) ) ; } }
function ( d , i ) { return d && ( scale ( d ) < scale . range ( ) [ 1 ] + 10 || scale ( d ) > scale . range ( ) [ 0 ] - 10 ) ; }
function unload ( ) { $ ( DocumentManager ) . off ( "currentDocumentChange" , onCurrentDocumentChange ) ; $ ( ".CodeMirror-lines" ) . off ( "mousemove" , onLinesMouseMove ) . off ( "mouseout" , onLinesMouseOut ) . off ( "click" , onLinesClick ) ; }
function ( val ) { if ( typeof val === "number" ) this . _ . a = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . d = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . s = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . r = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . al = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . dl = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . sl = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . rl = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . delay = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . duration = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . start = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . stop = val ; }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . depth = val ; _ . lfo . mul = _ . depth * _ . offset ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . rate = val ; _ . lfo . freq . value = val ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . thres = val ; _ . thres2 = val * val ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . ratio = val ; set_params . call ( this , _ . ratio , _ . attack , _ . release ) ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . attack = val ; set_params . call ( this , _ . ratio , _ . attack , _ . release ) ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . release = val ; set_params . call ( this , _ . ratio , _ . attack , _ . release ) ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) _ . gain = val ; }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . time = val ; set_params . call ( this , _ . time , this . _ . fb , _ . wet ) ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . fb = val ; set_params . call ( this , _ . time , _ . fb , _ . wet ) ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . wet = val ; set_params . call ( this , _ . time , _ . fb , _ . wet ) ; } }
function ( val ) { this . _ . preGain = timbre ( val ) ; }
function ( val ) { this . _ . postGain = timbre ( val ) ; }
function ( val ) { this . _ . lpfFreq = timbre ( val ) ; }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . time = val ; set_params . call ( this , _ . time , _ . fb , _ . wet ) ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . fb = val ; set_params . call ( this , _ . time , _ . fb , _ . wet ) ; } }
function ( val ) { var _ = this . _ ; if ( typeof val === "number" ) { _ . wet = val ; set_params . call ( this , _ . time , _ . fb , _ . wet ) ; } }
function ( ) { return this . _ . tableName ; }
function ( val ) { if ( typeof val === "number" ) this . _ . delay = val ; }
function ( val ) { this . _ . reversed = ! ! val ; }
function ( val ) { this . _ . freq = timbre ( val ) ; }
function ( val ) { this . _ . band = timbre ( val ) ; }
function ( val ) { this . _ . gain = timbre ( val ) ; }
function ( val ) { this . _ . freq = timbre ( val ) ; }
function ( val ) { if ( typeof val === "object" && ( val instanceof Array || val . buffer instanceof ArrayBuffer ) ) { this . _ . value = compile ( val ) ; this . _ . index = 0 ; } }
function ( val ) { if ( typeof val === "number" ) this . _ . repeat1 = val ; }
function ( val ) { if ( typeof val === "number" ) { this . _ . mul = val ; changeTheValue . call ( this , this . _ . index ) ; } }
function ( val ) { if ( typeof val === "number" ) { this . _ . add = val ; changeTheValue . call ( this , this . _ . index ) ; } }
function ( val ) { if ( typeof val === "function" ) this . _ . func = val ; }
function ( val ) { if ( typeof val === "number" ) { this . _ . saved = new Float32Array ( val ) ; this . _ . numOfSamples = val ; } }
function ( val ) { this . _ . freq = timbre ( val ) ; }
function ( val ) { if ( typeof val === "number" ) { while ( val >= 1.0 ) val -= 1.0 ; while ( val < 0.0 ) val += 1.0 ; this . _ . phase = this . _ . x = val ; } }
function ( val ) { if ( typeof val === "function" ) this . _ . value = val ; }
function ( val ) { if ( typeof val === "object" && val instanceof Array ) { this . _ . args = val ; } }
function ( val ) { if ( typeof val === "number" && val >= 0 ) { this . _ . interval = val ; } }
function ( val ) { if ( typeof val === "number" && val >= 0 ) { this . _ . delay = val ; this . _ . delaySamples = ( timbre . samplerate * ( val / 1000 ) ) | 0 ; } }
function ( val ) { if ( typeof val === "number" ) this . _ . count = val ; }
function ( val ) { if ( typeof val === "string" ) { this . _ . mml = val ; compile . call ( this , val ) ; } }
function ( val ) { if ( typeof val === "number" ) { if ( 1 <= val && val <= 511 ) { this . _ . bpm = val ; } } }
function ( val ) { if ( typeof val === "number" ) { this . _ . value = val ; changeTheValue . call ( this ) ; } }
function ( val ) { if ( typeof val === "number" ) { this . _ . mul = val ; changeTheValue . call ( this ) ; } }
function ( val ) { if ( typeof val === "number" ) { this . _ . add = val ; changeTheValue . call ( this ) ; } }
function ( val ) { this . _ . loop = ! ! val ; }
function ( val ) { this . _ . freq = timbre ( val ) ; }
function ( val ) { this . _ . phase = timbre ( val ) ; }
function ( val ) { if ( typeof val === "number" ) this . _ . fb = val ; }
function ( val ) { this . _ . freq = timbre ( val ) ; }
function ( val ) { if ( typeof val === "number" && val >= 0 ) { this . _ . fmul = val ; } }
function ( val ) { if ( typeof val === "number" ) { while ( val >= 1.0 ) val -= 1.0 ; while ( val < 0.0 ) val += 1.0 ; this . _ . phase = this . _ . x = val ; } }
function ( val ) { this . _ . width = timbre ( val ) ; }
function ( val ) { this . _ . freq = timbre ( val ) ; }
function ( val ) { this . _ . overwrite = ! ! val ; }
function ( val ) { this . _ . cutoff = timbre ( val ) ; }
function ( val ) { this . _ . Q = timbre ( val ) ; }
function ( val ) { this . _ . depth = timbre ( val ) ; }
function ( val ) { if ( typeof val === "number" ) this . _ . sampleMax = val | 0 ; }
function ( val ) { this . _ . root = timbre ( val ) ; }
function ( val ) { if ( typeof val === "number" ) this . _ . octave = val ; }
function ( val ) { this . _ . value = ! ! val ; changeTheValue . call ( this ) ; }
function ( val ) { if ( typeof val === "number" ) { this . _ . mul = val ; changeTheValue . call ( this ) ; } }
function ( val ) { if ( typeof val === "number" ) { this . _ . add = val ; changeTheValue . call ( this ) ; } }
function ( val ) { if ( this . _ . mode === "bpm" ) { if ( typeof val === "number" && val > 0 ) { changeBPM . call ( this , val ) ; } } }
function ( val ) { if ( typeof val === "number" && val > 0 ) { this . _ . timeout = val ; this . _ . timeout_samples = ( timbre . samplerate * ( val / 1000 ) ) | 0 ; } }
function ( val ) { if ( typeof val === "string" ) { if ( this . _ . src !== val ) { this . _ . src = val ; this . _ . isloaded = false ; } } }
function ( val ) { this . _ . loop = ! ! val ; }
function ( val ) { if ( typeof val === "number" ) { if ( 0 <= val && val <= this . _ . duration ) { this . _ . phase = ( val / 1000 ) * this . _ . samplerate ; } } }
function ( val ) { this . _ . loop = ! ! val ; }
function ( val ) { if ( typeof val === "number" ) { if ( 0 <= val && val <= this . _ . duration ) { this . _ . phase = ( val / 1000 ) * this . _ . samplerate ; } } }
function ( val ) { if ( typeof val === "number" ) this . _ . min = val ; }
function ( val ) { if ( typeof val === "number" ) this . _ . max = val ; }
function ( val ) { this . _ . pan = timbre ( val ) ; }
function ( val ) { if ( typeof val === "number" ) this . _ . delayTime = val ; }
function ( chunk ) { response . write ( chunk . toString ( ) ) ; }
function ( chunk ) { params += chunk . toString ( ) ; proxyReq . write ( chunk . toString ( ) ) ; }
function ( err , res ) { grunt . log . oklns ( res ) ; done ( ) ; }
function ( ) { grunt . log . writeln ( ) ; next ( ) ; }
function ( value ) { return this . getResultSetMatch ( value ) ; }
function ( value ) { var match = this . getResultSetMatch ( value ) ; return ( match === null ) ? value : match ; }
function ( relatedInterface , event ) { if ( event . which === $ . ui . keyCode . ESCAPE ) { this . _toolbar . editGroup . btnCancel . doAction ( ) ; } }
function ( ) { req = { params : { service : "" , action : "" } , body : "" } ; res = { send : jasmine . createSpy ( ) } ; GLOBAL . frameworkModules = [ 'ext/blackberry.app/index.js' , 'lib/plugins/extensions.js' , 'lib/plugins/default.js' ] ; }
function ( ) { delete GLOBAL . frameworkModules ; }
function ( ) { spyOn ( plugin , DEFAULT_SERVICE ) ; req . params . service = "not" ; req . params . action = "here" ; server . handle ( req , res ) ; expect ( plugin [ DEFAULT_SERVICE ] ) . toHaveBeenCalled ( ) ; }
function ( ) { spyOn ( extensionPlugin , "get" ) ; req . params . service = "extensions" ; req . params . action = "get" ; server . handle ( req , res ) ; expect ( extensionPlugin . get ) . toHaveBeenCalled ( ) ; }
function ( key , doc ) { if ( key < ands . ands_search_record_limit ) { widget_results . append ( "<li><a href='" + ands . ands_search_portal_url + "view/?key=" + encodeURIComponent ( doc [ 'key' ] ) + "'>" + doc [ 'list_title' ] + "</a></li>" ) ; } }
function postRender ( ) { results . scrollTop ( 0 ) ; search . removeClass ( "select2-active" ) ; self . positionDropdown ( ) ; }
function write ( data , cb ) { fs . writeFile ( path . join ( process . cwd ( ) , "package.json" ) , new Buffer ( JSON . stringify ( data , null , 2 ) + "\n" ) , cb ) }
function ( ) { if ( ! this . _started ) this . start ( ) this . req . write . apply ( this . req , arguments ) }
function ( chunk ) { if ( chunk ) this . write ( chunk ) if ( ! this . _started ) this . start ( ) this . req . end ( ) }
function ( ) { if ( ! this . response ) this . _paused = false else this . response . resume . apply ( this . response , arguments ) }
function ( key ) { log . verbose ( [ key , wrap [ key ] ] , "from wrap" ) var w = wrap [ key ] rv . dependencies [ key ] = w . from || w . version }
function ( key ) { var w = newwrap . dependencies [ key ] rv . dependencies [ key ] = w . from || w . version }
function ( p ) { return ! p . match ( /^[\._-]/ ) }
function Resources ( connection , options ) { Propfind . apply ( this , arguments ) ; this . _resources = { } ; this . depth = 1 ; }
function resource ( name , type ) { return { name : status ( name ) , resourcetype : status ( [ type ] ) } ; }
function ( ) { select_off_selectable ( $ ( this ) ) ; }
function commit_smartadd_form ( event ) { $ ( event . target ) . ajaxSubmit ( { success : reload_page , error : function ( xhr ) { show_error_dialog ( xhr . responseText ) ; } } ) ; event . preventDefault ( ) ; return false ; }
function searchFieldCheckInit ( elem ) { searchFieldCheck ( elem ) ; $ ( elem ) . change ( function ( ) { searchFieldCheck ( elem ) ; } ) ; }
function serializeParams ( params ) { var kv = [ ] ; $ . each ( params , function ( key , val ) { kv . push ( key + '=' + val ) ; } ) ; return kv . join ( '&' ) ; }
function set_suggests ( hvlist ) { $ ( 'div.hidden.suggested_items' ) . empty ( ) ; $ . each ( hvlist , function ( i , hv ) { $ ( 'div.hidden.suggested_items' ) . append ( hv ) ; } ) ; }
function ( ) { return device . os !== 'android' || device . environment === 'browser' ; }
function ( ) { return this . append ( '<p>Beta is Goaaaa!</p>' ) ; }
function ( position ) { document . last_loc = position ; map . panTo ( new google . maps . LatLng ( position . latitude , position . longitude ) ) ; }
function ( value ) { if ( value == null ) { return '' ; } return '' + value ; }
function ( values ) { if ( values == null ) { return '' ; } return values . join ( ' ' ) ; }
function ( array , arrayindex ) { if ( arrayindex != 0 ) { throw new Error ( "List<T>.CopyTo not supported for non-zero indexes" ) ; } JSIL . Array . ShallowCopy ( array , this . _items ) ; }
function ( size ) { throw new Error ( "Invalid use of Array constructor. Use JSIL.Array.New." ) ; }
function ( mover ) { topic . publish ( "/gfx/move/start" , mover ) ; domClass . add ( win . body ( ) , "dojoMove" ) ; }
function ( mover ) { topic . publish ( "/gfx/move/stop" , mover ) ; domClass . remove ( win . body ( ) , "dojoMove" ) ; }
function pushPosition ( ) { $ . post ( 'https://spy-game.herokuapp.com/games/' + document . game_id + '/update_position' , document . last_loc , handle_update , 'json' ) ; }
function ( data ) { $ ( '#count' ) . val ( totalitems ) ; $ ( '#participant_id' ) . val ( data ) ; $ ( "#addsurvey" ) . submit ( ) ; }
function ( ) { return this . lookup [ this . _index . random ( ) ] ; }
function ( el , i , arr ) { if ( multiMatch ( el , f , arr , [ el , i , arr ] ) ) { result . push ( el ) ; } }
function ( key , value ) { if ( ! multiMatch ( el [ key ] , match [ key ] , scope , [ el [ key ] , el ] ) ) { result = false ; } }
function ( el , i , arr ) { if ( multiMatch ( el , f , arr , [ el , i , arr ] ) ) { result = el ; index = i ; return false ; } }
function ( key , value ) { return key == 'foo' ; }
function ( ) { this . baseCtx . save ( ) ; this . debugCtx . save ( ) ; this . overlayCtx . save ( ) ; }
function ( ) { ( grid . tilemap [ 0 ] [ 0 ] instanceof window . Tilekit . Tile ) . should . equal ( true ) ; }
function ( ) { grid . play ( ) ; grid . get ( "paused" ) . should . equal ( false ) ; }
function ( ) { this . baseCtx . save ( ) ; this . debugCtx . save ( ) ; this . overlayCtx . save ( ) ; }
function ( pitch , roll ) { theADI . targetPitch = pitch ; theADI . targetRoll = roll ; MM . getFrame ( theADI . animateToAttitude ) ; }
function ( fileobj ) { var basename = path . basename ( fileobj . abs ) . replace ( /\.(?:js|coffee)/ , '' ) ; templates [ basename ] = require ( fileobj . abs ) ; }
function ( ) { this . running = true ; this . getLogs ( ) ; }
function ( word ) { if ( word ) { if ( upper ) newKeywords . addToSet ( word ) ; else newKeywords . addToSet ( word . toLowerCase ( ) ) ; } }
function ( ) { assert . ok ( fts . hasOwnProperty ( 'version' ) ) ; }
function ( ) { assert . equal ( Person . schema . path ( '_keywords' ) . casterConstructor . name , 'SchemaString' ) ; var p = new Person ; assert . equal ( true , Array . isArray ( p . _keywords ) ) ; }
function ( ) { assert . equal ( 'function' , typeof Person . prototype . updateIndex ) ; }
function ( ) { var p = new Person ( { name : { last : 'smith' , first : 'smith' } } ) ; assert . equal ( 1 , p . updateIndex ( ) . length ) ; }
function ( ) { var p = new Person ( { name : { last : ' smith  ' } } ) ; assert . equal ( p . updateIndex ( ) [ 0 ] , 'smith' ) ; }
function ( ) { var p = new Person ( { name : { last : 'SmiTh' } } ) ; assert . equal ( p . updateIndex ( ) [ 0 ] , 'smith' ) ; }
function ( err ) { if ( err ) return next ( err ) ; assert . equal ( p . _keywords . length , 1 ) ; assert . equal ( p . _keywords [ 0 ] , 'heckmann' ) ; next ( ) ; }
function ( err ) { if ( err ) return next ( err ) ; assert . equal ( p . _keywords . length , 1 ) ; assert . equal ( p . _keywords [ 0 ] , 'fuerstenau' ) ; next ( ) ; }
function ( ) { return this . path . replace ( "{format}" , "xml" ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Inspector.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Inspector.disable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Memory.getDOMNodeCount' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Memory.getProcessMemoryDistribution' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.disable' , paramObject , opt_callback ) ; }
function ( scriptSource , opt_callback ) { var paramObject = { 'scriptSource' : scriptSource , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.addScriptToEvaluateOnLoad' , paramObject , opt_callback ) ; }
function ( identifier , opt_callback ) { var paramObject = { 'identifier' : identifier , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.removeScriptToEvaluateOnLoad' , paramObject , opt_callback ) ; }
function ( ignoreCache , scriptToEvaluateOnLoad , opt_callback ) { var paramObject = { 'ignoreCache' : ignoreCache , 'scriptToEvaluateOnLoad' : scriptToEvaluateOnLoad , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.reload' , paramObject , opt_callback ) ; }
function ( url , opt_callback ) { var paramObject = { 'url' : url , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.navigate' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getCookies' , paramObject , opt_callback ) ; }
function ( cookieName , domain , opt_callback ) { var paramObject = { 'cookieName' : cookieName , 'domain' : domain , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.deleteCookie' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getResourceTree' , paramObject , opt_callback ) ; }
function ( frameId , url , opt_callback ) { var paramObject = { 'frameId' : frameId , 'url' : url , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getResourceContent' , paramObject , opt_callback ) ; }
function ( text , caseSensitive , isRegex , opt_callback ) { var paramObject = { 'text' : text , 'caseSensitive' : caseSensitive , 'isRegex' : isRegex , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.searchInResources' , paramObject , opt_callback ) ; }
function ( frameId , html , opt_callback ) { var paramObject = { 'frameId' : frameId , 'html' : html , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.setDocumentContent' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.canOverrideDeviceMetrics' , paramObject , opt_callback ) ; }
function ( result , opt_callback ) { var paramObject = { 'result' : result , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.setShowPaintRects' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getScriptExecutionStatus' , paramObject , opt_callback ) ; }
function ( value , opt_callback ) { var paramObject = { 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.setScriptExecutionDisabled' , paramObject , opt_callback ) ; }
function ( objectId , ownProperties , opt_callback ) { var paramObject = { 'objectId' : objectId , 'ownProperties' : ownProperties , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.getProperties' , paramObject , opt_callback ) ; }
function ( objectId , opt_callback ) { var paramObject = { 'objectId' : objectId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.releaseObject' , paramObject , opt_callback ) ; }
function ( objectGroup , opt_callback ) { var paramObject = { 'objectGroup' : objectGroup , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.releaseObjectGroup' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.run' , paramObject , opt_callback ) ; }
function ( enabled , opt_callback ) { var paramObject = { 'enabled' : enabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.setReportExecutionContextCreation' , paramObject , opt_callback ) ; }
function ( ) { chrome . experimental . devtools . remoteDebug . registerEvent ( 'Runtime.isolatedContextCreated' , [ 'context' ] ) ; chrome . experimental . devtools . remoteDebug . addDomainListener ( 'Runtime' , this ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.disable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.clearMessages' , paramObject , opt_callback ) ; }
function ( enabled , opt_callback ) { var paramObject = { 'enabled' : enabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.setMonitoringXHREnabled' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.addInspectedNode' , paramObject , opt_callback ) ; }
function ( heapObjectId , opt_callback ) { var paramObject = { 'heapObjectId' : heapObjectId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.addInspectedHeapObject' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.disable' , paramObject , opt_callback ) ; }
function ( userAgent , opt_callback ) { var paramObject = { 'userAgent' : userAgent , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.setUserAgentOverride' , paramObject , opt_callback ) ; }
function ( headers , opt_callback ) { var paramObject = { 'headers' : headers , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.setExtraHTTPHeaders' , paramObject , opt_callback ) ; }
function ( requestId , opt_callback ) { var paramObject = { 'requestId' : requestId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.getResponseBody' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.canClearBrowserCache' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.clearBrowserCache' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.canClearBrowserCookies' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.clearBrowserCookies' , paramObject , opt_callback ) ; }
function ( cacheDisabled , opt_callback ) { var paramObject = { 'cacheDisabled' : cacheDisabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.setCacheDisabled' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.disable' , paramObject , opt_callback ) ; }
function ( databaseId , opt_callback ) { var paramObject = { 'databaseId' : databaseId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.getDatabaseTableNames' , paramObject , opt_callback ) ; }
function ( databaseId , query , opt_callback ) { var paramObject = { 'databaseId' : databaseId , 'query' : query , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.executeSQL' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'IndexedDB.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'IndexedDB.disable' , paramObject , opt_callback ) ; }
function ( requestId , frameId , opt_callback ) { var paramObject = { 'requestId' : requestId , 'frameId' : frameId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'IndexedDB.requestDatabaseNamesForFrame' , paramObject , opt_callback ) ; }
function ( requestId , frameId , databaseName , opt_callback ) { var paramObject = { 'requestId' : requestId , 'frameId' : frameId , 'databaseName' : databaseName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'IndexedDB.requestDatabase' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.disable' , paramObject , opt_callback ) ; }
function ( storageId , opt_callback ) { var paramObject = { 'storageId' : storageId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.getDOMStorageEntries' , paramObject , opt_callback ) ; }
function ( storageId , key , value , opt_callback ) { var paramObject = { 'storageId' : storageId , 'key' : key , 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.setDOMStorageItem' , paramObject , opt_callback ) ; }
function ( storageId , key , opt_callback ) { var paramObject = { 'storageId' : storageId , 'key' : key , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.removeDOMStorageItem' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'ApplicationCache.getFramesWithManifests' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'ApplicationCache.enable' , paramObject , opt_callback ) ; }
function ( frameId , opt_callback ) { var paramObject = { 'frameId' : frameId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'ApplicationCache.getManifestForFrame' , paramObject , opt_callback ) ; }
function ( frameId , opt_callback ) { var paramObject = { 'frameId' : frameId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'ApplicationCache.getApplicationCacheForFrame' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'FileSystem.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'FileSystem.disable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getDocument' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.requestChildNodes' , paramObject , opt_callback ) ; }
function ( nodeId , selector , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'selector' : selector , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.querySelector' , paramObject , opt_callback ) ; }
function ( nodeId , selector , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'selector' : selector , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.querySelectorAll' , paramObject , opt_callback ) ; }
function ( nodeId , name , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'name' : name , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setNodeName' , paramObject , opt_callback ) ; }
function ( nodeId , value , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setNodeValue' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.removeNode' , paramObject , opt_callback ) ; }
function ( nodeId , name , value , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'name' : name , 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setAttributeValue' , paramObject , opt_callback ) ; }
function ( nodeId , text , name , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'text' : text , 'name' : name , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setAttributesAsText' , paramObject , opt_callback ) ; }
function ( nodeId , name , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'name' : name , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.removeAttribute' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getEventListenersForNode' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getOuterHTML' , paramObject , opt_callback ) ; }
function ( nodeId , outerHTML , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'outerHTML' : outerHTML , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setOuterHTML' , paramObject , opt_callback ) ; }
function ( query , opt_callback ) { var paramObject = { 'query' : query , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.performSearch' , paramObject , opt_callback ) ; }
function ( searchId , fromIndex , toIndex , opt_callback ) { var paramObject = { 'searchId' : searchId , 'fromIndex' : fromIndex , 'toIndex' : toIndex , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getSearchResults' , paramObject , opt_callback ) ; }
function ( searchId , opt_callback ) { var paramObject = { 'searchId' : searchId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.discardSearchResults' , paramObject , opt_callback ) ; }
function ( objectId , opt_callback ) { var paramObject = { 'objectId' : objectId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.requestNode' , paramObject , opt_callback ) ; }
function ( enabled , highlightConfig , opt_callback ) { var paramObject = { 'enabled' : enabled , 'highlightConfig' : highlightConfig , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setInspectModeEnabled' , paramObject , opt_callback ) ; }
function ( nodeId , highlightConfig , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'highlightConfig' : highlightConfig , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.highlightNode' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.hideHighlight' , paramObject , opt_callback ) ; }
function ( frameId , contentColor , contentOutlineColor , opt_callback ) { var paramObject = { 'frameId' : frameId , 'contentColor' : contentColor , 'contentOutlineColor' : contentOutlineColor , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.highlightFrame' , paramObject , opt_callback ) ; }
function ( path , opt_callback ) { var paramObject = { 'path' : path , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.pushNodeByPathToFrontend' , paramObject , opt_callback ) ; }
function ( nodeId , objectGroup , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'objectGroup' : objectGroup , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.resolveNode' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getAttributes' , paramObject , opt_callback ) ; }
function ( nodeId , targetNodeId , insertBeforeNodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'targetNodeId' : targetNodeId , 'insertBeforeNodeId' : insertBeforeNodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.moveTo' , paramObject , opt_callback ) ; }
function ( enabled , opt_callback ) { var paramObject = { 'enabled' : enabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setTouchEmulationEnabled' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.undo' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.redo' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.markUndoableState' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.disable' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getInlineStylesForNode' , paramObject , opt_callback ) ; }
function ( nodeId , forcedPseudoClasses , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'forcedPseudoClasses' : forcedPseudoClasses , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getComputedStyleForNode' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getAllStyleSheets' , paramObject , opt_callback ) ; }
function ( styleSheetId , opt_callback ) { var paramObject = { 'styleSheetId' : styleSheetId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getStyleSheet' , paramObject , opt_callback ) ; }
function ( styleSheetId , opt_callback ) { var paramObject = { 'styleSheetId' : styleSheetId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getStyleSheetText' , paramObject , opt_callback ) ; }
function ( styleSheetId , text , opt_callback ) { var paramObject = { 'styleSheetId' : styleSheetId , 'text' : text , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.setStyleSheetText' , paramObject , opt_callback ) ; }
function ( styleId , propertyIndex , disable , opt_callback ) { var paramObject = { 'styleId' : styleId , 'propertyIndex' : propertyIndex , 'disable' : disable , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.toggleProperty' , paramObject , opt_callback ) ; }
function ( ruleId , selector , opt_callback ) { var paramObject = { 'ruleId' : ruleId , 'selector' : selector , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.setRuleSelector' , paramObject , opt_callback ) ; }
function ( contextNodeId , selector , opt_callback ) { var paramObject = { 'contextNodeId' : contextNodeId , 'selector' : selector , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.addRule' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getSupportedCSSProperties' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.startSelectorProfiler' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.stopSelectorProfiler' , paramObject , opt_callback ) ; }
function ( maxCallStackDepth , opt_callback ) { var paramObject = { 'maxCallStackDepth' : maxCallStackDepth , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Timeline.start' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Timeline.stop' , paramObject , opt_callback ) ; }
function ( enabled , opt_callback ) { var paramObject = { 'enabled' : enabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Timeline.setIncludeMemoryDetails' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Timeline.supportsFrameInstrumentation' , paramObject , opt_callback ) ; }
function ( ) { chrome . experimental . devtools . remoteDebug . registerEvent ( 'Timeline.eventRecorded' , [ 'record' ] ) ; chrome . experimental . devtools . remoteDebug . addDomainListener ( 'Timeline' , this ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.causesRecompilation' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.supportsNativeBreakpoints' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.disable' , paramObject , opt_callback ) ; }
function ( active , opt_callback ) { var paramObject = { 'active' : active , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.setBreakpointsActive' , paramObject , opt_callback ) ; }
function ( location , condition , opt_callback ) { var paramObject = { 'location' : location , 'condition' : condition , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.setBreakpoint' , paramObject , opt_callback ) ; }
function ( breakpointId , opt_callback ) { var paramObject = { 'breakpointId' : breakpointId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.removeBreakpoint' , paramObject , opt_callback ) ; }
function ( location , opt_callback ) { var paramObject = { 'location' : location , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.continueToLocation' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.stepOver' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.stepInto' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.stepOut' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.pause' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.resume' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.canSetScriptSource' , paramObject , opt_callback ) ; }
function ( scriptId , scriptSource , preview , opt_callback ) { var paramObject = { 'scriptId' : scriptId , 'scriptSource' : scriptSource , 'preview' : preview , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.setScriptSource' , paramObject , opt_callback ) ; }
function ( scriptId , opt_callback ) { var paramObject = { 'scriptId' : scriptId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.getScriptSource' , paramObject , opt_callback ) ; }
function ( functionId , opt_callback ) { var paramObject = { 'functionId' : functionId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.getFunctionDetails' , paramObject , opt_callback ) ; }
function ( state , opt_callback ) { var paramObject = { 'state' : state , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.setPauseOnExceptions' , paramObject , opt_callback ) ; }
function ( nodeId , type , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'type' : type , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.setDOMBreakpoint' , paramObject , opt_callback ) ; }
function ( nodeId , type , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'type' : type , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.removeDOMBreakpoint' , paramObject , opt_callback ) ; }
function ( eventName , opt_callback ) { var paramObject = { 'eventName' : eventName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.setEventListenerBreakpoint' , paramObject , opt_callback ) ; }
function ( eventName , opt_callback ) { var paramObject = { 'eventName' : eventName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.removeEventListenerBreakpoint' , paramObject , opt_callback ) ; }
function ( eventName , opt_callback ) { var paramObject = { 'eventName' : eventName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.setInstrumentationBreakpoint' , paramObject , opt_callback ) ; }
function ( eventName , opt_callback ) { var paramObject = { 'eventName' : eventName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.removeInstrumentationBreakpoint' , paramObject , opt_callback ) ; }
function ( url , opt_callback ) { var paramObject = { 'url' : url , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.setXHRBreakpoint' , paramObject , opt_callback ) ; }
function ( url , opt_callback ) { var paramObject = { 'url' : url , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.removeXHRBreakpoint' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.causesRecompilation' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.isSampling' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.hasHeapProfiler' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.disable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.start' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.stop' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.getProfileHeaders' , paramObject , opt_callback ) ; }
function ( type , uid , opt_callback ) { var paramObject = { 'type' : type , 'uid' : uid , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.getProfile' , paramObject , opt_callback ) ; }
function ( type , uid , opt_callback ) { var paramObject = { 'type' : type , 'uid' : uid , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.removeProfile' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.clearProfiles' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.takeHeapSnapshot' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.collectGarbage' , paramObject , opt_callback ) ; }
function ( objectId , objectGroup , opt_callback ) { var paramObject = { 'objectId' : objectId , 'objectGroup' : objectGroup , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.getObjectByHeapObjectId' , paramObject , opt_callback ) ; }
function ( objectId , opt_callback ) { var paramObject = { 'objectId' : objectId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.getHeapObjectId' , paramObject , opt_callback ) ; }
function ( value , opt_callback ) { var paramObject = { 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.setWorkerInspectionEnabled' , paramObject , opt_callback ) ; }
function ( workerId , message , opt_callback ) { var paramObject = { 'workerId' : workerId , 'message' : message , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.sendMessageToWorker' , paramObject , opt_callback ) ; }
function ( workerId , opt_callback ) { var paramObject = { 'workerId' : workerId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.connectToWorker' , paramObject , opt_callback ) ; }
function ( workerId , opt_callback ) { var paramObject = { 'workerId' : workerId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.disconnectFromWorker' , paramObject , opt_callback ) ; }
function ( value , opt_callback ) { var paramObject = { 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.setAutoconnectToWorkers' , paramObject , opt_callback ) ; }
function ( requesterEvent , id , type , content ) { var errorMessage = content ; mcam . log ( 'MCAM.Error: ' + errorMessage ) ; if ( requesterEvent . failureCallback ) requesterEvent . failureCallback ( ) ; return true ; }
function ( ) { var offset = $ ( this ) . offset ( ) ; $ ( "#screenlet-content-search" ) . css ( "display" , "block" ) ; $ ( "#screenlet-content-search" ) . offset ( { 'top' : offset . top } ) ; }
function ( elem ) { return pattern . test ( elem . className || elem . getAttribute ( "class" ) || "" ) ; }
function ( trackConfigs ) { this . publish ( '/jbrowse/v1/c/tracks/hide' , trackConfigs ) ; }
function ( trackConfigs ) { this . addRecentlyUsedTracks ( dojo . map ( trackConfigs , function ( c ) { return c . label ; } ) ) ; this . publish ( '/jbrowse/v1/c/tracks/show' , trackConfigs ) ; }
function runCodon ( sequence ) { var codonArray = [ ] , proteinSeq ; codonArray = loadCodon ( sequence ) ; }
function ( ) { this . hostEditor . setInlineWidgetHeight ( this , this . $wrapperDiv . height ( ) , true ) ; }
function ( text ) { return '<![CDATA[' + String ( text ) . replace ( /\]\]>/g , ']]]]><![CDATA[>' ) + ']]>' ; }
function ( next ) { $this . invitation_pick_deal_helper ( game , element , root , next ) ; }
function ( options ) { options . cmbot . speakOrPM ( "@MayhemBOT " + options . cmbot . VERSION + " hacked by Paulmayhem. https://github.com/paulMayhem23/mayhembot . Based heavily on https://github.com/atomjack/cmbot" , options . pm , options . userid ) ; }
function ServiceModule ( Gadget ) { return Gadget . extend ( { displayName : "core/component/service" } ) ; }
function ( ) { if ( onerror ) onerror ( ) ; info_dialog ( "API request failed." ) ; }
function ( event ) { return this . $__events [ event ] ? ( this . $__events [ event ] . length === 0 ? false : this . $__events [ event ] . length ) : false ; }
function ( ) { ++ counter ; if ( counter == 1 ) { this . delay ( 500 , this ) ; this . remove ( ) ; } }
function ( ) { ++ counter ; t . equal ( counter , 2 , "[" + event + "]sample_ev1 error [" + counter + "] " ) ; }
function ( ) { ++ counter ; t . equal ( counter , 3 , "[" + event + "]sample_ev2 error [" + counter + "] " ) ; }
function ( ) { ++ counter ; t . equal ( counter , 1 , "sequence_1 error [" + counter + "] " ) ; work . done ( ) ; }
function ( ) { ++ counter ; t . equal ( counter , 2 , "sequence_2 error [" + counter + "] " ) ; work . done ( ) ; }
function ( ) { ++ counter ; t . equal ( counter , 3 , "sequence_3 error [" + counter + "] " ) ; work . done ( "i send you this!" ) ; }
function ( ) { t . equal ( counter , ++ ev_counter , "workd done [" + counter + "] " ) ; }
function ( ) { t . equal ( counter , ev_counter , "done count vs counter" ) ; t . equal ( counter , works , "works count vs counter" ) ; setTimeout ( function ( ) { t . end ( ) ; } , 500 ) ; }
function . throttle & function . periodical
function ( fileName ) { return this . storageImpl . removeItem ( prefix + fileName ) ; }
function ( fileName , contents ) { return this . storageImpl . setItem ( prefix + fileName , JSON . stringify ( contents ) ) ; }
function ( ) { count = $ ( this ) . find ( 'tr:visible' ) . length - 1 ; $ ( this ) . prev ( 'div.count' ) . html ( 'Listing ' + count + ' entries.' ) ; }
function ( name , old , current ) { if ( ! isNaN ( name ) ) { var w = _self . getChildren ( ) [ name - 0 ] ; w && w . set ( w . _relTargetProp || "target" , current ) ; } }
function ( resolution ) { return this . tileSize . w * Math . pow ( 2 , this . num_resolutions - resolution - 1 ) ; }
function ( ) { $ ( this . el ) . addClass ( 'georefine-client' ) ; this . data_view_counter = 0 ; this . render ( ) ; this . on ( 'ready' , this . onReady , this ) ; }
function ( callback ) { return window . requestAnimationFrame || window . webkitRequestAnimationFrame || window . mozRequestAnimationFrame || window . oRequestAnimationFrame || window . msRequestAnimationFrame || function ( callback ) { window . setTimeout ( callback , 1000 / 120 ) ; } ; }
function ( x ) { if ( x instanceof Expression . Statement && ! ( this [ 0 ] instanceof Expression . Statement ) ) { } this [ this . length ] = x ; return this ; }
function ( x ) { return this ; }
function ( args ) { args . type = 'POST' ; ajax_request ( args ) ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . updateInput ( e , data ) ; data . onDrag = true ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . resetInput ( data ) ; data . onDrag = false ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . resetInput ( data ) ; data . onDrag = false ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . updateInput ( e , data ) ; data . onDrag = true ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; if ( data . onDrag ) { data . onDrag = false ; $this . spritespin ( "animate" , true ) ; } }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . updateInput ( e , data ) ; data . onDrag = true ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; data . onDrag = false ; Spin . resetInput ( data ) ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; data . onDrag = false ; Spin . resetInput ( data ) ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . updateInput ( e , data ) ; data . onDrag = true ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . resetInput ( data ) ; data . onDrag = false ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . resetInput ( data ) ; data . onDrag = false ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . updateInput ( e , data ) ; data . onDrag = true ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; Spin . updateInput ( e , data ) ; data . onDrag = true ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; data . onDrag = false ; Spin . resetInput ( data ) ; }
function ( e ) { var $this = $ ( this ) , data = $this . data ( 'spritespin' ) ; data . onDrag = false ; Spin . resetInput ( data ) ; }
function writeAttr ( view , value ) { DEBUG_BEGIN ; ASSERT ( view instanceof jQuery , "expected jQuery object" ) ; if ( typeof value !== "string" ) { WARNING ( "be careful setting attribute " + attrName + " to a non-string value" ) ; } DEBUG_END ; view . attr ( attrName , value ) ; }
function ( e , direction , color ) { moveRobot ( color , directionStringToCode ( direction ) ) ; }
function ( e ) { $ ( "#endOfGameModal" ) . modal ( 'show' ) ; $ ( "#winModal" ) . modal ( 'hide' ) ; }
function ( e , numberOfMoves ) { $ ( "#winModal" ) . modal ( 'show' ) ; }
function ( isp , status ) { console . log ( 'uMarker=' + uMarker ) ; uMarker . isp = ispName = isp ; uMarker . status = status ; uMarker . time = Date . now ( ) ; drawMap ( ) ; }
function ( ev ) { sjcl . random . addEntropy ( ( new Date ( ) ) . valueOf ( ) , 2 , "loadtime" ) ; }
function addParticle ( ) { var smoke = new SmokeParticle ( x , y , radius * 2 , radius * 2 , Config ) ; particleArray . push ( smoke ) ; renderer . addParticle ( radius , Config . colors . start ) ; }
function ( ) { return color ; }
function ( ) { _addLinkLine ( ) ; _addSpeakerLine ( ) ; _claimTalk ( ) ; _editTalkComment ( ) ; _changeAnonymous ( ) ; _claimButton ( ) ; }
function ( ) { input . key ( 33 ) ; Assert . areEqual ( '10.00' , output . getContent ( ) , 'Key "pageup" failed to increment value by major value' ) ; Assert . areEqual ( '-5490px' , Y . one ( '#scene' ) . getStyle ( 'top' ) , 'Failed to move scene when 1 major keyboard increment' ) ; }
function ( ) { input . key ( 37 ) ; input . key ( 37 ) ; Assert . areEqual ( '-5510px' , Y . one ( '#scene' ) . getStyle ( 'top' ) , '2 key arrow lefts failed to move scene 2 minor keyboard increments' ) ; }
function ( ) { input . key ( 35 ) ; Assert . areEqual ( '559.00' , output . getContent ( ) , 'End key failed to set dial to min' ) ; Assert . areEqual ( '0px' , Y . one ( '#scene' ) . getStyle ( 'top' ) , 'Failed to move scene to show Hubble' ) ; }
function ( event , pos , item ) { if ( ! item ) return ; show_tooltip ( graph , item . pageX + 10 , item . pageY , generate_tooltip ( item ) ) ; }
function ( jqXHR , textStatus , errorThrown ) { if ( jqXHR . status == 403 ) { alert ( __ ( 'info session expired' ) ) ; location . reload ( ) ; } }
function ( jqXHR , textStatus , errorThrown ) { if ( jqXHR . status == 403 ) { alert ( __ ( 'info session expired' ) ) ; location . reload ( ) ; } }
function ( jqXHR , textStatus , errorThrown ) { if ( jqXHR . status == 403 ) { alert ( __ ( 'info session expired' ) ) ; location . reload ( ) ; } }
function initializeExam ( ) { buildIndex ( ) ; showNextUnansweredQuestion ( ) ; updateQuestionCounter ( ) ; }
function showSolution ( index ) { exam . Question [ index ] . solved = true ; showQuestion ( index ) ; if ( isQuestionAnsweredCorrectly ( index ) == 0 ) $ ( '#question-index-list #question-index-list-' + index ) . addClass ( 'wrong' ) ; }
function cameraLoaded ( ) { callback ( ) ; }
function ( ) { appView . datumsView . newDatum ( ) ; app . router . showDashboard ( ) ; }
function ( ) { appView . datumsView . newDatum ( ) ; app . router . showDashboard ( ) ; }
function create_plugin ( ) { var plugin = { } plugin_func . call ( plugin ) return plugin }
function ( plugin_uri ) { var plugin = plugins [ plugin_uri ] if ( ! plugin ) { throw "PluginManagerError: plugin \"" + plugin_uri + "\" not found" } return plugin }
function ( ) { dm4c . get_plugin ( "de.deepamehta.files" ) . create_folder_topic ( { path : "/" } , true , true ) }
function ( e ) { Utils . debug ( "It thinks there was an error fetching the session. But chances are there wasnt...." + JSON . stringify ( e ) ) ; }
function ( e ) { Utils . debug ( "There was an error restructuring the session. Loading defaults..." + JSON . stringify ( e ) ) ; se = new Session ( e ) ; se . restructure ; s . set ( se . toJSON ( ) ) ; }
function ( ) { var url = this . element . parents ( ".post" ) . find ( '.entry-title' ) . find ( "a" ) . attr ( "href" ) ; if ( url ) return url ; else return document . URL ; }
function ( res ) { Object . append ( this , res . value ) ; }
function ( res ) { Object . append ( this , res . value ) ; if ( callback ) { callback ( ) ; } }
function ( plugin , spec ) { if ( ! this . buttonSpecs [ plugin ] ) { this . buttonSpecs [ plugin ] = [ ] ; } else { return ; } this . buttonSpecs [ plugin ] . push ( spec ) ; }
function ( element ) { var component = this . component ; return element . text ( component . data . actor . title || component . labels . get ( "guest" ) ) ; }
function ( ) { test . equal ( Meteor . user ( ) . username , username ) ; }
function ( ) { array . forEach ( handles , function ( h ) { h . remove ( ) ; } ) ; if ( clickTimer ) { clearTimeout ( clickTimer ) ; clickTimer = null ; } }
function ( domMessage , structuredError ) { this . message = domMessage . textContent || domMessage . innerText ; this . domMessage = domMessage ; this . structuredError = JSON . parse ( structuredError ) ; }
function ( ) { if ( actionTaken ) { actionTaken = false ; } else { $ ( lId ) . animate ( { height : 0 } ) ; } }
function ( ) { $ ( lId ) . animate ( { height : h } ) ; }
function ( ) { oldOrder . sortable ( 'cancel' ) ; }
function advanceBadly ( ) { cursor = event . target . result ; evalAndExpectExceptionClass ( "cursor.advance(0)" , "TypeError" ) ; testDelete ( ) ; }
function testInvalidMode ( ) { debug ( "" ) ; debug ( "Verify that specifying an invalid mode raises an exception" ) ; evalAndExpectExceptionClass ( "db.transaction(['storeName'], 'lsakjdf')" , "TypeError" ) ; testDegenerateNames ( ) ; }
function ( ) { this . setDirection ( d_ready ) ; }
function ( x , y ) { animation . x = x ; animation . y = y ; }
function ( direction ) { if ( state != d_accept ) { animation . gotoAndPlay ( spriteMap [ direction ] ) ; } }
function ( ) { $ ( this ) . EditBlock ( 'HtmlContent' , file ) ; return false ; }
function ( err , data ) { res . json ( { success : ! err , error : ( err ? err . message : null ) , data : data } ) ; }
function ( ) { console . log ( '' ) ; console . log ( 'Example of how to use redis_mon to set a key/value pair' ) ; console . log ( 'node redis_mon -h 127.0.0.1 -p 6379 -k testKey -d testData -s -t 5' ) ; }
function ( done ) { app . request ( ) . get ( '/signed' ) . set ( 'Cookie' , 'foo=s:' + val ) . expect ( '{"foo":"foobarbaz"}' , done ) ; }
function ( done ) { app . request ( ) . get ( '/' ) . set ( 'Cookie' , 'foo=s:' + val ) . expect ( '{}' , done ) ; }
function ( callback ) { this . on ( C . S_ERROR , callback ) ; return this ; }
function ( ) { var dog = Bulldog . watch ( 'http://fernetjs.com' , 10000 ) ; dog . should . be . an . instanceof ( Bulldog ) ; }
function InlineWidget ( ) { this . htmlContent = window . document . createElement ( "div" ) ; this . $htmlContent = $ ( this . htmlContent ) . addClass ( "inline-widget" ) ; this . $htmlContent . append ( "<div class='shadow top' />" ) . append ( "<div class='shadow bottom' />" ) ; }
function ( ) { extensionRequire = testWindow . brackets . getModule ( "utils/ExtensionLoader" ) . getRequireContextForExtension ( "JavaScriptQuickEdit" ) ; JavaScriptQuickEdit = extensionRequire ( "main" ) ; waitsForDone ( SpecRunnerUtils . openProjectFiles ( [ "ui/jquery.effects.core.js" ] ) , "openProjectFiles" ) ; }
function ( require , exports , module ) { "use strict" ; console . log ( "loading foo!" ) ; require ( "secondary" ) . bar ( ) ; exports . bar = function bar ( ) { console . log ( "in bar in foo!" ) ; } ; }
function _fileFromURL ( url ) { var comp = url . split ( "/" ) ; return comp [ comp . length - 1 ] ; }
function ( match , num ) { return typeof args [ num ] !== "undefined" ? args [ num ] : match ; }
function htmlEscape ( str ) { return String ( str ) . replace ( /&/g , "&amp;" ) . replace ( /"/g , "&quot;" ) . replace ( /"/g , "&#39;" ) . replace ( /</g , "&lt;" ) . replace ( />/g , "&gt;" ) ; }
function ( ) { $ ( "#param_form" ) . keydown ( function ( event ) { if ( event . keyCode === 13 ) { makePlaylist ( ) ; return false ; } } ) ; $ ( "#_artist" ) . select ( ) ; }
function ( data ) { var response = data . response ; }
function ( data ) { var response = data . response ; }
function ( _fid ) { var url = "http://www.facebook.com/pages/music/" + _fid ; this . artistFacebookID = _fid ; this . artistFacebookURL = url ; this . get ( "model" ) . dprChange ( ) ; }
function ( ) { return { artist : null , song : null } ; }
function ( _artist , _song ) { var artist = _artist ; var song = _song ; }
function ( ) { return { songTitle : null , songID : null , artist : null , spotifyTrackID : null , releaseYear : null , albumName : null , albumCover : null } ; }
function ( ) { $ ( '#nudgenudge_' + i ) . hide ( ) ; base . closed = true ; }
function ( cm ) { cm . setCursor ( moveToWord ( cm , word , - 1 , 1 , "start" ) ) ; }
function ( cm ) { cm . setCursor ( cm . getCursor ( ) . line , cm . getCursor ( ) . ch - 1 , true ) ; cm . setOption ( "keyMap" , "vim" ) ; }
function ( a , b ) { if ( a . mode != b . mode ) return false ; if ( a . localState ) return CodeMirror . Pass ; return htmlMode . compareStates ( a . htmlState , b . htmlState ) ; }
function ( x , y ) { if ( x != null ) scroller . scrollLeft = x ; if ( y != null ) scrollbar . scrollTop = y ; updateDisplay ( [ ] ) ; }
function ( f ) { return compoundChange ( f ) ; }
function ( ) { updateDisplay ( true ) ; if ( scrollbar . scrollHeight > lastScrollTop ) scrollbar . scrollTop = lastScrollTop ; }
function getValue ( ) { var text = [ ] ; doc . iter ( 0 , doc . size , function ( line ) { text . push ( line . text ) ; } ) ; return text . join ( "\n" ) ; }
function ( b ) { return doHandleBinding ( b , true ) ; }
function ( line ) { if ( ! line . hidden && line . text . length == maxLineLength ) { recomputeMaxLength = true ; return true ; } }
function ( line ) { var l = line . text ; if ( ! line . hidden && l . length > maxLineLength ) { maxLine = l ; maxLineLength = l . length ; maxLineChanged = true ; recomputeMaxLength = false ; } }
function themeChanged ( ) { scroller . className = scroller . className . replace ( /\s*cm-s-\S+/g , "" ) + options . theme . replace ( /(^|\s)\s*/g , " cm-s-" ) ; }
function getX ( len ) { return measureLine ( lineObj , len ) . left ; }
function History ( ) { this . time = 0 ; this . done = [ ] ; this . undone = [ ] ; this . compound = 0 ; this . closed = false ; }
function isDecimalNumber ( stream , backup ) { if ( backup === true ) { stream . backUp ( 1 ) ; } return stream . match ( decimalMatcher ) ; }
function ( text , startPos , endPos ) { text = text . substring ( startPos , endPos ) ; return text . replace ( new RegExp ( "(;|\\{|\\})([^\r\n])" , "g" ) , "$1\n$2" ) ; }
function getSearchCursor ( cm , query , pos ) { return cm . getSearchCursor ( query , pos , typeof query == "string" && query == query . toLowerCase ( ) ) ; }
function parseQuery ( query ) { var isRE = query . match ( /^\/(.*)\/([a-z]*)$/ ) ; return isRE ? new RegExp ( isRE [ 1 ] , isRE [ 2 ] . indexOf ( "i" ) == - 1 ? "" : "i" ) : query ; }
function ( err , replies ) { if ( options . debug ) log ( 'entity id is now ' + model . id + '(' + model . cid + ')' ) ; callback ( err , model ) ; }
function ( params , result ) { entityAttr [ params . name ] = result ; }
function ( ) { assert ( user . isNew ( ) ) ; assert ( ! user . id ) ; user . saveCB ( this ) ; }
function ( err , result ) { if ( err ) throw err ; result . get ( 'name' ) . should . equal ( 'freddy' ) ; done ( ) ; }
function ( ) { require ( "javascript-spidermonkey/test-rendertexture.js" ) ; }
function ( touches , event ) { this . _lastLocation = touches [ 0 ] . getLocation ( ) ; return true ; }
function ( event ) { this . _lastLocation = event . getLocation ( ) ; return true ; }
function ( ) { return "Testing 'save'" ; }
function ( ) { deleteNote ( id , true , true ) ; $ ( '#delete-confirm-modal-' + id ) . modal ( 'hide' ) ; $ ( '#delete-confirm-modal-' + id ) . remove ( ) ; }
function ( data ) { if ( refresh ) refreshNotes ( ) ; if ( notif ) notify ( 'Note deleted successfully!' , 'alert-success' ) ; }
function loadScripts ( ) { console . log ( 'Loading scripts' ) ; for ( a in APPS ) { value = APPS [ a ] ; head . js ( 'apps/' + value [ 'name' ] + '/' + value [ 'name' ] + '.js' ) } }
function ( ) { if ( "#flash div" ) { $ ( '#flash' ) . delay ( 8000 ) . fadeOut ( 1000 ) ; } }
function ( ) { console . log ( 'click' ) ; flash . css ( 'display' , 'block' ) . html ( '<div class="alert alert-notice">Coming soon!</div>' ) . delay ( 2000 ) . fadeOut ( 500 ) ; }
function ( length ) { var offset = this . _offset ; var end = offset + length ; var value = this . _buffer . toString ( 'utf-8' , offset , end ) ; this . _offset = end ; return value ; }
function EofPacket ( options ) { options = options || { } ; this . fieldCount = undefined ; this . warningCount = options . warningCount ; this . statusFlags = options . statusFlags ; }
function ResultSetHeaderPacket ( options ) { options = options || { } ; this . fieldCount = options . fieldCount ; this . extra = options . extra ; }
function ( parser ) { this . fieldCount = parser . parseLengthCodedNumber ( ) ; if ( parser . reachedPacketEnd ( ) ) { return ; } this . extra = parser . parseLengthCodedNumber ( ) ; }
function Query ( options , callback ) { this . _sql = options . sql ; this . _callback = callback ; this . _fieldPackets = [ ] ; this . _rows = [ ] ; this . _eofCount = 0 ; this . RowDataPacket = null ; }
function ( ) { if ( this . _cf != undefined ) return this . _cf . getLength ( ) ; return this . _f . getLength ( ) ; }
function ( ) { console . warn ( 'ConstructFragment.length depreciated' ) ; return this . getLength ( ) ; }
function ( event ) { self . acceleration . x = event . gamma / self . slowingFactor ; self . acceleration . y = event . beta / self . slowingFactor ; }
function ( err , newResource ) { if ( newResource && newResource !== resource ) { newResource . originalResource = resource ; } callback ( err , newResource ) ; }
function ( testdir ) { watch . appendSpace ( testdir + '/lumbar.json' ) ; }
function ( testdir ) { watch . appendSpace ( testdir + '/js/bridge.js' ) ; }
function ( testdir ) { watch . appendRapidSpace ( testdir + '/js/bridge.js' , testdir + '/js/bridge-iphone.js' ) ; }
function ( testdir ) { watch . appendSpace ( testdir + '/templates/home/home.handlebars' ) ; }
function ( testdir ) { watch . appendSpace ( testdir + '/styles.json' ) ; }
function ( testdir ) { watch . appendSpace ( testdir + '/styles/base.css' ) ; }
function ( testdir ) { watch . appendRapidSpace ( testdir + '/styles/base.css' , testdir + '/styles/iphone.css' ) ; }
function ( testdir ) { watch . appendSpace ( testdir + '/stylus.json' ) ; }
function ( testdir ) { watch . appendRapidSpace ( testdir + '/styles/base.styl' , testdir + '/styles/iphone.styl' ) ; }
function ( testdir ) { watch . appendSpace ( testdir + '/js/iphone.js' ) ; }
function ( ) { if ( chart && chart . tooltip ) { chart . tooltip . tick ( ) ; } }
function ( ) { if ( chart && chart . tooltip ) { chart . tooltip . tick ( ) ; } }
function ( ) { if ( chart && chart . tooltip ) { chart . tooltip . tick ( ) ; } }
function ( ) { this . inherited ( arguments ) ; if ( this . region . numComponents ( ) === 1 ) { } }
function ( id , extras ) { $id_input . val ( id ) ; $id_input . trigger ( 'change' , [ extras ] ) ; } , { input_id : $id_input . attr ( 'id' ) }
function ( popped , action_table ) { if ( ! action_table . vars . object_id ) { log_lookup . log ( 'Did not get ID of newly added object -- not selecting added object' ) ; } else { popped . oid = action_table . vars . object_id ; popped . str = action_table . vars . object_title ; } }
function onsuccess ( ) { myContact . id = contact . id ; contactsList . refresh ( myContact ) ; reloadContactDetails ( myContact ) ; navigation . back ( ) ; }
function ( ev ) { ev . preventDefault ( ) ; $metabox . find ( '.p2p-create-connections-tabs' ) . toggle ( ) ; return null ; }
function ( ev ) { if ( ev . keyCode === 13 ) { ev . preventDefault ( ) ; } return null ; }
function ( ev ) { if ( 13 === ev . keyCode ) { $createButton . click ( ) ; ev . preventDefault ( ) ; } return null ; }
function ( ) { $ ( '#submit_warning' ) . slideUp ( ) ; }
function ( res ) { $ ( '#correction_container' ) . append ( res [ 'correction' ] [ 0 ] ) ; $ ( '#submit_success' ) . slideUp ( ) ; }
function ( ) { var lastCell = jQuery ( rows [ 1 ] . cells [ 1 ] ) ; lastCell . focus ( ) ; }
function ( ) { var error_items = [ ] ; for ( var i in _val_items ) { if ( ! _val_items [ i ] . is_correct ) { error_items . push ( _val_items [ i ] ) ; } } return error_items ; }
function ( response ) { this . setData ( response ) ; if ( ! this . has_data ) { dfrd_update . reject ( response ) ; } else { this . notify ( true , 'post_fetch_data' , response ) ; dfrd_update . resolve ( ) ; } }
function ( res ) { assert . typeOf ( res . body , 'Array' ) ; assert . equal ( res . body . length , 3 ) ; done ( ) ; }
function ( displayName ) { if ( displayName . toLowerCase ( ) . indexOf ( lowterm ) !== - 1 ) { return displayName ; } }
function ( auth ) { return auth . type . split ( "-" ) [ 0 ] ; }
function ( closeButton , model , hide ) { closeButton [ model . term === model . baseRecord . displayName || hide ? "hide" : "show" ] ( ) ; }
function ( model , options , url , permissionsResolver , dom ) { selectNavigate ( model , options , url , permissionsResolver , dom , "recordtype" ) ; }
function ( e ) { that . locate ( "searchQuery" ) . change ( ) ; if ( cspace . util . keyCode ( e ) === $ . ui . keyCode . ENTER ) { that . navigateToSearch ( ) ; } }
function ( record ) { model . tabs . push ( { "name" : record , title : record + "-tab" , href : urlExpander ( options . href ) } ) ; }
function ( name ) { var recordType = cspace . util . getUrlParameter ( name ) , schema = { } ; schema [ recordType ] = null ; return schema ; }
function ( response ) { try { throw 'Error decoding sound at `' + url + '`. This is as good as the error gets. Sorry.' ; } catch ( message ) { if ( typeof err === 'function' ) { err ( message , request ) ; } } }
function ( res ) { return __monad__ . return ( res ) ; }
function ( res ) { expect ( res . length ) . to . equal ( this . nodes . length ) ; }
function ( a , i ) { expect ( res [ i ] . id ) . to . equal ( this . nodes [ i ] . id ) ; }
function ( a , i ) { expect ( res [ i ] . url ) . to . equal ( this . nodes [ i ] . data . url ) ; }
function ( ) { var score = japanese_score . calculate_score ( ) ; equal ( score . black_points , 7 ) ; equal ( score . white_points , 5 ) ; }
function ( ) { this . instance = new MustacheWax ( { beautify : true , min : true } ) ; }
function ( ) { this . instance = new MustacheWax ( { simple : true , min : true } ) ; }
function ( ) { this . instance = new MustacheWax ( { simple : true , beautify : true } ) ; }
function ( ) { $ ( "#friendlist-button" ) . click ( createFriendList ) ; }
function ( ) { $ ( this ) . nextAll ( '.comment-hidden' ) . slideDown ( ) . removeClass ( 'comment-hidden' ) ; $ ( this ) . remove ( ) ; }
function ( err , users ) { console . log ( users ) ; res . render ( 'index' , { title : "TAU HERPDERP" , users : users } ) }
function ( req , res ) { var data = { title : "Tau login" , user : req . user , message : req . flash ( 'error' ) } ; res . render ( 'login' , data ) ; }
function ( req , res ) { res . redirect ( '/account' ) ; }
function ( req , res ) { var data = { title : "Tau logout" , } req . logout ( ) ; res . render ( 'logout' , data ) ; }
function ( vm ) { this . _enableCsControls ( false , [ vm ] ) ; }
function ( vm ) { this . _enableCsControls ( true , [ vm ] ) ; }
function ( data ) { if ( valid_admin ( data . pass ) ) { musicqueue . queue . splice ( data . track_number , 1 ) ; io . sockets . emit ( 're_init' ) ; } }
function RemoteDebuggerPrompt ( ) { this . remote = { } ; }
function format_hour ( date_obj ) { return pad2 ( date_obj . getHours ( ) ) + ':' + pad2 ( date_obj . getMinutes ( ) ) ; }
function ( ) { return this ; }
function ( ) { $ ( '.dropdown-toggle' ) . attr ( 'href' , '#' ) ; $ ( '#login-modal-toggler' ) . attr ( 'href' , '#login-modal' ) ; }
function ( osName ) { var client = new Client ; client . osName = osName || gazel . osName ; if ( osName ) { client . needsOsVerification = true ; } return client ; }
function ( opacity ) { this . _opacity = opacity ; }
function ( entityType , zOrder ) { var obj = me . entityPool . newInstanceOf ( entityType ) ; if ( obj ) { api . add ( obj , zOrder ) ; } }
function ( ) { var data = evform . serializeArray ( ) ; parseEventForm ( data ) ; console . log ( localStorage ) ; }
function ( ) { this . $c [ 0 ] . width = this . $c [ 0 ] . width ; }
function ( ) { delete background . TBRL . Popup . contents [ this . ps . pageUrl ] ; }
function ( ) { editor . unload ( ) ; }
function ( ) { editor . unload ( ) ; }
function ( ) { editor . unload ( ) ; }
function ( ) { editor . unload ( ) ; }
function ( ) { editor . removeListener ( 'preview' ) ; editor . removeListener ( 'edit' ) ; editor . unload ( ) ; }
function ( ) { editor . unload ( ) ; }
function ( ) { editor . removeListener ( 'foo' ) ; editor . unload ( ) ; }
function ( ) { editor . removeListener ( 'foo' ) ; editor . unload ( ) ; }
function ( ) { editor . unload ( ) ; }
function createRedirDiv ( redirect ) { var ddg_result = document . getElementById ( "ddg_zeroclick" ) ; showZeroClick ( ) ; if ( ddg_result !== null ) { ddg_result . className = 'ddg_answer' ; ddg_result . innerHTML = 'Wait for redirect or ' + '<a id="redirect" href="' + redirect + '">Click here</a>' + cross_answer ; } }
function ( ) { if ( EmptyView && ! this . showingEmptyView ) { this . closeChildren ( ) ; delete this . showingEmptyView ; } }
function ( o ) { try { o . result = testResults [ o . group ] [ o . name ] ; } catch ( e ) { o . result = "N/A|No Results" ; } }
function completion_callback ( allRes , status ) { console . log ( "Test run completed" , allRes , status ) ; }
function ( klass ) { var ctx = this ; window . setTimeout ( function ( ) { $ ( ctx ) . removeClass ( klass ) ; } , 0 ) ; return ctx ; }
function ( full , normal , name ) { if ( normal ) return full ; names . push ( name ) ; return '/(.+?)' ; }
function ( type , def ) { return EXTENSION_TO_MIME [ ( type [ 0 ] == "." ? type : "." + type ) . toLowerCase ( ) ] || def || "text/html" ; }
function ( data ) { $ . jsperanto . init ( function ( t ) { } , { interpolationPrefix : '%' , interpolationSuffix : '%' , keyseparator : '//' , dictionary : data } ) ; }
function ( ) { var sel = $ ( this ) ; if ( sel . hasClass ( 'wiki-l10n' ) ) { location . href = sel . val ( ) ; } else { this . form . submit ( ) ; } }
function ( Var ) { this . _properties . push ( Var ) ; }
function ( Var ) { this . _properties . push ( Var ) ; }
function ( ) { this . _tileSets = [ ] ; this . _tileProperties = [ ] ; this . _properties = [ ] ; }
function ( doc ) { DocumentManager . setCurrentDocument ( doc ) ; focus ( ) ; }
function ( ) { function Animal ( species ) { this . species = species || null ; } Animal . prototype . getSpecies = function ( ) { return this . species ; } ; return Animal ; }
function ( model ) { this . add ( model , options ) ; }
function ( m ) { this . remove ( m ) ; }
function ( data ) { opts = data ; }
function getDefaultScreen ( req ) { return { title : req . body . title , isStart : req . body . isStart , layout : req . body . layout } ; }
function ( ) { that . $targetInput . select2 ( { tags : collections . metrics . autocomplete_names ( ) , width : "17em" } ) ; }
function ( view ) { console . log ( view ) ; assert . equal ( view . view . render_state , view_component . RENDER_STATES . RENDER_COMPLETE ) ; }
function ( ) { saveFile ( ) ; }
function ( ) { editorArea . width ( self . elm . width ( ) ) ; editorArea . height ( self . elm . height ( ) - editorArea . offset ( ) . top ) ; }
function ( migrations , version , options ) { debug_log ( "Starting migrations from " + version ) ; this . _migrate_next ( migrations , version , options , [ ] ) ; }
function ( ) { this . started = true ; }
function ( event ) { handleErrorOnDBDelete ( event ) ; }
function ( ) { jstestdriver . console . log ( "get model v3 Success" ) ; jstestdriver . console . log ( "migration path step is 5 #5" ) ; assertEquals ( "migration path step is 5" , 5 , stepOnUpgrade ) ; deleteDB ( databasev3 ) ; }
function ( ) { var flag = validate_checkout ( ) ; confirm_checkinout ( flag ) ; return false ; }
function ( ) { $ ( this ) . find ( '.turtle' ) . trigger ( 'resize' ) ; }
function ( field ) { if ( field . name . length > 29 ) { throw new Error ( 'Oracle field names limited to 30 characters.' ) ; } if ( ! field . reserved ) { srcFields [ field . name ] = field ; } }
function ( req , res ) { renderCachableView ( req , res , 'unsupported_dialog.ejs' , { title : _ ( 'Unsupported Browser' ) , layout : 'dialog_layout.ejs' , useJavascript : false } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'cookies_disabled.ejs' , { title : _ ( 'Cookies Are Disabled' ) , layout : 'dialog_layout.ejs' , useJavascript : false } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'index.ejs' , { title : _ ( 'A Better Way to Sign In' ) , fullpage : true } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'signup.ejs' , { title : _ ( 'Sign Up' ) , fullpage : false } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'idp_auth_complete.ejs' , { title : _ ( 'Sign In Complete' ) , fullpage : false } ) ; }
function ( req , res ) { res . local ( 'util' , util ) ; renderCachableView ( req , res , 'forgot.ejs' , { title : _ ( 'Forgot Password' ) , fullpage : false , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'signin.ejs' , { title : _ ( 'Sign In' ) , fullpage : false } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'about.ejs' , { title : _ ( 'About' ) , fullpage : false } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'tos.ejs' , { title : _ ( 'Terms of Service' ) , fullpage : false } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'privacy.ejs' , { title : _ ( 'Privacy Policy' ) , fullpage : false } ) ; }
function ( req , res ) { res . local ( 'util' , util ) ; renderCachableView ( req , res , 'verify_email_address.ejs' , { title : _ ( 'Complete Registration' ) , fullpage : true , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'confirm.ejs' , { title : _ ( 'Verify Email Address' ) , fullpage : false } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'confirm.ejs' , { title : _ ( 'Reset Password' ) } ) ; }
function ( req , res ) { renderCachableView ( req , res , 'confirm.ejs' , { title : _ ( 'Confirm Email' ) } ) ; }
function ( time ) { if ( this . _target ) { this . _target . setScale ( this . _startScaleX + this . _deltaX * time , this . _startScaleY + this . _deltaY * time ) ; } }
function ( scale , scaleY ) { this . _scaleX = scale ; this . _scaleY = scaleY || scale ; this . setNodeDirty ( ) ; }
function ( scale , scaleY ) { this . _super ( scale , scaleY ) ; this . updateLabel ( ) ; }
function ( scale , scaleY ) { this . _transformSystemDirty = true ; this . _super ( scale , scaleY ) ; }
function ( scale , scaleY ) { this . _super ( scale ) ; this . SET_DIRTY_RECURSIVELY ( ) ; }
function ( ) { moduleFake = { myValue : 0 , myReference : { } } ; vm . runInNewContext ( "__set__ = " + __set__ . toString ( ) + "; " + "getValue = function () { return myValue; }; " + "getReference = function () { return myReference; }; " , moduleFake ) ; }
function ( err ) { console . log ( err ) ; if ( ! err ) { addEvent ( "addDef" , "by id:" + req . cookies . id + ";wid:" + wordData . wid ) ; } else { addEvent ( "addDefError" , err ) ; } }
function formatter ( i ) { if ( ! i ) { return ; } return i . replace ( /\n/g , ' ' ) . replace ( /[ ]{2,}/g , ' ' ) ; }
function ( ) { var state = GeoExplorer . superclass . getState . apply ( this , arguments ) ; delete state . tools ; delete state . map . controls ; return state ; }
function ( count ) { log ( 'Number of lines: ' + count ) ; callback ( req , file , parsedData ) ; }
function ( req , file , parsedData ) { saveMigration ( req , file , parsedData , function ( req , migration ) { req . session . migrationFile = migration . id ; res . redirect ( '/migration/mapping/' + migration . id ) ; } ) ; }
function readTerm ( term ) { if ( _firstKana . length === 0 ) { _firstKana = term . kana ; _firstKanji = term . kanji ; } candidates . push ( [ term . kanji , term . kana ] ) ; }
function ( e ) { ( e ) . preventDefault ( ) ; if ( ! this . hasClass ( 'completed' ) ) self . download ( release ) ; }
function onDeviceReady ( ) { deviceUUID = device . uuid ; $ . post ( "http://tali.irail.be/REST/Device.php?device=" + deviceUUID , function ( data ) { } ) ; }
function ( ) { if ( ! $blurElm ) $blurElm = $ ( '<input style="width:0; height:0; opacity:0" type="text" />' ) . appendTo ( $editorContainer ) ; $blurElm . removeAttr ( "disabled" ) . focus ( ) . blur ( ) . attr ( "disabled" , "disabled" ) ; return this ; }
function ( callback ) { this . reload ( this . addVarToUrl ( this . filterVar , '' ) , callback ) ; }
function ( userName ) { MetroFlickrViewer . FlickrUser . userName = userName ; this . CurrentPage = 1 ; this . PhotoHash = { } ; this . cancelRequests ( ) ; this . CurrentStatus = 'none' ; this . getUserId ( ) ; }
function ( photoSizes ) { flickrPhotoSizes = photoSizes ; this . setSizeBindingProperties ( ) ; }
function ( ) { if ( this . flickrInfo != undefined ) { this . description = this . flickrInfo . description . _content ; } }
function ( res ) { assert ( res . header [ 'content-type' ] == 'application/x-www-form-urlencoded' ) ; assert ( res . text == 'user[name]=tj&user[email]=tj@vision-media.ca' ) next ( ) ; }
function ( ) { cc . Application . sharedApplication ( ) . run ( ) ; return true ; }
function ( ) { firstBodyItem . before ( $ ( this ) ) ; }
function ( ) { if ( ( this . block != null ) && this . block . mayHaveSideEffects ( [ ] ) ) { return this ; } else { return new Program ( null ) ; } }
function ( doc , cdt , cdn ) { cur_frm . set_footnote ( wn . markdown ( cur_frm . meta . description ) ) ; }
function ( doc , cdt , cdn ) { cur_frm . call_server ( 'get_transactions' , '' , cur_frm . cscript . update_selects ) ; cur_frm . cscript . select_doc_for_series ( doc ) ; }
function ( ) { Module . requestFullScreen ( ) ; setOpacity ( 1 ) ; Module . setStatus ( '' ) ; Module . resumeMainLoop ( ) ; }
function ( ) { Module . requestFullScreen ( ) ; setOpacity ( 1 ) ; Module . setStatus ( '' ) ; BananaBread . execute ( 'screenres ' + screen . width + ' ' + screen . height ) ; Module . resumeMainLoop ( ) ; }
function ( ) { if ( $ . trim ( upload_frame . text ( ) ) !== "" ) { alert ( upload_frame . text ( ) ) ; } else { $ ( "#manage_tab_button" ) . click ( ) ; } upload_frame . detach ( ) ; }
function ( ) { if ( browserOnlyMode === "true" ) { return ; } var runCallback = function ( ) { runHarness ( commandFinishedCallback ) ; } ; stopHarness ( ) ; startServer ( runCallback , commandFinishedCallback ) ; }
function ( ) { if ( this [ foreachExpando ] === cid ) { encounteredItemsElements = true ; databindings . databind . removeBindings ( this ) ; $ ( this ) . remove ( ) ; } else if ( encounteredItemsElements ) { return false ; } }
function ( data ) { var json = $ . parseJSON ( data ) ; Controller . memplex = json . data ; Controller . loadMemplex ( Controller . memplex ) ; }
function ( ) { console . log ( "destroy" ) ; Create . form . remove ( ) ; Create . overlay . remove ( ) ; }
function ( ) { CustomCode . loadCSS ( ) }
function proxyError ( err ) { reverseProxy . destroy ( ) ; process . nextTick ( function ( ) { socket . destroy ( ) ; } ) ; self . emit ( 'webSocketProxyError' , req , socket , head ) ; }
function ( file_topic_id ) { return this . request ( "POST" , "/files/" + file_topic_id ) }
function ( ) { this . set ( 'completed' , ! this . get ( 'completed' ) ) . save ( ) ; }
function ( ) { return Y . Array . filter ( this . toArray ( ) , function ( model ) { return model . get ( 'completed' ) ; } ) ; }
function ( ) { return Y . Array . filter ( this . toArray ( ) , function ( model ) { return ! model . get ( 'completed' ) ; } ) ; }
function ( ) { this . container . addClass ( 'editing' ) ; this . inputNode . select ( ) ; }
function ( e ) { if ( e . keyCode === ENTER_KEY ) { Y . one ( '#new-todo' ) . focus ( ) ; } }
function ( e ) { this . constructor . superclass . remove . call ( this ) ; this . model . destroy ( { 'delete' : true } ) ; }
function debug ( ) { var args = Array . prototype . slice . call ( arguments ) ; if ( window . localStorage [ 'debug_js' ] == 'true' ) console . log . apply ( console , args ) ; }
function ( str ) { try { if ( 0 == str . indexOf ( 'j:' ) ) { return JSON . parse ( str . slice ( 2 ) ) ; } } catch ( err ) { } }
function ( req , res ) { return req . headers [ 'x-forwarded-proto' ] || 'http' ; }
function ( path ) { return app . dynamicViewHelpers . scheme ( req , res ) + app . dynamicViewHelpers . url_no_scheme ( req , res ) ( path ) ; }
function ( path ) { return '://' + app . dynamicViewHelpers . host ( req , res ) + ( path || '' ) ; }
function loadRef ( arg ) { var obj = getRef ( arg ) ; if ( ! ( obj ) ) return undefined ; else if ( obj . _init ) return obj ; else obj . load ( ) ; }
function ( ) { return moment ( ) . hours ( 9 ) . minutes ( 10 ) . seconds ( 0 ) }
function ( ) { var weekendDays = [ 6 , 0 ] , currentDay = moment ( ) . day ( ) return ( weekendDays . indexOf ( currentDay ) > - 1 ) }
function ( ) { this . selectTab ( this . createTab ( this . START_PAGE_URL ) ) ; this . showPageScreen ( ) ; }
function browser_urlFocus ( ) { if ( this . currentScreen === this . PAGE_SCREEN ) { this . setUrlBar ( this . currentTab . url ) ; this . urlInput . select ( ) ; this . showAwesomeScreen ( ) ; } }
function places_getTopSites ( maximum , callback ) { this . db . getPlacesByFrecency ( maximum , callback ) ; }
function ( ) { assert . ok ( subject . connection ) ; assert . ok ( subject . isOpen ) ; assert . equal ( subject . connection . name , name ) ; finishedOpen = true ; }
function ( ) { var db = new Calendar . Db ( 'b2g-test-calendar' ) ; this . _lastDb = db ; return this . _lastDb ; }
function ( ) { testSupport . calendar . requireProvider ( ) ; requireLib ( 'db.js' ) ; requireLib ( 'models/account.js' ) ; requireLib ( 'models/calendar.js' ) ; requireLib ( 'store/abstract.js' ) ; requireLib ( 'store/account.js' ) ; }
function ( done ) { testSupport . calendar . clearStore ( 'calendars' , done ) ; }
function ( ) { assert . instanceOf ( subject , Calendar . Store . Abstract ) ; assert . equal ( subject . db , db ) ; assert . deepEqual ( subject . _cached , { } ) ; }
function ( done ) { calendars = { } ; calStore = subject . db . getStore ( 'Calendar' ) ; model = subject . _createModel ( { providerType : 'Local' } ) ; subject . persist ( model , done ) ; }
function ( done ) { calendars [ 2 ] = new Calendar . Models . Calendar ( { accountId : 'some-other' , remote : { id : 666 } } ) ; calStore . persist ( calendars [ 2 ] , done ) ; }
function ( ) { var result = subject . _createModel ( { providerType : 'Local' } ) ; assert . equal ( result . providerType , 'Local' ) ; assert . isFalse ( ( '_id' in result ) ) ; }
function ( cb ) { cb ( null , remote ) ; }
function ( done ) { var store = subject . db . getStore ( 'Calendar' ) ; store . load ( function ( err , data ) { results = data ; done ( ) ; } ) ; }
function ( ) { var store = app . store ( 'Account' ) ; list = subject . accountList ; store . _cached = fixtures ; subject . render ( ) ; result = subject . element . innerHTML ; }
function ( ) { requireLib ( 'templates/calendar.js' ) ; requireLib ( 'views/settings.js' ) ; }
function al_putAlarmList ( alarm ) { AlarmManager . setEnabled ( alarm , alarm . enabled ) ; self . refresh ( ) ; }
function am_unset ( alarm ) { if ( alarm . alarmId ) { navigator . mozAlarms . remove ( alarm . alarmId ) ; } }
function am_gotAlarm ( alarm ) { self . _onFireAlarm = alarm ; var protocol = window . location . protocol ; var host = window . location . host ; window . open ( protocol + '//' + host + '/onring.html' , 'ring_screen' , 'attention' ) ; }
function am_snoozeHandler ( ) { this . set ( this . _onFireAlarm , true ) ; }
function aev_getDefaultAlarm ( ) { return { id : '' , alarmId : '' , label : 'Alarm' , hour : '10' , minute : '00' , enabled : true , repeat : '0000000' , sound : 'classic.wav' , snooze : 5 , color : 'Darkorange' } ; }
function al_putAlarmList ( alarm ) { AlarmManager . setEnabled ( alarm , alarm . enabled ) ; AlarmList . refresh ( ) ; }
function ( event ) { item . id = event . target . result ; if ( callback ) callback ( item ) ; }
function _getKeyCoordinateY ( y ) { var candidatePanel = document . getElementById ( 'keyboard-candidate-panel' ) ; var yBias = 0 ; if ( candidatePanel ) yBias = candidatePanel . clientHeight ; return y - yBias ; }
function kc_onResize ( nWidth , nHeight , fWidth , fHeihgt ) { if ( IMERender . ime . dataset . hidden ) return ; IMERender . resizeUI ( _currentLayout ) ; _updateTargetWindowHeight ( ) ; this . updateLayoutParams ( ) ; }
function calculator_backSpace ( ) { this . clearBackspaceTimeout ( ) ; this . startBackspaceTimeout ( ) ; this . stack . splice ( this . stack . length - 1 , 1 ) ; this . updateDisplay ( ) ; }
function calc_errorTimeout ( self ) { self . display . parentNode . classList . remove ( 'error' ) ; self . errorTimeout = null ; }
function onWifiEnabled ( ) { console . log ( '===== wifiManager enabled' ) ; updateNetworkState ( ) ; gNetworkList . scan ( ) ; }
function onScanError ( error ) { scanning = false ; console . warn ( '====== wifi error: ' + req . error . name ) ; clear ( false ) ; if ( autoscan ) window . setTimeout ( scan , scanRate ) ; }
function onsuccess ( ) { if ( callback ) { callback ( deleteRequest ) ; } }
function onerror ( ) { if ( callback ) { callback ( null ) ; } window . setTimeout ( pendingMgr . deleteFromMsgDB ( msg , callback ) . bind ( pendingMgr ) , 500 ) ; }
function createElementRef ( name ) { this . icons [ toCamelCase ( name ) ] = document . getElementById ( 'statusbar-' + name ) ; }
function ( event ) { self . isOpen = true ; self . connection = req . result ; callback ( null , self ) ; self . emit ( 'open' , self ) ; }
function Abstract ( db ) { this . db = db ; this . _cached = Object . create ( null ) ; Calendar . Responder . call ( this ) ; }
function Account ( ) { var self = this ; Calendar . Store . Abstract . apply ( this , arguments ) ; }
function ( value , onTrue ) { if ( value ) { return onTrue ; } else { return '' ; } }
function ( i , attributeIndex ) { if ( nodeData . attributes [ attributeIndex ] . enabled && isValidValue ( nodeData . attributes [ attributeIndex ] . value , schemaAttribute ) ) { thisAttribute = nodeData . attributes [ attributeIndex ] ; return false ; } }
function ( d ) { return d / pow ( f ( log ( d ) + e ) ) <= k ? format ( d ) : "" ; }
function ( name ) { data [ name ] = this . _getData ( name ) ; }
function ( ) { that . seq . shuffle ( ) ; }
function ( _frequency ) { this . frequency = _frequency ; this . _function . setFrequency ( this . frequency ) ; if ( this . env . getState ( ) > 0 ) this . env . setState ( 0 ) ; }
function ( pos ) { var locs = locationList ; var i ; for ( i = 0 ; i < pos ; i ++ ) { locs = locs . rest ( ) ; } return locs . first ( ) ; }
function ( ) { this . pfd . setAttitude ( this . attitude . get ( 'pitch' ) , this . attitude . get ( 'roll' ) ) ; this . pfd . draw ( ) ; }
function ( ) { var text = this . statusText . get ( 'text' ) ; this . pfd . setStatusText ( text ) ; }
function ( ) { var modestring = this . modestring ( this . heartbeat ) ; this . pfd . setFlightMode ( modestring ) ; }
function ( ) { var mavlink = this . get ( 'mavlinkSrc' ) ; mavlink . subscribe ( 'HEARTBEAT' , this . onHeartbeat , this ) ; this . resetServerTimeout ( ) ; }
function ( ) { var mavlink = this . options . mavlinkSrc ; this . model = mavlink . subscribe ( 'VFR_HUD' , this . onHeadingChange , this ) ; this . drone = document . getElementById ( 'droneicon' ) ; }
function ( ) { return { alt : 20 , lat : null , lon : null } ; }
function ( ) { console . log ( "guide model initialize" ) ; var mavlink = this . get ( 'mavlinkSrc' ) ; this . metaWaypointModel = mavlink . subscribe ( 'META_WAYPOINT' , this . onMetaWaypointChange , this ) ; }
function ( ) { var loc = this . toJSON ( ) ; if ( loc . lat !== null && loc . lon !== null ) { this . sendServer ( loc ) ; } }
function ( ) { self . model . set ( { alt : $ ( '#altinput' ) . val ( ) } ) ; }
function ( d ) { return getidname ( 'w_' + d . name + '_chart' ) }
function ( d ) { return getidname ( 'w_' + d . name + '_bg_chart' ) }
function ( d ) { var rw = this . getBBox ( ) . width ; d3 . select ( '#chart' ) . selectAll ( '#' + getidname ( 'w_' + d . name + '_bg_chart' ) ) . attr ( 'width' , rw + 10 ) }
function ( d ) { return getidname ( "w_" + d + "_bg" ) ; }
function ( d ) { return getidname ( "w_" + d ) ; }
function ( ) { return _loadProject ( _getDefaultProjectPath ( ) ) ; }
function ( ) { return rules !== undefined ; }
function ( ) { return savedText !== undefined ; }
function ( ) { return savedInlineText !== undefined && savedHostText !== undefined ; }
function ( ) { expect ( error . code ) . toBe ( FileError . SECURITY_ERR ) ; }
function ( ) { expect ( entries ) . not . toBe ( null ) ; }
function ( e ) { entries = e ; recreatePlaceholder ( ) ; deferred . resolve ( ) ; }
function ( ) { gotErrorReadingContents = true ; recreatePlaceholder ( ) ; deferred . reject ( ) ; }
function ( ) { expect ( errorCode ) . toBe ( FileError . NOT_FOUND_ERR ) ; }
function ( ) { var result = testWindow . brackets . test . ProjectManager . openProject ( path ) ; result . done ( function ( ) { isReady = true ; } ) ; }
function ( ) { $listItems = testWindow . $ ( "#open-files-container > ul" ) . children ( ) ; return $listItems . length === 2 ; }
function _markMostRecent ( doc ) { var mruI = findInWorkingSet ( doc . file . fullPath , _workingSetMRUOrder ) ; if ( mruI !== - 1 ) { _workingSetMRUOrder . splice ( mruI , 1 ) ; _workingSetMRUOrder . unshift ( doc . file ) ; } }
function _getCodeHints ( jsonStr ) { var hintObj = JSON . parse ( jsonStr ) ; return $ . map ( hintObj , function ( value , key ) { return key ; } ) . sort ( ) ; }
function _handleKeyEvents ( jqEvent , editor , event ) { _checkElectricChars ( jqEvent , editor , event ) ; CodeHintManager . handleKeyEvent ( editor , event ) ; }
function ( instance , event ) { $ ( self ) . triggerHandler ( "keyEvent" , [ self , event ] ) ; return event . defaultPrevented ; }
function ( res , socket , upgradeHead ) { debug ( 'Got upgrade' ) self . onSocket ( socket , upgradeHead ) onConnect ( ) }
function ( buffer ) { debug ( 'Socket data event' ) new IncomingPacket ( self , buffer ) }
function ( ) { debug ( 'Socket ' + name + ' event' ) var args = toArray ( arguments ) args . unshift ( name ) self . $emit . apply ( self , args ) }
function ( ) { debug ( 'Handle event packet' ) var args = this . readArgs ( ) ; if ( ! args ) { return ; } this . client . $emit . apply ( this . client , args ) ; }
function ( data ) { $ . unblockUI ( ) ; $ ( "#issue-dialog" ) . html ( data ) . dialog ( { modal : true , minWidth : 800 , zIndex : 50 , title : IMPASSE . label . issueNew } ) ; }
function ( layer , index ) { if ( layer . getVisible ( ) ) { var layerRenderer = this . getLayerRenderer ( layer ) ; f . call ( opt_obj , layer , layerRenderer , index ) ; } }
function ( ) { if ( CKEDITOR . instances [ 'article-content' ] ) { CKEDITOR . instances [ 'article-content' ] . destroy ( true ) ; } CKEDITOR . replace ( 'article-content' , { customConfig : '' } ) ; }
function ( data ) { if ( requestNumber < requestSequence ) { return ; } var results = options . results ( data , query . page ) ; self . resultsRoundtripValue = results [ 'roundtripValue' ] ; query . callback ( results ) ; }
function ( ) { var popup = new PopupStatement ( that , this ) ; statements [ popup . id ] = popup }
function ( left , top , image , id , targetDialogue ) { console . log ( id ) ; this . targetDialogue = targetDialogue ; this . targetDialogue . parent = this ; }
function ( query ) { var newquery = $ ( "#query" ) . val ( ) ; newquery += " " + query ; logstash . search ( $ . trim ( newquery ) ) ; }
function invoke ( func , proxy , args , wire ) { return when ( wire ( args , func , proxy . path ) , function ( resolvedArgs ) { return proxy . invoke ( func , asArray ( resolvedArgs ) ) ; } ) ; }
function ( properties , key ) { return wire ( properties [ key ] , key , facet . path ) . then ( function ( wiredProperty ) { facet . set ( key , wiredProperty ) ; return properties ; } ) ; }
function reallyDelete ( ) { var answer = confirm ( "Do you really want to delete this note?" ) if ( answer ) { deleteNote ( ) ; } else { } }
function reallyLogout ( ) { var answer = confirm ( "Do you really want to logout?" ) if ( answer ) { window . location . href = 'logout.php' ; } else { } }
function ( ) { return this . _length + 1 ; }
function ( err ) { displayError ( mw . msg ( 'geolocating-failed-heading' ) , mw . msg ( 'geolocating-failed-text' ) ) ; }
function exceptional ( error ) { if ( error ) throw error }
function ( router ) { switchFilter ( '' ) ; var controller = router . get ( 'applicationController' ) ; var context = app . entriesController ; context . set ( 'filterBy' , '' ) ; controller . connectOutlet ( 'todos' , context ) }
function ( router ) { switchFilter ( 'active' ) ; var controller = router . get ( 'applicationController' ) ; var context = app . entriesController ; context . set ( 'filterBy' , 'active' ) ; controller . connectOutlet ( 'todos' , context ) }
function ( router ) { switchFilter ( 'completed' ) ; var controller = router . get ( 'applicationController' ) ; var context = app . entriesController ; context . set ( 'filterBy' , 'completed' ) ; controller . connectOutlet ( 'todos' , context ) }
function ( ) { var urlstring = "/gmas/project/SCR0104SegmentHome.jsp?segmentId=" ; $ ( this ) . dialog ( "close" ) ; window . location = $ ( "#env" ) . val ( ) + urlstring + $ . trim ( $ ( "#segmentId" ) . val ( ) ) ; }
get view ( ) { delete this . view ; return this . view = document . getElementById ( 'recents-container' ) ; } ,
function ( id ) { return this . _currentLanguage . labels [ id ] ; }
function ( item , checked ) { var size = item . value ; Frog . Prefs . set ( 'tile_count' , size ) ; item . parentMenu . hide ( ) ; self . fireEvent ( 'onChange' , [ Frog . Prefs ] ) ; }
function ( ) { this . _isCacheDirty = true ; if ( this . _parent ) { this . _parent . _setNodeDirtyForCache ( ) ; } }
function ( typedArrayOrSizeInBytes , usage ) { return createBuffer ( this . _gl , this . _gl . ARRAY_BUFFER , typedArrayOrSizeInBytes , usage ) ; }
function ( ) { this . log . info ( 'Purge Cache' ) ; for ( var i in this . purge_callbacks ) { this . purge_callbacks [ i ] . call ( this ) ; } }
function ( options , callback ) { if ( this . users . indexOf ( options . username ) != - 1 ) callback ( ) ; else callback ( 'STOP' ) ; }
function ( err , results ) { if ( err ) self . core . log . error ( { error : err , source : 'Redis listContainsItems' } ) ; callback ( results . indexOf ( 1 ) > - 1 , results ) ; }
function ( ) { core . inCategories ( 'http://sex.com/blaa' , 'sex.com' , [ 'porn' , 'webmail' ] , _w ( this . callback ) ) ; }
function ( ) { core . inCategories ( 'http://sex.com/blaa' , 'sex.com' , [ 'porn' , 'webmail' ] , _w ( this . callback ) ) ; }
function ( t ) { assert . isTrue ( core . categories [ 'sex.com/blaa' ] [ 'porn_webmail' ] ) ; }
function ( ) { core . isAllowed ( { url : 'http://google.com' , user : 'phil' } , _w ( this . callback ) ) ; }
function test ( domain , rule_options , callback ) { var r = new Rule ( rule_options , core ) ; r . isAllowed ( addOptions ( { domain : domain , url : 'http://' + domain + '/' } ) , _w ( callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://other.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://github.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://other.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://www.sex.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://hotmail.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://hotmail.com/foo/player.swf' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'https://www.google.at/search?q=flv' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , ip : '10.168.1.55' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , ip : '10.69.2.13' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'phil' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'other' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'other' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'phil' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'other' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'other' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'phil' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'other' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' , username : 'other' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://google.com' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://hotmail.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://hotmail.com' , username : 'other' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://hotmail.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://hotmail.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://hotmail.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://hotmail.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://porno.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://sex.com' , username : 'felix' } ) , _w ( this . callback ) ) ; }
function ( rule ) { rule . isAllowed ( addOptions ( { url : 'http://sex.com' , username : 'phil' } ) , _w ( this . callback ) ) ; }
function ( t ) { assert . equal ( t , '1' ) ; }
function ( t ) { assert . equal ( t , '1' ) ; }
function ( options , callback ) { if ( this . in_time === true ) { callback ( ) ; return ; } callback ( 'STOP' ) ; }
function ( obj ) { var o = { name : 'haibu' } ; o [ resources [ e ] . User . key ] = 'haibu' ; resources [ e ] . User . createRepository ( 'marak' , o , this . callback ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . key , 'user/marak/haibu' ) ; assert . equal ( obj . name , 'haibu' ) ; assert . equal ( obj . resource , 'Repository' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . lengthOf ( obj . repository_ids , 3 ) ; assert . include ( obj . repository_ids , 'haibu' ) ; }
function ( ) { resources [ e ] . Repository . get ( 'user/marak/haibu' , this . callback ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . key , 'user/marak/haibu' ) ; assert . equal ( obj . name , 'haibu' ) ; assert . equal ( obj . user_id , 'marak' ) ; }
function ( p ) { p . destroy ( this . callback ) ; }
function plugin ( racer ) { var BUNDLE_TIMEOUT = racer . get ( 'bundle timeout' ) || ( racer . set ( 'bundle timeout' , 1000 ) , 1000 ) ; mixin . static = { BUNDLE_TIMEOUT : BUNDLE_TIMEOUT } ; racer . mixin ( mixin ) ; }
function changeListener ( ) { var loc = getLocation ( ) ; if ( ! loc ) { redirect ( '' ) ; } else if ( loc !== currentLocation ) { updateLocation ( loc ) ; doRoute ( loc ) ; } }
function ( ) { resetBtn . css ( 'display' , 'inline-block' ) ; stdin . css ( 'height' , height ( phobos ? 25 : 31 ) ) ; hideAllWindows ( ) ; stdinDiv . css ( 'display' , 'block' ) ; stdin . focus ( ) ; }
function ( element ) { jQuery ( element ) . find ( 'div.inputs input[type="checkbox"]' ) . each ( function ( ) { Omeka . Items . enableWysiwygCheckbox ( this ) ; } ) ; }
function ( ) { $ ( '#scroll-container' ) . css ( { 'opacity' : '0' } ) ; setScalingVars ( ) ; scroll ( ) ; }
function ( ) { this . logger . info ( 'Core init(). Kicking off Super Startup' ) ; this . user . init ( ) ; }
function ( start , end ) { this . textBox . setSelectionRange ( start , end ) ; }
function ( context ) { return ( ! this . isInOtherPanel ( context ) && Firebug . commandEditor ) ? this . getCommandEditor ( ) . getExpression ( ) : this . getSingleRowCommandLine ( ) . value ; }
function ( list ) { var chars = [ ] ; for ( var ch in list ) chars . push ( ch ) ; return new RegExp ( "([" + chars . join ( "" ) + "])" , "gm" ) ; }
function ( list ) { var chars = [ ] ; for ( var ch in list ) chars . push ( ch ) ; return new RegExp ( "(" + chars . join ( "|" ) + ")" , "gm" ) ; }
function ( ) { if ( navigator . appVersion . indexOf ( "Win" ) != - 1 ) return "\r\n" ; if ( navigator . appVersion . indexOf ( "Mac" ) != - 1 ) return "\r" ; return "\n" ; }
function safeRegexp ( source ) { try { return RegExp ( source , "i" ) ; } catch ( e ) { } }
function ( from ) { if ( ! from ) return C . R_STAY ; if ( from === "STOP" ) return C . R_STAY ; if ( from === "LOOP" ) return C . R_LOOP ; if ( from === "BOUNCE" ) return C . R_BOUNCE ; }
function ( key , value , callback ) { db_client . set ( key , value , callback ) ; }
function ( strings ) { var hash = { } , i = strings . length ; while ( i -- ) { hash [ strings [ i ] ] = true ; } return Object . keys ( hash ) ; }
function ( el ) { el . className = struniq ( ( el . className + ' ' + this ) . split ( ' ' ) ) . join ( ' ' ) ; }
function setComplete ( exitcode ) { setClass ( exitcode === 0 ? 'complete' : 'failed' ) ; removeInput ( ) ; removeVTOutput ( ) ; }
function toggle_topic ( toggler , toggleNum ) { if ( document . getElementById ) { imageSwitch = toggler ; targetElement = toggler . parentNode . parentNode . nextSibling ; toggleexacttopic ( targetElement , imageSwitch , toggleNum , false , true ) ; } }
function save_toggles ( ) { savetogglestate ( to36baseString ( toggleBinaryGlobal ) ) ; }
function ( ) { return eval ( '( function(){ return ' + config + '; }() );' ) ; } ( ) [ key ] || { }
function ( reqsModules ) { if ( toString . call ( callback ) === '[object Function]' ) { callback . apply ( notDefined , reqsModules ) ; } }
function ( count ) { if ( count > this . remaining ) throw new ParseError ( this , "Unexpected end of pattern." ) ; return this . source [ this . position + count ] ; }
function ( shader_name , shader_type ) { var constant_name = "IMPORT_" + shader_name + "_" + shader_type ; return "#ifndef " + constant_name + "\n" + "#define " + constant_name + " 1\n" + Jax . shader_data ( shader_name ) [ shader_type ] + "#endif\n" }
function ( params ) { var action_obj = { "disk_template" : params . data . extra_param } ; OpenNebula . Action . simple_action ( params , OpenNebula . VM . resource , "attachdisk" , action_obj ) ; }
function ( ) { AC . message ( 'Chyba' , 'Stránku se nepodařilo načíst.' ) ; location . href = url ; }
function ( e ) { e . stop ( ) ; }
function ( e ) { e = e ; if ( e . key == 'esc' && this . visible ) this . hide ( this . layout ) ; }
function ( err ) { var msg = 'Worker started. Admin UI on HTTP port ' + CONF . port_www ; CONF . log . info ( msg ) $done ( err ) }
function ( err ) { var msg = 'Removed job #' + kid ; CONF . log . info ( msg ) $done ( err ) }
function ( err ) { console . log ( "fucking error" , err ) ; }
function ( datespan ) { if ( datespan . find ( 'input.invalid' ) . size ( ) > 0 ) { datespan . addClass ( 'invalid' ) ; } else { datespan . removeClass ( 'invalid' ) ; } }
function ( ) { var input = $ ( this ) ; input . data ( 'validated' , input . val ( ) ) ; contextualise ( input ) ; if ( input . is ( '.start' ) ) { visualise ( input ) ; } }
function ( event ) { udmnm ( event ) ; wc . demLookup ( ) }
function ( ) { lastUpload . push ( contentObj ) ; checkUploadCompleted ( true , contentObj ) ; }
function ( ) { item [ 'sakai:pooled-content-viewer' ] = item [ 'sakai:pooled-content-viewer' ] || [ ] ; item [ 'sakai:pooled-content-viewer' ] . push ( libraryToUploadTo ) ; lastUpload . push ( item ) ; checkUploadCompleted ( false , existingItem ) ; }
function ( ) { item [ 'sakai:pooled-content-viewer' ] = item [ 'sakai:pooled-content-viewer' ] || [ ] ; item [ 'sakai:pooled-content-viewer' ] . push ( libraryToUploadTo ) ; lastUpload . push ( item ) ; checkUploadCompleted ( false , existingItem ) ; }
function ( ) { if ( ! isPendingSelection ) return ; isPendingSelection = false ; self . selectRowAtIndex ( tableViewCell . getIndex ( ) ) ; }
function ( evt ) { if ( ! isPendingSelection ) return ; isPendingSelection = false ; window . clearTimeout ( selectionTimeout ) ; self . selectRowAtIndex ( this . tableViewCell . getIndex ( ) ) ; }
function PromisedHandler ( ) { this . getSuggestions = function ( entry , callback ) { this . pendingSuggestion = { entry : entry , callback : callback } ; } ; this . $dispose = Aria . empty ; }
function ( content , options ) { this . options = options this . $element = $ ( content ) . delegate ( '[data-dismiss="modal"]' , 'click.dismiss.modal' , $ . proxy ( this . hide , this ) ) }
function ( text ) { return typeof text != 'string' || ( text . charAt ( 0 ) === "<" && text . charAt ( text . length - 1 ) === ">" && text . length >= 3 ) || /^(?:[^<]*<[\w\W]+>[^>]*$)/ . exec ( text ) }
function ( item ) { return that . matcher ( item ) }
function ( jquery ) { zeega . app . init ( ) var frameID = window . location . hash . substr ( 15 ) ; console . log ( frameID ) }
function ( ) { self . initSocket ( client , onConnect ) if ( opts . reconnect ) applyReconnect ( ) }
function ( ) { var nssClient = new nss . NsSocket ( client , { type : 'tcp4' } ) self . initSocket ( nssClient , onConnect ) if ( opts . reconnect ) applyReconnect ( ) }
function ( ) { self . initSocket ( client , onConnect ) if ( opts . reconnect ) applyReconnect ( ) }
function ( ) { self . emit ( 'reconnecting' ) self . connect . apply ( self , args ) }
function ( ) { debug ( 'reconnecting' ) self . emit ( 'reconnecting' ) socketvat . prototype . connect . apply ( self , args ) }
function ( jqXHR , status , errorText ) { $ ( '#rendered-tweets' ) . prepend ( '<p class="error">' + '<strong>Twitter Error</strong><br>' + 'Are you sure the tweet reference is correct? ' + 'Maybe wait a few seconds and try again?' + '</p>' ) ; }
function ( data ) { window . location . reload ( ) ; }
function ( ) { window . location . reload ( ) ; }
function ( event ) { document . location = base_url ; }
function ( event ) { var kStudent = $ ( "#kStudent" ) . val ( ) ; if ( kStudent != '' ) { document . location = "index.php?target=student&action_task=view&kStudent=" + kStudent ; } else { window . location . reload ( ) ; } }
function ( ) { return Math . max ( this . TileWidth , this . TileHeight ) * 0.5 ; }
function ( ) { this . _onNavigationEnded ( ) ; this . StopMoving ( ) ; }
function ( ) { this . _onNavigationEnded ( ) ; }
function ( v1 , v2 ) { var v = { } ; v . x = v1 . x + v2 . x ; v . y = v1 . y + v2 . y ; return v ; }
function ( ) { var lenient = ! ! env . opts . lenient ; env . opts . lenient = false ; expect ( badTag ) . toThrow ( ) ; env . opts . lenient = lenient ; }
function ( f ) { if ( ! f . exists ( ) || ! f . isDirectory ( ) ) { f . create ( Components . interfaces . nsIFile . DIRECTORY_TYPE , 0774 ) ; } }
function ( id ) { return builder . plugins . getPluginsDir ( ) . append ( id ) ; }
function ( value ) { var dateValue = convertToDate ( value ) , output = ( dateValue . getTime ( ) - dateValue . getMilliseconds ( ) ) / 1000 ; return output ; }
function ( i , ele ) { var $ele = baidu ( ele ) ; $ele . prop ( "nonexisting" , "foo" ) . removeProp ( "nonexisting" ) ; strictEqual ( ele [ "nonexisting" ] , undefined , "removeProp works correctly on non DOM element nodes (bug #7500)." ) ; }
function ( i , ele ) { var $ele = baidu ( ele ) ; $ele . prop ( "nonexisting" , "foo" ) . removeProp ( "nonexisting" ) ; strictEqual ( ele [ "nonexisting" ] , undefined , "removeProp works correctly on non DOM element nodes (bug #7500)." ) ; }
function ( ) { expect ( 1 ) ; equal ( baidu ( "#foo" ) . text ( "<div" ) . text ( undefined ) [ 0 ] . innerHTML , "&lt;div" , ".text(undefined) is chainable (#5571)" ) ; }
function ( ) { this . setContentSize ( cc . Director . sharedDirector ( ) . getWinSize ( ) ) ; return true ; }
function ( ) { return cc . SplitCols . create ( 3 , this . _duration / 2.0 ) ; }
function ( f ) { assert . equal ( f , target ) ; clearFile ( ) ; process . exit ( 0 ) ; }
function ( err , res ) { if ( res && res [ key ] && typeof oldid !== 'undefined' ) { res [ key ] = oldid ; obj [ key ] = oldid ; } callback ( err , res ) ; }
function ( ) { render ( { 'connections' : '/parameters/federation_connection' } , 'federation-connections' , '#/federation-connections' ) ; }
function ( ) { if ( ! mapLoaded ) { if ( navigator . geolocation ) { navigator . geolocation . getCurrentPosition ( loadMap , function ( ) { alert ( 'Could not detect' ) ; } ) ; } } else { showMapDirectPopup ( ) ; } }
function ( db , event ) { me . convertLocalStorage ( callback , true ) ; }
function ( delegate ) { _delegates . push ( delegate ) ; }
function ( ) { for ( var i in _delegates ) { Util . callUserFuncArray ( _delegates [ i ] , arguments ) ; } }
function ( id , packet ) { if ( ! this . closed [ id ] ) { this . closed [ id ] = [ ] ; } this . closed [ id ] . push ( packet ) ; }
function onEventClicked ( e ) { currentEventTrace = $ ( e . currentTarget ) . data ( 'trace' ) ; setupTree ( $tree ) ; }
function findRoot ( args ) { return ( ! args . length || ( args . length == 1 && HOST_USER_PORT ) ? CWD : path . resolve ( CWD , args [ 0 ] ) ) + SEP ; }
function ( output , polpetta , response ) { commonResponses . Status = polpetta . code ( code ) ; response . writeHead ( code , commonResponses ) ; response . end ( ) ; }
function ( name ) { this . push ( '<li><a href="' + name + '">' + name + '</a></li>' ) ; }
function resolve ( src ) { src = path . resolve ( polpetta . root + src ) ; return src . indexOf ( polpetta . root ) ? "" : src ; }
function Pause ( ) { animation = false ; players = new Array ( ) ; }
function makeURL ( path ) { if ( baseURL == myOrigin ) return path ; path = baseURL + path ; if ( ! $ . support . cors && window . console ) window . console . warn ( "No CORS detected for request to " + path ) ; return path ; }
function ( ) { Ext . getCmp ( 'mainView' ) . setMasked ( false ) ; Ext . Msg . alert ( Ext . i18n . appBundle . getMsg ( 'RaxaEmr.controller.session.alert' ) ) ; }
function ( ) { return [ 'login' , 'screener' , 'registration' , 'registrationextjs4' , 'pharmacy' , 'CHW' ] ; }
function ( ) { this . sortBy ( 'urgency' ) ; }
function loadWidgets ( activeWidgetInfos ) { for ( var i = 0 ; i < activeWidgetInfos . length ; i ++ ) { var widgetInfo = activeWidgetInfos [ i ] ; loadWidget ( widgetInfo ) ; } ; }
function ( WidgetModule ) { WidgetModule . load ( widgetInfo , digest ) ; }
function getActiveWidgetInfos ( dashboards ) { var activeDashboard = getActiveDashboard ( dashboards ) ; return activeDashboard . widgets ; }
function ( html ) { console . log ( "loading widget settings" ) ; console . log ( settings ) ; var selector = "#" + that . manifest . WidgetName + "-widgetSettings" ; $ ( selector ) . replaceWith ( html ) ; }
function ( ) { $ ( this ) . datepicker ( { dateFormat : "yy-mm-dd" } ) ; }
function isLeftHandSide ( expr ) { switch ( expr . type ) { case Syntax . Identifier : case Syntax . MemberExpression : case Syntax . CallExpression : return true ; } return false ; }
function is_unicode_digit ( ch ) { return UNICODE . digit . test ( ch ) ; }
function is_unicode_combining_mark ( ch ) { return UNICODE . combining_mark . test ( ch ) ; }
function is_identifier_char ( ch ) { return is_identifier_start ( ch ) || is_unicode_combining_mark ( ch ) || is_unicode_digit ( ch ) || is_unicode_connector_punctuation ( ch ) || ch == "\u200c" || ch == "\u200d" ; }
function ( name ) { if ( ! this . registers [ name ] ) { this . registers [ name ] = true ; this . registers . list . push ( name ) ; } }
function ( response ) { if ( response && response . success == "true" ) { popupTextEditor . setFile ( response . path ) ; popupTextEditor . update ( ) ; popupTextEditor . show ( ) ; } else { alert ( "Error while creating new test" ) ; } }
function ( response ) { if ( response && response . success == "true" ) { myself . editFile ( response . path ) ; myself . popup . hide ( ) ; } else { alert ( "Error while duplicating" ) ; } }
function ( s ) { return s . id === stopID ; }
function ( ) { var deferred = when . defer ( ) ; console . log ( 'emit session-client#end' ) this . _privatePubsubClient . emit ( "end" ) ; this . onEnd ( deferred . resolve , deferred . reject ) ; return deferred . promise ; }
function ( ) { console . log ( '--------------------------------' ) console . log ( 'the pubsub client sent end event' ) console . log ( '--------------------------------' ) this . _end ( ) ; }
function ( ) { $ ( item ) . remove ( ) ; if ( $ ( "ul.ts-members li:visible" ) . length > 1 ) { $ ( "button.delete" , list ) . show ( ) ; } }
function order_up ( id ) { $ ( "#modal-user" ) . val ( user_id ) ; $ ( "#modal-checkin" ) . val ( id ) ; $ ( "#myModal" ) . modal ( 'show' ) ; }
function ( ) { var lenient = ! ! env . opts . lenient ; env . opts . lenient = false ; expect ( badTag ) . toThrow ( ) ; env . opts . lenient = lenient ; }
function ( message ) { assert . equal ( message , 'Received player.' ) ; }
function ( file , content , callback ) { assert . equal ( file , 'newPlayer.zip' ) ; assert . equal ( content , 'file_contents' ) ; callback ( ) ; }
function ( ) { currentLetterClassList . add ( 'hide' ) ; }
function jmol_help ( ) { win = window . open ( "/java/jmol/appletweb/JmolHelp.html" , "Jmol Help" , "width=400, height=600, scrollbars=yes" ) ; win . focus ( ) ; }
function evaluate_text_cell_input ( id , value , settings ) { async_request ( worksheet_command ( 'eval' ) , evaluate_text_cell_callback , { text_only : 1 , id : id , input : value } ) ; jmol_delete_check ( ) ; }
function ( item ) { if ( item . active == true ) { console . log ( "ring! ring!" ) ; ring . play ( ) ; } }
function ( item ) { if ( item . active == true ) { console . log ( "ring! ring!" ) ; ring . play ( ) ; } }
function onEvent ( event ) { if ( ! this . running ) throw this . name + " has terminated and cannot process more events" this . externalQueue . push ( event ) if ( this . stable ) this . extEventLoop ( ) }
function displayError ( heading , text ) { showPage ( 'error-page' ) ; $ ( '#error-page textarea' ) . val ( heading + ':\n' + text ) ; }
function ( err , textStatus ) { $ ( "#login-status-message" ) . empty ( ) ; displayError ( mw . msg ( 'login-failed' ) , textStatus ) ; fail ( textStatus ) ; }
function ( ) { currentGame . advance ( ) ; }
function ( model ) { $element . tooltip ( 'hide' ) ; that . resetActiveElement ( ) ; $component . empty ( ) ; $component . data ( 'elementGroup' ) . trigger ( 'reset' ) ; }
function clear_map ( ) { for ( var marker in ProfilesLib . markers_array ) { ProfilesLib . map . removeLayer ( ProfilesLib . markers_array [ marker ] ) ; } ProfilesLib . markers_array = [ ] ; }
function ( index ) { return index % 2 === 0 ; }
function ( index ) { return index % 3 === 0 ; }
function ( index ) { return index % 4 === 0 ; }
function ( index ) { return index % 5 === 0 ; }
function ( element , index ) { return ( index % 2 === 0 ) ; }
function ( event ) { hash_set_value ( 'search' , $ ( '#searchfield' ) . val ( ) ) ; }
function ( ) { hash_set_value ( 'country' , $ ( '#adv-search-country' ) . val ( ) ) ; }
function ( ) { hash_set_value ( 'area' , $ ( '#adv-search-area' ) . val ( ) ) ; }
function ( ) { switch_views ( 'list' ) ; }
function ( counter ) { FBTest . compare ( 13 , counter , "There must be precise number " + "of occurences (13) actual: " + counter ) ; callback ( ) ; }
function ( counter ) { FBTest . compare ( 2 , counter , "There must be precise number " + "of occurences (2) actual: " + counter ) ; callback ( ) ; }
function ( counter ) { FBTest . compare ( 1 , counter , "There must be precise number " + "of occurences (1) actual: " + 1 ) ; callback ( ) ; }
function ( ) { this . hide ( ) this . $element . off ( this . options . ns ) . removeData ( 'popover' ) }
function ( ) { this . hide ( ) this . $element . off ( this . options . ns ) . removeData ( 'tooltip' ) }
function ( e ) { if ( this . _activeDrag ) { this . _setSliderValueOnDrag ( e ) ; this . _fireOnChange ( ) ; this . _cache [ 'handle' ] . focus ( ) ; } this . _activeDrag = false ; return this ; }
function ( s ) { return w0 * cosh ( r0 ) / cosh ( rho * s + r0 ) ; }
function ( s ) { return ( w0 / sqr ( rho ) ) * cosh ( r0 ) * tanh ( rho * s + r0 ) - ( w0 / sqr ( rho ) ) * sinh ( r0 ) + u0 ; }
function getLanguageFromFragment ( fragment ) { var match ; fragment = fragment || "" ; if ( ! ( match = /syn=(\w+)/ . exec ( fragment ) ) ) { return null ; } return match [ 1 ] ; }
function ( v ) { return $ ( v ) . find ( '.feature-title' ) . text ( ) . toLowerCase ( ) ; }
function ( v ) { return parseFloat ( $ ( v ) . data ( sorting_type ) ) ; }
function ( scope , segment ) { return segment in scope ? scope [ segment ] : when . reject ( 'Cannot resolve ref: ' + name ) ; }
function ( ) { return when . reject ( e == 'timed out' ? 'Possible circular ref:\n' + inflightRefs . join ( '\n' ) : e ) ; }
function ( id , offset , line , column , span , color ) { that . unhighlightAll ( ) ; that . highlight ( id , offset , line , column , span , color ) ; }
function ( id , offset , line , column , span , color ) { that . highlight ( id , offset , line , column , span , color ) ; }
function ( id , offset , line , column , span , color ) { }
function ( ) { that . highlighter ( elt . id , elt . offset , elt . line , elt . column , elt . span , "red" ) ; }
function ( index ) { listCtl . set ( "cursorIndex" , index ) ; registry . byId ( "firstInput" ) . focus ( ) ; }
function ( story ) { return story . score ( ) >= score || story . get ( 'visible' ) ; }
function ( story ) { return story . score ( ) < score && ! story . get ( 'visible' ) ; }
function ( change ) { return _ . contains ( [ 'selected' , 'read' , 'intelligence' , 'visible' ] , change ) ; }
function ( ) { var list = $ ( ) ; list = $ ( document . createElement ( 'li' ) ) ; list . addClass ( this . odd ? 'odd' : 'even' ) ; return list ; }
function ( event ) { var checked = $ ( event . target ) . is ( ':checked' ) ; node . expand ( checked ) ; node . select ( checked ) ; }
function ( ) { var list = $ ( ) ; list = $ ( document . createElement ( 'li' ) ) ; list . addClass ( this . odd ? 'odd' : 'even' ) ; return list ; }
function ( event ) { var checked = $ ( event . target ) . is ( ':checked' ) ; node . expand ( checked ) ; node . select ( checked ) ; }
function ( ) { return this . getTwoDigitHour ( ) + ':' + this . getTwoDigitMinute ( ) ; }
function ( e ) { this . updateFromEditForm ( ) ; }
function ( err , tmpl ) { if ( err ) return callCallbacks ( tmp . cb , err ) ; if ( ++ done == dependencies . length ) callCallbacks ( tmp . cb ) ; }
function ( ) { focusCss = { position : 'absolute' , left : $select . position ( ) . left , top : $select . position ( ) . top + $select . height ( ) + 5 , zIndex : 1 } ; }
function ( ) { $select . attr ( 'size' , size ) ; $select . css ( focusCss ) ; $input . css ( 'z-index' , 2 ) ; $clone . css ( { display : 'inline-block' } ) ; }
function ( ) { if ( ! media . paused ) { currentTime = media . youtubeObject . getCurrentTime ( ) ; media . dispatchEvent ( "timeupdate" ) ; setTimeout ( timeupdate , 10 ) ; } }
function ( ) { media . paused = false ; media . dispatchEvent ( "play" ) ; media . dispatchEvent ( "playing" ) ; timeupdate ( ) ; media . youtubeObject . playVideo ( ) ; }
function ( ) { if ( ! media . paused ) { media . paused = true ; media . dispatchEvent ( "pause" ) ; media . youtubeObject . pauseVideo ( ) ; } }
function ( ) { return media . youtubeObject . isMuted ( ) ; }
function ( ) { return media . youtubeObject . getVolume ( ) / 100 ; }
function ( ) { ClipOldRecords ( totalList , totalCount ) ; }
function ( ) { var sg = new StartLayer ( ) ; if ( sg && sg . init ( ) ) { return sg ; } return null ; }
function ( ) { var scene = cc . Scene . create ( ) ; var layer = StartLayer . create ( ) ; scene . addChild ( layer ) ; return scene ; }
function ( err , data ) { if ( err ) return next ( err ) ; console . log ( 'loaded template' ) ; res . body = exports . replacePlayer ( res . body , data , vid ) ; next ( ) ; }
function ( target , source ) { this . setWeather ( weather , source , this . getAbility ( 'forecast' ) ) ; this . weatherData . duration = 0 ; }
function ( target , source ) { this . setWeather ( weather , source , this . getAbility ( 'flowergift' ) ) ; this . weatherData . duration = 0 ; }
function ( element ) { if ( uniqueIdList . indexOf ( element ) < 0 ) { uniqueIdList . push ( element ) ; } return uniqueIdList . indexOf ( element ) ; }
function ( ) { expect ( canvas . get ( 0 ) ) . toImageDiffEqual ( referenceImg . get ( 0 ) , 70 ) ; }
function ( ) { expect ( canvas . get ( 0 ) ) . toImageDiffEqual ( referenceImg . get ( 0 ) , 90 ) ; }
function ( ) { if ( readline . line || code ) { say ( '' ) ; reset ( ) ; } else { readline . close ( ) ; } }
function ( feedItemCollection ) { this . feedItemCollection = feedItemCollection ; $ ( '#rss' ) . html ( "" ) ; this . render ( ) ; }
function ( ) { var actual = render ( '' ) ; assert . equal ( '' , actual ) ; }
function ( locals , env , data ) { return locals [ '__this__' ] ; }
function ( elem , i ) { content . push ( new Expression ( elem ) ) ; if ( elem . default ) defaultKey = i ; }
function ( locals , env , data ) { var entity = expression ( locals , env , data ) ; return entity . getAttribute ( attribute , env , data ) ; }
function ( e ) { e . stopPropagation ( ) ; app . fireEvent ( 'openTask' , task , - 1 ) ; }
function ( m ) { return remove ? m . remove ( ) : m . update ( removeQ ) ; }
function ( ) { this . removeAllPrimitives ( ) ; this . _scene . getPrimitives ( ) . remove ( this . _polylineCollection ) ; return destroyObject ( this ) ; }
function ( target ) { this . _super ( target ) ; if ( this . _restoreOriginalFrame ) { this . _origFrame = target . displayFrame ( ) ; } }
function ( ) { if ( ! this . _actionManager ) this . _actionManager = cc . Director . sharedDirector ( ) . getActionManager ( ) ; return this . _actionManager ; }
function ( ) { if ( ! this . _scheduler ) this . _scheduler = cc . Director . sharedDirector ( ) . getScheduler ( ) ; return this . _scheduler ; }
function ( action ) { cc . Assert ( action != null , "Argument must be non-nil" ) ; this . getActionManager ( ) . addAction ( action , this , ! this . _isRunning ) ; return action ; }
function ( ) { this . getActionManager ( ) . removeAllActionsFromTarget ( this ) ; }
function ( action ) { this . getActionManager ( ) . removeAction ( action ) ; }
function ( tag ) { cc . Assert ( tag != cc . CCACTION_TAG_INVALID , "Invalid tag" ) ; this . getActionManager ( ) . removeActionByTag ( tag , this ) ; }
function ( tag ) { cc . Assert ( tag != cc . CCACTION_TAG_INVALID , "Invalid tag" ) ; return this . getActionManager ( ) . getActionByTag ( tag , this ) ; }
function ( ) { return this . getActionManager ( ) . numberOfRunningActionsInTarget ( this ) ; }
function ( priority ) { this . getScheduler ( ) . scheduleUpdateForTarget ( this , priority , ! this . _isRunning ) ; }
function ( ) { this . getScheduler ( ) . unscheduleUpdateForTarget ( this ) ; }
function ( selector ) { if ( ! selector ) return ; this . getScheduler ( ) . unscheduleSelector ( selector , this ) ; }
function ( ) { this . getScheduler ( ) . unscheduleAllSelectorsForTarget ( this ) ; }
function ( ) { this . getScheduler ( ) . resumeTarget ( this ) ; this . getActionManager ( ) . resumeTarget ( this ) ; }
function ( ) { this . getScheduler ( ) . pauseTarget ( this ) ; this . getActionManager ( ) . pauseTarget ( this ) ; }
function ( ) { return new cc . Scene ( ) ; }
function ( child , cleanup ) { if ( this . _batchNode ) { this . _batchNode . removeSpriteFromAtlas ( child ) ; } this . _super ( child , cleanup ) ; }
function ( ) { if ( this . _batchNode && ! this . _recursiveDirty ) { this . _recursiveDirty = true ; this . setDirty ( true ) ; if ( this . _hasChildren ) this . setDirtyRecursively ( true ) ; } }
function ( relative ) { cc . Assert ( ! this . _batchNode , "ignoreAnchorPointForPosition is invalid in cc.Sprite" ) ; this . _super ( relative ) ; }
function ( flipX ) { if ( this . _flipX != flipX ) { this . _flipX = flipX ; this . setTextureRect ( this . _rect , this . _rectRotated , this . _contentSize ) ; this . setNodeDirty ( ) ; } }
function ( paramName ) { return ( this . queryData_ . get ( paramName ) ) ; }
function ( cardId , insertAfterCardId ) { var idx = cards . length ; if ( insertAfterCardId ) { idx = cards . indexOf ( insertAfterCardId ) + 1 ; } cards . splice ( idx , 0 , cardId ) ; return idx ; }
function ( model ) { if ( model . cardId ) { ui . receiveCard ( model , group . groupId ) ; } }
function ( ) { var model = { cardId : cardId } ; if ( card . moveStartGroupId ) { model . moveStartGroupId = card . moveStartGroupId ; } return model ; }
function ( model ) { ui . cardReceivedCard ( model , cardId ) ; }
function ( ) { return that ; }
function ( row ) { return toObject ( row ) ; }
function openAsync ( dbPath ) { try { var connection = SQLite3 . Database . open ( dbPath ) ; return WinJS . Promise . as ( wrapDatabase ( connection ) ) ; } catch ( e ) { return wrapComException ( e ) ; } }
function ( p0 , p1 ) { var x = ( p0 . x + p1 . x ) * 0.5 ; var y = ( p0 . y + p1 . y ) * 0.5 ; return { x : x , y : y } ; }
function ( ) { if ( ! this . rest ) { return 1 ; } else { return 1 + this . rest . length ( ) ; } }
function ( ) { if ( ! this . head ) { return 0 ; } else { return this . head . length ( ) ; } }
function ( data ) { selectPieceFromURL ( ) ; }
function Enter ( ) { PieHub . push ( Out . get_chat_history ( ) ) ; PieHub . push ( Out . piece_progress ( ) ) ; PieHub . push ( Out . init_session ( ) ) ; }
function ( ) { $ ( this ) . triggerHandler ( 'afterStopEditing' , [ save , wasPending ] ) ; $ ( wikibase ) . triggerHandler ( 'stopItemPageEditMode' , this ) ; }
function ( ) { TissueStack . Utils . adjustScreenContentToActualScreenSize ( 0 ) ; _this . addToOrReplaceSelectedDataSets ( dataSet . id , 0 ) ; _this . showDataSet ( 1 ) ; TissueStack . InitUserInterface ( ) ; TissueStack . BindDataSetDependentEvents ( ) ; }
function ( ) { loadFixtures ( 'fragment.html' ) ; return this . $element = $ ( '#slider' ) ; }
function ( frames , symbols ) { return stepContains ( 'Readability.js' , frames , symbols ) || hasJSFrame ( frames , symbols ) ; }
function ( full ) { if ( full == null ) full = true ; if ( full ) { arrwrite ( REAVETARD_TITLE , true ) ; } else { arrwrite ( REAVETARD_TITLE_S , true ) ; } return this ; }
function ( ) { arrwrite ( REAVETARD_MENU , true ) ; return this ; }
function ( ) { if ( document . getElementsByClassName ) { var errors = document . getElementsByClassName ( 'form-error' ) ; while ( errors [ 0 ] ) { errors [ 0 ] . parentNode . removeChild ( errors [ 0 ] ) ; } } }
function ( msg ) { if ( msg == "1" ) { $ ( "#sendjson" ) . html ( "SAVED" ) ; } else if ( msg == "0" ) { $ ( "#sendjson" ) . html ( "SAVED FAILED" ) ; } else { } }
function ( ) { this . changeViewsOfInternalModels ( ) ; window . appView . renderEditableCorpusViews ( ) ; }
function ( ) { Ti . UI . setBackgroundColor ( '#000' ) ; var tabGroup = Ti . UI . createTabGroup ( ) ; var tab1 = app . ui . createRssTab ( 'Titanium VOA RSS' , 'http://learningenglish.voanews.com/rss/?count=50' ) ; tabGroup . addTab ( tab1 ) ; return tabGroup ; }
function ( ) { $ ( '#catalog' ) . show ( 'slow' ) ; truncate ( ) ; }
function ( ) { new RODU . av4vnstat . Av4VnStat ( ) ; }
function ( $scope ) { 'use strict' ; $scope . test = "test" ; }
function ( id ) { if ( ids [ id ] ) { ids [ id ] . cancel ( ) ; } timer . purge ( ) ; delete ids [ id ] ; }
function ( ) { var y = 90 ; y -= this . targetSpeed * 2 ; y += this . speed * 2 ; y = Math . min ( 160 , Math . max ( 20 , y ) ) ; return y ; }
function ( err ) { displayError ( mw . msg ( 'geolocating-failed-heading' ) , mw . msg ( 'geolocating-failed-text' ) ) ; }
function ( ) { if ( "console" in window ) { return function ( msg ) { window . console . log ( 'Processing.js: ' + msg ) ; } ; } return nop ; }
function ( constant , linear , quadratic ) { curContext . useProgram ( programObject3D ) ; uniformf ( "uFalloff3d" , programObject3D , "uFalloff" , [ constant , linear , quadratic ] ) ; }
function ( ) { lightCount = 0 ; curContext . useProgram ( programObject3D ) ; uniformi ( "uLightCount3d" , programObject3D , "uLightCount" , lightCount ) ; }
function ( shine ) { curContext . useProgram ( programObject3D ) ; uniformi ( "uUsingMat3d" , programObject3D , "uUsingMat" , true ) ; uniformf ( "uShininess3d" , programObject3D , "uShininess" , shine ) ; }
function ( ) { p . use3DContext = true ; p . disableContextMenu ( ) ; }
function ( ) { if ( this . level != undefined ) this . level . destroy ( ) ; this . level = null ; }
function ( id ) { for ( var i = 0 ; i < this . charactersData . length ; i ++ ) { if ( this . charactersData [ i ] . id == id ) return this . charactersData [ i ] ; } }
function ( that ) { that . locate ( "password" ) . val ( "" ) ; }
function getQueries ( ) { return [ 'btapp/torrent/all/*/remove/' , 'btapp/torrent/all/*/open_containing/' , 'btapp/torrent/all/*/properties/all/uri/' , 'btapp/torrent/all/*/properties/all/name/' , 'btapp/torrent/all/*/properties/all/eta/' , 'btapp/torrent/all/*/properties/all/size/' , 'btapp/torrent/all/*/properties/all/progress/' , 'btapp/torrent/all/*/properties/all/added_on/' , 'btapp/browseforfiles/' , 'btapp/create/' , 'btapp/settings/' , 'btapp/add/' , 'btapp/events/' , 'btapp/connect_remote/' , 'btapp/stash/' , 'btapp/showview/' ] ; }
function ( str ) { return that . options . epubReaderContainer + '  ' + str ; }
function ( value ) { return balUtilTypes . isObject ( value ) && value . __proto__ === Object . prototype ; }
function ( value ) { return value && typeof value === 'object' ; }
function ( search , reset ) { if ( reset ) this . searchObject = search ; else _ . extend ( this . searchObject , search ) ; }
function ( search , reset ) { console . log ( 'searchdatabase:' , search , reset ) ; this . itemCollection . search ( search , reset ) }
function ( new_default_locale ) { if ( exists ( new_default_locale ) ) { new_default_locale = new_default_locale . toLowerCase ( ) } self . _default_locale = new_default_locale ; }
function ( ) { return ( typeof self . _locale === "undefined" || self . _locale === null ) ? [ self . _default_locale ] : self . _locale ; }
function ( ) { strong . back . putAtPath ( 'de.everything' , 'I am a translated string for locale: de' ) ; strong . default_locale = 'DE' ; expect ( strong . translate ( 'everything' ) ) . toEqual ( 'I am a translated string for locale: de' ) ; }
function ( ) { strong . back . putAtPath ( 'es-mx.everything' , 'I am a translated string for locale: es-mx' ) ; strong . default_locale = 'de' ; strong . locale = 'es-MX' ; expect ( strong . translate ( 'everything' ) ) . toEqual ( 'I am a translated string for locale: es-mx' ) ; }
function ( _ , h , title ) { var slug = grunt . utils . _ . slugify ( title . replace ( /\./g , '-' ) ) ; return h + ' ' + title + ' <a name="' + slug + '" href="#' + slug + '" title="Link to this section">⚑</a>\n' ; }
function ( response ) { $rootScope . $apply ( function ( ) { deferred . resolve ( response ) ; } ) ; }
function ( ) { soundManager_ . Load ( "audio/" + this . name_ . toLowerCase ( ) + "/dead.zzz" ) ; }
function ( ) { return this . GetGame ( ) . GetMatch ( ) ; }
function ( div , i ) { domStyle . set ( div , { "height" : renderData . sheetHeight + "px" } ) ; bgCols . push ( div ) ; }
function ( div , i ) { domStyle . set ( div , { "height" : renderData . sheetHeight + "px" } ) ; bgCols . push ( div ) ; }
function ( str , fn ) { try { fn ( null , $m . parse ( str ) ) ; } catch ( err ) { fn ( err ) ; } }
function ( ) { $$ . fjs . forms . highlightFieldError ( $ ( this ) ) ; }
function ( sHtmlId ) { if ( this . oXhr . readyState != 4 ) document . getElementById ( sHtmlId ) . innerHTML = this . _getLoadImageHtmlTag ( ) ; return this ; }
function ( ) { $ ( 'li' , container ) . removeClass ( 'ms-hover' ) ; $ ( this ) . addClass ( 'ms-hover' ) ; }
function ( ) { $ ( 'li' , selectedUl ) . removeClass ( 'ms-hover' ) ; $ ( this ) . addClass ( 'ms-hover' ) ; }
function ( ) { soundManager_ . PlayOrResume ( this . music_ , true ) ; }
function ( value ) { return invokeInfo . uri . match ( value ) ; }
function ( type ) { return invokeInfo . type . match ( type [ "#text" ] [ 0 ] . replace ( "*" , "" ) ) ; }
function ( ) { window . location = "logout" ; }
function ( ) { window . location = "login" ; }
function ( ) { $ ( '#debug' ) . html ( 'Acceleration vector: (' + this . acceleration . x + ', ' + this . acceleration . y + ')<br/>\     Velocity vector: (' + this . velocity . x + ', ' + this . velocity . y + ')' ) ; }
function ( ) { $ ( '#' + modalId , $context ) . hide ( ) ; $ ( '.jqmOverlay' , $context ) . remove ( ) ; if ( onCloseCallback ) onCloseCallback ( ) ; }
function ( err , res ) { console . log ( 'response status' , res . statusCode ) ; res . on ( 'data' , function ( chunk ) { console . log ( "response body chunk: " + chunk ) ; } ) ; }
function ( ) { if ( wasApplied ) { Class . PrototypeMixin = Ember . Mixin . create ( Class . PrototypeMixin ) ; } wasApplied = false ; }
function ( ) { this . willReopen ( ) ; var PrototypeMixin = this . PrototypeMixin ; PrototypeMixin . reopen . apply ( PrototypeMixin , arguments ) ; return this ; }
function ( obj ) { return obj instanceof this ; }
function ( ) { cp_loop ( ) ; } , function ( ) { return customOn ; }
function pf_main ( ) { obstacleList = getObstacleList ( ) ; particleList = randomDistribution ( NUM_PARTICLES , obstacleList ) ; oldAveParticles = [ ] ; }
function ( method ) { return $ . proxy ( CA . PeerConnection . prototype [ method ] , this ) ; }
function ( ) { var shim = this . _boundingBox . shim ; if ( shim ) { shim . sync ( ) ; } } : function ( ) { }
function ( ) { var shim = this . _boundingBox . shim ; if ( shim ) { shim . sync ( ) ; } } : function ( ) { }
function ( ) { var shim = this . _boundingBox . shim ; if ( shim ) { shim . sync ( ) ; } } : function ( ) { }
function ( ) { this . initialize ( ) ; }
function ( e ) { util . loadLocalFile ( e ) ; }
function ( ) { renderDebugInfo ( $footer_debug_info ) ; $footer_debug_info . show ( ) ; $footer_logo . attr ( 'title' , sakai . api . i18n . getValueForKey ( 'HIDE_DEBUG_INFO' , 'footer' ) ) ; }
function ( e ) { $ ( window ) . trigger ( "close.versions.sakai" ) ; setInserterForViewMode ( ) ; e . preventDefault ( ) ; }
function ( ) { itemsToUpload = [ ] ; existingAdded = [ ] ; itemsUploaded = 0 ; disableAddToQueue ( ) ; renderQueue ( ) ; $ ( '#newaddcontent_container input, #newaddcontent_container textarea' ) . val ( '' ) ; $ ( '.MultiFile-remove' ) . click ( ) ; }
function ( success , data ) { sakai . api . Util . startup ( data ) ; sakai . api . i18n . init ( data ) ; }
function ( data , status ) { $ ( '#taxon_browser' ) . html ( data ) TaxonBrowser . ajaxify ( ) }
function runTest ( ) { allowIndexedDB ( ) ; allowUnlimitedQuota ( ) ; SimpleTest . waitForExplicitFinish ( ) ; testGenerator . next ( ) ; }
function finishTest ( ) { resetUnlimitedQuota ( ) ; resetIndexedDB ( ) ; SimpleTest . executeSoon ( function ( ) { testGenerator . close ( ) ; SimpleTest . finish ( ) ; } ) ; }
function allowIndexedDB ( url ) { addPermission ( "indexedDB" , true , url ) ; }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( b ) { if ( window . jQuery ) b ( jQuery ) , b = jQuery . noop ; "function" === typeof define && define . amd && define . amd . jQuery && define ( "polyfiller" , [ "jquery" ] , b ) }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , style ) { var prop = $ . css ( elem , style ) ; if ( data . text . css ( style ) != prop ) { data . text . css ( style , prop ) ; } }
function ( i , comboname ) { if ( ! webshims . c [ comboname ] ) { webshims . c [ comboname ] = [ ] ; } webshims . c [ comboname ] . push ( name ) ; }
function ( i , comboname ) { if ( ! webshims . c [ comboname ] ) { webshims . c [ comboname ] = [ ] ; } webshims . c [ comboname ] . push ( name ) ; }
function ( s , e ) { return new Array ( e - s ) ; }
function ( s , e ) { return new Array ( e - s ) ; }
function ( units ) { assert . equal ( units . length , 100 ) ; }
function initMenu ( ) { window . menu = Menu ( ) ; window . settings = Settings ( ) ; initGame ( ) ; showMenu ( ) ; }
function draw ( ctx ) { ctx . fillStyle = '#900' ; ctx . font = '100pt "Press Start 2P"' ; ctx . textAlign = 'center' ctx . fillText ( text , x , y ) ; }
function ( ) { this . save ( { completed : ! this . get ( "completed" ) } ) ; }
function ( ) { return this . filter ( function ( todo ) { return todo . get ( 'completed' ) ; } ) ; }
function ( ) { return this . without . apply ( this , this . completed ( ) ) ; }
function ( ) { Todos . each ( this . adcompleted , this ) ; }
function ( ) { return { title : this . input . val ( ) . trim ( ) , order : Todos . nextOrder ( ) , completed : false } ; }
function ( ) { var completed = this . allCheckbox . checked ; Todos . each ( function ( todo ) { todo . save ( { 'completed' : completed } ) ; } ) ; }
function ( req , res ) { client . say ( '#combot' , 'issue callback' ) ; res . send ( ) ; }
f $ ( document . body ) . trigger ( 'setupUI' ) ; }
function ( ) { resetBtn . css ( 'display' , 'inline-block' ) ; stdin . css ( 'height' , height ( phobos ? 25 : 31 ) ) ; hideAllWindows ( ) ; stdinDiv . css ( 'display' , 'block' ) ; stdin . focus ( ) ; }
function ( cb , record , index ) { m_lap_safety_metrics_month = record . get ( 'id' ) ; }
function ( text ) { checkText ( text , url ) ; response ( text , d ) }
function ( ) { this . parent . cancel . apply ( this , arguments ) ; this . search . focus ( ) ; }
function ( e ) { if ( ! this . enabled ) return ; this . clear ( ) ; killEvent ( e ) ; this . close ( ) ; this . triggerChange ( ) ; this . search . focus ( ) ; }
function ( ) { this . container . addClass ( "select2-container-active" ) ; }
function ( ) { this . parent . opening . apply ( this , arguments ) ; this . clearPlaceholder ( ) ; this . resizeSearch ( ) ; this . focusSearch ( ) ; }
function ( ) { mage . locale ( 'fr' ) ; assertEquals ( 'fr' , mage . localize . name ( ) ) ; }
function ( key ) { addOverrides ( arg [ key ] , key ) ; }
function initCustomSelect ( ) { $ ( 'select.chzn-select' ) . chosen ( ) ; }
function onKPIData ( msg , result ) { var currentData = this . getCurrent ( ) ; if ( currentData ) { _ . extend ( currentData , result ) ; model . setCurrent ( currentData ) ; } }
function ( filename , data ) { assert . equal ( typeof filename , 'string' ) ; assert . equal ( typeof data , 'object' ) ; visited = true ; }
function ( req , res ) { res . render ( 'forgot.ejs' , { title : 'Forgot Password' , fullpage : false , email : req . query . email , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( req , res ) { res . render ( 'verify_email_address.ejs' , { title : 'Complete Registration' , fullpage : true , token : req . query . token , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( req , res ) { res . render ( 'test.ejs' , { title : 'Mozilla Persona QUnit Test' , layout : false } ) ; }
function showRegistrationInfo ( info ) { dom . setInner ( "#email" , info . email ) ; if ( info . returnTo ) { dom . setInner ( ".website" , info . returnTo ) ; updateRedirectTimeout ( ) ; dom . show ( ".siteinfo" ) ; } }
function ( ) { dom . fireEvent ( window , "resize" ) ; }
function onSubmit ( ) { if ( ! dom . hasClass ( "body" , "submit_disabled" ) && this . validate ( ) ) { this . submit ( ) ; } return false ; }
function ( options ) { var self = this ; self . options = options || { } ; self . bind ( "form" , "submit" , cancelEvent ( onSubmit ) ) ; }
function ( err , kp ) { keypair = kp ; trans . complete ( keypair . publicKey . serialize ( ) ) ; }
function ( template , vars ) { renderer . render ( target + " .contents" , template , vars ) ; dom . addClass ( BODY , className ) ; dom . fireEvent ( window , "resize" ) ; this . visible = true ; }
function ( ) { dom . removeClass ( BODY , className ) ; dom . fireEvent ( window , "resize" ) ; this . visible = false ; }
function storeEmails ( emails ) { storage . emails = JSON . stringify ( emails ) ; }
function clear ( ) { storage . removeItem ( "emails" ) ; storage . removeItem ( "siteInfo" ) ; storage . removeItem ( "managePage" ) ; }
function setReturnTo ( returnToURL ) { storage . returnTo = JSON . stringify ( { at : new Date ( ) . toString ( ) , url : returnToURL } ) ; }
function testCannotConfirm ( ) { testHelpers . testErrorVisible ( ) ; }
function ( selector , className , msg ) { ok ( $ ( selector ) . hasClass ( className ) , msg || selector + " has className: " + className ) ; }
function ( oOption ) { if ( typeof oOption === "object" ) { return oOption . get ( "selected" ) ; } }
function ( oOpt ) { aReturn . include ( { option : oOpt , "value" : oOpt . get ( "value" ) , "text" : oOpt . get ( "text" ) } ) ; }
function ( oLI ) { if ( oLI . hasClass ( this . oCss . s ) ) { oLI . addClass ( this . oCss . c ) ; } }
function ( ) { this . element . changeImage ( 'gray.png' ) ; this . element . eye . hide ( ) ; this . color = 4 ; this . element . color = 4 ; this . type = 'cadaver' ; }
function ( list ) { var data = JSON . stringify ( list ) ; res . writeHead ( 200 , { 'Content-Type' : 'text/plain' } ) ; res . end ( data ) ; }
function remove_a_dev ( dev ) { var devToBeRemoved = $ ( dev ) . siblings ( ".dev_name" ) . text ( ) ; removeDevFromDevNamesCookie ( devToBeRemoved ) ; removeDevFromPairCookie ( devToBeRemoved ) ; location . reload ( ) ; }
function volumeTimeout ( ) { callback ( ) ; this . _timer = setInterval ( function volumeInterval ( ) { callback ( ) ; } , this . kKeyRepeatRate ) ; }
function ( view , item ) { if ( item . xtype == "location-show" ) { this . getLocations ( ) . deselectAll ( ) ; this . showEditButton ( ) ; } else { this . hideEditButton ( ) ; } }
function ( ) { options . logger . log ( "assedDownload timeout...retry" ) ; fetchFileAndFinish ( ) ; }
function ( ) { cacheHandler . insertFileBuffer ( url , buffer , mimeType , function ( err ) { if ( ! err ) { options . eventBus . emit ( 'newAsset' , url , buffer , mimeType ) ; downloadCount ++ ; } } ) ; }
function ( filename , collection ) { collection . update ( { "filename" : filename } , { $inc : { "metadata.accessCount" : 1 } , $set : { "metadata.access" : new Date ( ) } } ) ; }
function ( ) { options . logger . error ( "aborting non asset request due to timeout" ) ; that . proxy_request . abort ( ) ; that . response . end ( ) ; }
function ( err ) { if ( err ) { options . logger . error ( 'cacheInsert ' + url , err ) ; } else { cacheSize ++ ; updateStats ( ) ; } }
function ( err , url ) { if ( err ) { options . logger . error ( 'getAndRemoveItem' , err ) return cb ( null ) ; } else { deliverToClients ( url ) ; return cb ( null ) ; } }
function ( index , elem ) { elem . contentEditable = false ; return widget . _initDraggable ( elem , editable ) ; }
function ( ) { var v = new VIE ( ) ; ok ( v . LiteralCollection ) ; equal ( typeof v . LiteralCollection . toString , "function" ) ; }
function ( ) { $ ( '.after-tour' ) . fadeIn ( 2000 ) ; notifier . destroyAll ( 'section' , 'tour' ) ; themeNotifier . destroyAll ( true ) ; }
function ( ) { notifier . notify ( { modal : true , screenOpacity : .7 , message : 'Features useful event mechanism with great API' , type : 'error' , section : 'tour' , hideOnClick : true , position : 'center' , ms : 3500 } ) ; }
function ( ) { view [ handler ] . apply ( view , arguments ) ; }
function ( ) { return v . apply ( { scope : this , supr : orig , module : m } , arguments ) ; }
function ( ) { this . scope . _loggerNotifierId = ++ this . module . _notifiers ; this . module . _log ( 'initializing notifier #' + this . scope . _loggerNotifierId ) ; return this . supr . apply ( this . scope , arguments ) ; }
function ( event , ui ) { if ( typeof ui . options . active == "number" ) $ ( '#search-section-header' ) . text ( "Hide Search Pane" ) ; else $ ( '#search-section-header' ) . text ( "Show Search Pane" ) ; }
function ( ) { var script = builder . io . loadNewScriptForSuite ( ) ; if ( script ) { builder . suite . addScript ( script ) ; builder . gui . menu . updateRunSuiteOnRC ( ) ; builder . stepdisplay . update ( ) ; } }
function generate ( lessObj , opts ) { dist = "" ; depth = 0 ; makeLessSrc ( lessObj , opts ) ; return dist ; }
function ( err , app ) { cb ( app ) ; }
function ( err , me ) { cb ( me ) ; }
function ( ) { jsHintCheck ( "dummyFile.js" , "hasOwnProperty = 0" ) ; }
function ( ) { jsHintCheck ( "dummyFile.js" , "var foo = 0;" ) ; }
function ( ) { updateToGpsForm ( 'Acquiring Latitude...' , 'Acquiring Longitude...' , 'Acquiring Timestamp...' , 'Acquiring Timestamp...' ) ; requestGeoLocation ( ) ; }
function onError ( err ) { updateToGpsForm ( 'Err' , 'Err' , 'Err' , 'Err' ) ; Ext . Msg . alert ( 'Error' , 'Failed when requesting GEO Location.' + '\n' + ' code: ' + err . code + '\n' + 'msg: ' + err . message , Ext . emptyFn ) ; }
function ( err , data ) { if ( err ) throwError ( err ) ; var match ; while ( ( match = regexCDN . exec ( data ) ) ) { results . push ( match [ 1 ] ) ; } next ( ) ; }
function ( ) { renderDebugInfo ( $footer_debug_info ) ; $footer_debug_info . show ( ) ; $footer_logo . attr ( 'title' , sakai . api . i18n . getValueForKey ( 'HIDE_DEBUG_INFO' , 'footer' ) ) ; }
f var _iterate = 'j' + _counter ++ ; return '<% for(var ' + _iterate + '=' + start + ';' + _iterate + '<' + end + ';' + _iterate + '++) {{' + 'var ' + _name + '=' + _iterate + ';' + ' %>' ; } ) ;
function ( ) { var a = [ this ] . concat ( sl ( arguments ) ) , t = a . pop ( ) return t . chain ( a ) ; }
function ( m ) { var a = typeof m == "object" ? m : arguments ; return this . replace ( /\{(\w+)\}/g , function ( _ , i ) { return a [ i ] } ) ; }
function ( ) { var t = + this ; return [ t >>> 24 , ( t >>> 16 ) & 0xFF , ( t >>> 8 ) & 0xFF , t & 0xFF ] . join ( "." ) ; }
function ( ) { return '<?xml version="' + t . ver + '" encoding="' + t . enc + '"?>' + t . childs . join ( "" ) + ( t . str || "" ) ; }
function ( name , attr ) { var t = this ; t . name = name ; t . attr = attr || { } ; t . childs = [ ] ; }
function ( str ) { var attr = { } ; str . replace ( /([^= ]+)=(?:'((?:[^'\\]|\\.)*)'|"((?:[^"\\]|\\.)*)"|(\w+))/g , function ( _ , name , a , b , c ) { attr [ name ] = a || b || c } ) ; return attr ; }
function ( key , val ) { this . attr [ key ] = val ; return this ; }
function ( ) { var t = this ; t . up && t . up . childs . splice ( t . id , 1 ) ; return t ; }
function ( str ) { this . childs . push ( str ) ; return this ; }
function Cookie ( n ) { return ( n = ( "; " + document . cookie ) . split ( "; " + n + "=" ) [ 1 ] ) ? unescape ( n . split ( ";" ) [ 0 ] ) : "" ; }
function ( n ) { return Cookie . set ( n , "" , - 1 ) ; }
function ( s , i , a ) { return i == a . lastIndexOf ( s ) }
function ( ) { var t = + this return [ t >>> 24 , ( t >>> 16 ) & 0xFF , ( t >>> 8 ) & 0xFF , t & 0xFF ] . join ( "." ) }
function p2 ( n ) { return n > 9 ? n : "0" + n }
function ( ) { return ( new Date ( this . getFullYear ( ) , this . getMonth ( ) + 1 , 0 ) ) . getDate ( ) }
function ( el , ev , fn ) { var _fn = cacheEvent ( el , ev , fn , fn ) ev == "mousewheel" && el . addEventListener ( "DOMMouseScroll" , _fn , false ) el . addEventListener ( ev , _fn , false ) return Event }
function ( e ) { "stopPropagation" in e && e . stopPropagation ( ) "preventDefault" in e && e . preventDefault ( ) e . cancelBubble = e . cancel = true return e . returnValue = false }
function ( e ) { if ( "changedTouches" in e ) e = e . changedTouches [ 0 ] return e . pageX || e . clientX + d . body . scrollLeft || 0 }
function ( e ) { if ( "changedTouches" in e ) e = e . changedTouches [ 0 ] return e . pageY || e . clientY + d . body . scrollTop || 0 }
function ( ) { var geo = qx . bom . GeoLocation . getInstance ( ) ; geo . addListener ( "position" , this . _onGeolocationSuccess , this ) geo . addListener ( "error" , this . _onGeolocationError , this ) ; }
function ( ) { return "text" ; }
function ( ) { self . _pasteMetaKeyPressed = e . metaKey ; }
function ( calledByError ) { self . parent . parentNode . removeChild ( self . parent ) ; self . hidden = true ; }
function ( ) { return [ elm . val ( ) ] ; }
function ( v , inst ) { input . val ( v ) ; elm . val ( inst . values [ 0 ] ) . trigger ( 'change' ) ; }
function ( v , inst ) { if ( s . display == 'inline' ) { input . val ( v ) ; elm . val ( inst . temp [ 0 ] ) . trigger ( 'change' ) ; } }
function baseUrl ( ) { var href = window . location . href . split ( '/' ) ; return href [ 0 ] + '//' + href [ 2 ] + '/' ; }
function ( json ) { var latest = json . data [ 0 ] ; cb ( latest ) ; }
function ( json ) { var latest = json . data [ 0 ] ; cb ( latest ) ; }
function ( ) { _open ( "opening" , 'local' , request ) }
function ( ) { if ( ! _abordingConnection ) { connector . signal ( "close" ) ; connector . close ( ) ; } }
function propagateMessageEvent ( context ) { storageService . signal ( "message" , context ) ; }
function _pushLocal ( message ) { _localStorageService . send ( message ) ; }
function ( offset , line , column , t , ws ) { return t + ws ; }
function ( offset , line , column , t , e , d ) { return { raw : t + e . raw + d , expr : e } }
function ( offset , line , column , ws , t , b , d ) { return { block : b , raw : t + b . raw + d } ; }
function ( offset , line , column , ws , t , b , d ) { return { block : b , raw : ws + t + b . raw + d } ; }
function ( offset , line , column , ws , t , b , d ) { return { cases : b . cases , 'else' : b [ 'else' ] , raw : ws + t + b . raw + d } ; }
function ( offset , line , column , ws , t , b , d ) { return { block : b , raw : ws + t + b . raw + d } ; }
function ( e ) { return e [ 0 ] + e [ 1 ] . raw ; }
function ( obj , defaults ) { for ( var prop in defaults ) { if ( obj [ prop ] == null ) obj [ prop ] = defaults [ prop ] ; } return obj ; }
function ( ) { this . _currentX = - this . _step * ( -- this . _index ) ; this . _correct ( ) ; }
function ( ) { $ ( this ) . next ( ) . toggle ( 350 ) ; return false ; }
function ( ) { var dirs ; dirs = filename . split ( '/' ) ; this . global . filename = '' ; return this . next ( dirs ) ; }
function ( err ) { if ( err == null ) { info ( "write file: " + ( String ( this . global . filename ) . bold ) ) ; } return this . next ( ) ; }
function ( matched , $1 , $2 , offset , source ) { if ( $2 != null ) { return $2 ; } else { return '' ; } }
function ( file ) { this . local . path = getFilepath ( file , opts . input ) ; return fs . readFile ( file , 'utf8' , this . next ) ; }
function ( err , datas ) { }
function ( date ) { if ( date !== '' ) { return moment ( date ) . format ( "YY/MM/DD ddd HH:mm" ) ; } else { return '' ; } }
function ( data ) { socket . emit ( 'redmineExtract::getIssues::response' , data ) ; }
function ( ev ) { view . bind ( Events [ ev ] , thisHandler [ ev ] ) ; }
function ( ) { var events = [ 'dragStart' , 'dragMove' , 'dragEnd' ] ; var thisHandler = this ; events . forEach ( function ( ev ) { view . bind ( Events [ ev ] , thisHandler [ ev ] ) ; } ) ; }
function ( event ) { $this . addFragment ( _viewPortItem ) ; var setScroller = $this . scrollToElement ( _viewPortItem ) ; }
function ( event ) { if ( event . code == 13 ) { this . fireEvent ( 'click' ) ; } }
function ( ) { moveNavbar ( $ ( this ) . data ( 'navbar' ) ) ; }
function ( num ) { var cell = this . cells [ num ] cell . marked = false cell . classes = '' }
function ( ) { return [ "Expected object to have the '" + className + "' CSS class, but it did not" , "Expected object not to have the '" + className + "' CSS class, but it did" ] ; }
function ( ) { return [ "Expected page to have '" + content + "' within its content, but it did not" , "Expected page not to have '" + content + "' within its content, but it did" ] ; }
function defineMemoizingGetter ( obj , name , getter ) { Object . defineProperty ( obj , name , { get : getter , configurable : true , enumerable : false } ) ; }
function ( ) { signalHandle . stop ( ) ; me . unset ( "counts" , uuid , [ "count" ] ) ; me . flush ( ) ; }
function getItem ( nodeList , index ) { return "item" in nodeList ? nodeList . item ( index ) : nodeList [ index ] ; }
function ( ) { pushPopUi . dismissStartup ( true ) ; }
function ( ) { pushPopUi . dismissStartup ( true ) ; }
function ( id ) { builder . plugins . downloadingCount -- ; if ( builder . plugins . downloadingCount == 0 ) { jQuery ( '#plugins-downloading' ) . hide ( ) ; } builder . views . plugins . refresh ( ) ; }
function ( e ) { if ( this . highlit_element ) { this . resetBorder ( { target : this . highlit_element } ) ; } this . highlit_element = e . target ; e . target . style . outline = '1px solid #003366' ; }
function ( doc ) { if ( bridge . docLoadListeners [ doc . defaultView ] ) { bridge . docLoadListeners [ doc . defaultView ] ( ) ; } }
function ( ) { $ ( "#bigfish" ) . empty ( ) ; delete tributary . nodes ; tributary . nodes = [ ] ; tributary . init ( tributary . g ) ; tributary . execute ( ) ; }
function ( ) { tributary . clear ( ) ; delete tributary . nodes ; tributary . nodes = [ ] ; tributary . init ( tributary . ctx ) ; tributary . execute ( ) ; }
function ( ) { return self . _mcversion ; }
function ( str ) { var parts = str . match ( /^([0-9\-: ]+) \[INFO\] Starting minecraft server version ([\d\.]+)$/ ) ; if ( parts ) { this . _mcversion = parts [ 2 ] ; } }
function ( ) { _hideQtip ( ) ; _remove ( ) ; }
function ( ) { console . log ( "drag start." ) ; _hideQtip ( ) ; }
function ( e , data ) { treecontainer . treewrapper ( "renameNode" , data . nid , data . title ) ; _getDataAndCreateTplView ( data ) ; edit . tpledit ( "removeTplEdit" ) ; }
function ( e , data ) { _getDataAndCreateTplView ( data ) ; edit . tpledit ( "removeTplEdit" ) ; }
function ( ) { select = $ ( "#select-choice-menu-focus-test" ) ; menu = $ ( "#select-choice-menu-focus-test-menu" ) ; button = select . find ( "a" ) ; button . trigger ( "click" ) ; }
function ( ) { this . NewTilesHere = true ; this . hideStatusPanel ( ) ; }
function ( ) { for ( b = 0 ; b < infoBubbles . length ; b ++ ) { infoBubbles [ b ] . close ( ) ; } }
function ( ) { var l = window . L ; window . L = originalL ; return l ; }
function ( ) { var validator = jQuery ( "#dataElementForm" ) . validate ( { event : "blur" , rules : { "name" : { required : true } } } ) ; }
function ( ) { jQuery ( "#form :checkbox:not(:checked)" ) . attr ( "checked" , true ) ; }
function IngredientFactory ( ) { }
function ( ) { orderSummaryUI = $ ( '#inGameMenu' ) ; orderFailUI = $ ( '#failDialog' ) ; orderFailUI . click ( function ( ) { } ) ; }
function ( payload ) { if ( payload . authResponse != null ) { cache . userID = payload . authResponse . userID ; getAttendees ( function ( ) { drawPictures ( ) ; } ) ; } }
function ( ) { FB . init ( { appId : appId , channelUrl : channelUrl , status : false , cookie : true , xfbml : true } ) ; FB . getLoginStatus ( onStatusChange ) ; cache . attendees = [ ] ; }
function d3_collapse ( s ) { return s . replace ( /^\s+|\s+$/g , "" ) . replace ( /\s+/g , " " ) ; }
function ( ) { if ( req . readyState === 4 ) { var s = req . status ; callback ( ! s && req . response || s >= 200 && s < 300 || s === 304 ? req : null ) ; } }
function ( s , n ) { return Sizzle ( s , n ) [ 0 ] || null ; }
function ( d ) { return d / pow ( f ( log ( d ) + e ) ) <= k ? format ( d ) : "" ; }
function ( d ) { if ( typeof origin === "function" ) arc . source ( origin . apply ( this , arguments ) ) ; return clipType ( d ) || null ; }
function ( x ) { if ( ! arguments . length ) return origin ; origin = x ; if ( typeof origin !== "function" ) arc . source ( origin ) ; return circle ; }
function ( _ ) { if ( ! arguments . length ) return precision / d3_geo_radians ; precision = _ * d3_geo_radians ; return greatArc ; }
function ( string ) { var date = new Date ( string ) ; return isNaN ( date ) ? null : date ; }
function ( ) { return this . htmlTemplate . match ( /#\d+/g ) . length ; }
function ( ctrlSeq , tagName , attrs ) { _super . init . call ( this , ctrlSeq , '<' + tagName + ' ' + attrs + '>#0</' + tagName + '>' ) ; }
function ( ctrlSeq , tag , text ) { _super . init . call ( this , ctrlSeq , '<' + tag + ' class="non-leaf">#0</' + tag + '>' , [ text ] ) ; }
function ( _ , _super ) { _ . ctrlSeq = '\\frac' ; _ . htmlTemplate = '<span class="fraction non-leaf">' + '<span class="numerator">#0</span>' + '<span class="denominator">#1</span>' + '<span style="display:inline-block;width:0">&nbsp;</span>' + '</span>' ; _ . textTemplate = [ '(' , '/' , ')' ] ; }
function makeTextBlock ( latex , tagName , attrs ) { return P ( TextBlock , { ctrlSeq : latex , htmlTemplate : '<' + tagName + ' ' + attrs + '>#0</' + tagName + '>' } ) ; }
function enableUpload ( enable ) { if ( enable ) { if ( $ ( '.download-panel' ) . is ( ':hidden' ) ) { clearFileList ( ) ; $ ( '.download-panel' ) . show ( ) ; } } }
function clearFileList ( ) { $ ( '.upload-file-queue tr' ) . remove ( ) ; }
function ( ) { $ ( '.download-panel-close-icon' ) . hide ( ) ; $ ( '.download-panel' ) . hide ( ) ; clearFileList ( ) ; }
function before ( ) { if ( page > 0 ) { page -- ; drawing ( page * 12 , 0 ) ; } else { drawing ( 0 , 0 ) ; } }
function next ( ) { if ( page < 3 ) { page ++ ; drawing ( page * 12 , 0 ) ; } else { page -- ; } }
function ( ) { DefaultMode . prototype . constructor . call ( this ) ; }
function ( ) { if ( ! that . db ) { that . consoleOutput = true ; } else { console . log ( 'waited 500' ) ; that . _reLog ( param_logMessage , param_cb ) ; } }
function ( ) { if ( this . testcases . length == 1 || this . suiteResult . timeoutOccured ) { this . emit ( 'finished' , this . suiteResult ) ; } }
function ( ) { cb ( null , k ) ; }
function subtract ( param , cb , global ) { var i = param ; var j = i - 1 ; cb ( null , j ) ; }
function ( suite , test ) { var msgString = 'Testsuite ' + param_suiteName + '#' + suite + ' timed out in testcase ' + test ; process . send ( { type : 'timeout' , msg : msgString } ) ; }
function ( config , initByShare ) { initializedBySharing = initByShare ; soundManager . setup ( { onready : function ( ) { loadSounds ( config ) ; } } ) ; return AwesomeSounds ; }
function initMenu ( ) { window . menu = Menu ( ) ; initGame ( ) ; showMenu ( ) ; }
function ( subspec ) { if ( subspec !== 'collision' ) { location . push ( new Tile ( subspec , e , i ) ) ; } else { location . collision = true ; } }
function postProcess ( ) { globalWords = '' ; wordsPos = 0 ; $ ( '#qs' ) . html ( '' ) ; $ ( '#scroll' ) . show ( ) ; $ ( '#scroll2' ) . hide ( ) ; }
function ( ) { $ ( '#prompt' ) . val ( 'continue' ) ; $ ( '#command' ) . submit ( ) ; }
function ( event , ui ) { reserve_needed ( $ ( this ) ) }
function ( ) { return this . _rule ( "func" , false , [ true ] , null , this [ "func" ] ) ; }
function $number ( ) { var n ; return this . _skip ( ) && ( n = this . _getIntermediate ( ) , true ) && this . _exec ( n ) ; }
function loadFile ( name ) { return fs . readFileSync ( path . resolve ( __dirname , '../files' , name + ( path . extname ( name ) ? '' : '.ometajs' ) ) ) . toString ( ) }
function ( fileName ) { return path . basename ( fileName ) ; }
function ( d ) { return margin . top + y ( d . value ) ; }
function ( d ) { return yAxisHeight ( ) - y ( d . value ) ; }
function maxY ( ) { return chart . group ( ) . top ( 1 ) [ 0 ] . value ; }
function ( d ) { return margin . top + y ( d . value ) ; }
function ( d ) { return yAxisHeight ( ) - y ( d . value ) ; }
function maxY ( ) { return chart . group ( ) . top ( 1 ) [ 0 ] . value ; }
function ( manager , config ) { if ( ! ( manager && config ) ) { return this ; } this . manager = manager ; this . parentNode = config . rootNode ; this . build ( ) ; }
function ( domEvt ) { this . focus ( ) ; this . _mouseOver = true ; this . _mousePressed = true ; this . _updateState ( ) ; }
function ( ) { return this . _data . sender ; }
function ( resp ) { Y . log ( 'rpc failure!' , 'warn' , NAME ) ; adapter . error ( resp . html ) ; }
function ( callback ) { window . setTimeout ( callback , 1000 / 60 ) ; }
function ( ) { return window . requestAnimationFrame || window . webkitRequestAnimationFrame || window . mozRequestAnimationFrame || window . oRequestAnimationFrame || window . msRequestAnimationFrame || function ( callback ) { window . setTimeout ( callback , 1000 / 60 ) ; } ; }
function Class ( ) { }
function ( test ) { test . expect ( 1 ) ; var expectA = 'define("hello",[],function(){return"hello"}),define("world",[],function(){return"world"}),require(["hello","world"],function(e,t){console.log(e,t)}),define("project",function(){})' ; var resultA = grunt . file . read ( "fixtures/output/requirejs.js" ) ; test . equal ( expectA , resultA , "should optimize javascript modules with requireJS" ) ; test . done ( ) ; }
function ( ) { this . _submit_btn . attr ( 'disabled' , false ) ; this . _cancel_btn . attr ( 'disabled' , false ) ; }
function ( ) { this . _submit_btn . attr ( 'disabled' , true ) ; this . _cancel_btn . attr ( 'disabled' , true ) ; }
function ( e ) { remaining -- ; if ( remaining === 0 ) { callback . call ( context , deleted ) ; } }
function ( e ) { remaining -- ; if ( remaining === 0 ) { callback . call ( context , deleted ) ; } }
function ( ) { dm4c . load_stylesheet ( "/de.deepamehta.iconpicker/style/iconpicker.css" ) dm4c . add_listener ( "init" , function ( ) { dm4c . ui . dialog ( "iconpicker-dialog" , "Choose Icon" ) } ) }
function ( renderer_uri , renderer ) { if ( page_renderers [ renderer_uri ] ) { throw "PluginManagerError: page renderer URI clash with \"" + renderer_uri + "\"" } page_renderers [ renderer_uri ] = renderer track_load_state ( "page renderer \"" + renderer_uri + "\"" ) ; }
function ( css_path ) { css_stylesheets . push ( css_path ) }
function ( cb ) { var self = this ; self . withLock ( function ( done ) { self . gitExec ( [ 'remote' , 'update' ] , done ) ; } , cb ) ; }
function ( path ) { changes . push ( { type : 'delete' , before : { path : path , sha1 : ls1 . byPath [ path ] } , after : { } } ) ; }
function ( ) { sendCopyData ( null , "D2Bot #" , 0 , "requestGameInfo" ) ; delay ( 500 ) ; }
function ( message , con ) { var tabid = con . sender . tab . id var path = 'icons/icon16.png' chrome . pageAction . show ( tabid ) chrome . pageAction . setIcon ( { tabId : tabid , path : path } ) }
function ( jqXHR , textStatus , errorThrown ) { $ ( ".loading" ) . remove ( ) ; $ ( "#nightly_crash_trends_graph" ) . empty ( ) . append ( errorThrown ) ; }
function ( ) { $ ( "#" + previousPathID ) . fadeIn ( "slow" , callback ) ; jsPlumb . repaintEverything ( ) ; }
function ( ) { $ ( "#" + nextPathID ) . fadeIn ( "slow" , callback ) ; jsPlumb . repaintEverything ( ) ; }
function ( ) { return compile ( options , cb ) ; }
function ( ) { this . select ( ) ; }
function ( ) { this . select ( ) ; }
function set_suggests ( hvlist ) { $ ( 'div.hidden.suggested_items' ) . empty ( ) ; $ . each ( hvlist , function ( i , hv ) { $ ( 'div.hidden.suggested_items' ) . append ( hv ) ; } ) ; }
function suggest_foot ( label ) { label = label ? label : 'その他のハイパーバイザ' ; return $ ( '<option />' ) . val ( 'OTHER' ) . text ( label ) ; }
function suggest_ip ( dom0_ip , exclude , cb ) { var params = { 'ip' : dom0_ip , 'ex[]' : exclude } ; $ . ajax ( { url : '/ybz/ipaddress/suggest.json' , data : params , success : cb } ) ; }
function ( ) { var a = localStorage . getItem ( "DC2-Username" ) ; if ( a != null ) { return a ; } }
function ( ) { var a = localStorage . getItem ( "DC2-Password" ) ; if ( a != null ) { return a ; } }
function ( ) { input . removeClass ( 'hidden-accessible' ) . click ( ) ; input . addClass ( 'hidden-accessible' ) ; }
function ( dialog ) { $ . modal . close ( ) ; }
function ( obj ) { filtered . push ( whitelistFilter ( obj , [ 'event_stream' , 'lang' , 'screen_size' , 'sample_rate' , 'timestamp' ] ) ) ; }
function ( content ) { var matches = content . match ( /\n/ ) ; var newLineCount = matches === null ? 1 : matches . length + 1 ; return newLineCount ; }
function ( e ) { return "" + ( e . attr ( 'data-chapter' ) ) + "/" + ( e . attr ( 'data-subchapter' ) ) + "/" + ( e . attr ( 'rel' ) ) ; }
function ( e ) { return "" + ( e . attr ( 'data-chapter' ) ) + "/" + ( e . attr ( 'data-subchapter' ) ) + "/" + ( e . attr ( 'rel' ) ) ; }
function ( e ) { return "" + ( e . attr ( 'data-chapter' ) ) + "/" + ( e . attr ( 'data-subchapter' ) ) + "/" + ( e . attr ( 'rel' ) ) ; }
function ( err , collection ) { if ( err ) { self . conn . emit ( 'error' , err ) ; } else { self . collection = collection ; Collection . prototype . onOpen . call ( self ) ; } }
function ( error ) { self . emit ( 'error' , error ) ; }
function ( e ) { return ( e . fileName || sourceIds [ e . sourceId ] ) + ':' + e . line + ' ' + e ; }
function ( el ) { switch ( el . type ) { case 'text' : case 'textarea' : case 'password' : case 'select-one' : case 'radio' : return el . value ; case 'checkbox' : return el . checked ; } }
function ( el , value ) { if ( el . type === 'radio' ) { return el . checked = el . value === value ; } else { return el . checked = ! ! value ; } }
function ( el , value ) { if ( el . type === 'radio' ) { return el . checked = el . value !== value ; } else { return el . checked = ! value ; } }
function ( collection ) { console . log ( "fetch was succesfull" ) ; storiesListView . render ( ) ; }
function ( ) { var css_class = this ; if ( class_str . length > 0 ) { class_str += " " ; } class_str += dt . cls ( css_class ) ; }
function onPanning ( touch ) { lastMove = + new Date ( ) ; oldPoint = nowPoint ; nowPoint = { x : touch . clientX , y : touch . clientY } ; }
function ( ) { $ ( "[data-enable=tooltip]" ) . tooltip ( ) ; }
function ( req , res ) { this . showView ( 'gantt' , { model : this . get ( 'currentProject' ) } ) ; }
function ( ) { this . data = { } ; }
function ( e ) { Y . log ( this . get ( 'model' ) . get ( 'team' ) . toJSON ( ) ) ; }
function ( e ) { Y . log ( Y . JSON . stringify ( this . get ( 'model' ) . toJSON ( ) ) ) ; }
function ( ) { var addr = app . address ( ) ; console . log ( 'app listening on http://' + addr . address + ':' + addr . port ) ; }
function ( ) { var mark = this . tl . timeMarkerPos ; return mark > this . cue . startTime && mark < this . cue . endTime ; }
function ( t ) { return this . cue . startTime = t ; }
function ( t ) { return this . cue . endTime = t ; }
function ( ) { return this . length * this . slider . x / this . view . width ; }
function timelineView ( tl ) { this . tl = tl ; this . width = 0 ; this . startPixel = 0 ; this . startTime = 0 ; this . length = 5 ; }
function ( ) { next ( name ) ; }
function ( response ) { Mojo . Log . error ( JSON . stringify ( response ) ) if ( response . errorCode ) { this . controller . errorDialog ( response . errorText || "" ) ; } else { this . enableControls ( ) ; } }
function ( name , ev ) { Mojo . Log . info ( "Changed pref: " + name + " to " + ev ) ; this . prefs [ name ] = ev . value ; }
function ( ) { $ ( '.ToggleFlyout' ) . removeClass ( 'Open' ) . closest ( '.Item' ) . removeClass ( 'Open' ) ; $ ( '.Flyout' ) . hide ( ) ; }
function ( ) { if ( lastOpen ) { $ ( '.Flyout' , lastOpen ) . hide ( ) ; $ ( lastOpen ) . removeClass ( 'Open' ) . closest ( '.Item' ) . removeClass ( 'Open' ) ; } }
function ( ) { var event = page . evaluate ( function ( ) { return window . loggedEvent . keydown ; } ) ; expect ( event . which ) . toEqual ( phantom . keys . A ) ; }
function ( ) { var event = page . evaluate ( function ( ) { return window . loggedEvent . keyup ; } ) ; expect ( event . which ) . toEqual ( phantom . keys . A ) ; }
function ( ) { var event = page . evaluate ( function ( ) { return window . loggedEvent . keypress ; } ) ; expect ( event . which ) . toEqual ( phantom . keys . A ) ; }
function ( filepath ) { return 'docs/' + path . basename ( filepath ) . replace ( '.' , '_' ) + '.html' ; }
function ( router , event ) { router . transitionTo ( 'items.index' ) ; }
function ( router , event ) { router . transitionTo ( 'item' , { item_id : event . context . id } ) ; }
function ( ) { if ( cb ) { cb ( ) ; } this . updateAttribute ( 'votes' , this . votes + 1 ) ; } ) , { id : this . id }
function ( $input ) { updatePicturePreview ( "/static/images/ajax-loader.gif" ) ; $options = { } ; $options . filename = $input . val ( ) . split ( /[\/\\]/ ) . pop ( ) ; return $options ; }
function ( channel_name ) { var channel = new WebSocketRails . Channel ( channel_name , that ) ; channels [ channel_name ] = channel ; return channel ; }
function ( channel , event_name , message ) { var channel = channels [ channel ] ; if ( typeof channel == 'undefined' ) return ; channel . dispatch ( event_name , message ) ; }
function ( error , result ) { if ( ! error ) { test . ok ( result ) ; } test . done ( ) ; }
function ( error , result ) { if ( ! error ) { test . ok ( result ) ; } test . done ( ) ; }
function ( ) { console . log ( "inserted" ) callback ( null , tracks ) ; }
function ( ) { this . _disposeObjects ( "_mapUri" , "_map" , "_myPositionMarker" , "_markers" , "_showMyPositionButton" , "_mapnikLayer" ) ; }
function ( ) { prettyCamel . should . throw ( ) ; }
function ( ) { var output ; output = prettyCamel ( ".[]&^" ) ; return output . should . equal ( ".[]&^" ) ; }
function ( req , res , next ) { if ( req . session . user ) { next ( ) ; } else { res . send ( "<b>Not logged in, please enter your andrew_id</b>" , 401 ) ; } }
function ( index ) { if ( this . selected ) { $listItems . eq ( index ) . addClass ( 'selected' ) ; $currentSelect . html ( this . value ) ; } }
function ( ) { error = W3S . Core . Ajax . fieldValidation ( $ ( this ) , conf . tags ) ; if ( error ) { $ ( this ) . addClass ( conf . errCls ) ; return false ; } }
function ( ) { this . notify ( 'pre_destroy' ) ; this . destroyContained ( ) ; this . app_events && this . unsubscribe ( this . app_events ) ; this . remove ( ) . _finally ( ) ; return this ; }
function ( topic , handler ) { var _h = handler . bind ( this ) ; this . app_events [ topic ] = _h ; uijet . subscribe ( topic , _h ) ; return this ; }
function ( tx , err ) { console . error ( "error for " + stmt ) ; return console . error ( err ) ; }
function ( ) { return this . _datatype !== 'ADT' ? arguments [ 0 ] : construct ( this . _tag , arguments ) ; }
function ( ) { return this . _datatype !== 'ADT' ? arguments [ 0 ] : construct ( this . _tag , arguments ) ; }
function ( ) { this . _currentX = - this . _step * ( -- this . _index ) ; this . _correct ( ) ; }
function ( ) { this . invalidatePages ( ) ; this . update ( this . getScrollTop ( ) ) ; this . stabilize ( ) ; if ( enyo . platform . android === 4 ) { this . twiddle ( ) ; } }
function ( line , log ) { line = this . format ( line , log ) ; if ( this . connected ) { this . connection . write ( line ) ; } else this . bufferLine ( line ) ; }
function longPressHandler ( ) { timer = null ; if ( ! LockScreen . locked && ! CardsView . cardSwitcherIsShown ( ) ) { CardsView . showCardSwitcher ( ) ; } }
function attempt ( aPath ) { if ( foundPath ) { return } if ( fs . existsSync ( aPath ) ) { foundPath = aPath } }
function ( err , scripts ) { should . not . exist ( err ) ; scripts . should . match ( /<script title=\"\/test2\.js\" src=\"\/test2\.js\"><\/script>\r\n<script title=\"\/test1\.js\" src=\"\/test1\.js\">/ ) ; done ( ) ; }
function ( err , styles ) { should . not . exist ( err ) ; styles . should . match ( /<link rel=\"stylesheet\" title=\"\/test2\.css\" href=\"\/test2\.css\"\/>\r\n<link rel=\"stylesheet\" title=\"\/test1\.css\" href=\"\/test1\.css\"\/>/ ) ; done ( ) ; }
function ( ) { var req = calipsoHelper . requests . testUser , output = table . render ( req , table1 ) ; output . should . match ( /my-table/ ) ; output . should . match ( /\/data/ ) ; }
function ( key ) { var enableCache = this . options . enableCacheBuffer ; return enableCache ? this . _buffer [ key ] : null ; }
function ( key ) { var enableCache = this . options . enableCacheBuffer ; return enableCache ? this . _buffer [ key ] : null ; }
function ( frame ) { var nativeTarget = AS2Context . instance . resolveTarget ( ) ; nativeTarget . gotoAndPlay ( frame ) ; }
function ( frame ) { if ( this !== instance ) return ; paused = false ; if ( isNaN ( frame ) ) return this . gotoLabel ( frame ) ; gotoFrame . call ( instance , frame ) ; }
function ( frame , scene ) { if ( this !== instance ) return ; paused = true ; if ( isNaN ( frame ) ) return this . gotoLabel ( frame ) ; gotoFrame . call ( instance , frame ) ; }
function ( label ) { if ( this !== instance ) return ; label = label . toLowerCase ( ) ; if ( ! ( label in timelineLoader . frameLabels ) ) return ; gotoFrame . call ( instance , timelineLoader . frameLabels [ label ] ) ; }
function WeakMap ( ) { this . id = '$weakmap' + ( id ++ ) ; }
function ( err , result ) { console . log ( JSON . stringify ( result ) ) ; }
function ( event , ui ) { $ ( ui . item ) . bind ( "mouseup" , function ( ) { open_box ( ui . item ) ; } ) ; PlayListUpdate ( ) ; }
function ( text ) { var nText = text . replace ( /\s/gi , "_" ) ; nText = nText . replace ( /[,.!?;:\/\$\&]/gi , "" ) ; return nText ; }
function ( x , y ) { originX = x ; originY = y ; shape = factory . build ( WHITEBOARD . createDimensions ( x , y , 0 , 0 ) ) ; }
function segsCollide ( seg1 , seg2 , divideCabins ) { if ( divideCabins == true && ! onSameCabine ( seg1 . event , seg2 . event ) ) return false ; return seg1 . end > seg2 . start && seg1 . start < seg2 . end ; }
function ( d ) { return obj . h - obj . y ( d . values [ i ] . user ) - .5 ; }
function ( d ) { return obj . y ( d . values [ i ] . user ) ; }
function ( d ) { return obj . h - obj . y ( d . values [ i ] . system ) - .5 - obj . y ( d . values [ i ] . user ) ; }
function ( d ) { return obj . y ( d . values [ i ] . system ) ; }
function ( d ) { return obj . h - obj . y ( d . values [ i ] . user ) - .5 ; }
function ( d ) { return obj . y ( d . values [ i ] . user ) ; }
function ( d ) { return obj . h - obj . y ( d . values [ i ] . system ) - .5 - obj . y ( d . values [ i ] . user ) ; }
function ( d ) { return obj . y ( d . values [ i ] . system ) ; }
function ( d ) { return obj . h - obj . y ( d . values [ i ] . user ) - .5 ; }
function ( d ) { return obj . h - obj . y ( d . values [ i ] . system ) - .5 - obj . y ( d . values [ i ] . user ) ; }
function ( e ) { var text = self . sanitize ( $ ( this ) . val ( ) ) ; $ ( self . $target ) . html ( text ) ; }
function ( def ) { duckPunchRequire ( def . require ) ; return origExecuteDefFunc ( def ) ; }
function ( ) { $ ( this ) . closest ( 'tr' ) . addClass ( 'removeMe' ) ; selected_dbs [ selected_dbs . length ] = 'DROP DATABASE `' + escapeHtml ( $ ( this ) . val ( ) ) + '`;' ; }
function ( Handlebars , depth0 , helpers , partials , data ) { helpers = helpers || Handlebars . helpers ; var foundHelper , self = this ; return "<div class=\"navbar navbar-fixed-top\">\n        <div class=\"navbar-inner\">\n            <div class=\"container\">\n                <a class=\"btn btn-navbar\" data-toggle=\"collapse\" data-target=\".nav-collapse\"><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span><span class=\"icon-bar\"></span>\n                </a><a class=\"brand\" href=\"/Home/Index\" style=\"margin-left: -128px\">WebPresentations</a>\n                <div class=\"nav-collapse\">\n                    <ul class=\"nav\">\n                       <li><a href=\"/Home/Index\">Home</a></li>\n                      <li><a href=\"/Gallery/Index\">Gallery</a></li>\n                        <li><a href=\"/Home/About\">About</a></li>\n                    </ul>\n                                   </div>\n                <!--/.nav-collapse -->\n            </div>\n        </div>\n    </div>\n<div class=\"navbar menuBar\" style=\"margin-top: 40px; margin-bottom: 0px\">\n  <div class=\"btn-inverse temp\">\n    <div class=\"container\">\n    	<ul class=\"nav\">\n     		<li class=\"dropdown active\">\n     			<a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\" >File<b class=\"caret\"></b>\n     			</a>\n     			<ul class=\"dropdown-menu\">\n     		 		<li data-option=\"new\"><a href=\"#\">New</a></li>\n     				<li data-option=\"open\"><a href=\"#\">Open...</a></li>\n<!--     				<li data-option=\"openRecent\"><a href=\"#\">Open Recent...</a></li> -->\n <li data-option=\"saveAs\"><a href=\"#\">Save As...</a></li>\n     			</ul>\n     		</li>\n            <li class=\"dropdown active\">\n                <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">Edit<b class=\"caret\"></b>\n                </a>\n                <ul class=\"dropdown-menu\">\n                    <li data-option=\"cut\"><a href=\"#\">Cut</a></li>\n                    <li data-option=\"copy\"><a href=\"#\">Copy</a></li>\n                    <li data-option=\"paste\"><a href=\"#\">Paste</a></li>\n                </ul>\n            </li>\n            <li class=\"dropdown active\">\n                <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">Slideshow<b class=\"caret\"></b>\n                </a>\n                <ul class=\"dropdown-menu\">\n                    <li data-option=\"exportJSON\"><a href=\"#\">Export to JSON</a></li>\n                    <li data-option=\"importJSON\"><a href=\"#\">Import from JSON</a></li>\n                    <li class=\"divider\"></li>\n                    <li data-option=\"changeBackground\"><a href=\"#\">Change Background</a></li>\n                    <li class=\"divider\"></li>\n                   <!-- <li data-option=\"exportZIP\"><a href=\"#\">Zip Presentation</a></li> -->\n                </ul>\n            </li>\n     	</ul>\n    </div>\n  </div>\n</div>\n\n<div class=\"perspectives-container\">\n</div>\n" ; }
function ( divElem ) { if ( ! divElem . hasClassName ( 'highslide-header' ) ) { divElem . setStyle ( { 'height' : '100%' } ) ; } }
function ( src ) { this . src = src . split ( '\n' ) ; this . _src = this . src . slice ( 0 ) ; }
function ( ) { return { original : code . _src [ r . line ] , replacement : fixError ( r , code ) } ; }
function ( docId , revision ) { var Doc = ( docId && docId . match ( /^_design\// ) ) ? Design : Document ; return new Doc ( docId || null , revision || null , this . _connection , this ) ; }
function ( e ) { if ( this . _activeDrag ) { return this . _setSliderValueOnDrag ( e ) ; } }
function ( e ) { if ( this . _activeDrag ) { this . _setSliderValueOnDrag ( e ) ; this . _fireOnChange ( ) ; this . _cache [ 'handle' ] . focus ( ) ; } return this . _activeDrag = false ; }
function ( include_cross_hair ) { if ( typeof ( include_cross_hair ) != 'boolean' || include_cross_hair == true ) { this . include_cross_hair = true ; } else { this . include_cross_hair = false ; } }
function ( data ) { var response = JSON . parse ( data ) ; addSubreddit ( category ) ; addImages ( category , response [ category ] ) ; addSubredditContainer ( category ) ; }
function deleteMe ( me ) { delete MathElement [ me . id ] ; me . eachChild ( deleteMe ) ; }
function ( item ) { templater . create ( item ) ; listSource . appendChild ( item . elm ) ; }
function generateRandomIngredients ( ) { for ( var i = 0 ; i < spawns . length ; i ++ ) { spawns [ i ] = img_ingredients [ Math . ceil ( Math . random ( ) * 7 ) - 1 ] ; } }
function mailFailed ( e ) { $ ( '.mailsent-dialog' ) . html ( '<p>Vérifiez votre adresse mail</p>' ) ; $ ( '.mailsent-dialog' ) . fadeIn ( ) . delay ( 1000 ) . fadeOut ( ) ; }
f $ ( '.project-slide' + notActivElem [ 2 ] ) . fadeIn ( ) ; changeContentHeight ( ) ; } ) ;
function ( ) { $ ( '.project-slide' + notActivElem [ 1 ] ) . fadeOut ( function ( ) { $ ( '.project-slide' + notActivElem [ 2 ] ) . fadeIn ( ) ; changeContentHeight ( ) ; } ) ; }
function ( data ) { if ( data ) { this . data = data ; } }
function ( data ) { if ( data ) { this . data = data ; } }
function ( e ) { _executeListeners . call ( target , e || window . event ) ; }
function ( ) { target . detachEvent ( 'on' + type , listeners . scopeFixer ) ; }
function ( e ) { _executeListeners . call ( target , e || window . event ) ; }
function ( ) { var n ; n = count_constraints ( ) ; return $ ( 'div#group_constraints' ) . append ( "      <div id = 'c" + n + "_constraint' class = 'constraint'>        <select name = 'c" + n + "_criteria'>          <option>Shortname</option>          <option>Fullname</option>          <option>Course ID #</option>          <option>Category</option>        </select>        <select name = 'c" + n + "_operator'>          <option>is</option>          <option>is not</option>          <option>contains</option>          <option>does not contain</option>        </select>        <span id = 'c" + n + "_search_term_0'>          <input name = 'c" + n + "_search_term_0' type = 'text'/>          <input id = 'c" + n + "_st_num' value = '1' type = 'hidden'/>          <img src = 'images/add.png' class = 'add_search_term'/>        </span>      </div>    " ) ; }
function u_iswspace ( c , _ ) { return [ 1 , 0 , c == 9 || c == 10 || c == 13 || c == 32 ] ; }
function u_iswalnum ( c , _ ) { return [ 1 , 0 , ( c >= 48 && c <= 57 ) || u_iswalpha ( c ) [ 0 ] ] ; }
function ( ) { Twinkle . speedy . initDialog ( Twinkle . speedy . callback . doMultiple , false , form . dialog ) ; }
function Waiter ( ) { var self = this ; self . values = { } ; self . callback = null ; self . resolved = false ; self . count = 0 ; }
function ( req , res ) { res . render ( 'fake-async' , { layout : false } ) ; }
function ( force ) { this . _refresh ( force ) ; }
function ( value , trigger , refresh ) { this . _clearInteractiveTimeout ( ) ; value = Math . max ( value , 0 ) ; this . _setInteractiveCenterAndSize ( this . _center , value ) ; this . _setInteractiveTimeout ( trigger ) ; }
function ( ) { this . setDirection ( d_ready ) ; this . setUsername ( $ ( 'div#loginForm input' ) . val ( ) ) ; }
function ( data ) { debug ( "recvHello" ) ; }
function ( ) { console . error ( "onShown never fired" , arguments ) ; }
function onLoad ( ) { console . log ( "purplePanel load event" ) ; setTimeout ( loadJSAsync ) ; }
function ( ) { logout ( req ) ; next ( new UserError ( 'Wrong authentication.' , 400 ) ) ; }
function curryIdentity ( fn ) { return function ( ) { var args = [ ] . slice . call ( arguments ) ; args . splice ( 0 , 0 , this ) ; return fn . apply ( this , args ) ; } }
function ( date ) { return new Date ( date . getFullYear ( ) , date . getMonth ( ) + 1 , 0 ) }
function ( ) { if ( monthsdiff > 0 ) { $element . addClass ( 'slidein-from-right' ) ; } else if ( monthsdiff < 0 ) { $element . addClass ( 'slidein-from-left' ) ; } }
function ( session , message ) { gotExtensionZipFile ( session , message , uuid , dir , callback , errback ) ; }
function ( data , status , xhr ) { w . editor . isNotDirty = 1 ; w . d . show ( 'message' , { title : 'Document Saved' , msg : currentDoc + ' was saved successfully.' } ) ; }
function ( ) { self . removeTokens ( count , callback ) ; }
function ( domMessage , structuredError ) { this . message = domMessage . textContent || domMessage . innerText ; this . domMessage = domMessage ; this . structuredError = JSON . parse ( structuredError ) ; }
function initBookList ( ) { $ . ajax ( { type : "GET" , cache : false , url : "/books/get_book_lists" , dataType : "jsonp" } ) ; }
function ( ) { var dir = appDir + '/modules' return existsSync ( dir ) ? fs . readdirSync ( dir ) : [ ] }
function cb ( obj1 , obj2 , context ) { callbackCount ++ var n1 = b . class_getName ( obj1 ) , n2 = b . class_getName ( obj2 ) if ( n1 == n2 ) return 0 return n1 > n2 ? 1 : - 1 }
function ( ) { console . log ( "\nThis will eventually be more helpful.  In the meantime, here's your utility map\n" ) ; console . log ( require ( '../../utils' ) . getUtilityMap ( ) ) ; }
function daysInMonth ( month , year ) { return ( new Date ( year , month + 1 , 0 ) ) . getDate ( ) ; }
function ( msg ) { Ti . UI . createAlertDialog ( { message : msg } ) . show ( ) ; }
function ( data ) { if ( data . isError ) { that . events . onError . fire ( data , "delete" ) ; return ; } that . events . afterRemove . fire ( ) ; }
function ( xhr , textStatus , errorThrown ) { fluid . log ( "Data fetch error for url " + togo . url + " - textStatus: " + textStatus ) ; fluid . log ( "ErrorThrown: " + errorThrown ) ; callback ( { isError : true } ) ; }
function _getBatteryVolume ( volume ) { volume = volume . substring ( 0 , 5 ) ; return volume + '%' ; }
function drag ( e ) { if ( TRACE_UI ) console . log ( "drag" ) ; if ( draft . activeTool . drag == null ) return ; if ( draft . activeTool . drag ( e ) ) refreshToolLayer ( ) ; }
function ( msg ) { console . log ( "Out:" ) console . log ( msg ) sock . send ( JSON . stringify ( msg ) ) ; }
function ( ) { canvas . width = window . innerWidth ; canvas . height = window . innerHeight ; refreshObjectLayer ( true ) ; }
function ( e ) { var selected = $ ( this ) . is ( '.selected' ) ; var id = e . target . id ; draft . gridOptions [ id ] = selected ; refreshObjectLayer ( true ) ; }
function ( val ) { return ( val || '' ) . toString ( ) . length < len ? { error : msg } : { valid : true } ; }
function ( val ) { return ( val || '' ) . toString ( ) . length > len ? { error : msg } : { valid : true } ; }
function ( textarea ) { textarea . setStyle ( 'overflow-y' , 'hidden' ) ; new Form . AutoGrow ( textarea ) ; }
function ( ) { $ ( this ) . remove ( ) ; updateLeaveCounter ( ) ; printPeriods ( ) ; }
function ( ) { $ ( '.section-swap' ) . remove ( ) ; updateLeaveCounter ( ) ; printPeriods ( ) ; }
function ( ) { this . _super ( ) ; cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_3D ) ; }
function ( ) { cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_2D ) ; this . _super ( ) ; }
function ( ) { this . _super ( ) ; cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_3D ) ; }
function ( ) { cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_2D ) ; this . _super ( ) ; }
function ( ) { this . _super ( ) ; cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_3D ) ; }
function ( ) { this . _super ( ) ; cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_2D ) ; }
function ( ) { return this . _winSizeInPixels ; }
function ( ) { cc . LabelBMFont . purgeCachedData ( ) ; }
function ( ) { return this . _displayStats ; }
function ( displayStats ) { this . _displayStats = displayStats ; }
function ( ) { return this . _totalFrames ; }
function ( ) { if ( this . _purgeDirecotorInNextLoop ) { this . _purgeDirecotorInNextLoop = false ; this . purgeDirector ( ) ; } else if ( ! this . invalid ) { this . drawScene ( ) ; } }
function ( data ) { debug ( "recvHello" ) ; }
function packUInt64 ( number ) { return Put ( ) . word64be ( number ) . buffer ( ) }
function ( ) { client_say ( 'disconnected' ) ; }
function ( err ) { fn ( new Error ( 'searchd connexion error' ) ) }
function ( ) { var self = this return self . _error }
function ( host , port ) { var self = this assert . equal ( typeof host , 'string' ) assert . equal ( typeof port , 'number' ) self . _host = host ; self . _port = port ; }
function ( maxquerytime ) { var self = this assert . equal ( typeof maxquerytime , 'number' ) assert ( maxquerytime > 0 ) self . _maxquerytime = maxquerytime }
function ( x ) { return ( x === mode ) }
function ( ranker , rankexpr ) { var self = this if ( rankexpr === undefined ) { rankexpr = '' } assert ( 0 <= ranker && ranker < SphinxClient . SPH_RANK_TOTAL ) self . _ranker = ranker self . _rankexpr = rankexpr }
function ( mode , clause ) { if ( clause == undefined ) clause = '' ; }
function ( weights ) { var self = this assert ( Array . isArray ( weights ) ) forEach ( weights , function ( item , index ) { assert . equal ( typeof item , 'number' ) } ) self . _weights = weights }
function ( weights ) { var self = this assert . equal ( typeof item , 'object' ) forEach ( weights , function ( item , index ) { assert . equal ( typeof item , 'number' ) } ) self . _indexweights = weights }
function ( val , index ) { req . push ( packUInt64 ( val ) ) }
function ( ) { if ( App . Common . isLoggedIn ( ) ) { App . Ideas . newIdea . openIdeaForm ( ) ; location . hash = '' ; } else { location . href = '/sessions/new?anchor=continue_idea' } }
function ( ) { if ( ! $ ( '.user_actions .logged_in' ) . length ) { $ ( 'input[name=redirect_url]' ) . val ( location . href ) location . href = "/sessions/new" ; return false ; } return true ; }
function ( ) { var current = this . get ( ) ; if ( current == null ) { current = step . defaults . detailLevel ; } step . menu . tickMenuItem ( $ ( "li[menu-name = 'VIEW'] ul li a" ) . get ( current ) ) ; }
function ( e ) { if ( e && _this . getConfigFromLocalStorage ( ) ) { localStorage . removeItem ( _this . localStorageKey ) ; return window . location = "/" ; } }
function ( ) { if ( ! ! game_ . GetMatch ( ) ) return game_ . GetMatch ( ) . teamA_ . Players [ 0 ] ; return null ; }
function ( ) { if ( ! ! game_ . GetMatch ( ) ) return game_ . GetMatch ( ) . teamB_ . Players [ 0 ] ; return null ; }
function ( index ) { if ( ! ! game_ . GetMatch ( ) ) return game_ . GetMatch ( ) . teamA_ . Players [ index || 0 ] ; return null ; }
function ( index ) { if ( ! ! game_ . GetMatch ( ) ) return game_ . GetMatch ( ) . teamB_ . Players [ index || 0 ] ; return null ; }
function ( input ) { if ( ! ! game_ . GetMatch ( ) ) return game_ . GetMatch ( ) . teamA_ . Players [ 0 ] . SendInput ( input ) ; return null ; }
function ( ) { if ( ! ! game_ . GetMatch ( ) ) return game_ . GetMatch ( ) . teamA_ . Players [ 0 ] . ClearInput ( ) ; return null ; }
function ( input ) { if ( ! ! game_ . GetMatch ( ) ) return game_ . GetMatch ( ) . teamB_ . Players [ 0 ] . SendInput ( input ) ; return null ; }
function ( ) { if ( ! ! game_ . GetMatch ( ) ) return game_ . GetMatch ( ) . teamB_ . Players [ 0 ] . ClearInput ( ) ; return null ; }
function ( ) { if ( ! ! game_ . GetMatch ( ) ) { this . P1 ( ) . SetAI ( CreateSimpleRyuAI ) ; } return null ; }
function ( ) { if ( ! ! game_ . GetMatch ( ) ) { this . P2 ( ) . SetAI ( CreateSimpleRyuAI ) ; } return null ; }
function ( index ) { if ( ! ! game_ . GetMatch ( ) ) { this . T1 ( index || 0 ) . SetAI ( CreateSimpleRyuAI ) ; } return null ; }
function ( index ) { if ( ! ! game_ . GetMatch ( ) ) { this . T2 ( index || 0 ) . SetAI ( CreateSimpleRyuAI ) ; } return null ; }
function ( ) { return this . GetGame ( ) . GetMatch ( ) ; }
function ( ) { return match_ ; }
function ( ) { return frame_ >= CONSTANTS . MAX_FRAME ; }
function ( elementId , x , y , fontPath ) { return fontSystem_ . AddText ( elementId , "" , x , y , 0 , fontPath ) ; }
function ( value ) { speed_ = value ; }
function ( ) { return speed_ ; }
function ( flag ) { state_ |= flag ; }
function ( flag ) { state_ ^= flag ; }
function ( flag ) { state_ = ( state_ | ( flag ) ) ^ ( flag ) ; }
function ( e ) { thisValue . HandleKeyPress ( e , isDown ) ; }
function ( ) { this . ReleaseText ( ) ; this . ResetKeys ( ) ; managed_ . Kill ( ) managed_ = null ; announcer_ . Release ( ) ; }
function ( ) { return this . GetGame ( ) . GetCurrentFrame ( ) ; }
function ( player , frame ) { if ( ! this . isRoundOver_ ) { this . isRoundOver_ = true ; this . GetGame ( ) . SetSpeed ( CONSTANTS . NORMAL_SPEED ) ; this . gotoNewRoundFrame_ = frame ; announcer_ . EndRound ( ) ; } }
function MaxOutEnergy ( ) { game_ . GetMatch ( ) . teamA_ . Energybar . Change ( 1000 ) ; game_ . GetMatch ( ) . teamB_ . Energybar . Change ( 1000 ) ; }
function ( ) { return game_ . GetMatch ( ) ; }
function ( obj ) { return { message : 'hey' } ; }
function ( content , encoding ) { console . log ( 'encoding' , encoding ) ; load ( resource . url , content , resource . type , line ) ; }
function ( url , content , type ) { editorsByURL [ url ] = new PurpleOrionEditor ( url , content , type ) ; }
function ( url , line , column , character ) { var editor = editorsByURL [ url ] ; if ( editor ) { editor . setCursorOn ( line , column , character ) ; } else { console . error ( "no editor for url " + url ) ; } }
function show ( id ) { $ ( 'editor' ) . innerHTML = localStorage . getItem ( id + '_html' ) || '' localStorage . setItem ( 'current-document' , id ) $ ( 'editor' ) . focus ( ) }
function create ( ) { id = ++ localStorage . last_id $ ( 'editor' ) . textContent = '' localStorage . setItem ( id , '' ) location . hash = '#' + id select ( ) updateList ( ) $ ( 'editor' ) . focus ( ) }
function ( isp , status ) { console . log ( uMarker , markers . length ) return ; uMarker . isp = ispName = isp ; uMarker . status = status ; uMarker . time = Date . now ( ) ; drawMap ( ) ; }
function ( ) { me . _refreshLine ( ) ; ( typeof me . onchange == 'function' ) && me . onchange ( ) ; }
function ( value ) { var text = this . _controlMap . text ; text . setValue ( value ) ; this . _refreshLine ( ) ; }
function ( type ) { switch ( type ) { case 'url' : case 'email' : mongooseTypes . loadTypes ( mongoose , type ) ; break ; default : require ( './types/' + type ) . load ( mongoose ) ; break ; } }
function ( ) { $ ( "#player-box" ) . sortable ( { change : function ( ) { return GameController . reposition ( GameView . get_arrangement ( ) ) ; } } ) ; return $ ( "#player-box" ) . disableSelection ( ) ; }
function ( ) { if ( TissueStack . phone || TissueStack . tablet ) { this . buildTabletMenu ( ) ; } else if ( TissueStack . desktop ) { this . buildDynaTree ( ) ; } }
function postRender ( ) { results . scrollTop ( 0 ) ; search . removeClass ( "select2-active" ) ; if ( initial !== true ) self . positionDropdown ( ) ; }
function ( ) { fs . unwatchFile ( file_path ) ; self . writeDomains ( name , file_path , options ) ; self . core . purge ( 'redis_cache' ) ; }
function ( args ) { args . type = 'GET' ; ajax_request ( args ) ; }
function ( args ) { args . type = 'POST' ; ajax_request ( args ) ; }
function ( args , update_fn ) { if ( update_fn == undefined ) { console . error ( 'AJAX.stream: called without update function' ) ; } ajax_request ( args , update_fn ) ; }
function ( ) { if ( ! gameIsOn ) { return } return $_ ( "game.leave.gameIsActive.confirm" ) }
function ( e ) { gameIsOn = false ; $ ( "#endOfGameModal" ) . modal ( 'show' ) ; $ ( "#winModal" ) . modal ( 'hide' ) ; }
function ( ) { Handlebars . registerHelper ( 'whatis' , function ( param ) { console . log ( param ) ; } ) ; _ . bindAll ( ) ; this . render ( ) ; }
function ( param ) { console . log ( param ) ; }
function ( ) { return { "data-role" : this . role } }
function ( ) { return "template_basic_page_simple" ; }
function showText ( sourceNode ) { document . getElementById ( "text" ) . textSource = sourceNode ; hideText ( ) ; }
function ( parent , data ) { if ( data . content && data . content . length == 1000 ) { data . content += repl ( '... <a href="%(name)s.html">(read on)</a>' , data ) ; } parent . innerHTML = repl ( '<h2><a href="%(name)s.html">%(title)s</a></h2>\ 				%(content)s<br /><br />' , data ) ; }
function ( e ) { console . log ( "Could not properly write " + fileName ) ; }
function UnixCppEntriesProvider ( nmExec , targetRootFS ) { this . symbols = [ ] ; this . parsePos = 0 ; this . nmExec = nmExec ; this . targetRootFS = targetRootFS ; this . FUNC_RE = /^([0-9a-fA-F]{8,16}) ([0-9a-fA-F]{8,16} )?[tTwW] (.*)$/ ; }
function MacCppEntriesProvider ( nmExec , targetRootFS ) { UnixCppEntriesProvider . call ( this , nmExec , targetRootFS ) ; this . FUNC_RE = /^([0-9a-fA-F]{8,16}) ()[iItT] (.*)$/ ; }
function WindowsCppEntriesProvider ( _ignored_nmExec , targetRootFS ) { this . targetRootFS = targetRootFS ; this . symbols = '' ; this . parsePos = 0 ; }
function ( field ) { if ( field . id != 'id' ) { html += '<div class="' + field . id + '"><strong>' + field . get ( 'label' ) + '</strong>: ' + record . getFieldValue ( field ) + '</div>' ; } }
function ( idx ) { if ( idx === undefined ) idx = 0 ; return getBlockAddr ( this . memBlock , idx ) ; }
function ( event ) { event . init ( ) ; return this . eventQueue . push ( event ) ; }
function appCtrl ( $scope , $http , $routeParams ) { var actual_tiles = 10 ; var actual_width = 240 ; var actual_height = 500 ; init_tiles ( actual_tiles , actual_width , actual_height ) ; }
function ( req , res ) { res . serveClient ( 'main' ) ; }
function ( ) { this . bang ( ) ; }
function ( ) { if ( this . _showTimer ) { this . _showTimer . remove ( ) ; delete this . _showTimer ; } this . close ( ) ; }
function ( evt ) { func . call ( timeline . node ) ; timeline . next ( ) ; }
function ( evt ) { func . call ( timeline . node ) ; timeline . next ( ) ; }
function ( evt ) { func . call ( timeline . node ) ; timeline . next ( ) ; }
function ( arg ) { this . _unassigned . push ( new UnassignedAssignment ( this , arg , false ) ) ; }
function ( ) { types . registerType ( CommandType ) ; types . registerType ( ParamType ) ; }
function setFileSelectionFocus ( fileSelectionFocus ) { if ( fileSelectionFocus !== PROJECT_MANAGER && fileSelectionFocus !== WORKING_SET_VIEW ) { throw new Error ( "Bad parameter passed to FileViewController.setFileSelectionFocus" ) ; } _fileSelectionFocus = fileSelectionFocus ; $ ( exports ) . triggerHandler ( "documentSelectionFocusChange" ) ; }
function ( ) { self . leave ( this ) ; }
function ( ) { self . leave ( this ) ; }
function ( req , res ) { 'use strict' ; res . writeHead ( 200 , { 'Content-Type' : 'text/plain' } ) ; res . end ( 'Hello World Domination\n' ) ; }
function ( ) { properties . onGameStart ( ) ; }
function ( user , partial ) { properties . onJoin ( user , partial ) ; }
function ( callback ) { game . buzz ( user , callback ) ; }
function ( user , message ) { $ ( "#box" ) . append ( $ ( "<div><b>" + user . name + "</b>: " + message + "</div>" ) ) ; }
function ( auth ) { self . login ( auth ) ; }
function ( started ) { if ( started ) { loadRoom ( room ) ; } }
function ( event ) { if ( event . which == 13 ) { answer ( ) ; } }
function ( userId ) { var colors = [ '#D799A6' , '#3761AE' , '#CAA385' , '#8FA3A4' , '#3798DC' ] ; var inx = userId % colors . length ; return colors [ inx ] ; }
function ( $ ) { var Dashboard = zeegaDashboard . app ; Dashboard . init ( ) ; initHeaderUX ( ) ; }
function ( e ) { e . preventDefault ( ) ; $ ( "#issue" ) . hide ( 500 ) ; $ ( "#issue-title, #issue-body" ) . val ( "" ) ; }
function ( ) { details . handled = true ; chrome . browserAction . setBadgeText ( details ) ; return false ; }
function fillIn ( selector , value ) { WebPage . fillIn ( selector , value ) ; }
function ( ) { this . save ( { completed : ! this . get ( "completed" ) } ) ; window . app . Todos . trigger ( 'reset' ) ; }
function ( ) { Utils . debug ( "In import: " ) ; this . hideEverything ( ) ; $ ( '#import-fullscreen' ) . show ( ) ; }
function ( page_id , id , selector ) { return this . sendResponse ( this . node ( page_id , id ) . find ( selector ) ) ; }
function ( page_id , id ) { return this . sendResponse ( this . node ( page_id , id ) . text ( ) ) ; }
function ( page_id , id , name ) { return this . sendResponse ( this . node ( page_id , id ) . getAttribute ( name ) ) ; }
function ( page_id , id ) { return this . sendResponse ( this . node ( page_id , id ) . value ( ) ) ; }
function ( page_id , id , value ) { this . node ( page_id , id ) . set ( value ) ; return this . sendResponse ( true ) ; }
function ( page_id , id , value ) { return this . sendResponse ( this . node ( page_id , id ) . select ( value ) ) ; }
function ( page_id , id ) { return this . sendResponse ( this . node ( page_id , id ) . tagName ( ) ) ; }
function ( page_id , id ) { return this . sendResponse ( this . node ( page_id , id ) . isVisible ( ) ) ; }
function ( page_id , id , event ) { this . node ( page_id , id ) . trigger ( event ) ; return this . sendResponse ( event ) ; }
function ( event ) { req . onsuccess = req . onerror = null ; var undef ; self . lambda ( callback ) . call ( self , event . target . result !== null && event . target . result !== undef ) ; }
function ( ) { template = new Template ( { cache : false } ) ; }
function ( data ) { if ( data == 1 ) { alert ( "Sus datos se han enviado correctamente" ) ; resetForm ( ) ; window . parent . $ . prettyPhoto . close ( ) ; } else { alert ( "Lo sentimos, no es posible gestionar su solicitud. Intente mas tarde." ) ; } }
function ( context , error ) { if ( context . callback ) context . callback ( error ) ; }
function ( item ) { item . newAccessToken = context . newAccessToken ; sendNotificationNow ( item ) ; }
function ( e ) { var loadedConfig ; if ( e ) { loadedConfig = _this . getConfigFromLocalStorage ( ) ; _this . MarkersConfig = loadedConfig . markers ; } else { _this . MarkersConfig = Markers ; } return callback ( ) ; }
function ( arg ) { var active = Ext . getCmp ( 'viewPort' ) . getActiveItem ( ) . getActiveItem ( ) ; if ( arg ) { if ( active === 0 ) { this . doLogin ( true ) ; } } else { } }
function courseOnFocus ( field ) { if ( $ ( field ) . val ( ) == COURSE_PLACEHOLDER ) { $ ( field ) . val ( "" ) ; } $ ( field ) . css ( "color" , "black" ) ; }
function vibrate ( ) { navigator . vibrate ( [ 200 ] ) ; }
function vibrate ( ) { if ( 'vibrate' in navigator ) { navigator . vibrate ( [ 200 ] ) ; } }
function takeScreenshot ( ) { navigator . vibrate ( 100 ) ; var screenshotProps = { detail : { type : 'take-screenshot' } } ; window . dispatchEvent ( new CustomEvent ( 'mozContentEvent' , screenshotProps ) ) ; }
function ss_onsuccess ( ) { navigator . vibrate ( 100 ) ; navigator . mozNotification . createNotification ( _ ( 'screenshotSaved' ) , filename ) . show ( ) ; }
function ( css ) { grunt . file . write ( file . dest , css || "" ) ; grunt . log . writeln ( "File '" + file . dest + "' created." ) ; next ( ) ; }
function ( id ) { var span = $ . extend ( new Span ( ) , this ) ; span . id = id ; span . initContainers ( ) ; return span ; }
function ( fragmentNo , fragment ) { sortedFragments . push ( fragment ) ; }
function ( chunkNo , chunk ) { chunk . fragments . sort ( fragmentComparator ) ; $ . each ( chunk . fragments , function ( fragmentNo , fragment ) { fragment . indexNumber = fragmentNo ; fragment . refedIndexSum = 0 ; } ) ; }
function ( fragmentNo , fragment ) { fragmentTexts [ fragment . glyphedLabelText ] = true ; noSpans = false ; }
function ( fragmentNo , fragment ) { var width = data . sizes . fragments . widths [ fragment . glyphedLabelText ] ; if ( width > maxWidth ) maxWidth = width ; }
function ( fragmentNo , fragment ) { fragment . width = maxWidth ; }
function ( index , element ) { chunk . fragments [ index ] . group = element ; }
function ( index , element ) { chunk . fragments [ index ] . rect = element ; }
function ( fragmentId , fragment ) { if ( row . maxSpanHeight < fragment . height ) row . maxSpanHeight = fragment . height ; }
function ( a , b ) { return Util . cmp ( chunk . fragments [ b ] . nestingHeight , chunk . fragments [ a ] . nestingHeight ) }
function ( n ) { host = this . hostname ; }
function ( k2 , v2 ) { str = str + key + '=' + encodeURIComponent ( v2 ) + '&' ; }
function ( k2 , v2 ) { str = str + key + '=' + encodeURIComponent ( v2 ) + '&' ; }
function ( ) { var id = obj [ self . identifier ] return self . target . find ( { where : { 'id' : id } } ) ; }
function ( opt ) { if ( opt ) { this . fetchData = _ . extend ( { } , this . fetchData , opt ) ; } return this ; }
function ( ) { $ ( 'body' ) . addClass ( 'apple-fixed-layout' ) ; this . $ ( '#container' ) . html ( "" ) ; this . setContainerSize ( ) ; this . setUpMode ( ) ; return this . renderPages ( ) ; }
function taylorKO ( bWeight , bDiameter , bFPS ) { bweight = parseInt ( bWeight ) ; bDiameter = parseFloat ( bDiameter ) ; bFPS = parseInt ( bFPS ) ; return ( bWeight * bDiameter * bFPS ) / 7000 ; }
function ( event , CubeViz_Link_Chosen ) { CubeViz_Parameters_Component = CubeViz_Controller_Main . retrievedCubeVizParameters ; CubeViz_Controller_Main . getResultObservations ( CubeViz_Link_Chosen ) ; }
function ( json ) { this . retrievedCubeVizParameters = json ; $ ( body ) . trigger ( "AjaxCubeVizParametersRetrieved.CubeViz" , linkCode ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_HANDLER_PRIORITY + 1 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_HANDLER_PRIORITY + 1 , true ) ; }
function ( dt ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . setPriority ( cc . CCMENU_HANDLER_PRIORITY + 1 , this ) ; this . unscheduleAllSelectors ( ) ; cc . Log ( "Touches allowed again!" ) ; }
function ( sender ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . setPriority ( cc . CCMENU_HANDLER_PRIORITY - 1 , this ) ; this . schedule ( this . allowTouches , 5.0 ) ; cc . Log ( "TOUCHES DISABLED FOR 5 SECONDS" ) ; }
function ( sender ) { this . _disabledItem . setEnabled ( ! this . _disabledItem . isEnabled ( ) ) ; }
function ( sender ) { this . _disabledItem . setEnabled ( ! this . _disabledItem . isEnabled ( ) ) ; this . _disabledItem . stopAllActions ( ) ; }
function ( params , callback , addData ) { this . request ( 'GET' , '/time_entries.json' , params , callback , addData ) ; }
function ( callback ) { console . log ( "taskDone!!" ) ; redmineExtract . workflow ( function ( err , data ) { callback ( err , data ) ; } ) ; }
function ( callback ) { console . log ( "storeAllIssuesDone!!" ) ; issuesStored = true ; }
function ( vector ) { return Math . sqrt ( vector . x * vector . x + vector . y * vector . y ) ; }
function ( model , error ) { alert ( error ) ; }
function onEvent ( event ) { if ( ! this . running ) { console . warn ( this . name + " has terminated and cannot process more events" ) return } this . externalQueue . push ( event ) if ( this . stable ) this . extEventLoop ( ) }
function clear ( addScanningItem ) { while ( list . hasChildNodes ( ) ) list . removeChild ( list . lastChild ) ; if ( addScanningItem ) list . appendChild ( newScanItem ( ) ) ; index = [ ] ; }
function ( error ) { scanning = false ; console . warn ( '====== wifi error: ' + req . error . name ) ; clear ( false ) ; if ( autoscan ) window . setTimeout ( scan , scanRate ) ; }
function wifiConnect ( ) { gWifiManager . associate ( network ) ; gNetworkList . display ( network . ssid , _ ( 'shortStatus-connecting' ) ) ; }
function close ( ) { if ( key ) { identity . value = '' ; password . value = '' ; showPassword . checked = false ; } dialog . removeAttribute ( 'class' ) ; return false ; }
function ( data ) { console . log ( data ) ; var id = data . id ; }
function ( data ) { }
function ( err , content ) { if ( err ) { throw err ; } else { response . writeHead ( 200 , { "Content-Type" : 'text/html' } ) ; response . write ( content ) ; response . end ( ) ; } }
function ( ) { io . sockets . emit ( 'chat' , { msg : "user " + name + ' conected!</b></font>' , msgr : "<b><font color=red>" + getTimestamp ( ) + "[Server]" } ) ; }
function ( ) { this . $el . html ( this . template ( this . model . toJSON ( ) ) ) ; this . input = this . $ ( '.edit' ) ; return this ; }
function ( ) { this . $el . addClass ( "editing" ) ; this . input . focus ( ) ; }
function ( ) { var value = this . input . val ( ) ; if ( ! value ) this . clear ( ) ; this . model . save ( { title : value } ) ; this . $el . removeClass ( "editing" ) ; }
function ( tally ) { var view = new TallyView ( { model : tally } ) ; this . $ ( "#tally-list" ) . append ( view . render ( ) . el ) ; }
function ( code , msg ) { var err = new Error ( msg || http . STATUS_CODES [ code ] ) ; err . status = code ; return err ; }
function ( path ) { this . _root = normalize ( path ) ; return this ; }
function ( a , cb ) { A . where ( 'number' , a . number ) . sort ( '-_id' ) . limit ( 10 ) . exec ( cb ) }
function ( a , cb ) { A . where ( 'date' , a . date ) . select ( 'string' ) . limit ( 10 ) . exec ( cb ) }
function ( a , cb ) { A . where ( 'date' , a . date ) . select ( 'string bool' ) . sort ( 'date' ) . limit ( 10 ) . exec ( cb ) }
function ( a , cb ) { A . where ( 'date' , a . date ) . where ( 'array' ) . in ( 3 ) . limit ( 10 ) . exec ( cb ) }
function ( a , cb ) { A . find ( ) . where ( 'objectids' ) . exists ( ) . select ( 'dates' ) . limit ( 10 ) . exec ( cb ) ; }
function ( ) { a = u = null ; process . nextTick ( cycle ) ; }
function ( err ) { if ( error ) return ; if ( err ) { error = err ; if ( fn ) return fn ( err ) ; throw err ; } if ( fn ) -- count || fn ( ) ; }
function ( seconds ) { this . delay = cp . math . convert ( seconds , 1000 , 0 , true ) ; }
function resolve ( src ) { src = path . resolve ( path . join ( polpetta . root , src ) ) ; return src . indexOf ( polpetta . root ) ? "" : src ; }
function ( requesterEvent , id , type , content ) { var errorMessage = content ; mcam . log ( 'MCAM.Error: ' + errorMessage ) ; if ( requesterEvent . failureCallback ) requesterEvent . failureCallback ( ) ; return true ; }
function start ( ) { time = 0 ; old_time = time ; dt = 0 ; init ( ) ; }
function ( ) { try { return modulejs . require ( 'ext/folderstatus' ) ; } catch ( e ) { } return { } ; }
function ( ) { psu . log ( 'Ok. Loading the AUTH required page: ' + linkUrl ) ; $ . mobile . changePage ( linkUrl , { reloadPage : "true" } ) ; }
function ( event ) { event . preventDefault ( ) ; event . stopPropagation ( ) ; var query = encodeURI ( $ ( '#directory-search' ) . val ( ) ) ; $ . mobile . changePage ( 'search/' + query ) ; }
function ( ) { psu . log ( 'Ok. Loading the AUTH required page: ' + linkUrl ) ; $ . mobile . changePage ( linkUrl , { reloadPage : "true" } ) ; }
function d3_true ( ) { return true ; }
function ( v ) { if ( ! arguments . length ) return innerRadius ; innerRadius = d3_functor ( v ) ; return arc ; }
function ( v ) { if ( ! arguments . length ) return outerRadius ; outerRadius = d3_functor ( v ) ; return arc ; }
function ( v ) { if ( ! arguments . length ) return startAngle ; startAngle = d3_functor ( v ) ; return arc ; }
function ( v ) { if ( ! arguments . length ) return endAngle ; endAngle = d3_functor ( v ) ; return arc ; }
function ( v ) { if ( ! arguments . length ) return radius ; radius = d3_functor ( v ) ; return chord ; }
function ( v ) { if ( ! arguments . length ) return source ; source = d3_functor ( v ) ; return chord ; }
function ( v ) { if ( ! arguments . length ) return target ; target = d3_functor ( v ) ; return chord ; }
function ( v ) { if ( ! arguments . length ) return startAngle ; startAngle = d3_functor ( v ) ; return chord ; }
function ( v ) { if ( ! arguments . length ) return endAngle ; endAngle = d3_functor ( v ) ; return chord ; }
function ( x ) { if ( ! arguments . length ) return source ; source = d3_functor ( x ) ; return diagonal ; }
function ( x ) { if ( ! arguments . length ) return target ; target = d3_functor ( x ) ; return diagonal ; }
function ( x ) { if ( ! arguments . length ) return type ; type = d3_functor ( x ) ; return symbol ; }
function ( x ) { if ( ! arguments . length ) return size ; size = d3_functor ( x ) ; return symbol ; }
function ( x ) { if ( ! arguments . length ) return linkDistance ; linkDistance = d3_functor ( x ) ; return force ; }
function ( x ) { if ( ! arguments . length ) return linkStrength ; linkStrength = d3_functor ( x ) ; return force ; }
function ( x ) { if ( ! arguments . length ) return ranger ; ranger = d3_functor ( x ) ; return histogram ; }
function ( x ) { if ( ! arguments . length ) return binner ; binner = typeof x === "number" ? function ( range ) { return d3_layout_histogramBinFixed ( range , x ) ; } : d3_functor ( x ) ; return histogram ; }
function ( event ) { event . preventDefault ( ) ; }
function updateContents ( ) { $ . ajax ( "/api/connectors/installed" , { success : function ( data , textStatus , jqXHR ) { if ( hidden ) return ; dataLoaded ( data , true ) ; } } ) }
function include ( filepath ) { try { filepath = include . resolve ( filepath ) ; load ( filepath ) ; } catch ( e ) { console . log ( 'Cannot include "' + env . dirname + '/' + filepath + '": ' + e ) ; } }
function ( filepath ) { if ( filepath . indexOf ( '/' ) === 0 ) { return filepath ; } return env . dirname + '/' + filepath ; }
function ( ) { expect ( include . resolve ( 'a/b/c' ) ) . toEqual ( env . dirname + '/' + 'a/b/c' ) ; }
function ( $ ) { return $ . replace ( env . dirname , '' ) ; }
function ( ) { var path = require ( "path" ) , docSet = parser . parse ( [ path . join ( env . dirname , "plugins/test/fixtures/railsTemplate.js.erb" ) ] ) ; expect ( docSet [ 2 ] . description ) . toEqual ( "Remove rails tags from the source input (e.g. )" ) ; }
function ( ) { env . opts . _ = [ env . dirname + '/test/fixtures/modules/' ] ; srcParser = new parser . Parser ( ) ; require ( 'jsdoc/src/handlers' ) . attachTo ( srcParser ) ; }
function ( ) { doclets = srcParser . parse ( env . dirname + '/test/fixtures/modules/data/mod-1.js' ) ; expect ( doclets . length ) . toBeGreaterThan ( 1 ) ; expect ( doclets [ 0 ] . longname ) . toEqual ( 'module:data/mod-1' ) ; }
function ( ) { doclets = srcParser . parse ( env . dirname + '/test/fixtures/modules/data/mod-2.js' ) ; expect ( doclets . length ) . toBeGreaterThan ( 1 ) ; expect ( doclets [ 0 ] . longname ) . toEqual ( 'module:my/module/name' ) ; }
function video ( textID ) { var linkAddr = prompt ( "Please enter the url " , "http://www.youtube.com/" ) ; if ( linkAddr && linkAddr != "http://www.youtube.com/" ) insert ( '[video=' + linkAddr + ']' , textID ) ; }
function ( response ) { $ ( '#editcont' + postid ) . raw ( ) . innerHTML = response ; resize ( 'editbox' + postid ) ; }
function ( ) { data = this . vars_to_save ; data . _http_id = this . http_id ; data . _service = 'restrict-restart' ; return $ . post ( '/tomato.cgi' , data ) ; }
function ( devices , except ) { var prefix = except ? '!>' : '' ; if ( devices . length === 0 ) { devices [ 0 ] = '00:00:00:00:00:00' ; } return prefix + devices . join ( '>' ) ; }
function ( newKey ) { this . _profilePicKey = newKey || Math . random ( ) ; }
function ( newKey ) { this . _profilePicKey = newKey || Math . random ( ) ; }
function ( context ) { ok ( false , 'テスト失敗。__readyが実行された' ) ; }
function ( context ) { deepEqual ( ++ count , 4 , '4. __disposeが実行されること' ) ; start ( ) ; }
function ( context ) { deepEqual ( ++ count , 3 , '3. __unbindが実行されること' ) ; }
function ( ) { ok ( false , 'テスト失敗。preinitPromiseがresolve()された' ) ; }
function ( a ) { ok ( false , 'テスト失敗。initPromiseがresolve()された' ) ; }
function ( a ) { ok ( false , 'テスト失敗。readyPromiseがresolve()された' ) ; }
function ( ) { ok ( true , '子コントローラのreadyPromiseのfailハンドラが呼ばれる。' ) ; }
function ( context ) { ok ( true , '子コントローラの__disposeが実行される。' ) ; disposedController . a = this ; }
function ( ) { ok ( true , '親コントローラのreadyPromiseのfailハンドラが呼ばれる。' ) ; }
function ( ) { ok ( true , 'preinitPromiseのdoneハンドラが実行されること' ) ; var dispose = testController . dispose ; dispose . apply ( testController ) ; dispose . apply ( testController ) ; }
function ( ) { ok ( true , 'コンストラクタは実行されること' ) ; }
function ( ) { ok ( true , '__unbindが実行されること' ) ; }
function ( ) { ok ( false , 'テスト失敗。initPromiseのdoneハンドラが実行された' ) ; }
function ( ) { ok ( ! flag , '__disposeが1度だけ実行されること' ) ; flag = true ; setTimeout ( function ( ) { start ( ) ; } , 0 ) ; }
function ( ) { ok ( true , '__unbindが実行されること' ) ; }
function ( ) { var dispose = this . dispose ; dispose . apply ( this ) ; dispose . apply ( this ) ; ok ( true , '__readyが実行されること' ) ; }
function ( ) { ok ( ! flag , '__disposeが1度だけ実行されること' ) ; flag = true ; setTimeout ( function ( ) { start ( ) ; } , 0 ) ; }
function ( ) { ret . push ( 2 ) ; }
function ( filePath ) { var dstPath = PATH . join ( finalBuildDir , filePath ) ; dependencies . push ( dstPath ) ; tasks . copy ( dstPath , filePath , [ ] , { copyToDirectory : true } ) ; }
function ( tx , r ) { if ( r . rows . length ) { var result = r . rows . item ( 0 ) ; deferred . resolve ( result . base64 ) ; } else { deferred . reject ( r ) ; } }
function ( tx , e ) { deferred . reject ( e ) ; }
function ( ) { $ ( '.htruncate' ) . truncate ( { dir : 'h' } ) ; $ ( '.vtruncate' ) . truncate ( { dir : 'v' } ) ; $ ( '#promos h2:not(.multiline)' ) . linefit ( ) ; }
function ( ) { var errorfields = pe . focus ( $ ( $ ( this ) . attr ( "href" ) ) ) ; if ( pe . mobile ) { $ . mobile . silentScroll ( errorfields . offset ( ) . top ) ; } }
function ( ev ) { nextProblem ( 1 ) ; $ ( Khan ) . trigger ( "gotoNextProblem" ) ; $ ( this ) . attr ( "disabled" , true ) . addClass ( "buttonDisabled" ) ; }
function ( ) { return '(' + this . x + ', ' + this . y + ')' ; }
function ( ) { return '(' + this . x + ', ' + this . y + ', ' + this . z + ')' ; }
function ( ) { _gl . uniformMatrix3fv ( _location , false , Matrix3 . toArray ( this . value ) ) ; }
function ( ) { for ( var i = 0 ; i < _locations . length ; ++ i ) { _gl . uniformMatrix3fv ( _locations [ i ] , false , Matrix3 . toArray ( this . value [ i ] ) ) ; } }
function ( ) { var right = new Cartesian3 ( 4 , 3 , 6 ) ; expect ( function ( ) { Cartesian3 . cross ( undefined , right ) ; } ) . toThrow ( ) ; }
function ( ) { return '(' + this . x + ', ' + this . y + ', ' + this . z + ', ' + this . w + ')' ; }
function ( ) { return '(' + this [ 0 ] + ', ' + this [ 2 ] + ')\n' + '(' + this [ 1 ] + ', ' + this [ 3 ] + ')' ; }
function ( $input ) { updatePicturePreview ( "/static/images/ajax-loader.gif" ) ; $options = { } ; $options . filename = $input . val ( ) . split ( /[\/\\]/ ) . pop ( ) ; return $options ; }
function ( e ) { var that = this ; if ( e . target != that . scroller ) return ; that . _unbind ( TRNEND_EV ) ; that . _startAni ( ) ; }
function ( ) { if ( this . options . useTransition ) this . _unbind ( TRNEND_EV ) ; else cancelFrame ( this . aniTime ) ; this . steps = [ ] ; this . moved = false ; this . animating = false ; }
function ( ) { var userList = phpr . userStore . getList ( ) ; for ( var i in userList ) { if ( userList [ i ] . id == phpr . currentUserId ) { return userList [ i ] ; } } }
function ( id ) { var userList = phpr . userStore . getList ( ) ; for ( var i in userList ) { if ( userList [ i ] . id == id ) { return userList [ i ] ; } } }
function ( ) { this . setSubmitInProgress ( false ) ; this . main . setGlobalModulesNavigation ( ) ; phpr . pageManager . modifyCurrentState ( { moduleName : "Module" , id : undefined } , { forceModuleReload : true } ) ; }
function ( ) { this . main . setGlobalModulesNavigation ( ) ; phpr . pageManager . modifyCurrentState ( { moduleName : "Module" , id : undefined } , { forceModuleReload : true } ) ; }
function ( req , res ) { 'use strict' ; res . writeHead ( 200 , { 'Content-Type' : 'text/plain' } ) ; res . end ( 'Hello, First Round Capital\n' ) ; }
function ( ) { _FunctionOptimizeCommand . prototype . constructor . call ( this , "lcse" ) ; }
function ( funcDef ) { var statements = funcDef . getStatements ( ) ; if ( statements != null ) { this . _optimizeStatements ( funcDef , statements , 0 ) ; } }
function ( err , val ) { should . equal ( val , "Geneva" ) ; true . should . equal ( called ) ; called = false ; done ( ) ; }
function ( err , val ) { should . equal ( val , "Geneva" ) ; true . should . equal ( called ) ; called = false ; done ( ) ; }
function ( ) { setupLizardUi ( ) ; this . initControls ( ) ; this . bindUiEvents ( ) ; this . initPreviewImage ( ) ; this . removeLoadingOverlay ( this . initGoogleEarth . bind ( this ) ) ; }
function ( ) { if ( $ ( this ) . attr ( 'src' ) == me . previewImageUrl ) { $ ( '#kml-preview-container' ) . show ( ) ; } }
function ( ) { this . previewImageUrl = emptyGif ; $ ( '#kml-preview' ) . attr ( 'src' , emptyGif ) ; $ ( '#kml-preview-container' ) . hide ( ) ; }
function ( ) { while ( canvas . buffer . length > 0 ) { console . log ( 'draw' , canvas . buffer . shift ( ) ) ; } }
function ( ) { if ( this . model . status != 'error' ) this . $el . find ( '.citation-icon i' ) . addClass ( 'loaded' ) ; this . $el . find ( '.player-citation-bubble' ) . show ( ) ; }
function ( ) { _this . model . status = 'error' ; _this . model . trigger ( 'load_error' , _this . model . id ) ; }
function ( type ) { log ( "TopicView::dragDrop:   %s: %s" , type , dataTransfer . getData ( type ) ) ; }
function ( model ) { var self = this ; log ( "TopicView::setModel(): topic[ %s ], %d items" , model . title , model . items . length ) ; self . options . model = model ; self . render ( ) ; return self ; }
function ( ) { for ( var ads = this . _ads , ad ; ad = ads . shift ( ) ; ) ad . setDisabled ( false , { adbs : false } ) ; zWatch . unlisten ( { onResponse : this } ) ; }
function ( ) { webview . executeJavascript ( "1 + 1" ) ; url = url || config . content ; if ( url ) { webview . setURL ( url ) ; } registerNavigatorEvents ( ) ; }
function ( resp ) { if ( resp === 'yes' ) { this . doDownload ( ) ; } }
function ( ) { $ ( this ) . fadeIn ( "fast" ) ; }
function ( ) { set_setter ( ) }
function ( ) { if ( event [ stopPropagation ] ) { event [ stopPropagation ] ( ) } else { if ( typeof event . cancelBubble !== 'unknown' ) { event . cancelBubble = true ; } } }
function ( ) { backgroundAlarm ( startcolor ) ; setTimeout ( function ( ) { startShrinking ( ) ; } , 5000 ) ; }
function ( modeName ) { currentMode = modeName ; gs . clearCollisionMap ( ) ; modes [ modeName ] . init ( ) ; }
function ( modeName ) { currentMode = modeName ; gs . clearCollisionMap ( ) ; modes [ modeName ] . init ( ) ; }
function ( er ) { if ( ! er ) return cb ( ) return cb ( er . code ? "Test failed.  See above for more details." : er ) }
function ( ) { return this . pluck ( 'wireframe' ) ; }
function ( cube ) { return cube . get ( 'wireframe' ) . id === ( wf && wf . id ) ; }
function ( wf ) { return this . find ( function ( cube ) { return cube . get ( 'wireframe' ) . id === ( wf && wf . id ) ; } ) || null ; }
function ( intersect ) { return intersect && this . getFromWireframe ( intersect . object ) ; }
function ( color ) { this . get ( 'wireframe' ) . material . color . setHex ( color ) ; }
function ( x , y ) { return this . cubes . getFromIntersect ( this . getIntersectBetween ( x , y , this . cubes . wireframes ( ) ) ) ; }
function ( ) { var result = cursor . result ; if ( result ) { processNewFile ( result ) ; } else { if ( newfiles . length > 0 ) { saveAndReportQuickScanResults ( fullScan ) ; } else { fullScan ( ) ; } } }
function ( ) { buildUI ( ) ; photodb . scan ( ) ; document . addEventListener ( 'mozvisibilitychange' , function visibilityChange ( ) { if ( ! document . mozHidden ) { photodb . scan ( ) ; } } ) ; }
function ( type , files ) { rebuildUI ( ) ; }
function ( params , success , error ) { if ( 'id' in params ) { $ . ajax ( { url : '/system/weblounge/pages/' + params . id + '/lock' , type : 'delete' , success : success , error : error } ) ; } }
function ( params , success , error ) { if ( 'id' in params ) { $ . ajax ( { url : '/system/weblounge/pages/' + params . id + '/publish' , type : 'delete' , success : success , error : error } ) ; } }
function ( data ) { main . data = data ; main . listCourses ( 'all' ) ; main . listDiscussions ( ) ; main . ListUsers ( ) ; main . courseDataStatus = 'loaded' ; console . log ( data ) ; }
function ( data ) { console . log ( data ) ; main . data . allPosts . push ( post ) ; main . SingleDiscussion ( currentDisc ) ; }
function showHome ( ) { $ ( '.page' ) . hide ( ) ; $ ( '#homePage' ) . show ( ) ; }
function ( assertion ) { if ( callback ) { callback ( assertion ) ; callback = null ; } }
function ( err , data ) { if ( data ) { callback ( null , parseInt ( data . hits . total ) ) ; } else { callback ( err ) ; } }
function ( err , data ) { var filepath = path . join ( __dirname , data . filename ) ; assert . isTrue ( existsSync ( filepath ) ) ; fs . unlinkSync ( filepath ) ; }
function ( data ) { if ( ( index < 6 && data . clientRequestID == 1234 ) || index < 3 ) result . push ( possibleResults [ index ++ ] ) ; return $ . extend ( true , [ ] , result ) ; }
function ( data ) { if ( ( index < 6 && data . clientRequestID == 1234 ) || index < 3 ) result . push ( possibleResults [ index ++ ] ) ; return $ . extend ( true , [ ] , result ) ; }
function browser_handlePageScreenClicked ( e ) { if ( this . inTransition ) { return ; } if ( this . currentScreen === this . TABS_SCREEN ) { this . showPageScreen ( ) ; } }
function tabSwipe_tap ( ) { if ( this . browser . inTransition ) { return ; } this . browser . selectTab ( this . id ) ; this . browser . showPageScreen ( ) ; }
function ( ) { require ( '/shared/js/gesture_detector.js' ) ; requireApp ( 'calendar/js/templates/month.js' ) ; requireApp ( 'calendar/js/views/month_child.js' ) ; }
function ( ) { require ( '/shared/js/gesture_detector.js' ) ; requireApp ( 'calendar/js/templates/month.js' ) ; requireApp ( 'calendar/js/views/month_child.js' ) ; requireApp ( 'calendar/js/views/month.js' ) ; }
get anchor ( ) { delete this . _anchor ; return this . _anchor = document . getElementById ( 'views-sublist-anchor' ) ; } ,
function pv_previous ( ) { var songElements = SubListView . anchor . children ; if ( this . currentIndex <= 0 ) return ; this . currentIndex -- ; this . play ( songElements [ this . currentIndex ] . firstElementChild ) ; }
function showBody ( ) { document . documentElement . lang = navigator . mozL10n . language . code ; document . documentElement . dir = navigator . mozL10n . language . direction ; document . body . classList . remove ( 'invisible' ) ; }
function onScanError ( error ) { scanning = false ; clear ( false ) ; if ( autoscan ) window . setTimeout ( scan , scanRate ) ; }
function wifiConnect ( ) { gWifiManager . associate ( network ) ; gNetworkList . display ( network . ssid , _ ( 'shortStatus-connecting' ) ) ; }
function wifiDisconnect ( ) { gWifiManager . forget ( network ) ; gNetworkList . display ( network . ssid , _ ( 'shortStatus-disconnected' ) ) ; }
function ( ) { subject . domain = 'http://google.com' ; subject . url = '/foo' ; assert . equal ( subject . fullUrl , 'http://google.com/foo' ) ; }
function ( ) { subject . fullUrl = 'http://google.com/foo/bar' ; assert . equal ( subject . domain , 'http://google.com' ) ; assert . equal ( subject . url , '/foo/bar' ) ; }
function ( ) { $ ( "section" ) . css ( { "height" : "" } ) ; }
function ( ) { $ ( ".search input" ) . val ( "" ) . keyup ( ) ; }
function vibrate ( ) { navigator . vibrate ( [ 200 ] ) ; }
function vibrate ( ) { if ( 'vibrate' in navigator ) { navigator . vibrate ( [ 200 ] ) ; } }
function takeScreenshot ( ) { navigator . vibrate ( 100 ) ; var screenshotProps = { detail : { type : 'take-screenshot' } } ; window . dispatchEvent ( new CustomEvent ( 'mozContentEvent' , screenshotProps ) ) ; }
function ss_onsuccess ( ) { navigator . vibrate ( 100 ) ; navigator . mozNotification . createNotification ( _ ( 'screenshotSaved' ) , filename ) . show ( ) ; }
function ( options ) { this . _models = [ ] ; Backbone . View . call ( this , options ) ; View . viewCount ++ ; View . views [ this . cid ] = this ; this . _created_at = new Date ( ) ; }
function ( ) { if ( this . options . map === undefined ) { throw new Exception ( "you should specify a map model" ) ; } this . map = this . options . map ; this . add_related_model ( this . map ) ; }
function ( ) { this . map . bind ( 'change:zoom' , this . _setZoom , this ) ; this . map . bind ( 'change:center' , this . _setCenter , this ) ; }
function ( ) { this . map . unbind ( 'change:zoom' , this . _setZoom , this ) ; this . map . unbind ( 'change:center' , this . _setCenter , this ) ; }
function ( val , key ) { transDate = new Date ( val . createdAt ) ; if ( transDate . getMonth ( ) == thisMonth ) { $scope . transactions . push ( val ) ; $scope . current += val . attributes . amount ; } }
function ( e ) { if ( e . data === trackEvent ) { e . data . view . element . removeEventListener ( "mouseup" , trackEventClicked , true ) ; } }
function ( basePower , user , target , move ) { if ( user . template . num === 487 && ( move . type === 'Ghost' || move . type === 'Dragon' ) ) { return basePower * 1.2 ; } }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.cssTemplates.MyTemplate" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.domInteractions.DomInteractionTemplate" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.macros.MyTemplate" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { window . alert = function ( m ) { } ; Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.templateScripts.MyTemplate" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function initMain ( ) { for ( var factory in modules ) { window [ factory ] = modules [ factory ] ; } return { } ; }
function ( topic , args ) { self . _sendActivity ( "unlike" , args . item ) ; return { "stop" : [ "bubble" ] } ; }
function add_track ( track_id , track_url ) { tracks [ track_id ] = track_url ; last_track_index ++ ; tracks_ids [ last_track_index ] = track_id ; }
function ( data ) { data . pop ( ) ; grinfit . searchCache = data ; }
function fixlat ( n ) { return ( n < 0 ? 90 + n : 90 + n ) ; }
function ( numer , instance ) { return numer + ( _ . contains ( responseNames , instance . response [ questionName ] ) ? 1 : 0 ) ; }
function ( packet ) { this . end ( this . _packetToError ( packet ) ) ; }
function ( ) { hostSubscribe ( '' ) ; }
function ( ) { hostSubscribe ( '' ) ; }
function ( v , axis ) { var factor = Math . pow ( 10 , axis . tickDecimals ) ; return Math . round ( v * factor ) / factor ; }
function ( ) { log ( 'Emit ' , arguments ) ; _emit . apply ( self , arguments ) ; }
function ( ) { if ( verbose ) log ( 'timed-out' ) ; cleartextStream . destroy ( ) ; }
function ( exception ) { clearConnection ( ) ; if ( verbose ) log ( 'Client error' , exception ) ; self . emit ( 'clientError' , exception ) ; }
function ( ) { log ( 'Emit ' , arguments ) ; _emit . apply ( self , arguments ) ; }
function ( ) { $ ( container ) . bAutoSize ( 'resize' ) ; }
function ( ) { $ ( ".message-area" ) . empty ( ) ; }
function ( index ) { return this . _models [ index ] ; }
function ( e ) { if ( e . keyCode == 13 ) { performSearch ( ) ; e . preventDefault ( ) ; } }
function ( ) { that . cleanNumerations ( ) ; if ( that . showNumbers ( ) ) { that . createNumeratedHeaders ( ) ; } }
function ( element ) { jQuery ( element ) . addClass ( WAI_LANG_CLASS ) ; }
function ( scope ) { this . _this = scope ; }
function ( base , locations ) { dd . register . _any ( "filters" , base , locations ) ; }
function ( ) { error = W3S . Core . Ajax . fieldValidation ( $ ( this ) , conf . tags ) ; if ( error ) { $ ( this ) . addClass ( conf . errCls ) ; return false ; } }
function ( code , msg ) { var err = new Error ( msg || http . STATUS_CODES [ code ] ) ; err . status = code ; return err ; }
function ( ) { buildContent ( ) }
function ( ) { return _ . escape ( this ) ; }
function ( n ) { return n [ '@language' ] == 'en' ; }
function ( $element ) { return $element . is ( $ . in_field . support_types ) ; }
function ( ) { var $input , $label , _ref ; _ref = set_fixtures_for_not_associating_input_and_label ( ) , $input = _ref [ 0 ] , $label = _ref [ 1 ] ; return expect ( $ . InField . find_label_for ( $input ) ) . toBeUndefined ( ) ; }
function objectFromPackedData ( key , buffer ) { var data = JSON . parse ( buffer ) ; return new CacheObject ( key , data ) ; }
function ( ) { me . refresh ( ) ; me . core . refreshModel ( 'addresses' ) ; }
function ( context , node ) { return context . contains ( node ) ; }
function ( node , index ) { return this [ 'pseudo:nth-child' ] ( node , '' + ( index + 1 ) ) ; }
function ( ) { return ( 'htmlFor' in this ) ? this . htmlFor : this . getAttribute ( 'for' ) ; }
function ( node , value ) { node . value = ( value != null ) ? value : '' ; }
function ( element , opacity ) { element . store ( '$opacity' , opacity ) ; element . style . visibility = opacity > 0 || opacity == null ? 'visible' : 'hidden' ; }
function ( event ) { return this . type != 'radio' || ( event . event . propertyName == 'checked' && this . checked ) ; }
function ( ctx , tmpl ) { if ( ctx . value ) { return tmpl . render ( this ) ; } else { return this . createDocumentFragment ( ) ; } }
function ( ctx , tmpl ) { if ( ! ctx . value ) { return tmpl . render ( this ) ; } else { return this . createDocumentFragment ( ) ; } }
function ( subcontext , subtemplate ) { result = subtemplate . render ( { value : 'my value' } ) ; return this . createDocumentFragment ( ) ; }
function ( subcontext , subtemplate , opt ) { options = opt ; return this . createDocumentFragment ( ) ; }
function ( subcontext , subtemplate , opt ) { return this . createDocumentFragment ( ) ; }
function ( subcontext , subtemplate , opt ) { options = opt ; return this . createDocumentFragment ( ) ; }
function ( subcontext , subtemplate ) { return this . createDocumentFragment ( ) ; }
function ( subcontext , subtemplate ) { return this . createDocumentFragment ( ) ; }
function ( subcontext , subtemplate , opt ) { options = opt ; return this . createDocumentFragment ( ) ; }
function ( subcontext ) { arg = subcontext ; return this . createDocumentFragment ( ) ; }
function ( subcontext , subtemplate , opt ) { arg2 = subcontext ; options = opt ; return this . createDocumentFragment ( ) ; }
function ( ) { expect ( fragment . nodeType ) . toBe ( document . DOCUMENT_FRAGMENT_NODE ) ; expect ( fragment . ownerDocument ) . toBe ( document ) ; }
function ( ) { expect ( elementNodes [ 0 ] . nodeType ) . toBe ( document . ELEMENT_NODE ) ; expect ( elementNodes [ 0 ] . ownerDocument ) . toBe ( document ) ; }
function ( ) { _gl . uniformMatrix2fv ( _location , false , Matrix2 . toArray ( this . value ) ) ; }
function ( ) { for ( var i = 0 ; i < _locations . length ; ++ i ) { _gl . uniformMatrix2fv ( _locations [ i ] , false , Matrix2 . toArray ( this . value [ i ] ) ) ; } }
function ( ) { var matrix = new Matrix2 ( 1 , 2 , 3 , 4 ) ; expect ( matrix . toString ( ) ) . toEqual ( '(1, 2)\n(3, 4)' ) ; }
function ( ) { Matrix2 . fromRowMajorArray ( { } ) ; }
function ( ) { expect ( function ( ) { Matrix2 . fromRowMajorArray ( { } ) ; } ) . toThrow ( ) ; }
function ( ) { Matrix2 . fromColumnMajorArray ( { } ) ; }
function ( ) { expect ( function ( ) { Matrix2 . fromColumnMajorArray ( { } ) ; } ) . toThrow ( ) ; }
function ( ) { expect ( function ( ) { Matrix2 . toArray ( undefined ) ; } ) . toThrow ( ) ; }
function ( feature ) { expect ( feature . get ( 'start' ) ) . toBeGreaterThan ( 10000 ) ; expect ( feature . get ( 'end' ) ) . toBeLessThan ( 30000 ) ; }
function rawText ( element ) { var text = element . html ( ) return text . replace ( /\n/g , '' ) . replace ( /<div><br><\/div>/g , '<br>' ) . replace ( /<div>/ , '<br>' ) . replace ( /<\/div>/g , "" ) }
function ( ) { C4 . debug ( "Connected to server" ) ; if ( C4 . playerId ) C4 . send ( "CONNECT AS " + C4 . playerId ) ; else C4 . send ( "CONNECT" ) ; C4 . add_handler ( C4 . cb_welcome ) ; }
function ( ) { C4 . status ( "No connection to server" ) ; C4 . clear_seeks ( ) ; setTimeout ( function ( ) { C4 . connect ( url ) ; } , 5000 ) ; }
function ( msg ) { this . gameStatusEl . text ( msg ) ; }
function ( msg ) { for ( var i = 0 ; i < C4 . handlers . length ; ++ i ) { if ( C4 . handlers [ i ] ( msg ) ) return ; } C4 . debug ( "Unexpected message : " + msg ) ; }
function ( seekid ) { $ ( ".seek-list > div" ) . has ( "button[id=seek_" + seekid + "]" ) . remove ( ) ; if ( $ ( ".seek-list > div" ) . length == 0 ) $ ( "#seeks-title" ) . text ( "No seeks from others" ) ; }
function ( seekid ) { $ ( ".my-seeks > div" ) . has ( "button[id=seek_" + seekid + "]" ) . remove ( ) ; if ( $ ( ".my-seeks > div" ) . length == 0 ) $ ( "#my-seeks-title" ) . text ( "No seeks from you" ) ; }
function ( col ) { if ( C4 . canPlay ( ) ) { C4 . sock . send ( "PLAY " + C4 . gameId + " DROP " + col ) ; C4 . debug ( "Sending move" ) ; } }
function Rectangle ( x , y , z , width , height , depth ) { return this . set ( x , y , z , width , height , depth ) ; }
function toString ( ) { return "Rectangle( x:" + this . x + ", y:" + this . y + ", z:" + this . z + ", width:" + this . width + ", height:" + this . height + ", depth:" + this . depth + ")" ; }
function Rectangle ( x , y , z , width , height , depth ) { return this . set ( x , y , z , width , height , depth ) ; }
function toString ( ) { return "Rectangle( x:" + this . x + ", y:" + this . y + ", z:" + this . z + ", width:" + this . width + ", height:" + this . height + ", depth:" + this . depth + ")" ; }
function onCurrentDocumentChange ( ) { removePopup ( ) ; $ ( ".CodeMirror-lines" ) . on ( "mousemove" , onLinesMouseMove ) . on ( "mouseout" , onLinesMouseOut ) ; }
function init ( ) { $ ( DocumentManager ) . on ( "currentDocumentChange" , onCurrentDocumentChange ) ; setTimeout ( onCurrentDocumentChange , 0 ) ; }
function ( style , array ) { for ( var i = 0 ; i < array . length ; i ++ ) { this . dom . style [ style ] = array [ i ] ; } }
function ( ) { this . setStyle ( 'left' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'top' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'width' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'border' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'borderTop' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'borderBottom' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'borderLeft' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'margin' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'marginTop' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'marginBottom' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'marginLeft' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'fontWeight' , arguments ) ; return this ; }
function ( ) { this . setStyle ( 'color' , arguments ) ; return this ; }
function ( code ) { if ( code === 1 ) { process . exit ( 1 ) ; } else { callback ( code ) ; } }
function succHandler ( ) { CDOT . scopeId = undefined ; CDOT . userId = undefined ; CDOT . disconnectHandler ( ) ; }
function ( ) { log . debug ( "Connected. Disabling connect button and enabling the disconnect" ) ; $ ( '#disconnectBtn' ) . click ( CDOT . disconnect ) . removeClass ( 'disabled' ) ; $ ( '#localUserIdLbl' ) . html ( connDescriptor . token ) ; }
function ( data ) { var toHTML = compassAPI . formatDataForHTML ( data ) ; $ ( '#debug-compass' ) . html ( toHTML ) ; }
function ( data ) { var toHTML = accelerometerAPI . formatDataForHTML ( data ) ; $ ( '#debug-accelerometer' ) . html ( toHTML ) ; }
function ( data ) { var toHTML = gyroscopeAPI . formatDataForHTML ( data ) ; $ ( '#debug-gyroscope' ) . html ( toHTML ) ; }
function ( dateText , inst ) { var date = $ ( this ) . datepicker ( 'getDate' ) ; setCurrentWeek ( $ ( this ) , date , inst ) ; selectCurrentWeek ( ) ; $ ( '#week-tab-trigger' ) . trigger ( 'click' ) ; }
function ( ) { this . id = null ; this . elm = null ; this . par = null ; this . title = "" ; this . menu = null ; }
function ( ev , ui ) { this . close ( ) ; jQuery ( 'body' ) . trigger ( 'layoutresizeall' ) ; }
function ( ev , ui ) { var droppedObject = jQuery ( ui . draggable ) . clone ( ) , droppedPath = droppedObject . attr ( "path" ) ; if ( droppedPath ) { self . editFile ( droppedPath ) ; } }
function ( ) { var menu = new draw2d . Menu ( ) ; var oThis = this ; menu . setZOrder ( 999999 ) ; return menu ; }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( focusedOut && datePicker . not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker . trigger ( 'focusout' ) ; datePicker . triggerHandler ( 'blur' ) ; } else { resetFocusHandler ( ) ; } }
function ( ) { if ( focusedOut && datePicker . not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker . trigger ( 'focusout' ) ; datePicker . triggerHandler ( 'blur' ) ; } else { resetFocusHandler ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( focusedOut && datePicker . not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker . trigger ( 'focusout' ) ; datePicker . triggerHandler ( 'blur' ) ; } else { resetFocusHandler ( ) ; } }
function ( a , b ) { if ( b ( c , f , g ) ) h [ a ] = ! 0 , h . valid = ! 1 }
function ( a , c ) { if ( c ( b , g , f ) ) d [ a ] = ! 0 , d . valid = ! 1 }
function ( ) { clearTimeout ( j . hideTimer ) ; j . hideTimer = setTimeout ( j . hideList , 9 ) }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( focusedOut && datePicker . not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker . trigger ( 'focusout' ) ; datePicker . triggerHandler ( 'blur' ) ; } else { resetFocusHandler ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( focusedOut && datePicker . not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker . trigger ( 'focusout' ) ; datePicker . triggerHandler ( 'blur' ) ; } else { resetFocusHandler ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( focusedOut && datePicker . not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker . trigger ( 'focusout' ) ; datePicker . triggerHandler ( 'blur' ) ; } else { resetFocusHandler ( ) ; } }
function ( ) { if ( focusedOut && datePicker . not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker . trigger ( 'focusout' ) ; datePicker . triggerHandler ( 'blur' ) ; } else { resetFocusHandler ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( focusedOut && datePicker . not ( ':focus' ) ) { resetFocusHandler ( ) ; datePicker . trigger ( 'focusout' ) ; datePicker . triggerHandler ( 'blur' ) ; } else { resetFocusHandler ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( $ ( this ) . is ( ':focus' ) ) { that . showList ( ) ; } }
function ( ) { if ( this . InputManager . init ) { this . InputManager . init ( ) ; } }
function ( ) { var cache = get_cache_service ( ) ; var session = cache . createSession ( sessionName , storagePolicy , Components . interfaces . nsICache . STREAM_BASED ) ; session . asyncOpenCacheEntry ( key , access , this ) ; }
function ( cv , iv ) { var $container = this . getItemViewContainer ( cv ) ; $container . append ( iv . el ) ; }
function ( ) { return window . indexedDB || window . webkitIndexedDB || window . oIndexedDB || window . msIndexedDB ; }
function ( ev ) { console . log ( 'onblocked!' ) ; }
function ( shape ) { var toKeep = ( shape . owner === owner ) || ! shape . isDead ( ) ; if ( ! toKeep ) { killedShapes = killedShapes . concat ( shape . chain . values ( ) ) ; } return toKeep ; }
function ( shape ) { var toKeep = ! shape . isDead ( ) ; if ( ! toKeep ) { killedShapes = killedShapes . concat ( shape . chain . values ( ) ) ; } return toKeep ; }
function ( jqXHR , textStatus , errorThrown ) { mw . log ( "mw.ajaxProxy :: Error: cross domain request failed, trying with proxy" ) ; _this . proxy ( ) ; }
function ( error ) { mw . log ( "mw.ajaxProxy :: Error: could not load:" , error ) ; _this . options . error ( ) ; }
function do_process_key ( event ) { if ( event . which == 13 && event . target . nodeName == "INPUT" && event . target . type == "text" ) { var submit_button = $ ( "#page-toolbar button[type=submit]" ) submit_button . click ( ) } return false }
function ( ) { Y . log ( 'rpc failure!' , 'warn' , NAME ) ; adapter . error ( resp . html ) ; }
function ( e ) { if ( uploaded == false || uploading == true ) { e . preventDefault ( ) ; alert ( Drupal . t ( 'You must upload one or more files before you can submit the form.' ) ) ; } }
function ( event ) { event . preventDefault ( ) ; var target = $ ( event . currentTarget ) ; this . _status = target . data ( 'type' ) ; this . reload ( ) ; }
function ( ) { led . stop ( ) . off ( ) ; }
function ( def ) { five . Servo . prototype [ def [ 1 ] ] = function ( speed ) { speed = speed || def [ 0 ] ; this . move ( speed ) ; } ; }
function ( data ) { uid = data . uid ; socketid = data . socket_id ; console . log ( '-> socket' , socketid ) ; createPopup ( uid , socketid ) ; updateLog ( 'Connection established with phone.' ) ; }
function ( data ) { try { clients [ data . key ] . emit ( 'command' , data ) ; } catch ( error ) { } }
function ( err , result ) { var source = ( ! result ) ? '' : ( new Buffer ( result , 'base64' ) ) . toString ( 'utf-8' ) ; cb ( null , resp , source , true ) ; }
function ( err , result ) { cb ( null , resp , source , false ) ; }
function ( err ) { return $this . compile ( source , cb , false ) ; }
function ( err , resp , source , cache_hit ) { if ( err ) { cb ( err , null , false ) ; } else { $this . compile ( source , cb , cache_hit ) ; } }
function ( message ) { process . send ( { request_id : request_id , name : ev_name , message : message } ) ; }
function passwordLength ( password ) { var valid = password && ( password . length >= bid . PASSWORD_MIN_LENGTH && password . length <= bid . PASSWORD_MAX_LENGTH ) ; if ( ! valid ) { tooltip . showTooltip ( "#password_length" ) ; } return valid ; }
function handleEmailStaged ( actionName , msg , info ) { var actionInfo = { email : info . email , password : self . stagedPassword , siteName : self . siteName } ; self . stagedEmail = info . email ; startAction ( actionName , actionInfo ) ; }
function ( authentication ) { if ( authentication === "assertion" ) { redirectToState ( "authenticate_specified_email" , info ) ; } else { redirectToState ( "email_valid_and_ready" , info ) ; oncomplete ( ) ; } }
function ( ) { self . close ( self . verificationMessage , { mustAuth : false } ) ; oncomplete && oncomplete ( ) ; }
function ( ) { self . close ( self . verificationMessage , { mustAuth : false } ) ; oncomplete && oncomplete ( ) ; }
function ( status ) { if ( status . success ) { pageHelpers . emailSent ( "waitForUserValidation" , oncomplete && oncomplete . curry ( true ) ) ; } else { tooltip . showTooltip ( "#could_not_add" ) ; oncomplete && oncomplete ( false ) ; } }
function ( status ) { equal ( status , "complete" ) ; start ( ) ; }
function ( status ) { equal ( status , "mustAuth" , "mustAuth response expected" ) ; testHelpers . testEmailMarkedVerified ( "registered@testuser.com" ) ; ok ( ! storage . getReturnTo ( ) , "staged on behalf of is cleared when validation completes" ) ; start ( ) ; }
function ( status ) { equal ( status , "mustAuth" , "mustAuth response expected" ) ; testHelpers . testEmailMarkedVerified ( "registered@testuser.com" ) ; ok ( ! storage . getReturnTo ( ) , "staged on behalf of is cleared when validation completes" ) ; start ( ) ; }
function ( ) { var tooShort = testHelpers . generateString ( bid . PASSWORD_MIN_LENGTH - 1 ) ; var valid = validation . passwordAndValidationPassword ( tooShort , tooShort ) ; equal ( valid , false , "too short password is invalid" ) ; equal ( tooltipShown , true , "too short password shows tooltip" ) ; }
function ( ) { $ ( "#email" ) . val ( "unregistered@testuser.com" ) ; $ ( "#password,#vpassword" ) . val ( testHelpers . generateString ( bid . PASSWORD_MIN_LENGTH - 1 ) ) ; testEmailNotSent ( ) ; }
function ( ) { $ ( "#email" ) . val ( "unregistered@testuser.com" ) ; $ ( "#password,#vpassword" ) . val ( testHelpers . generateString ( bid . PASSWORD_MAX_LENGTH + 1 ) ) ; testEmailNotSent ( ) ; }
function ( ) { testPasswordChangeFailure ( generateString ( bid . PASSWORD_MAX_LENGTH + 1 ) , "newpassword" , "missing old password, expected failure" ) ; }
function ( ) { testPasswordChangeFailure ( "oldpassword" , generateString ( bid . PASSWORD_MAN_LENGTH + 1 ) , "too short new password, expected failure" ) ; }
function handleAddressVerifyCheckResponse ( onComplete , status , textStatus , jqXHR ) { if ( status . status === 'complete' && status . userid ) setUserID ( status . userid ) ; complete ( onComplete , status . status ) ; }
function ( config ) { if ( config . provisioning ) { provisioning = config . provisioning ; } if ( config . pollDuration ) { pollDuration = config . pollDuration ; } }
function ( ) { provisioning = BrowserID . Provisioning ; User . resetCaches ( ) ; registrationComplete = false ; pollDuration = POLL_DURATION ; }
function ( ) { if ( base . isVisible ) { base . $keyboard . position ( base . position ) ; } }
function ( ) { testActionStartsModule ( "doConfirmUser" , { email : TEST_EMAIL , siteName : "Unit Test Site" } , "check_registration" ) ; }
function ( ) { testActionStartsModule ( "doConfirmEmail" , { email : TEST_EMAIL , siteName : "Unit Test Site" } , "check_registration" ) ; }
function ( x ) { var regex = /^https?:\/\/(?=.{1,254}(?::|$))(?:(?!\d|-)(?![a-z0-9\-]{1,62}-(?:\.|:|$))[a-z0-9\-]{1,63}\b(?!\.$)\.?)+(:\d+)?$/i ; if ( typeof x !== 'string' || ! x . match ( regex ) ) { throw new Error ( "not a valid origin" ) ; } }
function extractOrigin ( url ) { if ( ! /^https?:\/\// . test ( url ) ) url = window . location . href ; var m = /^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/ . exec ( url ) ; if ( m ) return m [ 1 ] ; return url ; }
function ( value , pattern ) { if ( value === "" ) { return true ; } var regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\.[a-zA-Z0-9_-]{2,3}){1,2})$/ ; return regex . test ( value ) ; }
function ( ) { SimpleTest . finish ( ) ; }
function ( ) { this . guid = baidu . lang . guid ( ) ; ! this . __decontrolled && ( baidu . $$ . _instances [ this . guid ] = this ) ; }
function ( ) { return "[object " + ( this . __type || this . _className || "Object" ) + "]" ; }
function ( test ) { test . expect ( 2 ) ; test . ok ( ngneer . ipa , "the ipa function is defined" ) ; test . ok ( ngneer . vanilla , "the vanilla function is defined" ) ; test . done ( ) ; }
function ( ) { if ( ! that . $menu . is ( ':hover' ) ) { that . hide ( ) ; } }
function ( ) { app . initialize ( ) ; ok ( app . getPath ( 'router.store' ) instanceof DS . Store , "the store was injected" ) ; }
function ( ) { app . initialize ( ) ; ok ( app . getPath ( 'router.fooController.store' ) instanceof DS . Store , "the store was injected" ) ; }
function ( item ) { return utils . indexOf ( obj , item ) ; }
function ( array , item ) { var index = utils . indexOf ( array , item ) ; if ( index !== - 1 ) { array . splice ( index , 1 ) ; } }
function ( url ) { router . route ( url ) ; }
function ( val ) { effect . onIntensityChange = val ; return methods ; }
function ( ) { if ( error ) return callback ( error ) ; self . compiler . compile ( function ( error ) { if ( error ) return callback ( error ) ; buildMap ( ) ; callback ( ) ; } ) ; }
function ( object , prop , options ) { if ( ! ( object && object [ prop ] ) ) return null ; return _ . isFunction ( object [ prop ] ) ? object [ prop ] ( options ) : object [ prop ] ; }
function ( e ) { this . model . set ( { edit : false } ) ; if ( this . model . get ( 'url' ) == undefined ) this . removeTrack ( ) ; }
function ( data ) { var toDelete = this . domTree_map [ data . value . id ] . children [ data . position ] ; EditorTree . applyDel ( toDelete ) ; delete this . domTree_map [ toDelete . id ] ; }
function ( at , i ) { var partner = Mp [ at . diffId ] ; if ( partner && partner . parent == x ) S1 . push ( at ) ; }
function ( at , i ) { var partner = Mp [ at . diffId ] ; if ( partner && partner . parent == w ) S2 . push ( at ) ; }
function ( at , i ) { if ( ! deepEquals ( at , t2 . children [ i ] , checkId ) ) { ret = false ; return true ; } }
function ( v ) { return typeof v === 'function' ? v : def . fun . constant ( v ) ; }
function ( ) { return ! ! ( this . $tip && this . $tip [ 0 ] . parentNode ) ; }
function ( scene ) { var catVar = scene . vars . category ; return catVar . x - catVar . width / 2 ; }
function ( scene ) { return scene . vars . category . width ; }
function ( scene ) { return scene . vars . category . showVRuleAbove && this . delegate ( true ) ; }
function ( scene ) { return scene . vars . category . vRuleAboveBottom ; }
function ( scene ) { return scene . vars . category . showVRuleBelow && this . delegate ( true ) ; }
function ( scene ) { return scene . vars . category . vRuleBelowBottom ; }
function ( scene ) { return scene . vars . category . boxLeft ; }
function ( scene ) { return scene . vars . category . showBox && this . delegate ( true ) ; }
function ( scene ) { return scene . vars . category . boxBottom ; }
function ( ) { return this . scene . vars . percentil5 . value != null && this . delegate ( true ) ; }
function ( ) { return this . scene . vars . percentil5 . position ; }
function ( ) { return this . scene . vars . percentil95 . value != null && this . delegate ( true ) ; }
function ( ) { return this . scene . vars . percentil95 . position ; }
function ( ) { return this . scene . vars . median . value != null && this . delegate ( true ) ; }
function ( ) { return this . scene . vars . median . position ; }
function ( scene ) { return scene . vars . item . color ; }
function ( scene ) { return scene . vars . item . click ? "pointer" : null ; }
function ( scene ) { var item = scene . vars . item ; if ( item . click ) { return item . click ( ) ; } }
function ( scene ) { return myself . shape || scene . vars . item . shape ; }
function ( scene ) { return myself . shape || scene . vars . item . shape ; }
function ( scene ) { return scene . vars . item . label ; }
function ( scene ) { return scene . vars . value . label ; }
function ( ) { return sizeValueToArea ( this . scene . vars . dotSize . value ) ; }
function ( scene ) { return def . string . join ( "," , scene . vars . x . label , scene . vars . y . label ) ; }
function getNewOperationId ( ) { return nextOperationId ++ ; }
function hideTipsyCore ( opId ) { setTarget ( null ) ; if ( $fakeTipTarget ) { $fakeTipTarget . tipsy ( "leave" ) ; } }
function ( ) { return layoutInfo . topOffset + this . index * layoutInfo . lineSize . height ; }
function ( scene ) { if ( isFalling && ! this . index ) { return 1 ; } if ( scene . vars . category . group . _isFlattenGroup ) { return - 2 ; } return isFalling ? - 1 : 1 ; }
function ( scene ) { var categVar = scene . vars . category ; return baseScale ( categVar . leftValue ) - barStepWidth / 2 ; }
function ( scene ) { var categVar = scene . vars . category , length = Math . abs ( baseScale ( categVar . rightValue ) - baseScale ( categVar . leftValue ) ) ; return length + barStepWidth ; }
function ( scene ) { return orthoScale ( scene . vars . value . bottomValue ) - orthoPanelMargin / 2 ; }
function ( scene ) { return orthoScale ( scene . vars . value . heightValue ) + orthoPanelMargin ; }
function ( scene ) { if ( scene . vars . category . group . _isFlattenGroup ) { return false ; } return isFalling || ! ! scene . nextSibling ; }
function ( scene ) { return scene . vars . value . label ; }
function ( scene ) { var value = scene . vars [ varName ] . value ; if ( value == null ) { if ( ! nullToZero ) { return value ; } value = 0 ; } return scale ( value ) ; }
function ( scene ) { return scene . vars [ varName ] . value ; }
function ( ) { var active = this . active ( ) ; return active && active . vars . series . value ; }
function ( ) { if ( this . isActive ) { return true ; } var activeSeries ; return ( activeSeries = this . activeSeries ( ) ) != null && ( activeSeries === this . vars . series . value ) ; }
function ( type ) { var colorVar = this . scene . vars [ this . chart . legendSource ] ; return this . legendColorScale ( ) ( colorVar && colorVar . value ) ; }
function ( instance ) { return pv . vector ( instance . left + ( instance . width || 0 ) / 2 , instance . top + ( instance . height || 0 ) / 2 ) ; }
function ( instance ) { return pv . vector ( instance . left , instance . top ) ; }
function ( instance , nextInstance ) { return pv . vector ( ( instance . left + nextInstance . left ) / 2 , ( instance . top + nextInstance . top ) / 2 ) ; }
function ( scene ) { var value = scale ( scene . vars . tick . value ) ; if ( this . index + 1 < count ) { return value - halfStep ; } return value + halfStep ; }
function ( scene ) { return options . showValuePercentage ? scene . vars . value . percent : scene . vars . value ; }
function ( ) { return this . _valueVar ( ) . label ; }
function ( seriesScene , seriesData1 ) { seriesScene . vars . series = new pvc . visual . ValueLabelVar ( seriesData1 . value , seriesData1 . label ) ; }
function ( ) { var pvFormat = pv . Format . number ( ) . fractionDigits ( 0 , 2 ) ; return function ( d ) { return pvFormat . format ( d ) ; } ; }
function ( ) { if ( ! this . length ) { return 1 ; } return this . last ( ) . get ( 'order' ) + 1 ; }
function ( e ) { if ( e . keyCode === 13 ) { this . close ( ) ; } }
function ( ) { gotoMemoryLocation ( $ ( this ) . html ( ) ) ; }
function ( evt ) { gotoMemoryLocation ( $ ( this ) . text ( ) ) ; }
function gotoMemoryLocation ( location ) { var val = parseInt ( location ) ; if ( isNaN ( val ) ) return ; $ ( "#memory_container" ) . scrollTop ( Math . floor ( val / 8 ) * LINE_HEIGHT ) ; updateMemoryWindow ( ) ; }
function ( ) { window . location . replace ( "/Home/ReportsAdmin" ) ; }
function ( touches , event ) { if ( ! this . isMouseDown ) { this . _beginPos = touches [ 0 ] . locationInView ( ) ; } this . isMouseDown = true ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_TOUCH_PRIORITY + 1 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_TOUCH_PRIORITY + 1 , true ) ; }
function ( dt ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . setPriority ( cc . CCMENU_TOUCH_PRIORITY + 1 , this ) ; this . unscheduleAllSelectors ( ) ; cc . Log ( "Touches allowed again!" ) ; }
function ( sender ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . setPriority ( cc . CCMENU_TOUCH_PRIORITY - 1 , this ) ; this . schedule ( this . allowTouches , 5.0 ) ; cc . Log ( "TOUCHES DISABLED FOR 5 SECONDS" ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , false ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addStandardDelegate ( this , 0 ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , false ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; this . _super ( ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . removeDelegate ( this ) ; this . _super ( ) ; }
function ( touches , event ) { if ( ! this . isMouseDown ) { this . _beginPos = touches [ 0 ] . locationInView ( ) . y ; } this . isMouseDown = true ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_TOUCH_PRIORITY , true ) ; }
function ( id , x , y ) { this . _prevPoint = this . _point ; this . _point = new cc . Point ( x || 0 , y || 0 ) ; this . _id = id ; }
function ( ) { clearTimeout ( hide_timeout ) ; e . target . focus ( ) ; t . picker . off ( 'click' , cancel_hide ) ; }
function ( ) { t . hide . apply ( t , args ) ; t . picker . off ( 'click' , cancel_hide ) ; }
function ( ) { self . goTo ( pos , 0 ) ; self . div . fadeIn ( ) ; }
function ( post ) { var mykey = 'stats.a_test_value.rate' ; return _ . include ( _ . keys ( post ) , mykey ) && ( post [ mykey ] == ( testvalue / ( me . myflush / 1000 ) ) ) ; }
function ( post ) { var mykey = 'stats.a_test_value.count' ; return _ . include ( _ . keys ( post ) , mykey ) && ( post [ mykey ] == testvalue ) ; }
function ( e ) { updateList ( $ ( e . target ) . parents ( '.list' ) ) ; }
function name ( node ) { return node . localName + ( node . namespaceURI ? '(' + node . namespaceURI + ')' : '' ) ; }
function ( str ) { return str . replace ( /^\s+|\s+$/g , '' ) . split ( /\s+/ ) ; }
function ( type ) { return ( key in this ) && ( type in this [ key ] ) && ( this [ key ] [ type ] . length > 0 ) ; }
function replaceFn ( w , match ) { if ( match === name ) { return '' ; } return w ; }
function ( ) { L . DomUtil . addClass ( document . body , 'leaflet-dragging' ) ; }
function ( ) { L . DomUtil . removeClass ( document . body , 'leaflet-dragging' ) ; }
function ( ) { L . DomUtil . removeClass ( this . _mapPane , 'leaflet-pan-anim' ) ; this . fire ( 'moveend' ) ; }
function ( ) { expect ( error . code ) . toBe ( FileError . SECURITY_ERR ) ; }
function ( ) { expect ( entries ) . not . toBe ( null ) ; }
function ( e ) { entries = e ; recreatePlaceholder ( ) ; deferred . resolve ( ) ; }
function ( ) { gotErrorReadingContents = true ; recreatePlaceholder ( ) ; deferred . reject ( ) ; }
function ( ) { expect ( errorCode ) . toBe ( FileError . NOT_FOUND_ERR ) ; }
function soundManager_observe ( value ) { self . currentVolume = value * 100 ; self . level = Math . sqrt ( self . currentVolume ) ; }
function repeatKeyCallback ( ) { if ( this . level == 10 ) { clearTimeout ( this . _timer ) ; return ; } this . changeVolume ( 1 ) ; }
function repeatKeyCallback ( ) { if ( this . level == 0 ) { clearTimeout ( this . _timer ) ; return ; } this . changeVolume ( - 1 ) ; }
function soundManager_fireVolumeChangeEvent ( ) { var evt = document . createEvent ( 'CustomEvent' ) ; evt . initCustomEvent ( 'volumechange' , true , false , { currentVolume : this . currentVolume / 100 } ) ; window . dispatchEvent ( evt ) ; }
function ( key , expr , replaceCb ) { this . log ( "registering lcse entry for: " + key ) ; cachedExprs [ key ] = new _LCSECachedExpression ( expr , replaceCb ) ; }
function ( elem ) { return Sizzle ( selector , elem ) . length > 0 ; }
function ( elem ) { var name = elem . nodeName . toLowerCase ( ) ; return name === "input" && elem . type === "button" || name === "button" ; }
function ( data ) { if ( ! data . feeds . length && d ) { location . hash = '?s=newest&p=1' ; } else { show_feeds ( data , section ) ; call_if_fn ( cb ) ; } }
function ( e ) { e . preventDefault ( ) ; this . hide ( ) ; this . trigger ( 'renameColumn' ) ; return false ; }
function ( ) { this . editing_name = true ; this . changing_type = false ; this . render ( ) ; }
function ( ) { self . $ ( '.dataloader' ) . remove ( ) ; }
function ( data ) { refresh_page ( ) ; }
function ( data ) { if ( data == "OK" ) { refresh_page ( ) ; } }
function ( ) { if ( ! this . $$instance ) { this . $$allowconstruct = true ; this . $$instance = new this ( ) ; delete this . $$allowconstruct ; } return this . $$instance ; }
function ( ) { var github = document . createElement ( 'script' ) ; github . type = 'text/javascript' ; github . async = true ; github . src = 'https://api.github.com/repos/bozhu/bozhu.github.com?callback=display_last_update_time' ; document . getElementsByTagName ( 'body' ) [ 0 ] . appendChild ( github ) ; }
function ( ) { global . screen . get_active_workspace ( ) . get_neighbor ( Meta . MotionDirection . LEFT ) . activate ( global . get_current_time ( ) ) ; }
function ( ) { global . screen . get_active_workspace ( ) . get_neighbor ( Meta . MotionDirection . UP ) . activate ( global . get_current_time ( ) ) ; }
function ( d , i ) { return x ( i ) - .5 ; }
function ( d , i ) { return x ( i ) - .5 ; }
function ( d ) { return h - y ( d . values [ i ] . user ) - .5 ; }
function ( d , i ) { return x ( i ) - .5 ; }
function ( obj ) { var curtop = 0 ; if ( obj . offsetParent ) { do { curtop += obj . offsetTop ; } while ( obj = obj . offsetParent ) ; } return curtop ; }
function ( req , res ) { 'use strict' ; res . writeHead ( 200 , { 'Content-Type' : 'text/plain' } ) ; res . end ( 'Hello, Diane!' ) ; }
function ( test ) { 'use strict' ; test . expect ( 1 ) ; test . ok ( 1 , "this assertion should FAIL!!" ) ; test . done ( ) ; }
function ( ) { var expectedDate = new Date ( '6/30/1997 11:59:59 PM UTC' ) ; var date = new JulianDate ( 2450630 , 43229.0 , TimeStandard . TAI ) . toDate ( ) ; expect ( date ) . toEqual ( expectedDate ) ; }
function ( e ) { $ ( document ) . unbind ( 'mousemove.' + this . widgetEventPrefix ) . enableSelection ( ) . css ( 'cursor' , 'move' ) this . prevMouseX = 0 ; this . _eventHelper ( 'stop' , e , { } ) ; }
function ( ) { self . _reset ( ) ; self . debug ( 'FIN packet received. Disconnecting...' ) ; self . emit ( 'end' ) ; }
function ( seconds ) { this . delay = cp . math . convert ( seconds , 1000 , 0 , true ) ; }
function ( ) { return this . _winSizeInPixels ; }
function ( ) { cc . LabelBMFont . purgeCachedData ( ) ; }
function ( ) { return this . _displayStats ; }
function ( displayStats ) { this . _displayStats = displayStats ; }
function ( ) { return this . _totalFrames ; }
function ( ) { if ( this . _purgeDirecotorInNextLoop ) { this . _purgeDirecotorInNextLoop = false ; this . purgeDirector ( ) ; } else if ( ! this . invalid ) { this . drawScene ( ) ; } }
function ( point ) { cc . Log ( "DrawingPrimitive.drawPoint() not implement!" ) ; }
function ( points , numberOfPoints ) { cc . Log ( "DrawingPrimitive.drawPoints() not implement!" ) ; }
function ( origin , destination ) { cc . Log ( "DrawingPrimitive.drawLine() not implement!" ) ; }
function ( vertices , numOfVertices , closePolygon , fill ) { cc . Log ( "DrawingPrimitive.drawPoly() not implement!" ) ; }
function ( origin , control , destination , segments ) { cc . Log ( "DrawingPrimitive.drawQuadBezier() not implement!" ) ; }
function ( origin , control1 , control2 , destination , segments ) { cc . Log ( "DrawingPrimitive.drawCubicBezier() not implement!" ) ; }
function ( ) { return ( ! this . _followedNode . isRunning ( ) ) ; }
function ( ) { cc . Assert ( 0 , "Override me" ) ; return null ; }
function ( target ) { this . _super ( target ) ; target . setVisible ( true ) ; }
function ( target ) { this . _super ( target ) ; target . setVisible ( false ) ; }
function ( target ) { this . _super ( ) ; target . setVisible ( ! target . isVisible ( ) ) ; }
function ( target ) { this . _super ( target ) ; if ( this . _restoreOriginalFrame ) { this . _origFrame = target . displayFrame ( ) ; } }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . scheduleUpdateForTarget ( this , 0 , false ) ; return true ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . unscheduleUpdateForTarget ( this ) ; }
function ( ) { return this . _vertexZ ; }
function ( Var ) { this . _vertexZ = Var ; }
function ( ) { return new cc . Point ( this . _anchorPointInPoints . x , this . _anchorPointInPoints . y ) ; }
function ( ) { return this . _ignoreAnchorPointForPosition ; }
function ( newValue ) { if ( newValue != this . _ignoreAnchorPointForPosition ) { this . _ignoreAnchorPointForPosition = newValue ; this . setNodeDirty ( ) ; } }
function ( ) { var rect = cc . RectMake ( 0 , 0 , this . _contentSize . width , this . _contentSize . height ) ; return cc . RectApplyAffineTransform ( rect , this . nodeToParentTransform ( ) ) ; }
function ( child , zOrder ) { cc . Assert ( child != null , "Child must be non-nil" ) ; this . _reorderChildDirty = true ; child . setOrderOfArrival ( cc . s_globalOrderOfArrival ++ ) ; child . _setZOrder ( zOrder ) ; this . setNodeDirty ( ) ; }
function ( action ) { cc . Assert ( action != null , "Argument must be non-nil" ) ; this . getActionManager ( ) . addAction ( action , this , ! this . _isRunning ) ; return action ; }
function ( ) { this . getActionManager ( ) . removeAllActionsFromTarget ( this ) ; }
function ( action ) { this . getActionManager ( ) . removeAction ( action ) ; }
function ( tag ) { cc . Assert ( tag != cc . CCACTION_TAG_INVALID , "Invalid tag" ) ; this . getActionManager ( ) . removeActionByTag ( tag , this ) ; }
function ( tag ) { cc . Assert ( tag != cc . CCACTION_TAG_INVALID , "Invalid tag" ) ; return this . getActionManager ( ) . getActionByTag ( tag , this ) ; }
function ( ) { return this . getActionManager ( ) . numberOfRunningActionsInTarget ( this ) ; }
function ( priority ) { this . getScheduler ( ) . scheduleUpdateForTarget ( this , priority , ! this . _isRunning ) ; }
function ( ) { this . getScheduler ( ) . unscheduleUpdateForTarget ( this ) ; }
function ( selector ) { if ( ! selector ) return ; this . getScheduler ( ) . unscheduleSelector ( selector , this ) ; }
function ( ) { this . getScheduler ( ) . unscheduleAllSelectorsForTarget ( this ) ; }
function ( ) { this . getScheduler ( ) . resumeTarget ( this ) ; this . getActionManager ( ) . resumeTarget ( this ) ; }
function ( ) { this . getScheduler ( ) . pauseTarget ( this ) ; this . getActionManager ( ) . pauseTarget ( this ) ; }
function ( nodePoint ) { var worldPoint = this . convertToWorldSpace ( nodePoint ) ; return cc . Director . sharedDirector ( ) . convertToUI ( worldPoint ) ; }
function ( touch ) { var point = touch . locationInView ( ) ; point = cc . Director . sharedDirector ( ) . convertToGL ( point ) ; return this . convertToNodeSpace ( point ) ; }
function ( touch ) { var point = touch . locationInView ( ) ; point = cc . Director . sharedDirector ( ) . convertToGL ( point ) ; return this . convertToNodeSpaceAR ( point ) ; }
function ( newValue ) { this . _ignoreAnchorPointForPosition = newValue ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . pauseTarget ( this ) ; cc . ActionManager . sharedManager ( ) . pauseTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . resumeTarget ( this ) ; cc . ActionManager . sharedManager ( ) . resumeTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . unscheduleAllSelectorsForTarget ( this ) ; }
function ( ) { return new cc . Scene ( ) ; }
function ( ) { this . _inScene . setVisible ( true ) ; this . _outScene . setVisible ( false ) ; }
function ( ) { return this . _frames ; }
function ( frames ) { this . _frames = frames ; }
function ( frame ) { var animFrame = new cc . AnimationFrame ( ) ; animFrame . initWithSpriteFrame ( frame , 1 , null ) ; this . _frames . push ( frame ) ; this . _totalDelayUnits ++ ; }
function ( name ) { if ( ! name ) { return ; } if ( this . _animations . hasOwnProperty ( name ) ) { delete this . _animations [ name ] ; } }
function ( ) { cc . s_sharedAnimationCache . _animations = null ; cc . s_sharedAnimationCache = null ; }
function ( ) { if ( cc . s_sharedAnimationCache == null ) { cc . s_sharedAnimationCache = new cc . AnimationCache ( ) ; cc . s_sharedAnimationCache . init ( ) ; } return cc . s_sharedAnimationCache ; }
function ( child , cleanup ) { if ( this . _batchNode ) { this . _batchNode . removeSpriteFromAtlas ( child ) ; } this . _super ( child , cleanup ) ; }
function ( ) { if ( this . _batchNode && ! this . _recursiveDirty ) { this . _recursiveDirty = true ; this . setDirty ( true ) ; if ( this . _hasChildren ) this . setDirtyRecursively ( true ) ; } }
function ( relative ) { cc . Assert ( ! this . _batchNode , "ignoreAnchorPointForPosition is invalid in cc.Sprite" ) ; this . _super ( relative ) ; }
function ( flipX ) { if ( this . _flipX != flipX ) { this . _flipX = flipX ; this . setTextureRect ( this . _rect , this . _rectRotated , this . _contentSize ) ; this . setNodeDirty ( ) ; } }
function ( ) { return new cc . Point ( this . _offsetInPixels . x , this . _offsetInPixels . y ) ; }
function ( offsetInPixels ) { this . _offsetInPixels = offsetInPixels ; this . _offset = cc . POINT_PIXELS_TO_POINTS ( this . _offsetInPixels ) ; }
function ( ) { if ( this . _texture ) { return this . _texture ; } if ( this . _textureFilename != "" ) { return cc . TextureCache . sharedTextureCache ( ) . addImage ( this . _textureFilename ) ; } return null ; }
function ( ) { this . _grossini . setPosition ( cc . PointMake ( 60 , 120 ) ) ; this . _tamara . setPosition ( cc . PointMake ( 60 , 220 ) ) ; this . _kathia . setVisible ( false ) ; }
function ( ) { selfPoint . _emitter . setPositionType ( cc . CCPARTICLE_TYPE_RELATIVE ) ; selfPoint . _relativeMovementButton . setVisible ( true ) ; selfPoint . _freeMovementButton . setVisible ( false ) ; selfPoint . _groupMovementButton . setVisible ( false ) ; }
function ( ) { selfPoint . _emitter . setPositionType ( cc . CCPARTICLE_TYPE_GROUPED ) ; selfPoint . _relativeMovementButton . setVisible ( false ) ; selfPoint . _freeMovementButton . setVisible ( false ) ; selfPoint . _groupMovementButton . setVisible ( true ) ; }
function ( ) { selfPoint . _emitter . setPositionType ( cc . CCPARTICLE_TYPE_FREE ) ; selfPoint . _relativeMovementButton . setVisible ( false ) ; selfPoint . _freeMovementButton . setVisible ( true ) ; selfPoint . _groupMovementButton . setVisible ( false ) ; }
function ( ) { selfPoint . _emitter . setDrawMode ( cc . PARTICLE_TEXTURE_MODE ) ; selfPoint . _textureModeButton . setVisible ( true ) ; selfPoint . _shapeModeButton . setVisible ( false ) ; }
function ( ) { selfPoint . _emitter . setDrawMode ( cc . PARTICLE_SHAPE_MODE ) ; selfPoint . _textureModeButton . setVisible ( false ) ; selfPoint . _shapeModeButton . setVisible ( true ) ; }
function ( dt ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . pauseTarget ( this ) ; }
function ( dt ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . unscheduleAllSelectors ( ) ; }
function ( ) { this . _super ( ) ; cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_3D ) ; }
function ( ) { cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_2D ) ; this . _super ( ) ; }
function ( ) { this . _super ( ) ; cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_3D ) ; }
function ( ) { cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_2D ) ; this . _super ( ) ; }
function ( ) { this . _super ( ) ; cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_3D ) ; }
function ( ) { this . _super ( ) ; cc . Director . sharedDirector ( ) . setProjection ( cc . CCDIRECTOR_PROJECTION_2D ) ; }
function ( key ) { if ( my . cache [ key ] ) { delete my . cache [ key ] ; } else if ( typeof key == "undefined" ) { my . cache = { } ; } }
function ( ) { $ ( 'form' ) . submit ( ) ; return false ; }
function commentDeletionStarted ( ) { $ ( "#comments" ) . parent ( ) . spin ( "large" ) ; }
function ( ) { if ( this . drawHook && ( this . drawHook ( ) === false ) ) return ; this . draw ( ) ; }
function ( str ) { return helpers . escape_input ( str . replace ( /\r\n/g , "\n" ) ) ; }
function ( str ) { return helpers . escape_input ( str . replace ( /\r\n/g , "\n" ) ) ; }
function ( ) { var uuids = window . loot_native === undefined ? { } : window . loot_native . getUuids ( ) ; alert ( uuids ) ; uuids = $ . parseJSON ( uuids ) ; return uuids ; }
function ( ) { block . func . apply ( null , arguments ) ; }
function ( block , code ) { var end = this . variables . pop ( ) ; var start = this . variables . pop ( ) ; return this . loopStatement ( block , start , end , code . variable ) ; }
function ( path ) { return path . replace ( /.*\// , '' ) ; }
function ( responseError ) { return { "result" : "error" , "errorCode" : "connection_failure" , "errorMessage" : "" , "transportError" : responseError || "" } ; }
function ( ) { $j ( '#scroll .image-container.currentSlide' ) . animate ( { opacity : 1 } , 200 , function ( ) { } ) ; }
function ( ) { return ( Firebug . chrome . getGlobalAttribute ( "cmd_firebug_toggleProfiling" , "checked" ) === "true" ) }
function ( context ) { var panel = context . getPanel ( panelName ) ; panel . persistContent = panel . persistContent ? false : true ; Firebug . chrome . setGlobalAttribute ( "cmd_firebug_togglePersistNet" , "checked" , panel . persistContent ) ; }
function ( panel , armed ) { var breakable = armed ? "false" : "true" ; Firebug . chrome . setGlobalAttribute ( "cmd_firebug_toggleBreakOn" , "breakable" , breakable ) ; }
function ( name , value ) { if ( name == "breakOnErrors" ) Firebug . chrome . getElementById ( "cmd_firebug_breakOnErrors" ) . setAttribute ( "checked" , value ) ; }
function getWatchRowIndex ( row ) { var index = - 1 ; for ( ; row ; row = row . previousSibling ) { if ( Css . hasClass ( row , "watchRow" ) ) ++ index ; } return index ; }
function ( name ) { this . set ( name , ! this . get ( name ) ) ; }
function ( list ) { var chars = [ ] ; for ( var ch in list ) chars . push ( ch ) ; return new RegExp ( "([" + chars . join ( "" ) + "])" , "gm" ) ; }
function ( list ) { var chars = [ ] ; for ( var ch in list ) chars . push ( ch ) ; return new RegExp ( "(" + chars . join ( "|" ) + ")" , "gm" ) ; }
function ( ) { if ( navigator . appVersion . indexOf ( "Win" ) != - 1 ) return "\r\n" ; if ( navigator . appVersion . indexOf ( "Mac" ) != - 1 ) return "\r" ; return "\n" ; }
function ( context ) { var panel = context . getPanel ( panelName ) ; panel . persistContent = panel . persistContent ? false : true ; Firebug . chrome . setGlobalAttribute ( "cmd_firebug_togglePersistNet" , "checked" , panel . persistContent ) ; }
function ( win ) { var target = win . document . getElementById ( "selectbox" ) ; FBTest . executeContextMenuCommand ( target , "menu_firebug_firebugInspect" , function ( ) { FBTest . testDone ( "issue5349.DONE" ) ; } ) ; }
function ( doc ) { }
function ( ) { return Options . togglePref ( option ) ; }
function ( storage ) { var object = this . objectView ( storage ) ; return Locale . $STRP ( "firebug.storage.totalItems" , [ Object . keys ( object ) . length ] ) ; }
function ( ) { return notifyFirebug ( arguments , cmd , "firebugExecuteCommand" ) ; }
function ( ) { return notifyFirebug ( arguments , prop , "firebugExecuteCommand" ) ; }
function ( ) { CommandLineHelp . render ( context ) ; return Firebug . Console . getDefaultReturnValue ( context . window ) ; }
function ( ) { return notifyFirebug ( arguments , cmd , "firebugExecuteCommand" ) ; }
function ( ) { return notifyFirebug ( arguments , prop , "firebugExecuteCommand" ) ; }
function ( ) { var checked = Firebug . chrome . getGlobalAttribute ( "cmd_firebug_toggleCommandPopup" , "checked" ) ; return ( checked == "true" ) ? true : false ; }
function ( context ) { var panel = context . getPanel ( "console" ) ; panel . persistContent = panel . persistContent ? false : true ; Firebug . chrome . setGlobalAttribute ( "cmd_firebug_togglePersistConsole" , "checked" , panel . persistContent ) ; }
function ( browser , context ) { Firebug . chrome . setGlobalAttribute ( "cmd_firebug_clearConsole" , "disabled" , ! context ) ; Firebug . ActivableModule . showContext . apply ( this , arguments ) ; }
function ( ) { var checked = Firebug . chrome . getGlobalAttribute ( "cmd_firebug_toggleCommandPopup" , "checked" ) ; return ( checked == "true" ) ? true : false ; }
function ( ) { return ( Firebug . chrome . getGlobalAttribute ( "cmd_firebug_toggleProfiling" , "checked" ) === "true" ) }
function ( name , value ) { if ( name == "consoleFilterTypes" ) { this . updateConsoleFilter ( ) ; } }
function ( context ) { context . getPanel ( panelName ) . refresh ( ) ; }
function ( context ) { context . getPanel ( panelName ) . refresh ( ) ; }
function ( observer ) { if ( this . hasObservers ( ) ) TabWatcher . iterateContexts ( Firebug . CookieModule . registerObservers ) ; else TabWatcher . iterateContexts ( Firebug . CookieModule . unregisterObservers ) ; this . setStatus ( ) ; }
function ( ) { TabWatcher . iterateContexts ( Firebug . CookieModule . unregisterObservers ) ; this . setStatus ( ) ; if ( FBTrace . DBG_COOKIES ) FBTrace . sysout ( "cookies.onSuspendFirebug" ) ; }
function ( tooltip , context ) { tooltip . label = Locale . $STR ( "cookies.removeall.tooltip" ) ; return true ; }
function ( tooltip , context ) { tooltip . label = Locale . $STR ( "cookies.removeallsession.tooltip" ) ; return true ; }
function ( tooltip , context ) { var host = context . window . location . host ; tooltip . label = Locale . $STRF ( "cookies.createcookie.tooltip" , [ host ] ) ; return true ; }
function ( tooltip , context ) { var host = context . window . location . host ; tooltip . label = Locale . $STRF ( "cookies.export.Export_For_Site_Tooltip" , [ host ] ) ; return true ; }
function CookiePanel ( ) { }
function ( enabled ) { return ( enabled ? Locale . $STR ( "cookies.Disable Break On Cookie" ) : Locale . $STR ( "cookies.Break On Cookie" ) ) ; }
function ( tooltip , context ) { if ( tooltip . fcEnabled ) { var host = context . window . location . host ; tooltip . label = Locale . $STRF ( "cookies.perm.manage.tooltip" , [ host ] ) ; } return tooltip . fcEnabled ; }
function ( cookie ) { return cookie . cookie . isDomain ? Locale . $STR ( "cookies.domain.label" ) : "" ; }
function ( cookie ) { return cookie . cookie . isSecure ? Locale . $STR ( "cookies.secure.label" ) : "" ; }
function ( ) { return Locale . $STR ( "cookies.console.cookiescleared" ) ; }
function ( context ) { var panel = context . getPanel ( "console" ) ; panel . persistContent = panel . persistContent ? false : true ; Firebug . chrome . setGlobalAttribute ( "cmd_firebug_togglePersistConsole" , "checked" , panel . persistContent ) ; }
function ( browser , context ) { Firebug . chrome . setGlobalAttribute ( "cmd_firebug_clearConsole" , "disabled" , ! context ) ; Firebug . ActivableModule . showContext . apply ( this , arguments ) ; }
function ( domain , name , value ) { Options . setPref ( domain , name , value ) ; }
function ( event , context ) { var target = event . target ; var tagName = ( target . tagName || "" ) . toLowerCase ( ) ; if ( tagName == "link" ) this . cleanupSheets ( target . ownerDocument , context ) ; }
function ( value , offset ) { if ( offset >= 2 && value . substr ( offset - 2 , 2 ) === "()" ) return offset - 1 ; return offset ; }
function ( style , propName , propValue , propPriority , prevValue , prevPriority , rule , baseText ) { var styleSheet = rule . parentStyleSheet ; if ( styleSheet ) this . markSheetDirty ( styleSheet ) ; }
function ( style , propName , prevValue , prevPriority , rule , baseText ) { var styleSheet = rule . parentStyleSheet ; if ( styleSheet ) this . markSheetDirty ( styleSheet ) ; }
function ( ) { window . removeEventListener ( "unload" , shutdownFirebug , false ) ; Events . dispatch ( modules , "disable" , [ Firebug . chrome ] ) ; }
function ( ) { Firebug . Editor . stopEditing ( ) ; this . context . delay ( function ( ) { this . select ( this . selection , true ) ; } . bind ( this ) ) ; }
function ( ) { return [ Menu . optionMenu ( "ShowRulers" , "showRulers" , "layout.option.tip.Show_Rulers" ) ] ; }
function ( url , lineNo , bp ) { if ( bp . debuggerName !== Firebug . Debugger . debuggerName ) return ; FBS . clearBreakpoint ( url , lineNo ) ; }
function ( name , value ) { if ( name == "breakOnErrors" ) Firebug . chrome . getElementById ( "cmd_firebug_breakOnErrors" ) . setAttribute ( "checked" , value ) ; }
function ( win ) { if ( ! win . Firebug . TabWatcher ) return false ; return win . Firebug . TabWatcher . iterateContexts ( function ( context ) { if ( context . stopped ) return true ; } ) ; }
function ( ) { if ( saveShowStackTrace ) { Firebug . showStackTrace = saveShowStackTrace ; saveShowStackTrace = null ; } }
function getWatchRowIndex ( row ) { var index = - 1 ; for ( ; row ; row = row . previousSibling ) { if ( Css . hasClass ( row , "watchRow" ) ) ++ index ; } return index ; }
function ( name ) { this . set ( name , ! this . get ( name ) ) ; }
function ( name ) { Options . clearPref ( Options . prefDomain , name ) ; }
function ( expression , context ) { context . entityType = expression . entityType ; this . Visit ( expression . source , context ) ; }
function ( id ) { return id && typeof id === 'string' ? new $data . mongoDBDriver . ObjectID . createFromHexString ( new Buffer ( id , 'base64' ) . toString ( 'ascii' ) ) : id ; }
function ( x ) { return new Char ( x ) ; }
function ( stream ) { video . attr ( 'src' , stream ) ; captureSetup ( ) ; }
function ( args ) { this . gameId = null ; if ( args ) { if ( args . gameId !== undefined ) { this . gameId = args . gameId ; } } }
function ( args ) { this . gameId = null ; if ( args ) { if ( args . gameId !== undefined ) { this . gameId = args . gameId ; } } }
function ( args ) { this . gameId = null ; if ( args ) { if ( args . gameId !== undefined ) { this . gameId = args . gameId ; } } }
function ( args ) { this . gameId = null ; if ( args ) { if ( args . gameId !== undefined ) { this . gameId = args . gameId ; } } }
function ( gameId , ticks , callback ) { this . seqid += 1 ; this . _reqs [ this . seqid ] = callback ; this . send_waitTicks ( gameId , ticks ) ; }
function ( gameId , callback ) { this . seqid += 1 ; this . _reqs [ this . seqid ] = callback ; this . send_getGameInfo ( gameId ) ; }
function ( gameId , callback ) { this . seqid += 1 ; this . _reqs [ this . seqid ] = callback ; this . send_getMapState ( gameId ) ; }
function ( doc , cdt , cdn ) { return 'SELECT `tabAccount`.name FROM `tabAccount` WHERE `tabAccount`.is_pl_account = "No" AND `tabAccount`.debit_or_credit = "Credit" AND `tabAccount`.company = "' + cstr ( doc . company ) + '" AND ifnull(`tabAccount`.freeze_account, "No") = "No" AND `tabAccount`.group_or_ledger = "Ledger" AND `tabAccount`.%(key)s LIKE "%s" ORDER BY `tabAccount`.name ASC LIMIT 50' ; }
function Order ( name , issuer ) { this . name = name ; this . issuer = issuer ; this . cancel = function ( ) { } ; }
function MarchOrder ( issuer , strength ) { Order . call ( this , 'March' , issuer ) ; this . strength = strength ; this . execute = function ( ) { } ; }
function SupportOrder ( issuer ) { Order . call ( this , 'Support' , issuer ) ; this . execute = function ( ) { } ; }
function DefendOrder ( issuer ) { Order . call ( this , 'Defend' , issuer ) ; this . execute = function ( ) { } ; }
function ConsolidatePowerOrder ( issuer ) { Order . call ( this , 'Consolidate Power' , issuer ) ; this . execute = function ( ) { } ; this . cancel = function ( ) { throw 'Cannot cancel a consolidate power order.' ; } ; }
function ( url ) { if ( ! this . _hasSameOrigin ( url ) ) { return false ; } url = this . removeQuery ( this . removeRoot ( url ) ) ; return ! ! this . match ( url ) . length ; }
function ( match , operator , key ) { if ( ! key ) { return operator === '*' ? '.*' : match ; } keys . push ( key ) ; return operator === '*' ? '(.*?)' : '([^/\\?\\#]*)' ; }
function ( error , value ) { self . processAsyncMethodCallback ( error , value ) ; if ( ! error ) { callback ( null , self . options . cachedValue ) ; } else { callback ( error ) ; } }
function date ( gist ) { if ( ! gist || ! gist . date || ! _ . isDate ( gist . date ) ) throw new Error ( "the gist must have a date property of type date" ) ; return gist . created_at ; }
function getFirstGistFile ( gist ) { if ( ! gist || ! gist . files ) throw new Error ( "gist is missing or has no enumerable files property" ) ; return gist . files [ _ ( gist . files ) . keys ( ) [ 0 ] ] ; }
function isBlogGist ( gist ) { if ( ! gist || ! gist . files ) throw new Error ( "gist is missing or has no enumerable files property" ) ; var firstGistFile = getFirstGistFile ( gist ) ; var fileName = firstGistFile . filename ; return ( /blog_.+\.md/ ) . test ( fileName ) ; }
function ( error , gist ) { if ( ! error ) { var html = md ( gist . markdown ) ; callback ( null , gist . markdown , html ) ; } else { callback ( error ) ; } }
function ( error , gist ) { if ( ! error ) { var firstFile = getFirstGistFile ( gist ) ; callback ( null , { markdown : firstFile . content } ) ; } else { callback ( error ) ; } }
function ( error , json ) { if ( ! error ) { callback ( null , json ) ; } else { callback ( error ) ; } }
function ( asyncError ) { if ( ! asyncError ) { callback ( null , posts ) ; } else { callback ( asyncError ) ; } }
function toBlogPosts ( gists ) { return _ . chain ( gists ) . filter ( isBlogGist ) . map ( toBlogPost ) . sortBy ( date ) . value ( ) . reverse ( ) ; }
function ( error , gist ) { if ( ! error ) { var post = toBlogPost ( gist ) ; callback ( null , post ) ; } else { callback ( error ) ; } }
function activeIfEquals ( name , testName ) { return name === testName ? 'active' : '' ; }
function getNavClasses ( forSectionName ) { return { home : activeIfEquals ( 'home' , forSectionName ) , about : activeIfEquals ( 'about' , forSectionName ) , twitter : activeIfEquals ( 'twitter' , forSectionName ) , reading : activeIfEquals ( 'reading' , forSectionName ) } ; }
function ( error , viewModel ) { res . render ( 'index' , viewModel ) ; }
function ( req , res ) { var postId = req . params . id ; shared . getPostViewModel ( postId , function ( error , viewModel ) { res . render ( 'post' , viewModel ) ; } ) ; }
function index ( req , res ) { s . getReadingListViewModel ( function ( error , model ) { res . render ( 'reading' , model ) ; } ) ; }
function ( err , result ) { if ( err ) console . log ( err ) ; else if ( result && result . Error ) console . log ( JSON . stringify ( result . Error ) ) ; }
function ( model ) { $element . tooltip ( 'hide' ) ; that . resetActiveElement ( ) ; $component . empty ( ) ; $component . data ( 'elementGroup' ) . trigger ( 'reset' ) ; }
function handleFileLoad ( event ) { var asset = { id : event . id , type : event . type , result : event . result } ; assets . push ( asset ) ; }
function ( values ) { return Math . ceil ( values . cache . begins . getDaysBetween ( values . cache . ends , true ) ) + 1 ; }
function applyFunction ( func , env , args ) { var evaledArgs = args . map ( function ( arg ) { return evaluate ( arg , env ) ; } ) ; return func ( evaledArgs ) ; }
function list ( args ) { return Data . List ( args ) ; }
function ( ) { var list = funcs . list ; deepEqual ( data . List ( [ 3 , 4 , 5 ] ) , list ( [ 3 , 4 , 5 ] ) ) ; }
function ( ) { deepEqual ( data . Number ( 14 ) , funcs [ '+' ] ( [ data . Number ( 18 ) , data . Number ( - 4 ) ] ) , "18 + (-4) = 14" ) ; }
function ( ) { return ( this . editor === this . source ) ? this . $editorTextarea . innerHeight ( ) : this . $editorIframe . outerHeight ( ) ; }
function ( ) { var m = new Comment ( { } ) ; this . model . get ( "comments" ) . add ( m ) ; }
function ( out , cb ) { var ast ; if ( optMini ) { out = jsmin . jsmin ( out ) ; } safeWrite ( jsstream , out , false ) ; cb ( null ) ; }
function ( evt ) { evt . preventDefault ( ) ; if ( self . opts . fixed ) return ; moving = true ; self . elm ( ) . css ( 'cursor' , self . _vertical ? 'col-resize' : 'row-resize' ) ; }
function ( evt ) { if ( self . opts . fixed ) return ; moving = false ; self . elm ( ) . css ( 'cursor' , 'inherit' ) ; }
function ( ) { assert . ok ( ok ) ; server . close ( ) ; done ( ) ; }
function ( ) { console . log ( 'Executing module1.js' ) ; echo ( 'Executing module1.js' ) ; }
function ( module1 ) { console . log ( 'Executing  module1/submodule1.js' ) ; echo ( 'Executing  module1/submodule1.js' ) ; return { } ; }
function ( module1 ) { console . log ( 'Executing  module1/submodule1/part1.js' ) ; echo ( 'Executing  module1/submodule1/part1.js' ) ; return { } ; }
function ( module1 ) { console . log ( 'Executing  module1/submodule1/part2.js' ) ; echo ( 'Executing  module1/submodule1/part2.js' ) ; return { } ; }
function ( module1 ) { console . log ( 'Executing  module1/submodule2.js' ) ; echo ( 'Executing  module1/submodule2.js' ) ; return { } ; }
function ( module1 ) { console . log ( 'Executing module3.js' ) ; echo ( 'Executing module3.js' ) ; return { } ; }
function ( message ) { console . log ( 'module4.js: ' + message ) ; echo ( 'module4.js: ' + message ) ; return 'ok' ; }
function ( whichRow ) { if ( this . highlighted ( ) !== whichRow ) { this . unhighlight ( ) ; whichRow . $node . addClass ( 'highlight' ) ; this . _highlighted = whichRow ; this . trigger ( 'highlight' ) ; } return this ; }
function ( ) { return this . get ( 'timespan' ) + this . timespanInc ; }
function ( ) { return this . nextFetch = this . time ( ) + this . get ( 'redrawInterval' ) * 1000 ; }
function ( ) { return this . presenter = WidgetPresenter . create ( this . model , this . el ) ; }
function ( err ) { if ( err ) return onerror ( err , cb ) ; return cb ( ) ; }
function ( error ) { emitter . emit ( 'error' , error ) }
function showAbout ( ) { cont = "<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>" ; changeContent ( this , cont ) ; }
function showFindMe ( ) { cont = "<h5>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</h5>" ; changeContent ( this , cont ) ; }
function showPlaces ( ) { cont = "<p>Places</p>" ; changeContent ( this , cont ) ; }
function showProyects ( ) { cont = "<h2> fuck yeah </h2>" ; changeContent ( this , cont ) ; }
function showInteresting ( ) { cont = "<p> I love makes real my dreams this could be a really dangerous lol is only a test\ 				<ul> <li> like </li>\ 				</ul>\ 				</p>" ; changeContent ( this , cont ) ; }
function showTwitter ( ) { cont = "<p> Twitter</p>" ; changeContent ( this , cont ) ; }
function SetTitle ( itemID ) { var name = prompt ( "Enter the custom title you want to have\n(max 32 chars)" ) if ( name != null && name != "" ) { $ ( '#' + itemID ) . raw ( ) . value = name ; } }
function ( title ) { self . navigation_current . set_title ( title ) ; }
function ( ) { $ ( ".datepicker" ) . datepicker ( ) ; return event . preventDefault ( ) ; }
function ( groupId ) { return groupId . toUpperCase ( ) ; }
function ( string ) { assert ( /^<166>/ . test ( string ) ) ; }
function ( err ) { self . emit ( 'error' , err ) ; }
function shouldShow ( entry ) { return [ ".git" , ".svn" , ".DS_Store" , "Thumbs.db" ] . indexOf ( entry . name ) === - 1 ; }
function ( val , axis ) { return humanize ( val , convert_from_bytes ) ; }
function mustNotBeAdmin ( ) { return ! mustBeAdmin ( ) ; }
function updateConfig ( request , response ) { config_response = response if ( config_response [ 'user_config' ] [ "wss" ] == "yes" ) { $ ( 'table#config_table input#wss_checkbox' ) . attr ( 'checked' , 'checked' ) ; } ; }
function dashboardQuotasHTML ( ) { }
function ( ) { var option = $ ( 'option:selected' , this ) ; var uname = getValue ( option . attr ( 'elem_id' ) , 1 , 2 , dataTable_vNetworks ) ; $ ( 'input#NETWORK_UNAME' , section_networks ) . val ( uname ) ; }
function ( ) { if ( this . USER . ID == uid ) dashboardQuotasHTML ( this . USER ) ; user_list_array . push ( userElementArray ( this ) ) ; }
function ( val , axis ) { return humanize_size ( val , true ) ; }
function ( label , series ) { return label + " - " + humanize_size ( series . data [ 0 ] [ 0 ] , true ) }
function ( doc ) { this . document = doc ; if ( this . document . strand ) { this . drawShape = this . drawOrientedShape ; } else { this . drawShape = this . drawShape ; } }
function ( ) { this . registerInProgress = false ; this . email = '' ; this . firstname = '' ; this . lastname = '' ; this . position = '' ; this . errors = '' ; this . render ( ) ; }
function ( name ) { return ! this . collection || ( this . collection && ! this . collection . isNameExisting ( name ) ) }
function ( ) { this . remove ( ) ; this . model . save ( ) ; this . titles . folder . resize ( ) ; }
function ( leaf ) { return fluid . get ( solrec . skeleton , leaf , matchMaker . accessConfigs . get ) ; }
function ( ) { waitingNodes ( dataTable_marketplace ) ; Sunstone . runAction ( 'Marketplace.list' ) ; }
function waitingNodes ( dataTable ) { $ ( 'tr input.check_item:visible' , dataTable ) . replaceWith ( spinner ) ; }
function ( ) { var menu = new draw2d . Menu ( ) ; var oThis = this ; menu . setZOrder ( 999999 ) ; return menu ; }
function ( path , contents , flow ) { var processed = coffeescript . compile ( contents ) ; return processed ; }
function ( key , x , y , e , graph ) { return '<h3>' + key + " - " + x + '</h3>' + '<p>' + y + '</p>' }
function ( tabId , changeInfo , tab ) { updateMeta ( tab , tabId ) ; listUpdater ( tab ) ; console . log ( "=========debug=========                                       " ) ; }
function ( index ) { if ( this . selected ) { $listItems . eq ( index ) . addClass ( 'selected' ) ; $currentSelect . html ( this . value ) ; } }
function ( series ) { series . originalKey = series . originalKey === undefined ? series . key : series . originalKey ; series . key = series . originalKey + ( series . bar ? ' (left axis)' : ' (right axis)' ) ; return series ; }
function ( data ) { self . pause ( ) self . emit ( 'error' , error ( err , data ) ) atok . clear ( true ) . loadRuleSet ( 'main' ) }
function ( err , fname ) { if ( path . basename ( fpath ) === fname ) { normalizeCall ( fpath , cb ) ; } }
function ( ) { console . assert ( ! this . is_eof ( ) ) ; return this . view . getUint8 ( this . position ++ ) ; }
function ( ) { console . assert ( ! this . is_eof ( ) ) ; var ret = this . view . getFloat64 ( this . position , true ) ; this . position += 64 / 8 ; return ret ; }
function ( ) { console . assert ( this . position === 0 ) ; console . assert ( this . is_root ( ) ) ; return this . read_string ( ) ; }
function ( ) { console . assert ( ! is_eof ( ) ) ; var ret = this . view [ 'getInt' + v ] ( this . position , true ) ; this . position += v / 8 ; return ret ; }
function ( idx ) { console . assert ( typeof idx === 'string' ) ; console . assert ( this . index . hasOwnProperty ( idx . toString ( ) ) ) ; return this . index [ idx . toString ( ) ] ; }
function ( completeFunc ) { var ajax = new AjaxClass ( '/listings/all_listing_locations/' , 'listingsmsg' , completeFunc ) ; ajax . call ( ) ; }
function ( renderContext ) { renderContext = renderContext || p ; if ( this . visible ) { this . pre ( renderContext ) ; this . drawImpl ( renderContext ) ; this . post ( renderContext ) ; } }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value , { backwards : false , wrap : true , caseSensitive : false , wholeWord : false , regExp : false } ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value ) ; editor . replace ( Ext . getCmp ( "replace:" + id ) . value ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value , { backwards : false , wrap : true , caseSensitive : false , wholeWord : false , regExp : false } ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value ) ; editor . replace ( Ext . getCmp ( "replace:" + id ) . value ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value , { backwards : false , wrap : true , caseSensitive : false , wholeWord : false , regExp : false } ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value ) ; editor . replace ( Ext . getCmp ( "replace:" + id ) . value ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value , { backwards : false , wrap : true , caseSensitive : false , wholeWord : false , regExp : false } ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value ) ; editor . replace ( Ext . getCmp ( "replace:" + id ) . value ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value , { backwards : false , wrap : true , caseSensitive : false , wholeWord : false , regExp : false } ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value ) ; editor . replace ( Ext . getCmp ( "replace:" + id ) . value ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value , { backwards : false , wrap : true , caseSensitive : false , wholeWord : false , regExp : false } ) ; editor . focus ( ) ; }
function ( ) { editor . find ( Ext . getCmp ( "search:" + id ) . value ) ; editor . replace ( Ext . getCmp ( "replace:" + id ) . value ) ; editor . focus ( ) ; }
function ( ) { if ( sa . urlInput . length > 1 ) { sa . mp3check ( $ ( this ) ) ; } }
function ( ) { return ( __g . totalDistanceAlongDrag / __g . distanceFromStartToEnd ) > 1.5 ; }
function ( d ) { if ( __g . started || __g . canMove ) return __g . canMove = true ; }
function ( d ) { __g . canMove = false ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "west" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "east" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "north" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "south" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "north_west" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "south_west" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "south_east" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "north_east" ; }
function ( data ) { cGraph . nodes ( data . nodes ) cGraph . links ( data . links ) cGraph . edgeBinding ( ) graph_drawing = graphDrawing ( cGraph , svg ) graph_drawing . exit ( cGraph , 0 ) }
function ( data ) { rescaleGraph ( data ) cGraph . nodes ( data . nodes ) cGraph . links ( data . links ) cGraph . edgeBinding ( ) graph_drawing = graphDrawing ( cGraph , svg ) graph_drawing . move ( cGraph , 0 ) }
function ( data ) { rescaleGraph ( data ) cGraph . nodes ( data . nodes ) cGraph . links ( data . links ) cGraph . edgeBinding ( ) graph_drawing = graphDrawing ( cGraph , svg ) graph_drawing . resize ( cGraph , 0 ) }
function ( ) { grabbingNode = true ; setTimeout ( resetToDefaultState , 1 ) ; }
function startCallback ( event ) { if ( 'idle' == TT . getStatus ( ) ) { TT . start ( tomatoDuration , currentUser ? TT . stateNewForm : TT . stateSignIn ) ; event . preventDefault ( ) ; } }
function ( param ) { param = param . split ( "=" ) ; queryParams [ param [ 0 ] ] = decodeURIComponent ( param [ 1 ] . replace ( /\+/g , "%20" ) ) ; }
function ( err , data ) { console . log ( "presenting page" ) ; params . restaurants = data ; res . render ( "Event/index.jade" , params ) ; }
function ( $o , v ) { if ( $o && $o . my ) { var r = $o . my ( "data" , v , true ) ; return r ; } else return v || null ; }
function ( $o ) { return $o . parents ( '.tagstrip' ) . eq ( 0 ) ; }
function ( val ) { return /^[а-яіїєА-ЯІЇЄa-zA-Z\d\s\_\+\\\-\/\(\)\{\}\'\"\!\&\=\*\%\#\<\>\,\.]{1,}$/ . test ( val ) ; }
function ( domMessage , structuredError ) { this . message = domMessage . textContent || domMessage . innerText ; this . domMessage = domMessage ; this . structuredError = structuredError ; }
function ( ) { req = { params : { service : "" , action : "" } , body : "" } ; res = { send : jasmine . createSpy ( ) } ; GLOBAL . frameworkModules = [ 'ext/blackberry.app/index.js' , 'lib/plugins/extensions.js' , 'lib/plugins/default.js' ] ; }
function ( ) { mockedWebworks . execSync = jasmine . createSpy ( ) ; GLOBAL . window . webworks = mockedWebworks ; client . exit ( ) ; expect ( mockedWebworks . execSync ) . toHaveBeenCalledWith ( _ID , "exit" ) ; }
function ( data ) { this . emit ( 'data' , data ) ; return ! this . paused ; }
function ( e ) { if ( e ) e . preventDefault ( ) ; $ ( this . el ) . hide ( ) ; }
function ( loc ) { loc = loc || location . href ; this . link_el . val ( loc ) ; $ ( this . el ) . show ( ) ; this . focus ( ) ; }
function ( request , response ) { exports . commentsRoute ( 0 , request , response ) ; }
function ( ) { module . filename . should . match ( /\/.*test\/module_spec.js/ ) ; }
function ( ) { module . dirname . should . match ( /\/.*test/ ) ; }
function ( code ) { t . equal ( code , 0 ) ; var c = { } ; vm . runInNewContext ( src , c ) ; t . equal ( c . require ( 'beep' ) , 'boop' ) ; }
function ( anchor ) { this . anchor = document . id ( anchor ) if ( ! this . anchor ) { this . anchor = document . body . getElement ( anchor ) } this . reposition ( true ) }
function start ( ) { console . log ( "[INFO] Request handler 'start' was called." ) ; }
function upload ( ) { console . log ( "[INFO] Request handler 'upload' was called." ) ; }
function route ( handle , pathname ) { console . log ( "[INFO] About to route a request for " + pathname ) ; if ( typeof handle [ pathname ] === 'function' ) { handle [ pathname ] ( ) ; } else { console . log ( "[ERROR] No request handler found for " + pathname ) ; } }
function ( pathToDatabase , callback ) { fs . exists ( pathToDatabase , callback ) ; }
function ( ) { var bacodeScanningWin = Titanium . UI . createWindow ( { backgroundColor : '#FFFFFF' , url : 'barcodeScanner.js' , originalImage : imgView . image } ) ; bacodeScanningWin . open ( ) ; }
function ( ) { if ( $ ( this ) [ 0 ] == element [ 0 ] ) element . animate ( { "width" : "100%" } ) ; else $ ( this ) . animate ( { "width" : "0%" } ) ; }
function run_dnscheck ( ) { interval = setInterval ( pollResult , retry_interval ) ; load ( ) ; return false ; }
function ( e ) { _this . updatePropertiesFromManifest ( e . target ) ; setErrorState ( false ) ; }
function LinkedList ( ) { this . first = null ; this . last = null ; this . length = 0 ; }
function ( ) { this . first = null ; this . last = null ; this . length = 0 ; }
function ( item ) { this . first = new LinkedList . Node ( item , this . first ) ; if ( this . last === null ) this . last = this . first ; this . length ++ ; }
function getOrFailIfClobbered ( prop , fallback ) { if ( prop in cfg && prop in prevCfg ) throw new Error ( 'can\'t override ' + prop ) ; return newCfg [ prop ] || fallback ; }
function ( ) { this . drop . destroy ( ) ; this . delegate . destroy ( ) ; Sortable . unreg ( this ) ; }
function ( ) { this . _tween ( this . actor , '_trayState' , State . HIDDEN , { y : 0 , time : ANIMATION_TIME , transition : 'easeOutQuad' } ) ; }
function ( name ) { name == null && ( name = this . file ) ; delete require . cache [ path . resolve ( __dirname , name ) ] ; return require ( name ) ; }
function ( name ) { name == null && ( name = this . file ) ; return fs . readFile . sync ( fs , name ) ; }
function ( __x , __y ) { return __x === __y ; }
function ( event ) { if ( event ) event . preventDefault ( ) ; inputFiles . getFiles ( ) . each ( function ( file ) { uploadReq . append ( inputname , file ) ; } ) ; uploadReq . send ( ) ; }
function ( ) { current = $ ( this ) updateFullImage ( $ ( this ) . prop ( "href" ) ) return false }
function ( context ) { deepEqual ( ++ count , 1 , '1. コンストラクタが実行される。' ) ; }
function ( context ) { ok ( false , 'テスト失敗。__readyが実行された' ) ; }
function ( context ) { deepEqual ( ++ count , 4 , '4. __disposeが実行されること' ) ; start ( ) ; }
function ( context ) { deepEqual ( ++ count , 1 , 'コンストラクタが実行される。' ) ; }
function ( context ) { ok ( false , 'テスト失敗。__initが実行された' ) ; }
function ( context ) { ok ( false , 'テスト失敗。__readyが実行された' ) ; }
function ( context ) { deepEqual ( ++ count , 6 , '__disposeが実行される。' ) ; }
function ( t , record ) { if ( record . self . getName ( ) == "PartKeepr.Footprint" ) { this . fireEvent ( "itemEdit" , record . get ( "id" ) ) ; } }
function onKeyup ( event ) { if ( event . which === 13 ) { event . preventDefault ( ) ; this . submit ( ) ; } }
function ( options ) { var self = this ; self . options = options || { } ; self . bind ( "form" , "submit" , cancelEvent ( onSubmit ) ) ; self . bind ( "input" , "keyup" , onKeyup ) ; }
function ( e ) { if ( e ) { console . log ( e ) ; } }
function ( e ) { if ( e ) { console . log ( err ) ; } }
function ( ) { $ ( "#submitButton" ) . removeAttr ( "disabled" ) ; $ . mobile . changePage ( "#my-friends" ) ; }
function hide ( ) { if ( isShowed ) { el = document . getElementById ( "overlay" ) ; el . style . visibility = "hidden" ; isShowed = false } }
function ( test ) { write ( color ( 'pending' , '.' ) ) pendingTests . push ( test ) allTests . push ( test ) }
function ( e ) { if ( e . keyCode == 13 ) { performSearch ( ) ; e . preventDefault ( ) ; } }
function ( username ) { if ( typeof username != "string" || ! validUsernameExp . test ( username ) || ! /^\d+$/ . test ( username ) ) { username = "" ; } return username ; }
function ch_answer ( ) { OnCallHandler . currentCall . answer ( ) ; }
function ( aState , key , val ) { ret . push ( helpers . format ( '~s - ~s!~n' , [ key , val ] ) ) ; }
function ( ) { if ( this . value === 'Tom' || this . value === 'David' ) { this . selected = true ; } }
function getDefaultScreen ( req ) { return { title : req . body . title , isStart : req . body . isStart , layout : req . body . layout } ; }
function ( next_game_id , next_game_opts ) { $this . poll_discard ( root ) ; $ . cardstories_tabs . remove_tab_for_game ( game . id , player_id , root , function ( ) { $this . reload ( player_id , next_game_id , next_game_opts , root ) ; } ) ; }
function ( player_id , game_id , root , cb ) { }
function ( ) { equal ( $ ( '.cardstories_next_game_author' , next_game_dom ) . css ( 'display' ) , 'block' ) ; equal ( $ ( '.cardstories_next_game_player' , next_game_dom ) . css ( 'display' ) , 'none' ) ; continue_button . click ( ) ; }
function ( player_id , game_id , root , cb ) { }
function ( ) { equal ( $ ( '.cardstories_next_game_author' , next_game_dom ) . css ( 'display' ) , 'none' ) ; equal ( $ ( '.cardstories_next_game_player' , next_game_dom ) . css ( 'display' ) , 'block' ) ; continue_button . click ( ) ; }
function ( res ) { that . instanceid = res . instance ; that . value = res . value ; that . submit ( options , res ) ; }
function ( event ) { $ ( 'div#filter' ) . slideToggle ( 'slow' ) ; }
function ( key , val ) { addMarker ( buildingLayer , val . longitude , val . latitude , val . buildingID , val . name ) ; latDestination = val . latitude ; lonDestination = val . longitude ; }
function ( key , building ) { if ( building != null && building . id == buildingID ) icon = 'img/markers/' + category . toLowerCase ( ) + '[fav].png' ; }
function ( key , building ) { if ( building . id == buildingID ) icon = 'img/markers/' + category . toLowerCase ( ) + '[seen].png' ; }
function ( ) { $ ( this . el ) . remove ( ) ; }
function ( ) { var q = [ ] ; osg . Quat . init ( q ) ; deepEqual ( q , [ 0 , 0 , 0 , 1 ] ) ; }
function ( ) { var a = [ 2 , 3 ] ; var b = [ ] ; deepEqual ( osg . Vec2 . copy ( a , b ) , a , "test copy operation" ) ; }
function ( ) { deepEqual ( osg . Vec2 . mult ( [ 2 , 4 ] , 2.0 , [ ] ) , [ 4 , 8 ] , "test mult" ) ; }
function ( ) { deepEqual ( osg . Vec2 . length2 ( [ 2 , 4 ] ) , 20 , "test length2" ) ; }
function ( ) { deepEqual ( osg . Vec2 . length ( [ 2 , 4 ] ) , Math . sqrt ( 20 ) , "test length" ) ; }
function ( ) { deepEqual ( osg . Vec2 . dot ( [ 2 , 4 ] , [ 2 , 4 ] ) , 20 , "test dot product" ) ; }
function ( ) { deepEqual ( osg . Vec2 . sub ( [ 2 , 4 ] , [ 2 , 4 ] , [ ] ) , [ 0 , 0 ] , "test sub" ) ; }
function ( ) { deepEqual ( osg . Vec2 . add ( [ - 2 , - 4 ] , [ 2 , 4 ] , [ ] ) , [ 0 , 0 ] , "test add" ) ; }
function ( ) { deepEqual ( osg . Vec2 . neg ( [ - 2 , - 4 ] , [ ] ) , [ 2 , 4 ] , "test neg" ) ; }
function ( ) { return input . setJSON ( { "UniqueID" : 10 } ) . readBufferArray ( ) ; }
function ( ) { if ( config . semaphore > 0 ) { return ; } if ( config . timeout ) { clearTimeout ( config . timeout ) ; } config . blocking = false ; process ( true ) ; }
function ( ) { ok ( true ) ; delete x ; }
function ( ) { equal ( state , "done" , "Test teardown." ) ; }
function ( ) { deepEqual ( this . options , { recipe : "soup" , ingredients : [ "hamster" , "onions" ] } ) ; }
function ( ) { expect ( 2 ) ; deepEqual ( this . foo , "bar" ) ; }
function ( ) { deepEqual ( this . options , { recipe : "soup" , ingredients : [ "hamster" , "onions" , "carrots" ] } , "Is this a bug or a feature? Could do a deep copy" ) ; }
function ( ) { expect ( 0 ) ; this . foo = "hamster" ; }
function ( ) { equal ( QUnit . current_testEnvironment , this , 'The current testEnvironment is global' ) ; equal ( makeurl ( ) , 'http://example.com/search?q=a%20search%20test' , 'makeurl returns a default url if nothing specified in the testEnvironment' ) ; }
function ( ) { equal ( makeurl ( ) , 'http://google.com/?q=another_search_test' , 'rather than passing arguments, we use test metadata to from the url' ) ; }
function ( indices ) { this . indices = indices ; this . count = indices . getElements ( ) . length ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_src * alpha_src ; }
function ( alpha_src , alpha_dst ) { return alpha_src ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_dst * alpha_dst ; }
function ( alpha_src , alpha_dst ) { return alpha_dst ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return 0 ; }
function ( alpha_src , alpha_dst ) { return 0 ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_src * alpha_src * ( 1 - alpha_dst ) + comp_dst * alpha_dst * ( 1 - alpha_src ) ; }
function ( alpha_src , alpha_dst ) { return alpha_src + alpha_dst - 2 * alpha_src * alpha_dst ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_src * alpha_src + comp_dst * alpha_dst * ( 1 - alpha_src ) ; }
function ( alpha_src , alpha_dst ) { return alpha_src + alpha_dst - alpha_src * alpha_dst ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_src * alpha_src * alpha_dst ; }
function ( alpha_src , alpha_dst ) { return alpha_src * alpha_dst ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_src * alpha_src * ( 1 - alpha_dst ) ; }
function ( alpha_src , alpha_dst ) { return alpha_src * ( 1 - alpha_dst ) ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_src * alpha_src * alpha_dst + comp_dst * alpha_dst * ( 1 - alpha_src ) ; }
function ( alpha_src , alpha_dst ) { return alpha_dst ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_dst * alpha_dst + comp_src * alpha_src * ( 1 - alpha_dst ) ; }
function ( alpha_src , alpha_dst ) { return alpha_src + alpha_dst - alpha_src * alpha_dst ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_dst * alpha_dst * alpha_src ; }
function ( alpha_src , alpha_dst ) { return alpha_src * alpha_dst ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_dst * alpha_dst * ( 1 - alpha_src ) ; }
function ( alpha_src , alpha_dst ) { return alpha_dst * ( 1 - alpha_src ) ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_dst * alpha_dst * alpha_src + comp_src * alpha_src * ( 1 - alpha_dst ) ; }
function ( alpha_src , alpha_dst ) { return alpha_src ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_dst * alpha_dst + comp_src * alpha_src ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return comp_dst * alpha_dst - comp_src * alpha_src ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return ( comp_src * comp_dst ) / 255 * alpha_src + comp_dst * alpha_dst * ( 1 - alpha_src ) ; }
function ( comp_src , comp_dst , alpha_src , alpha_dst ) { return ( comp_src + comp_dst ) / 2 * alpha_src + comp_dst * alpha_dst * ( 1 - alpha_src ) ; }
function ( ) { this . sendEncounterData ( personUuid , localStorage . regUuidencountertype , localStorage . screenerUuidlocation , localStorage . loggedInUser ) }
function ( id ) { this . Super ( id ) ; this . Super . setSchema ( schema ) ; }
function ( id ) { this . Super ( id ) ; this . Super . setSchema ( schema ) ; }
function ( block ) { if ( block . prepare ) { allowed = block . prepare . apply ( block , args ) ; return allowed ; } }
function ( page ) { page . app = this ; if ( this . theme ) { page . attributes [ 'data-theme' ] = this . theme ; } this . pages [ page . name ] = page ; }
function ( block ) { if ( block . prepare ) { allowed = block . prepare . apply ( block , args ) ; return allowed ; } }
function ( page ) { page . app = this ; if ( this . theme ) { page . attributes [ 'data-theme' ] = this . theme ; } this . pages [ page . name ] = page ; }
function scm_dim ( ) { if ( ! self . _inTransition ) return ; screenBrightness -= 0.02 ; if ( screenBrightness <= 0 ) { finish ( ) ; return ; } navigator . mozPower . screenBrightness = screenBrightness ; setTimeout ( dim , 10 ) ; }
function lookupContact ( contact ) { if ( contact . name ) { CallScreen . update ( contact . name + ' - ' ) ; } if ( contact . photo ) { CallScreen . setCallerContactImage ( contact . photo ) ; } }
function ( context ) { var columns = context . ordinalColumnsSync ( this . tableName ) ; var fields = columns . map ( this . columnToIndexField , this ) ; return fields ; }
function ( data ) { _this . sidebar . player . playStreamData ( data ) ; _this . comments . updateCommentsFor ( stream_id ) ; current_stream_id = stream_id ; }
function ( data ) { Log ( 'info' , 'Comment posted!' ) ; $ ( "#comment-form" ) . val ( '' ) ; Async . later ( 250 , function ( ) { _this . comments . updateCommentsFor ( current_stream_id ) ; } ) ; }
function ( val ) { if ( 0 == arguments . length ) return el ; el . empty ( ) . append ( ( val && val . el ) ? val . el : val ) ; return this ; }
function ( node ) { that . forceNodes . push ( node ) ; that . force . start ( ) ; }
function ( ) { console . log ( name ) ; GeocamResponderMaps . MapSets . content . objectAt ( this . get ( 'contentIndex' ) ) . set ( 'name' , 'I was changed' ) ; this . refresh ( ) ; }
function ( message ) { return helpers . createError ( this . name , this . propertyName , message ) ; }
function ( ) { var valid = true ; if ( ! helpers . isDefined ( this . instance ) && this . value === true ) { return this . createError ( "is required" ) ; } }
function ( a , b ) { return a . getTime ( ) - b . getTime ( ) ; }
function ( a , b ) { return a - b ; }
function ( ) { this . $element . off ( this . options . ns ) . removeData ( 'popover' ) }
function ( ) { this . $element . off ( this . options . ns ) . removeData ( 'tooltip' ) }
function ( ) { var result = cursor . result ; if ( result ) { processNewFile ( result ) ; } else { if ( newfiles . length > 0 ) { saveAndReportQuickScanResults ( fullScan ) ; } else { fullScan ( ) ; } } }
function ( ) { buildUI ( ) ; photodb . scan ( ) ; document . addEventListener ( 'mozvisibilitychange' , function visibilityChange ( ) { if ( ! document . mozHidden ) { photodb . scan ( ) ; } } ) ; }
function ( type , files ) { rebuildUI ( ) ; }
function ( x , xs ) { if ( __toString . call ( xs ) . slice ( 8 , - 1 ) === 'String' ) { return x + xs ; } else { return [ x ] . concat ( xs ) ; } }
function ( xs , ys ) { if ( __toString . call ( ys ) . slice ( 8 , - 1 ) === 'String' ) { return xs + ys ; } else { return xs . concat ( ys ) ; } }
function ( ) { var args ; args = __slice . call ( arguments ) ; return f . apply ( this , initArgs . concat ( args ) ) ; }
function ( x , xs ) { if ( __toString . call ( xs ) . slice ( 8 , - 1 ) === 'String' ) { return x + xs ; } else { return [ x ] . concat ( xs ) ; } }
function ( xs , ys ) { if ( __toString . call ( ys ) . slice ( 8 , - 1 ) === 'String' ) { return xs + ys ; } else { return xs . concat ( ys ) ; } }
function ( ) { var args ; args = __slice . call ( arguments ) ; return f . apply ( this , initArgs . concat ( args ) ) ; }
function ( passageId , menuName ) { return this . getSelectedOptions ( $ ( "li[menu-name=" + menuName + "]" , step . util . getPassageContainer ( passageId ) ) ) ; }
function ( ) { return this . _styleProperty ; }
function ( newVal ) { this . _valueEditorHottext = newVal ; }
function ( newVal ) { this . _dtextProperty = newVal ; }
function ( ) { listController = Application . getController ( 'KR.controller.EntryController' ) ; listWidget = listController . getPanelView ( ) ; expect ( listWidget ) . toBeDefined ( ) ; }
function ( ) { listController = Application . getController ( 'KR.controller.EntryController' ) ; listWidget = listController . getPanelView ( ) ; expect ( listWidget ) . toBeDefined ( ) ; }
function do_trial ( block , trial ) { jsPsych [ trial . type ] [ "trial" ] . call ( this , DOM_target , block , trial , 1 ) ; }
function ( ) { this . win = Ext . create ( 'Earsip.view.PeminjamanWin' , { } ) ; this . win . hide ( ) ; this . callParent ( arguments ) ; }
function ( ) { this . stopAllActions ( ) ; this . unscheduleAllSelectors ( ) ; this . _arrayMakeObjectsPerformSelector ( this . _children , cc . Node . StateCallbackType . cleanup ) ; }
function ( ) { this . _arrayMakeObjectsPerformSelector ( this . _children , cc . Node . StateCallbackType . onEnter ) ; this . resumeSchedulerAndActions ( ) ; this . _isRunning = true ; }
function ( ) { this . _arrayMakeObjectsPerformSelector ( this . _children , cc . Node . StateCallbackType . onEnterTransitionDidFinish ) ; }
function ( ) { this . pauseSchedulerAndActions ( ) ; this . _isRunning = false ; this . _arrayMakeObjectsPerformSelector ( this . _children , cc . Node . StateCallbackType . onExit ) ; }
function ( ) { this . _super ( ) ; }
function ( ) { this . _super ( ) ; }
function ( ) { this . _super ( ) ; }
function ( ) { this . _super ( ) ; }
function ( ) { this . _super ( ) ; }
function ( ) { this . _super ( ) ; }
function ( ) { this . _super ( ) ; }
function ( ) { calledWith = arguments ; return model ; }
function ( ) { calledWith = arguments ; return model ; }
function ( ) { this . owner = null ; for ( var i = 0 ; i < this . myItems . length ; ++ i ) { this . myItems [ i ] . cleanup ( ) ; } }
function ( isVisible ) { if ( this . modelItem . params . isInvisible && ( ! this . modelItem . cellContents || ! this . modelItem . cellContents . model . showInvisible ) ) isVisible = false ; this . itemGraphics . setVisible ( isVisible ) ; }
function onPress ( ) { $ ( this ) . css ( { backgroundColor : '#aff' } ) . animate ( { backgroundColor : '#fff' } ) ; handler ( ) ; }
function ( e ) { var current = self . $quickSearch . val ( ) ; if ( current != self . _previousQuickSearchText ) { self . _previousQuickSearchText = current ; self . search ( ) ; } }
function ( e ) { me . onInput ( e ) ; }
function ( layer ) { this . _deinitEvents ( layer ) ; L . LayerGroup . prototype . removeLayer . call ( this , layer ) ; this . invoke ( 'unbindPopup' ) ; }
function ( ) { d3 . select ( this ) . transition ( ) . style ( "fill" , "steelblue" ) . attr ( "transform" , "translate(" + x + "," + y + ")scale(0.035)" ) }
function ( index , val ) { if ( jQuery . inArray ( val , existingTags ) === - 1 ) { existingTags . push ( val ) ; } }
function ( index ) { var context = jQuery ( this ) ; var item = context . val ( ) ; if ( jQuery . inArray ( item , existingTags ) === - 1 ) { existingTags . push ( item ) ; } }
function ( index ) { var val = this . trim ( ) ; if ( val && jQuery . inArray ( val , existingTags ) === - 1 ) { existingTags . push ( val ) ; } }
function ( ) { if ( callbacks ++ ) throw new Error ( "multiple callbacks" ) ; return function ( error , result ) { if ( error ) done ( error ) ; else consumer ( result ) ; } }
function ( html , args ) { if ( ! args || args === sliding_tree . get_current_crumb ( ) ) { parent . children ( '.will_have_content' ) . html ( html ) ; } }
function ( environment ) { return this . __processedAsset__ . isFresh ( environment ) && this . isCompiled ; }
function ( err , categories ) { callback ( categories ) ; }
function ( params ) { updateLatestGame ( params , params . callback ) ; }
function ( categoryId , callback ) { Game . find ( { 'category' : categoryId } ) . populate ( 'category' ) . exec ( function ( err , games ) { callback ( games ) ; } ) ; }
function ( games ) { games . length . should . equal ( 1 ) ; done ( ) ; }
function ( event ) { event . preventDefault ( ) ; $ ( '#all-dbs' ) . slideToggle ( ) ; }
function hidePlanePosition ( ) { for ( var fid = 0 ; fid < flights . length ; fid ++ ) { map . getLayersByName ( "Flight" ) [ 0 ] . removeFeatures ( flights [ fid ] . plane ) ; } }
function measureText ( text ) { return textCtx . measureText ( text ) ; }
function getBufferElement ( buffer , position , autoPrepare ) { if ( autoPrepare ) position = prepareBuffer ( buffer , position ) ; return buffer [ position ] ; }
function KJump ( k ) { this . k = k }
function ( key ) { if ( obj . hasOwnProperty ( key ) ) { result [ key ] = obj [ key ] ; } }
function ( e ) { window . console . log ( 'Selecting all Contacts' ) ; bulkSelection ( true ) ; selectedContacts = myFriendsByUid ; selButton . textContent = 'Unselect All' ; selButton . onclick = UI . unSelectAll ; }
function ( e ) { window . console . log ( 'Unselecting all the contacts' ) ; bulkSelection ( false ) ; selButton . textContent = 'Select All' ; selButton . onclick = UI . selectAll ; selectedContacts = { } ; }
function ( ) { pointer = 0 ; this . pending = kcontacts . length ; ( importSlice . bind ( this ) ) ( ) ; }
function ( img ) { $ ( '#logo-cat-thumbs-list' ) . append ( '<div class="file-entry logo-entry" org-category="' + img . id + '">' + '<img src="/static/img/org_categories/' + img . filename + '" alt="img" class="logo-thumb">' + '</div>' ) ; }
function ( data ) { ErrorUtils . addErrorMessage ( '#contact' , $labelValidationUsercontactNotMatch ) ; AddContact . isValueValid = false ; }
function ( inputOrSelector , message ) { var input = ErrorUtils . getInput ( inputOrSelector ) var insertedRow = input . closest ( 'div.controls' ) . append ( ErrorUtils . getErrorRow ( message ) ) ; ErrorUtils . addErrorStyles ( insertedRow ) ; }
function ( c , key ) { console . log ( 0 , c , key ) if ( key && key . ctrl && key . name == 'c' ) { process . stdin . pause ( ) } }
function ( req , res ) { 'use strict' ; res . send ( { 'hello' : 'world' } ) ; }
function ( cfg ) { this . _super ( cfg ) ; this . bindAll ( 'search' , 'doSearch' , 'dataDispatch' ) ; this . render ( ) ; }
function ( cfg ) { this . _super ( cfg ) ; this . bindAll ( 'changeSize' , 'paginate' ) ; }
function ( e ) { this . save ( 'size' ) ; console . log ( 'change' ) ; this . applyInterface ( 'doSearch' , UT . mix ( this . getData ( ) , this . pageDefault . number ) ) ; }
function ( cfg ) { this . _super ( cfg ) ; this . initTip ( ) ; }
function ( ) { if ( params . callback ) { params . callback ( canvas , allErrors ) ; } }
function handleBlankTile ( ) { console . error ( "Failed to load tile." ) ; this . src = Edgar . baseUrl + "img/blank.png" ; }
function ( success ) { $ . ajax ( { url : '/?' , method : 'GET' , dataType : 'json' , success : success } ) ; }
function ( ) { play . call ( this , this . getAttribute ( 'loop' ) != undefined ) ; }
function ( ) { cordova . platform ( ) ; }
function ( err , stderr , stdout ) { if ( err ) throw 'An error occurred while building the ' + platform + ' project. ' + err ; }
function ( err , stderr , stdout ) { if ( err ) throw 'An error occurred while emulating/deploying the ' + platform + ' project.' + err ; }
function ( err , stderr , stdout ) { if ( err ) { cfg . remove_platform ( target ) ; throw 'An error occured during creation of ' + target + ' sub-project. ' + err ; } else if ( callback ) callback ( ) ; }
function ( oCell ) { return jQuery ( oCell ) . parent ( ) . children ( ) . index ( jQuery ( oCell ) ) ; }
function ( oCell ) { var iCellIndex = fnGetColumnIndex ( oCell ) ; return jQuery ( oCell ) . parent ( ) . children ( ) [ iCellIndex - 1 ] ; }
function ( oCell ) { var iCellIndex = fnGetColumnIndex ( oCell ) ; return jQuery ( oCell ) . parent ( ) . children ( ) [ iCellIndex + 1 ] ; }
function next ( ) { var key = keyArr . shift ( ) ; if ( key !== undefined ) { fs . readFile ( '../style/jx.' + key + '.css' , callback ) ; } else { res . end ( ) ; } }
function primaryExpr ( iterator ) { var expr = iterator . current ( ) ; if ( expr . text == '(' ) { iterator . next ( ) ; expr = orExpr ( iterator ) ; } iterator . next ( ) ; return expr ; }
function ( ) { if ( ! cc . IMEDispatcher . s_instance ) { cc . IMEDispatcher . s_instance = new cc . IMEDispatcher ( ) ; cc . KeypadDispatcher . sharedDispatcher ( ) ; } return cc . IMEDispatcher . s_instance ; }
function ( sid ) { if ( translations [ locale ] [ sid ] && translations [ locale ] [ sid ] [ 1 ] . length ) { sid = translations [ locale ] [ sid ] [ 1 ] ; } return sid ; }
function initTranslations ( metadata ) { let localeDir = metadata . dir . get_child ( 'locale' ) . get_path ( ) ; Gettext . bindtextdomain ( 'system-monitor-applet' , localeDir ) ; }
function ( ) { this . $element . off ( this . options . ns ) . removeData ( 'popover' ) }
function ( ) { this . $element . off ( this . options . ns ) . removeData ( 'tooltip' ) }
function ( session ) { this . createSession ( session ) ; this . checkCookie ( session ) ; this . adminInterface ( ) ; this . showAllList ( ) ; this . submitNewFile ( ) ; this . addToDataSet ( ) ; }
function ( key ) { if ( pt === undefined ) { return _default ; } pt = pt [ key ] ; }
function ( str , _default ) { return this . chart . get ( 'metadata.visualize.' + str , _default ) ; }
function ( ) { $ ( 'a' ) . colorbox ( ) ; $ ( 'a' ) . mobileBox ( ) ; }
function ( ) { this . map . setZoom ( this . map . getZoom ( ) + 1 ) ; }
function ( ) { this . map . setZoom ( this . map . getZoom ( ) - 1 ) ; }
function ( ) { debug . geolocationStop ( ) ; debug . compassStop ( ) ; debug . accelerometerStop ( ) ; debug . gyroscopeStop ( ) ; debug . liveMonitor = true ; $ ( '#debug-DC' ) . html ( "<p>Stopped</p>" ) ; }
function ( node , elem , content ) { var insert = elem . pos . beforeend + elem . pos . afterend + 1 ; replaceContent ( node , insert , insert , content ) ; }
function onsuccess ( ) { contactsList . refresh ( contact ) ; reloadContactDetails ( contact ) ; navigation . back ( ) ; }
function ( ev ) { var src = ev . scriptSource ; var lines = src . split ( '\n' ) ; if ( /^\n\/\/internal/ . test ( src ) ) { return ; } }
function saveFile ( ) { console . log ( editor . getValue ( ) ) ; model . setFile ( filepath , editor . session . doc . getValue ( ) ) ; }
function ( contents ) { editor . session . doc . setValue ( contents ) ; editor . navigateFileStart ( ) ; }
function ( i ) { obj [ prop ] = i ; node . setAttrs ( rootObj ) ; }
function ( ) { return $ ( "div.layer1, div.layer2" ) . addClass ( "active" ) ; }
function ( ) { if ( mapLoaded ) if ( typeof myRouteVector != 'undefined' ) myRouteVector . destroyFeatures ( ) ; }
function ( error ) { throw new Error ( error ) ; }
function ( ) { this . _stream && this . _stream . stop ( ) ; delete this . _stream ; return true ; }
function ( errors ) { if ( errors ) { platform . log ( "Errors downloading src attributes" , errors ) ; } scxmlJsonToModel ( scxmlJson , cb ) ; }
function ( ) { for ( var i = 0 ; i < arguments . length ; i ++ ) { Packages . java . lang . System . out . println ( String ( arguments [ i ] ) ) ; } }
function _init ( ) { _subscribed = true ; _abordingConnection = false ; _requestCount = 0 ; _websocket = null ; _sse = null ; _activeRequest = null ; _ieStream = null ; }
function _subscribe ( options ) { _reinit ( ) ; _request = jQuery . extend ( _request , options ) ; }
function _buildWebSocketUrl ( ) { var url = _attachHeaders ( _request ) ; return decodeURI ( jQuery ( '<a href="' + url + '"/>' ) [ 0 ] . href . replace ( /^http/ , "ws" ) ) ; }
function _buildSSEUrl ( ) { var url = _attachHeaders ( _request ) ; return url ; }
function ( ) { for ( var i = 0 ; i < this . postStepCallbacks . length ; i ++ ) { this . postStepCallbacks [ i ] ( ) ; } this . postStepCallbacks = [ ] ; }
function ( ) { return [ "Expected object to have the '" + className + "' CSS class, but it did not" , "Expected object not to have the '" + className + "' CSS class, but it did" ] ; }
function ( ) { return [ "Expected page to have '" + content + "' within its content, but it did not" , "Expected page not to have '" + content + "' within its content, but it did" ] ; }
function ( item ) { numberContainerBar . addChild ( item ) ; }
function ( ) { var _self = this ; return { xclass : 'bar-item-text' , text : _self . get ( 'ellipsisTpl' ) } ; }
function ( page ) { var _self = this ; return { id : page , xclass : 'bar-item-button' , text : '' + page + '' , elCls : _self . get ( 'numberButtonCls' ) } ; }
function ( item ) { children . push ( item ) ; }
function ( id ) { var _self = this ; return { id : id , xclass : 'bar-item-button' , text : _self . get ( id + 'Text' ) , disabled : true , elCls : _self . get ( id + 'Cls' ) } ; }
function ( ) { return { xclass : 'bar-item-separator' } ; }
function ( id ) { var _self = this ; return { id : id , xclass : 'bar-item-text' , text : _self . _getTextItemTpl ( id ) } ; }
function ( child ) { if ( S . inArray ( child . get ( 'id' ) , buttons ) ) { child . set ( 'disabled' , ! enable ) ; } }
function ( err ) { displayError ( mw . msg ( 'geolocating-failed-heading' ) , mw . msg ( 'geolocating-failed-text' ) ) ; }
function ( header , content ) { this . current . request . headers [ header + "" . toLowerCase ( ) ] = content + "" . toLowerCase ( ) ; return this ; }
function ( key ) { delete this . current . request . headers [ key + "" . toLowerCase ( ) ] ; return this ; }
function ( ) { if ( ! this . _children ) this . _children = [ ] ; return this . _children ; }
function ( ) { if ( cc . s_sharedAnimationCache ) { cc . s_sharedAnimationCache . _animations = null ; cc . s_sharedAnimationCache = null ; } }
function ( ) { var i , timeout = 0 ; process . argv . forEach ( function ( val , index , array ) { if ( val === "--debug" ) { timeout = 20000 ; } } ) ; setTimeout ( START , timeout ) ; }
function ( ) { var urlstring = "/gmas/project/SCR0104SegmentHome.jsp?segmentId=" ; $ ( this ) . dialog ( "close" ) ; window . location = $ ( "#env" ) . val ( ) + urlstring + $ . trim ( $ ( "#segmentId" ) . val ( ) ) ; }
function ( ) { var columns = processor . getColumns ( ) ; var expected = [ 'name' , 'address' , 'email_address' , 'description' , 'age' ] ; assert . deepEqual ( columns . sort ( ) , expected . sort ( ) ) ; }
function ( k , v ) { documentsTable . fnAddData ( [ '<button class="enabled" id="deleteDoc"><img src="/_admin/html/media/icons/doc_delete_icon16.png" width="16" height="16"></button><button class="enabled" id="editDoc"><img src="/_admin/html/media/icons/doc_edit_icon16.png" width="16" height="16"></button>' , v . _id , v . _rev , '<pre class="prettify">' + cutByResolution ( JSON . stringify ( v ) ) + "</pre>" ] ) ; }
function ( k , v ) { $ ( '#documentsTableID' ) . dataTable ( ) . fnAddData ( [ '<button class="enabled" id="deleteDoc"><img src="/_admin/html/media/icons/doc_delete_icon16.png" width="16" height="16"></button><button class="enabled" id="editDoc"><img src="/_admin/html/media/icons/doc_edit_icon16.png" width="16" height="16"></button>' , v . _id , v . _rev , '<pre class="prettify">' + cutByResolution ( JSON . stringify ( v ) ) + '</pre>' ] ) ; }
function cutByResolution ( string ) { if ( string . length > 1024 ) { return escaped ( string . substr ( 0 , 1024 ) ) + '...' ; } return escaped ( string ) ; }
function ( obj ) { obj . createRepository ( { _id : 'npmtop' , name : 'reposit' } , this . callback ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . lengthOf ( obj . repository_ids , 2 ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj [ 0 ] . resource , 'Repository' ) ; assert . equal ( obj [ 1 ] . resource , 'Repository' ) ; }
function ( message , priority ) { if ( priority == null ) { priority = 'info' ; } if ( priority === 'deprecate' ) { priority = 'warn' ; } Ext . log ( { msg : message , level : priority } ) ; }
function ( ) { if ( self . destroy ( ) ) { originalViewDestroyFunction . call ( this ) ; } }
function Controller ( stage , canvas ) { this . stage = stage ; this . canvas = canvas ; this . catchedIngredients = [ ] ; }
function ( ) { var player = new Ingredient ( 'bottom' ) ; player . x = canvas . width / 2 ; player . y = canvas . height ; player . catched = true ; return player ; }
function getCheckboxVault ( ) { if ( g ( 'urgent' ) . checked ) { urgentValue = g ( 'urgent' ) . value ; } else { urgentValue = "No" ; } }
function ( func ) { var id = undefined ; if ( this . anim ) { id = this . anim . id ; } this . anim = { func : func , id : id } ; }
function ( ) { init_main_functions ( ) ; initTop ( ) ; initCustomSelect ( ) ; initDel ( ) ; }
function ( ) { stream . paused = true stream . emit ( 'pause' ) }
function ( date ) { var newdate = new Date ( date . getTime ( ) + date . getTimezoneOffset ( ) * 60000 ) ; return newdate . format ( dateFormat ) ; }
function ( paper , cx , cy ) { var e , x = cx - 75 , y = cy ; e = paper . path ( "M " + x + "," + y + "c 0,0 75,60 150,0" ) . attr ( { "stroke-width" : 8 } ) ; }
function ( ) { $ ( '#lightbox' ) . hide ( ) ; $ ( '#overlay' ) . hide ( ) ; }
function ( a , b ) { return ( b . current * b . quantity ) - ( a . current * a . quantity ) }
function ( a , b ) { return a . screen . width > b . screen . width ; }
function ( feedUrl , callback ) { var data = "s=feed/" + feedUrl + "&T=" + GoogleReader . api_token ; this . postData ( this . MARK_ALL_READ_URL + "?client=" + GoogleReader . client , data , callback ) ; }
function ( ) { $ ( '.metricblock' ) . formset ( { formCssClass : 'dynamic-metric-form' , prefix : 'metrics' , addBtnObj : $ ( '#events-add-metric-button' ) , addDeleteButton : null } ) ; }
function ( ) { this . id = null ; this . elm = null ; this . par = null ; this . title = "" ; this . menu = null ; }
function ( ev , ui ) { this . close ( ) ; jQuery ( 'body' ) . trigger ( 'layoutresizeall' ) ; }
function saveFile ( ) { model . setFile ( filepath , editor . session . doc . getValue ( ) ) ; }
function ( ) { var menu = new draw2d . Menu ( ) ; var oThis = this ; menu . setZOrder ( 999999 ) ; return menu ; }
function Device ( ) { _ . extend ( this , Backbone . Events ) ; $window . on ( 'orientationchange' , _ . bind ( this . trigger , this , 'orientation:change' ) ) ; }
function App ( options ) { if ( options == null ) { options = { router : new Tres . Router , device : new Tres . Device } ; } _ . extend ( this , options ) ; }
function ( ) { if ( req . readyState === 4 && ( req . status === 200 || req . status === 0 ) ) { var contacts = JSON . parse ( req . responseText ) ; this . _insertContacts ( contacts ) ; } }
function ( ) { that . highlighter ( elt . id , elt . offset , elt . line , elt . column , elt . span , "rgb(254, 196, 79)" ) ; }
function ( ) { $ ( 'body, nav, aside, .toggle-sidebar, .main-content, footer.main.' ) . toggleClass ( 'night-mode' ) ; }
function ( ) { notifications . openNotification ( "normal" , "blackberry.app.exit() was called, in the real world your app will exit, here... you get this notification" ) ; }
function ( ) { pic . src = window . webkitURL . createObjectURL ( upload . files [ 0 ] ) ; take . style . display = "inline" ; }
function ( ) { ui . showOverlay ( "camera-window" ) ; take . style . display = "none" ; }
function ( ) { var params = $ ( this ) . is ( self . options . handlesHierarchySelector ) ? { treeSelector : self . options . treeSelector , slimScroll : true } : { } ; $ ( this ) . vde_menu ( params ) ; }
function resetDefaults ( ) { logKind = makeDefaultLogKinds ( ) ; }
function ( i , category ) { availableData [ category ] = getCategoryAvailableData ( filters , category ) ; }
function ( d , i ) { return 'translate(' + ( x ( getX ( d , i ) ) - ( ( availableWidth / data [ 0 ] . values . length ) * .5 ) ) + ',0)' ; }
function ( ) { var that = this ; $ ( this . el ) . show ( 'fast' , function ( ) { that . focus ( ) ; } ) ; return this ; }
function ( ) { UI_set_loading ( ) ; view_board ( $ ( this ) . attr ( 'board-name' ) , - 1 , - 1 , UI_update , 'click' ) ; }
function ( ) { UI_set_loading ( ) ; var pathTerm = bbs_path . getLastTermWithType ( bbs_type . path . board ) ; view_board ( pathTerm . name , - 1 , - 1 , UI_update , 'click' , - 1 ) ; }
function ( ) { UI_set_loading ( ) ; view_next_post ( UI_update ) ; }
function ( ) { return document . location . pathname . indexOf ( 'desktop' ) >= 0 ; }
function ( ) { return document . location . pathname . indexOf ( 'mobile' ) >= 0 ; }
function isDesktopFF ( ) { return document . location . pathname . indexOf ( 'desktop' ) >= 0 ; }
function ( inputContainer ) { $ ( ".success, .error" ) . remove ( ) ; if ( inputContainer ) { $ ( "#buildid-range" ) . remove ( ) ; inputContainer . removeClass ( "info" ) ; } }
function ( attrs , opts ) { if ( ! attrs ) { attrs = { } ; } attrs [ "@type" ] = "Person" ; this . set ( attrs , opts ) ; }
function ( entry ) { return prepareActivity ( entry , meta ) ; }
function ( ) { QUnit . ok ( true , "Checking if the \"onOpen\" callback was executed before data sending" ) ; }
function ( ) { if ( ! $ . trim ( $this . val ( ) ) ) { placeholder . hide ( ) ; } }
function ( ) { if ( ! $ . trim ( $this . val ( ) ) ) { placeholder . show ( ) ; } }
function ( e ) { qq . addClass ( full , self . _classes . dropActive ) ; e . stopPropagation ( ) ; }
function ( e ) { qq . removeClass ( full , self . _classes . dropActive ) ; }
function ( ) { $ ( document ) . on ( 'click' , '#' + buttonAddOptionId , addMultipleChoiceOption ) ; }
function ( err , deck ) { if ( err ) return callback ( err ) ; if ( ! deck ) return callback ( 'No deck with id ' + deckId ) ; callback ( null , new Deck ( deck ) ) ; }
function ( e ) { canvasCoord ( e ) ; that . mouseDown ( e , that ) }
function ( ) { element . onload = null ; self . application . ninja . elementMediator . addElements ( element , rules , true , false ) ; }
function ( content ) { this . message = function ( ) { return [ "Expected page to have '" + content + "' within it's content, but it did not" , "Expected page not to have '" + content + "' within it's content, but it did" ] ; } ; return this . actual . hasContent ( content ) ; }
function ( tap ) { var target = this . map . pointLocation ( new MM . Point ( tap . x , tap . y ) ) ; this . guideModel . set ( target ) ; }
function ( map , mapModel ) { if ( map !== undefined && mapModel !== undefined ) { this . init ( map , mapModel ) ; } }
function ( map , guideModel , options ) { if ( map !== undefined && guideModel !== undefined ) { this . init ( map , guideModel , options ) ; } }
function ( e ) { var clickPoint = MM . getMousePoint ( e , this . map ) ; var target = this . map . pointLocation ( clickPoint ) ; this . guideModel . set ( target ) ; return MM . cancelEvent ( e ) ; }
function ( ) { this . id = null ; this . elm = null ; this . par = null ; this . title = "" ; this . menu = null ; }
function ( ) { $ ( '.pause' ) . hide ( ) ; $ ( '#graph-container' ) . hide ( ) . empty ( ) ; $ ( '#canvas-box' ) . show ( ) ; sylv . Processing . init ( ) ; }
function ( ) { $ ( '#canvas-box' ) . hide ( ) . empty ( ) . append ( '<canvas id="graphcanvas">Your browser does not support graph visualization</canvas>' ) ; $ ( '#graph-container' ) . show ( ) ; $ ( '.pause' ) . show ( ) ; sylv . Sigma . init ( ) ; }
function ( d ) { $ ( '.warehouse' ) . prepend ( d ) . show ( ) ; $ ( 'h2' ) . fadeOut ( 'fast' ) ; }
function ( ) { o . fadeOut ( 'slow' ) ; }
function ( ) { isDrag = false ; }
function ( event ) { if ( ( String . fromCharCode ( event . which ) . toLowerCase ( ) == 's' && event . ctrlKey ) ) { $ ( '#ajax_form' ) . submit ( ) ; return false ; } }
function ( content , isCDATA ) { if ( content . replace ( /^\s+$/g , "" ) === "" ) { return null ; } var pcdata = new XMLElement ( ) ; pcdata . type = "TEXT" ; pcdata . content = content ; return pcdata ; }
function ( data ) { return this . createTextNode ( data , Node . CDATA_SECTION_NODE ) ; }
function ( ) { var y = 90 ; y -= this . targetSpeed * 2 ; y += this . speed * 2 ; y = Math . min ( 162 , Math . max ( 16 , y ) ) ; return y ; }
function ( ) { var y = 90 ; y -= this . targetAltitude * 4 ; y += this . altitude * 4 ; y = Math . min ( 162 , Math . max ( 16 , y ) ) ; return y ; }
function ( msgs ) { for ( var mtype in msgs ) { if ( mtype in mmap . messageHandlerMap ) { mmap . handleMessage ( msgs [ mtype ] ) ; } } mmap . adi . draw ( ) ; }
function ( value , attr ) { if ( value !== 'true' && ( ! _ . isBoolean ( value ) || value === false ) ) { return format ( messages . acceptance , sentenceCase ( attr ) ) ; } }
function ( value , attr , minValue ) { if ( ! isNumber ( value ) || value < minValue ) { return format ( messages . min , sentenceCase ( attr ) , minValue ) ; } }
function ( value , attr , maxValue ) { if ( ! isNumber ( value ) || value > maxValue ) { return format ( messages . max , sentenceCase ( attr ) , maxValue ) ; } }
function ( value , attr , length ) { if ( ! hasValue ( value ) || trim ( value ) . length !== length ) { return format ( messages . length , sentenceCase ( attr ) , length ) ; } }
function ( value , attr , minLength ) { if ( ! hasValue ( value ) || trim ( value ) . length < minLength ) { return format ( messages . minLength , sentenceCase ( attr ) , minLength ) ; } }
function ( value , attr , maxLength ) { if ( ! hasValue ( value ) || trim ( value ) . length > maxLength ) { return format ( messages . maxLength , sentenceCase ( attr ) , maxLength ) ; } }
function ( value , attr , values ) { if ( ! _ . include ( values , value ) ) { return format ( messages . oneOf , sentenceCase ( attr ) , values . join ( ', ' ) ) ; } }
function ( value , attr , equalTo , model , computed ) { if ( value !== computed [ equalTo ] ) { return format ( messages . equalTo , sentenceCase ( attr ) , sentenceCase ( equalTo ) ) ; } }
function ( ) { assert . equals ( [ 'Name is required' ] , this . model . validate ( { name : '' } ) ) ; }
function ( model , error ) { assert . equals ( [ 'Email must be a valid email' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Age must be between 1 and 10' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Name must be between 2 and 4 characters' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Name is required' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Agree must be accepted' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Password repeat must be the same as Password' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Postal code must be 2 characters' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Age must be less than or equal to 10' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Name must be at most 2 characters' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Age must be greater than or equal to 1' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Name must be at least 2 characters' ] , error ) ; done ( ) ; }
function ( model , error ) { assert . equals ( [ 'Country must be one of: Norway, Sweeden' ] , error ) ; done ( ) ; }
function postRender ( ) { results . scrollTop ( 0 ) ; search . removeClass ( "select2-active" ) ; self . positionDropdown ( ) ; }
function ( ) { animationController . play ( ) ; animReverse . set ( 'checked' , false ) ; animPause . set ( 'checked' , false ) ; animPlay . set ( 'checked' , true ) ; updateSpeedIndicator ( ) ; }
function isLeftHandSide ( expr ) { switch ( expr . type ) { case Syntax . Identifier : case Syntax . MemberExpression : case Syntax . CallExpression : case Syntax . NewExpression : return true ; } return false ; }
function ( context , args ) { if ( Smartgraphs . graphingTool . get ( "lineCount" ) === 2 ) { this . get ( 'owner' ) . set ( 'requestedCursorStyle' , 'default' ) ; } return ; }
function ( comment ) { return moment ( comment . time . _d ) . utc ( ) }
function ( ) { if ( ! askConfirmationBeforeLeavingPage ) { return } return "A game is active ... are you sure you want to leave ?" ; }
function ( e ) { askConfirmationBeforeLeavingPage = false ; $ ( "#endOfGameModal" ) . modal ( 'show' ) ; $ ( "#winModal" ) . modal ( 'hide' ) ; }
function ( event ) { return _this . customer . purchase ( _this . cart ) ; }
function _setEnabled ( enabled ) { _enabled = enabled ; CommandManager . get ( Commands . TOGGLE_JSLINT ) . setChecked ( _enabled ) ; _updateListeners ( ) ; _prefs . setValue ( "enabled" , _enabled ) ; run ( ) ; }
function ( idx ) { if ( indexToAdd . realIndex < idx . realIndex ) { idx . currentIndex ++ ; } }
function ( activeLink ) { this . $el . html ( this . template ( { activeLink : activeLink , navItems : this . navItems } ) ) ; return this ; }
function ( enabled ) { var changed = this . _enabled !== enabled ; this . _enabled = enabled ; if ( changed ) { $ ( this ) . triggerHandler ( "enabledStateChange" ) ; } }
function ( checked ) { var changed = this . _checked !== checked ; this . _checked = checked ; if ( changed ) { $ ( this ) . triggerHandler ( "checkedStateChange" ) ; } }
function ( name ) { var changed = this . _name !== name ; this . _name = name ; if ( changed ) { $ ( this ) . triggerHandler ( "nameChange" ) ; } }
function _handleEnableJSLint ( ) { var enabled = ! JSLintUtils . getEnabled ( ) ; JSLintUtils . setEnabled ( enabled ) ; CommandManager . get ( Commands . DEBUG_JSLINT ) . setChecked ( enabled ) ; }
function _setEnabled ( enabled ) { _enabled = enabled ; _updateListeners ( ) ; _prefs . setValue ( "enabled" , _enabled ) ; run ( ) ; }
function ( feature ) { attribs = feature [ "@" ] ; if ( attribs ) { attribs . required = packagerUtils . toBoolean ( attribs . required , true ) ; } accessObj . features . push ( attribs ) ; }
function ( found , currElem ) { if ( currElem ) { return found || currElem . id === feature . id ; } }
function ( directoryName , parentPath ) { return this . specialCaseModuleNames [ directoryName ] || this . underscore ( directoryName ) ; }
function ( info ) { return info . buildName === 'NetReflector' && info . group === 'CruiseControl.NET' ; }
function ( info ) { return info . buildName === 'NetReflector' && info . group === 'CruiseControl.NET' ; }
function ( ) { return { buildName : buildName , group : group , url : 'http://example.com/project/build/100' , state : { failedBuildsCount : failedBuildsCount } } ; }
function ( amount ) { failedBuildsCount = amount ; return this ; }
function ( plan ) { var buildEvent = { buildName : plan . name , group : plan . projectName , url : plan . url } ; this . buildFailed . dispatch ( buildEvent ) ; }
function ( plan ) { var buildEvent = { buildName : plan . name , group : plan . projectName , url : plan . url } ; this . buildFixed . dispatch ( buildEvent ) ; }
function ( project ) { var buildEvent = { buildName : project . projectName ( ) , group : project . category ( ) , url : project . url } ; this . buildFailed . dispatch ( buildEvent ) ; }
function ( project ) { var buildEvent = { buildName : project . projectName ( ) , group : project . category ( ) , url : project . url } ; this . buildFixed . dispatch ( buildEvent ) ; }
function onBuildFailed ( buildEvent ) { failedCount ++ ; buildFailed . dispatch ( { buildName : buildEvent . buildName , group : buildEvent . group , url : buildEvent . url , state : getCurrentState ( ) } ) ; }
function onBuildFixed ( buildEvent ) { failedCount -- ; buildFixed . dispatch ( { buildName : buildEvent . buildName , group : buildEvent . group , url : buildEvent . url , state : getCurrentState ( ) } ) ; }
function ( ) { Utils . debug ( "DATALIST init: " + this . el ) ; this . model . bind ( "change" , this . showEditable , this ) ; }
function ( ) { this . model . set ( "title" , this . $el . find ( ".data-list-title" ) . val ( ) ) ; }
function ( ) { this . model . set ( "description" , this . $el . find ( ".data-list-description" ) . val ( ) ) ; }
function ( ) { Utils . debug ( "DATALIST init: " + this . el ) ; this . model . bind ( "change" , this . showReadonly , this ) ; }
function ( ) { window . app . router . showReadonlyDataList ( ) ; }
function ( ) { window . app . router . showEditableSession ( ) ; }
function ( path ) { if ( path === undefined ) { return null ; } for ( var name in nodes ) { if ( path === core . getStringPath ( nodes [ name ] ) ) { return name ; } } return "unknown" ; }
function ( path ) { return typeof path === "string" ; }
function test_tie ( mod , callback ) { assert . equal ( mod . require ( 'proc' ) , process ) ; assert . equal ( mod . require ( 'env' ) , process . env ) ; callback ( ) ; }
function ( elem , threadObject ) { if ( threadObject == undefined ) { elem . innerHTML = '0' ; return ; } elem . innerHTML = threadObject . num_comments ; }
function ( line ) { var match = line . match ( /^([ \t]+).*/ ) ; if ( match != null ) { var i = match [ 1 ] . length ; if ( i < min ) min = i ; } }
function isLeftHandSide ( expr ) { return expr . type === Syntax . Identifier || expr . type === Syntax . MemberExpression ; }
function ( ) { return { protocol : "https://" , domain : "ilanguage.iriscouch.com" , port : "80" , corpusname : "default" } ; }
function ( el ) { el . getParents ( "li" ) . getLast ( ) . addClass ( 'active' ) ; }
function init ( metaObject ) { imports . gettext . bindtextdomain ( 'gnome-shell-extensions' , metaObject . metadata . localedir ) ; return new PidginClient ( ) ; }
function ( value ) { value && baidu . paramCheck ( '^(?:number|string)$' , 'baidu.dom.scrollTop' ) ; return value === undefined ? ret . get ( this [ 0 ] ) : ret . set ( this [ 0 ] , value ) || this ; }
function ( it ) { console . log ( it . initData ) ; db . Items . attach ( it ) ; it . Value = 'updated' ; }
function ( map ) { var thisClosure = this ; if ( map ) { map . on ( 'click' , function ( e ) { thisClosure . mapClick . apply ( thisClosure , [ e ] ) ; } ) ; } }
function ( e , delta , dx , dy ) { e . preventDefault ( ) ; that . scrollTo ( is_horizontal ? ( - el . offsetLeft - 37 * dx ) : ( - el . offsetTop - 37 * dy ) ) ; }
function ( arr1 , arr2 ) { return arr1 . filter ( function ( el ) { return ! arr2 . contains ( el ) ; } ) ; }
function ( result ) { if ( ! result || ! result . selected ) { return ; } newRelations . push ( { source : source , target : result , type : "affects" , "one-way" : false } ) ; }
function getPageTitle ( aPageURL ) { GM_xmlhttpRequest ( { method : 'GET' , url : aPageURL , onload : function ( aState ) { /<title>([^<]+)<\/title>/ . test ( aState . responseText ) ; pageTitle = RegExp . $1 ; } } ) ; }
function ( longitude , latitude , height ) { this . longitude = defaultValue ( longitude , 0.0 ) ; this . latitude = defaultValue ( latitude , 0.0 ) ; this . height = defaultValue ( height , 0.0 ) ; }
function ( extent , ellipsoid , time , projection ) { return new BoundingSphere ( computePositions ( extent , ellipsoid , time , projection ) ) ; }
function ( extent , ellipsoid ) { return new BoundingSphere ( computePositions ( extent , ellipsoid ) ) ; }
function ( ) { if ( ! isError ) { setTimeout ( function ( ) { $altMsgDiv . fadeOut ( 'slow' ) } , 5000 ) ; } }
function _cleanup ( $select ) { $select . next ( 'select.jqcombo-clone' ) . remove ( ) ; $select . next ( 'input.jqcombo-input' ) . remove ( ) ; $select . off ( '.jqcombo' ) ; }
function ( ) { alert ( "Ha sucedido un error" ) ; }
function ( opt_data , opt_sb ) { var output = opt_sb || new soy . StringBuilder ( ) ; output . append ( '\t<h3>Options</h3><table><tbody><tr><td>Album name</td><td><input value="' , soy . $$escapeHtml ( opt_data . name ) , '" type="text" id="folderName-input" class="xlarge"/></td></tr><tbody></table><div class="row show-grid"><div class="span"><button class="btn" id="save-folder-btn">Save changes</button></div><div class="span"><button id="remove-folder-btn" class="btn btn-danger">Remove album</button></div></div>' ) ; return opt_sb ? '' : output . toString ( ) ; }
function ( pair ) { pair = pair . split ( '=' ) ; var name = pair . shift ( ) ; var value = pair . join ( '=' ) ; result [ name ] = value . replace ( /^"|"$/g , '' ) ; }
function ")&&typeof console.log==" object "){[" log "," info "," warn "," error "," assert "," dir "," clear "," profile "," profileEnd
function ( ) { log ( "Here's a string" , 3.14 , { "three" : false } ) ; }
function ( ) { log ( function ( ) { alert ( "hello" ) ; } , ( 2 + 2 === 5 ) , new Date ( ) ) ; }
function ( ) { var args = arguments ; timerId = setTimeout ( function ( ) { Onc . EventBus . fireEvent . apply ( Onc . EventBus , args ) ; } , 0 ) ; }
function ( ) { this . previewMode = false ; $ ( 'body' ) . css ( { 'background' : '#333' } ) ; this . renderFrame ( this . currentFrame ) ; }
function ( actor , event ) { if ( event . get_key_symbol ( ) == Clutter . Escape ) this . _close ( ) ; return true ; }
function ( array ) { return _map ( array , mapFunc ) ; }
function ( message , response , sound ) { console . log ( message , response ) ; sounds . errors . push ( sound ) ; after ( ) ; }
function ( message , response , url ) { handleError ( message , response , sound ) ; }
function ( ) { if ( sounds . woody1 ) { playSound ( sounds . woody1 ) ; } if ( sounds . woody2 ) { playSound ( sounds . woody2 ) ; } }
function ( ) { this . _mask ( 'Loading all data about all students on the period' , 'page-load-mask' ) ; this . _loadPeriod ( ) ; }
function ( ) { this . callParent ( arguments ) ; }
function ( record , op ) { this . _unmask ( ) ; if ( ! op . success ) { this . _handleComError ( 'Mark ready for export' , op ) ; return ; } Ext . bind ( callback , scope ) ( ) ; }
function ( res ) { Capkom . profile . set ( { wordmatch : res } ) ; Capkom . clickNext ( ) ; return jQuery ( '.play-area' , element ) . wordmatch ( 'destroy' ) ; }
function ( element ) { }
function ( ) { this . el = $ ( this . el ) ; _ . bindAll ( this , 'updateName' , 'updateIcon' , 'name' , 'askToDelete' , 'openMyPanel' , 'setErrors' , 'setupDynamicExtras' , 'addDynamicExtra' ) ; this . render ( ) ; }
function ( map , imageHandler ) { this . map = map ; this . imageHandler = imageHandler ; if ( typeof this . map . tooltips === "undefined" ) { this . map . tooltips = new Array ( ) ; } }
function ( ) { if ( "console" in window ) { return function ( msg ) { window . console . log ( 'Processing.js: ' + msg ) ; } ; } return nop ; }
function ( constant , linear , quadratic ) { curContext . useProgram ( programObject3D ) ; uniformf ( "uFalloff3d" , programObject3D , "uFalloff" , [ constant , linear , quadratic ] ) ; }
function ( ) { lightCount = 0 ; curContext . useProgram ( programObject3D ) ; uniformi ( "uLightCount3d" , programObject3D , "uLightCount" , lightCount ) ; }
function ( shine ) { curContext . useProgram ( programObject3D ) ; uniformi ( "uUsingMat3d" , programObject3D , "uUsingMat" , true ) ; uniformf ( "uShininess3d" , programObject3D , "uShininess" , shine ) ; }
function ( ) { p . use3DContext = true ; p . disableContextMenu ( ) ; }
function ( event ) { $ ( document ) . on ( 'mousemove.layout' , this . resize . bind ( this ) ) ; }
function f1 ( arg1 , arg2 ) { try { this . undef ( ) ; } catch ( exception ) { ex = exception ; } }
function ( evt ) { evt . preventDefault ( ) ; evt . stopPropagation ( ) ; App . onDrop ( evt ) }
function ( ) { this . textBox . focus ( ) ; }
function ( ) { this . bind ( 'error' , function ( model , error ) { Utils . debug ( "Error in App: " + error ) ; } ) ; }
function ( ) { self . staleAuthentication = false ; if ( typeof callback == "function" ) { callback ( ) ; } }
function ( obj ) { obj . id = obj . title ; return true ; }
function ( err , res ) { if ( err ) return fn && fn ( err ) ; else return fn && fn ( ) ; }
function ( ) { _addEvent ( document , 'keydown' , _handleKeyDown ) ; _addEvent ( document , 'keyup' , _handleKeyUp ) ; }
function ( url ) { if ( ! this . _context ) { return null ; } var id = this . _context . resourcesUrlDict [ url ] ; if ( id === undefined ) { return null ; } return this . get_resource ( id ) ; }
function ( page ) { page . app = this ; this . pages [ page . name ] = page ; if ( this . theme ) { page . attributes [ 'data-theme' ] = this . theme ; } }
function ( ) { console . log ( 'Rendering ' + this . name , this ) ; this . _createDom ( ) ; $ ( this . el ) . trigger ( 'jui-pagerendered' ) ; }
function ( page ) { page . app = this ; this . pages [ page . name ] = page ; if ( this . theme ) { page . attributes [ 'data-theme' ] = this . theme ; } }
function ( ) { console . log ( 'Rendering ' + this . name , this ) ; this . _createDom ( ) ; $ ( this . el ) . trigger ( 'jui-pagerendered' ) ; }
function ( ) { this . model = { title : "Abcd" } ; return true ; }
function ( ) { this . model = { title : "Abcd" } ; return true ; }
function ( title ) { this . model = { 'title' : title } ; return true ; }
function ( title ) { this . model = { title : 'Page title' } ; return true ; }
function ( e ) { switch ( e . keyCode ) { case 13 : sendMsg ( ) ; break ; } }
function ( ) { ( params . displayMode == 'classic' ) ? params . displayMode = 'linker' : params . displayMode = 'classic' ; $ ( '#source_tree' ) . dynatree ( 'destroy' ) ; $ ( '#source_tree' ) . empty ( ) ; createTree ( '#source_tree' ) ; }
function ( node ) { if ( params . mode == 'picker' || params . displayMode == 'linker' ) { return false ; } }
function ( node ) { var bool = true ; ( displayMode == 'classic' ) ? bool = true : bool = false ; return bool ; }
function ( err , data ) { var info ; if ( data ) { info = JSON . parse ( data ) ; } else { info = { } ; } cb ( null , info ) ; }
function ( docTopicDistFile ) { readCSVFile ( docTopicDistFile , function ( dtderr , docTopicDist ) { listTTDs ( topicTermDistDir , function ( ttderr , topicTermDist ) { cb ( null , { docTopicDict : docTopicDist , topicTermDist : topicTermDist } ) ; } ) ; } ) ; }
function ( error , result ) { console . log ( 'Tag Rebuild Error (app.js:255): ' + error ) ; }
function ( error , result ) { if ( error ) console . log ( 'Verify Error (app.js:389):' + error ) ; req . flash ( 'info' , "Account verified, you may now login." ) ; res . redirect ( '/login' ) ; }
function ( error ) { if ( error ) console . log ( "Session save error (app.js:447): " + error ) ; }
function ( error , result ) { console . log ( 'Tag Rebuil Error (app.js:538): ' + error ) ; }
function ( error , result ) { if ( error ) console . log ( 'User Reaper Error (app.js:588): ' + error ) ; }
function ( ) { console . log ( "Twi booting on port %s in %s mode" , port , app . settings . env ) ; }
function ( ) { var samples ; function sample_loaded ( data ) { samples = data ; $ ( "#source" ) . val ( samples [ 0 ] [ 'code' ] ) } $ . get ( 'repos/FORTH-on-browser/sample/sample.json' , sample_loaded , 'json' ) ; }
function ( ) { return this . returnLength || this . width / this . fontSize ; }
function ( ) { e . dispatch . close ( callback ) ; }
function ( ) { if ( this . _showingEmptyView ) { this . closeChildren ( ) ; delete this . _showingEmptyView ; } }
function ( ) { if ( this . _showingEmptyView ) { this . closeChildren ( ) ; delete this . _showingEmptyView ; } }
function isNumberKey ( evt ) { var charCode = ( evt . which ) ? evt . which : event . keyCode if ( charCode > 31 && ( charCode < 48 || charCode > 57 ) ) return false ; return true ; }
function ( event ) { var type = event . get ( 'newType' ) ; var $storage = $ ( '.field-yamaps-type-' + mapId ) ; $storage . val ( type ) ; }
function ( ) { this . control ( { 'lap_berkas_jra button[action=print]' : { click : this . do_print_berkas_jra } , 'lap_berkas_jra button[itemId=refresh]' : { click : this . do_refresh } } ) }
function ( ) { app . use ( express . errorHandler ( ) ) ; app . use ( express . logger ( 'dev' ) ) ; }
function ( ) { if ( ! this . _textureAtlas . getTexture ( ) . hasPremultipliedAlpha ( ) ) { this . _blendFunc . src = cc . GL_SRC_ALPHA ; this . _blendFunc . dst = cc . GL_ONE_MINUS_SRC_ALPHA ; } }
function ( fileImage , capacity ) { if ( ! capacity ) { capacity = cc . DEFAULT_SPRITE_BATCH_CAPACITY ; } var batchNode = new cc . SpriteBatchNode ( ) ; batchNode . initWithFile ( fileImage , capacity ) ; return batchNode ; }
function ( texture , capacity ) { if ( ! capacity ) { capacity = cc . DEFAULT_SPRITE_BATCH_CAPACITY ; } var batchNode = new cc . SpriteBatchNode ( ) ; batchNode . initWithTexture ( texture , capacity ) ; return batchNode ; }
function ( ) { this . _spriteFrames = [ ] ; this . _spriteFramesAliases = [ ] ; this . _loadedFileNames = { } ; }
function ( ) { if ( ! cc . s_sharedSpriteFrameCache ) { cc . s_sharedSpriteFrameCache = new cc . SpriteFrameCache ( ) ; } return cc . s_sharedSpriteFrameCache ; }
function ( ) { cc . s_sharedSpriteFrameCache = null ; }
function ( ) { this . _dbSearch = new dictsearch . DBSearch ( ) ; this . _candidateSelections = { } ; this . _phoneticCache = { } ; this . _loadCandidateSelectionsFromFile ( ) ; }
function ( e ) { e . preventDefault ( ) ; return _this . next ( ) ; }
function ( e ) { e . preventDefault ( ) ; return _this . prev ( ) ; }
function ( key , value ) { $ . cookie ( "tour_" + key , value , { expires : 36500 , path : '/' } ) ; return this . _options . afterSetState ( key , value ) ; }
function add_track ( track_id , track_url ) { tracks [ track_id ] = track_url ; last_track_index ++ ; tracks_ids [ last_track_index ] = track_id ; }
function ( ) { events . disconnect ( this . update_event ) ; events . disconnect ( this . out_of_bounds_event ) ; this . drop ( ) ; core . echo ( 'That alien fucked up!' ) ; game . aliens . erase ( this ) ; }
function ( ) { game . aliens . each ( function ( alien , alien_index ) { if ( this . contains ( alien . pos ) ) { this . die ( ) ; } } . bind ( this ) ) ; }
function ( flag ) { return parallel . indexOf ( flag ) > - 1 ? FOREIGN : NATIVE ; }
function ( e , value ) { jQuery ( this ) . html ( htmlspecialchars ( value ) ) ; }
function ( e , value ) { jQuery ( this ) . html ( htmlspecialchars ( value ) ) ; }
function Bullet ( id , playerId , position ) { this . id = id , this . playerId = playerId , this . position = position this . width = 2 , this . height = 2 }
function ( event , ui ) { }
function ( ) { Utils . debug ( "In searchUnion" ) ; var queryString = this . getQueryString ( "union" ) ; appView . searchTopView . model . set ( "searchKeywords" , queryString ) ; this . search ( queryString ) ; }
function ( ) { Utils . debug ( "In searchIntersection" ) ; var queryString = this . getQueryString ( "intersection" ) ; appView . searchTopView . model . set ( "searchKeywords" , queryString ) ; this . search ( queryString ) ; }
function ( ) { var ids = { } ; ids . corpusid = "4C1A0D9F-D548-491D-AEE5-19028ED85F2B" ; ids . sessionid = "1423B167-D728-4315-80DE-A10D28D8C4AE" ; ids . datalistid = "1C1F1187-329F-4473-BBC9-3B15D01D6A11" ; this . authView . loadSample ( ids ) ; this . searchTopView . loadSample ( ) ; }
function ( stats ) { console . log ( stats ) clicks . append ( stats . date , stats . clicks ) ; }
function ( repository ) { $ ( '.summary' , this . element ) . replaceWith ( $ ( this . build_template ( this . repository . attributes . last_build ) ) ) ; }
function ( ) { expect_texts ( '#right .build' , { 'h3' : 'josevalim/enginex' , 'h4' : 'Build #1' , '.commit-hash' : '565294c' , '.commit-message' : 'Update Capybara' , '.duration' : '20' , '.finished_at' : '2010-11-11T12:00:20Z' , '.log' : 'enginex build 1 log ...' } ) ; }
function ( task ) { return app . vent . trigger ( 'task:clicked' , task . id ) ; }
function ( message ) { return this . flash . append ( this . error = new ErrorView ( { message : message } ) ) ; }
function ( err , result ) { method . call ( scope , err , result ) ; self . next ( ) ; }
function _onclick_delete_button ( event ) { self . remove ( self . _getElemFreq ( element ) ) ; updateFreqUI ( ) ; _hidePopup ( ) ; _clearEventListeners ( ) ; }
function ( callback ) { for ( var freq in this . _favList ) { callback ( this . _favList [ freq ] ) ; } }
function ( data ) { var character = Game . level . getEntity ( data . characterId ) ; if ( character != null ) character . speak ( data . message ) ; this . trigger ( Events . CHAT_RECEIVE , data ) ; }
function ( x , y , data ) { this . _super ( 'npc' , data ) ; if ( data == undefined ) { this . x = x ; this . y = y ; } }
function ( chunk ) { fluid . log ( "Response from server: " + chunk ) ; data += chunk ; }
function ContactListCtrl ( $scope ) { }
function ( ev , ui ) { this . close ( ) ; jQuery ( 'body' ) . trigger ( 'layoutresizeall' ) ; }
function ( ) { var panel = jQuery ( this ) ; panel . height ( pane_height ) ; panel . width ( pane_width ) ; }
function ( callback ) { Kinetic . Type . _getImage ( this . toDataURL ( ) , function ( img ) { callback ( img ) ; } ) ; }
function ( callback ) { Kinetic . Type . _getImage ( this . toDataURL ( ) , function ( img ) { callback ( img ) ; } ) ; }
function ( $0 , $1 , $2 ) { if ( $1 ) { uri . param [ 'query' ] [ $1 ] = decodeURIComponent ( $2 ) ; } }
function ( $0 , $1 , $2 ) { if ( $1 ) { uri . param [ 'fragment' ] [ $1 ] = decodeURIComponent ( $2 ) ; } }
function ( errno ) { logger . warn ( { message : "feather socket server shutting down." , category : 'feather.socket' , immediately : true } ) ; }
function ( e , args ) { args . message = args . message . replace ( /\>(https?:\/\/w{0,3}\.?youtube.com\/watch\?v=([^\s^&]*)([^\s]*))\<\/a\>/i , '>$1<br /><iframe width="300" height="200" src="http://www.youtube.com/embed/$2" frameborder="0" allowfullscreen></iframe></a><br />' ) ; }
function ( config ) { mediator . subscribe ( 'context_info' , onContextChange ) ; this . cookiesEnabledOverride = config && config . cookiesEnabledOverride ; clearContext ( ) ; }
function ( authenticated ) { setAuthenticationStatus ( authenticated ) ; if ( ! authenticated ) authenticated = false ; complete ( onComplete , authenticated ) ; }
function ( ) { testHelpers . setup ( ) ; }
function ( ) { network . init ( { cookiesEnabledOverride : true } ) ; network . cookiesEnabled ( function ( status ) { equal ( status , true , "cookies are enabled, correct status" ) ; start ( ) ; } , testHelpers . unexpectedXHRFailure ) ; }
function onComplete ( authenticated ) { equal ( authenticated , false , "We are not authenticated!" ) ; testUndefined ( storage . getEmail ( TEST_EMAIL ) , "localStorage was cleared" ) ; start ( ) ; }
function ( data ) { console . log ( "eventsManager redmineExtract::sync : " ) ; eventsManager . emit ( 'redmineExtract::sync' ) ; }
function ( e ) { var data = JSON . parse ( body ) ; callback ( null , data , addData ) ; callback = null ; }
function ( id , params , callback , addData ) { if ( typeof id == 'integer' ) { throw new Error ( 'Error: Argument #1 id must be integer' ) ; } this . request ( 'GET' , '/issues/' + id + '.json' , params , callback , addData ) ; }
function ( ) { redmine . events ( ) ; }
function ( data ) { redmineExtract . sync ( function ( err , data ) { } ) ; }
function splitKeyword ( str ) { if ( str ) { return str . replace ( /[\+\s　]+/g , " " ) . split ( " " ) ; } return [ ] ; }
function ( ) { start ( ) ; assert . strictEqual ( actualEventCount , 539 ) ; assert . ok ( actualStartedAt . sameMonth ( { year : 2012 , month : 5 } ) , "actual=" + actualStartedAt ) ; }
function ( err , fname ) { normalizeCall ( is . File ( fpath ) ? fname : path . join ( fpath , fname ) , cb ) ; }
function ( ) { var userField = this . up ( 'userFormField' ) ; var validationTask = userField . validationTask ; if ( validationTask ) { validationTask . delay ( userField . delayValidationTime ) ; } }
function ( ) { $ . ajax ( { url : sakai_conf . URL . ME_SERVICE , success : function ( data ) { if ( ! data . user . userid ) { document . location = "/" ; } } } ) ; }
function ( ) { var canvas = document . getElementById ( "mapCanvas" ) ; canvas . style . width = "100%" ; canvas . style . height = "100%" ; }
function ( index ) { var item = this . get ( index ) ; if ( item === undefined ) return item ; Util . assert ( item . getTag ( ) === Enum . constantPoolTag . UTF8 ) ; return item . getValue ( ) ; }
function ( index ) { var item = this . get ( index ) ; if ( item === undefined ) return item ; Util . assert ( item . getTag ( ) === Enum . constantPoolTag . CLASS ) ; return item . getName ( ) ; }
function ( constantPool ) { this . _string = constantPool . getUTF8Info ( this . stringIndex ) ; }
function ( ) { return Enum . constantPoolTag . STRING ; }
function ( ) { return this . _string ; }
function ConstantUTF8Info ( string ) { this . _string = string ; }
function JavaObject ( classInfo ) { this . classInfo = classInfo ; this . dataType = Enum . dataType . OBJECT ; this . fields = [ ] ; classInfo . _populateObjectFields ( this ) ; }
function ( ) { var arrayOfArguments = NativeFunctions . getArguments ( "(C)V" ) ; var charToPrint = arrayOfArguments [ 0 ] ; JVM . println ( String . fromCharCode ( charToPrint . value ( ) ) ) ; MethodRun . createReturn ( ) ; }
function ( ) { var arrayOfArguments = NativeFunctions . getArguments ( "(I)V" ) ; var intToPrint = arrayOfArguments [ 0 ] ; JVM . println ( intToPrint . value ( ) . toString ( ) ) ; MethodRun . createReturn ( ) ; }
function ( ) { var arrayOfArguments = NativeFunctions . getArguments ( "(D)V" ) ; var doubleToPrint = arrayOfArguments [ 0 ] ; JVM . println ( doubleToPrint . value ( ) . toString ( ) ) ; MethodRun . createReturn ( ) ; }
function ( ) { var arrayOfArguments = NativeFunctions . getArguments ( "(F)V" ) ; var floatToPrint = arrayOfArguments [ 0 ] ; JVM . println ( floatToPrint . value ( ) . toString ( ) ) ; MethodRun . createReturn ( ) ; }
function Integer ( value ) { require ( 'util/Util' ) . inherits ( this , Primitive , Enum . dataType . INTEGER , value & 0xFFFFFFFF ) ; }
function Byte ( value ) { require ( 'util/Util' ) . inherits ( this , Primitive , Enum . dataType . BYTE , value & 0xFF ) ; }
function Bool ( value ) { require ( 'util/Util' ) . inherits ( this , Primitive , Enum . dataType . BOOLEAN , value & 0x1 ) ; }
function Char ( value ) { require ( 'util/Util' ) . inherits ( this , Primitive , Enum . dataType . CHAR , value & 0xFF ) ; }
function Double ( value ) { require ( 'util/Util' ) . inherits ( this , Primitive , Enum . dataType . DOUBLE , value ) ; }
function Float ( value ) { require ( 'util/Util' ) . inherits ( this , Primitive , Enum . dataType . FLOAT , value ) ; }
function Short ( value ) { require ( 'util/Util' ) . inherits ( this , Primitive , Enum . dataType . SHORT , value & 0xFFFF ) ; }
function ( fieldLength ) { Util . assert ( fieldLength < 8 ) ; return this . getField ( 'i' + fieldLength , fieldLength ) ; }
function ( ) { return this . getField ( 'double' , 8 ) ; }
function ( ) { return this . getField ( 'float' , 4 ) ; }
function ( hexShiftBy ) { var number2 = ByteCode . pop ( ) ; var number1 = ByteCode . pop ( ) ; var shift = number2 . value ( ) & hexShiftBy ; ByteCode . push ( number1 . shiftLeft ( shift ) ) ; }
function ( hexShiftBy ) { var number2 = ByteCode . pop ( ) ; var number1 = ByteCode . pop ( ) ; var shift = number2 . value ( ) & hexShiftBy ; ByteCode . push ( number1 . shiftRight ( shift ) ) ; }
function ( hexShiftBy ) { var number2 = ByteCode . pop ( ) ; var number1 = ByteCode . pop ( ) ; var shift = number2 . value ( ) & hexShiftBy ; ByteCode . push ( number1 . shiftRightUnsigned ( shift ) ) ; }
function ( field ) { var ref = field . getRef ( ) ; ByteCode . push ( ref . value ( ) ) ; }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value ( ) === 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value ( ) !== 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value ( ) < 0 ) { ByteCode . branch ( 3 , offset ) ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value ( ) <= 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value ( ) > 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value ( ) >= 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( index , constant ) { var currentValue = ByteCode . getLocal ( index ) ; ByteCode . setLocal ( index , Primitives . getInteger ( currentValue . value ( ) + constant ) ) ; }
function ( index ) { var newPC = ByteCode . getLocal ( index ) ; JVM . getExecutingThread ( ) . setPC ( newPC . value ( ) ) ; }
function ConstantBigNumberInfo ( refType , value ) { this . tag = refType ; this . _value = value ; }
function ( ) { return this . _value ; }
function ( constantPool ) { this . _name = constantPool . getUTF8Info ( this . nameIndex ) ; Util . checkIsValidClassOrInterfaceName ( this . _name ) ; }
function ( constantPool ) { this . _name = constantPool . getUTF8Info ( this . nameIndex ) ; this . _descriptor = constantPool . getUTF8Info ( this . descriptorIndex ) ; }
function ConstantNumberInfo ( refType , value ) { this . tag = refType ; this . _value = value ; }
function ( command , options ) { var commands = { } ; commands [ command ] = options || null ; return commands ; }
function ( ) { return { 'x' : '%centerX%' , 'y' : '%centerY%' } }
function sm_EnabledFetched ( ) { self . reservedSettings . data = req . result [ 'ril.data.enabled' ] ; settings . getLock ( ) . set ( { 'ril.data.enabled' : false } ) ; }
function ( value1 , value2 ) { return _ . isEqual ( value1 , value2 ) ; }
function ( ) { jQuery . fn . sliceSlide ( ) ; jQuery . fn . sliceSlide ( { slidesBox : '[data-slice-slide-box-twins]' , templatesControls : '#slice-slide-controls-only-text' , numberSimultaneousSlides : 2 } ) ; }
function ( interval , slideControls ) { clearInterval ( interval ) ; slideControls . pauseResume . html ( fn . tmpl ( op . templateControlsPaused , { text : fn . culture } ) ) ; }
function ( ) { Services . obs . notifyObservers ( observerSubject , CSP_VIOLATION_TOPIC , violatedDirective ) ; reportSender . sendReports ( blockedContentSource , originalUri , violatedDirective , aSourceFile , aScriptSample , aLineNum ) ; }
function ( date ) { return 'ISODate("' + date . toISOString ( ) + '")' ; }
function ( event ) { var point = new Vector ( event . offsetX , event . offsetY ) ; sim . addBoidsRule ( new AttractToPoint ( point , 5000 ) ) ; }
function ( ) { Parallax . windowSize = null ; Parallax . onscroll ( true ) ; }
function ( e ) { movement = false ; touchend = false ; this . ignoreClick = false ; E . fire ( el , 'flotr:mousedown' , [ event , this ] ) ; this . observe ( document , 'touchend' , touchendHandler ) ; }
function ( fn , c ) { this . observe ( this . el , c , _ . bind ( fn , this ) ) ; }
function ( e , pos ) { if ( this . options . crosshair . mode ) { this . crosshair . clearCrosshair ( ) ; this . crosshair . drawCrosshair ( pos ) ; } }
function ( ) { return ( ! this . _followedNode . isRunning ( ) ) ; }
function ( ) { return this . _vertexZ ; }
function ( Var ) { this . _vertexZ = Var ; }
function ( ) { var field = this . down ( 'autocompleteuserwidget' ) ; console . log ( 'clearandfocus' ) ; field . clearValue ( ) ; field . focus ( ) ; }
function ( ) { var selectedUsers = this . _getSelectedUsers ( ) ; if ( this . confirmBeforeRemove ) { this . _confirmRemove ( selectedUsers ) ; } else { this . _removeUsers ( selectedUsers ) ; } }
function ( buttonId ) { if ( buttonId == 'yes' ) { this . _removeUsers ( selectedUsers ) ; } }
function ( ) { this . removeSaveMask ( ) ; this . _clearAndfocusAddUserField ( ) ; }
function ( userRecords ) { this . removeSaveMask ( ) ; this . fireEvent ( 'usersRemoved' , [ userRecords ] ) ; }
function ( ) { embedInit ( { vars : flavars , width : ( document . body . clientWidth - 180 ) } ) ; helperResize ( ) ; }
function thui_executeDeletion ( ) { MessageManager . deleteMessages ( this . delNumList , callback ) ; }
function thui_executeDeletion ( ) { MessageManager . deleteMessages ( this . delNumList , callback ) ; }
function ( returneduser ) { respond ( res , { user : returneduser } ) ; }
function ( ) { console . log ( 'contentLength -> content != null -> ' + this . content != null ) ; return this . content != null ? this . content . length : 0 ; }
function ( ) { try { Ajocado . XHRWrapperInjection . onreadystatechangeCallback . call ( this ) ; } finally { if ( this . readyState == 4 ) { Ajocado . Page . RequestGuard . setRequestDone ( "XHR" ) ; } } }
function ( event ) { if ( this . onreadystatechange ) { return this . onreadystatechange . call ( this . xhr , event ) ; } }
function ( object ) { return this . firstLoad ( object ) ; }
function ( value ) { var dateValue = convertToDate ( value ) , output = ( dateValue . getTime ( ) - dateValue . getMilliseconds ( ) ) / 1000 ; return output ; }
function ( data ) { console . log ( data ) ; updateQuestionCounter ( ) ; }
function DTA_preNest ( ) { let windowUtils = this . browser . QueryInterface ( Ci . nsIInterfaceRequestor ) . getInterface ( Ci . nsIDOMWindowUtils ) ; windowUtils . suppressEventHandling ( true ) ; windowUtils . suspendTimeouts ( ) ; }
function DTA_postNest ( aNestData ) { let windowUtils = this . browser . QueryInterface ( Ci . nsIInterfaceRequestor ) . getInterface ( Ci . nsIDOMWindowUtils ) ; windowUtils . resumeTimeouts ( ) ; windowUtils . suppressEventHandling ( false ) ; }
function ( e ) { $ ( "#testplan-tree" ) . block ( impasse_loading_options ( ) ) ; $tree . jstree ( "refresh" , - 1 ) ; return false ; }
function markAllRows ( container_id ) { $ ( "#" + container_id ) . find ( "input:checkbox:enabled" ) . prop ( 'checked' , true ) . trigger ( "change" ) . parents ( "tr" ) . addClass ( "marked" ) ; return true ; }
function unMarkAllRows ( container_id ) { $ ( "#" + container_id ) . find ( "input:checkbox:enabled" ) . prop ( 'checked' , false ) . trigger ( "change" ) . parents ( "tr" ) . removeClass ( "marked" ) ; return true ; }
function ( e ) { console . log ( e ) ; }
function ( value , metadata , record ) { return new Date ( parseFloat ( value ) ) . toString ( ) ; }
function ( row ) { console . log ( row ) expect ( row . content . toLowerCase ( ) . indexOf ( 'foo' ) ) . not . toEqual ( - 1 ) }
function ( ) { if ( parser . _parser ) { parser . _parser . error = null ; parser . _parser . resume ( ) ; } }
function ( ) { toShow . removeData ( "ui-accordion-height" ) ; that . _completed ( data ) ; }
function ( err , data ) { if ( data . hits . total !== 0 ) { getUserObj ( data , callback ) ; } else { callback ( undefined ) ; console . log ( "User did not post any comments" ) ; } }
function ( err , data ) { if ( data ) { getUserObj ( data , callback ) ; } else { callback ( undefined ) ; } }
function ( isp ) { ispName = isp ; drawMap ( ) ; win . hide ( ) ; }
function checkHttpProxyUrl ( value , formValues ) { if ( formValues [ "source" + number ] === "http_proxy" && value . length === 0 ) { return err ; } }
function checkHttpProxyUrl ( value , formValues ) { if ( formValues [ "source" + number ] === "http_proxy" && value . length === 0 ) { return err ; } }
function ( editable ) { var id = jQuery . inArray ( editable , Aloha . editables ) ; if ( id != - 1 ) { Aloha . editables . splice ( id , 1 ) ; } }
function ( obj ) { return { message : 'hey' } ; }
function ( content , encoding ) { console . log ( 'encoding' , encoding ) ; load ( resource . url , content , resource . type , line ) ; }
function ( url , content , type ) { editorsByURL [ url ] = new PurpleOrionEditor ( url , content , type ) ; }
function ( url , line , column , character ) { var editor = editorsByURL [ url ] ; if ( editor ) { editor . setCursorOn ( line , column , character ) ; } else { console . error ( "no editor for url " + url ) ; } }
function addActiveClass ( element ) { $ ( ".loadable-link" ) . parent ( ) . removeClass ( 'active' ) $ ( element ) . parent ( ) . addClass ( 'active' ) }
function closeClickHandler ( e ) { _internal . activity ( "default-close" ) ; closeButton . removeEventListener ( "click" , closeClickHandler , false ) ; }
function ( ) { var i = arguments . length ; while ( i -- ) { _rootElement . querySelector ( arguments [ i ] ) . removeAttribute ( "disabled" ) ; } }
function ( ) { var i = arguments . length ; while ( i -- ) { _rootElement . querySelector ( arguments [ i ] ) . setAttribute ( "disabled" , true ) ; } }
function ( e ) { var exportPackage = { html : butter . getHTML ( ) , json : butter . exportProject ( ) } ; Dialog . spawn ( "export" , { data : exportPackage , } ) . open ( ) ; }
function px ( n ) { return n + 'px' ; }
function ( ) { _gl . uniformMatrix2fv ( _location , false , Matrix2 . toArray ( this . value ) ) ; }
function ( ) { for ( var i = 0 ; i < _locations . length ; ++ i ) { _gl . uniformMatrix2fv ( _locations [ i ] , false , Matrix2 . toArray ( this . value [ i ] ) ) ; } }
function ( ) { var matrix = new Matrix2 ( 1 , 2 , 3 , 4 ) ; expect ( matrix . toString ( ) ) . toEqual ( '(1, 2)\n(3, 4)' ) ; }
function ( ) { Matrix2 . fromRowMajorArray ( { } ) ; }
function ( ) { expect ( function ( ) { Matrix2 . fromRowMajorArray ( { } ) ; } ) . toThrow ( ) ; }
function ( ) { Matrix2 . fromColumnMajorArray ( { } ) ; }
function ( ) { expect ( function ( ) { Matrix2 . fromColumnMajorArray ( { } ) ; } ) . toThrow ( ) ; }
function ( ) { expect ( function ( ) { Matrix2 . toArray ( undefined ) ; } ) . toThrow ( ) ; }
function ( opt , params ) { opt . headers [ 'Authorization' ] = 'QBox ' + conf . ACCESS_KEY + ':' + checksum ( opt , params ) ; }
function ( ) { return { address : "0.0.0.0" , family : "IPv4" , port : this . _port } }
function ( ) { var exports = { } ; exports . K = 8 ; exports . MAX_FAIL = 20 ; exports . ALPHA = 3 ; return exports ; }
function debug ( ) { if ( exports . debug ) { console . log . apply ( console , arguments ) ; } }
f dht . start ( ) ; dht . bootstrap ( [ { 'address' : dnsResolve . address , 'port' : 6881 } ] , function ( ) { } ) } )
function ( ) { $ ( this ) . parent ( '.option-tree-ui-upload-parent' ) . toggleClass ( 'focus' ) ; OT_UI . init_upload_fix ( this ) ; }
function bummer_init ( ) { console . log ( "Asking background for access token" ) ; Port . postMessage ( { type : 'access_token_request' } ) ; }
function facebook_init_complete ( ) { var data = { 'access_token' : Bum . access_token } ; console . log ( "Facebook init is complete; authenticating" ) ; $ . post ( Bummer_Api_Server + '/api/fuckers/fb_authenticate' , data , authentication_init_complete ) ; }
function ( data ) { console . log ( 'Unable to fetch bums: ' + data . responseText ) ; }
function moveFiles ( ) { $ ( '#toc' ) . wrapInner ( '<div style="position:fixed; width: 490px; top: 60px; left: 0px;" />' ) ; }
function iterateFiles ( func ) { $ . each ( filelist , function ( index , value ) { func ( index , value ) ; } ) ; }
function hideAllFiles ( ) { iterateFiles ( function ( index , value ) { $ ( value . href ) . hide ( ) ; } ) ; }
function renderFilesMod ( ) { adjustPageMargins ( ) ; moveFiles ( ) ; hideAllFiles ( ) ; showFile ( current_index ) ; updateReadCommentCounts ( ) ; }
function ( ) { showFile ( index ) ; return false ; }
function ( index , value ) { value . elem . click ( function ( ) { showFile ( index ) ; return false ; } ) ; }
function ( ) { var filters = _ . clone ( model . get ( 'query_filters' ) ) || { } ; filters [ filter_group_id ] = filter_group . getFilters ( ) ; model . set ( 'query_filters' , filters ) ; }
function ( ) { var filters = _ . clone ( model . get ( 'query_filters' ) ) || { } ; filters [ filter_group_id ] = filter_group . getFilters ( ) ; model . set ( 'query_filters' , filters ) ; }
function ( ) { window . setTimeout ( this . progress . setValue , 0 ) ; }
function ( ) { window . setTimeout ( this . progress . setValue , 0 ) ; }
function ( ) { window . setTimeout ( this . progress . setValue , 0 ) ; }
function ( uri ) { return cachedModules [ uri ] . _compile ( ) }
function ( uri ) { return uri && ( ! cachedModules [ uri ] || cachedModules [ uri ] . status < STATUS . READY ) }
function cb ( module ) { module && ( module . status = STATUS . READY ) -- remain === 0 && callback ( ) }
function ( uri ) { return cachedModules [ uri ] . _compile ( ) }
function ( uri ) { return uri && ( ! cachedModules [ uri ] || cachedModules [ uri ] . status < STATUS . READY ) }
function cb ( module ) { module && ( module . status = STATUS . READY ) -- remain === 0 && callback ( ) }
function ( node , opt_host ) { var ret = bonzo ( normalize ( node ) ) . insertAfter ( this , opt_host ) this . remove ( ) Bonzo . call ( opt_host || this , ret ) return opt_host || this }
function state ( ) { this . id = id ++ ; if ( id > 1000 ) { throw new VerifierError ( "Probably in an infinite loop." ) ; } this . stack = [ ] ; this . scope = [ ] ; this . local = [ ] ; }
function ( ) { Backbone . Syphon . KeyExtractors . unregister ( "text" ) ; }
function ( row ) { if ( ! this . proto ) { if ( ! this . _handleQueue ) this . _handleQueue = [ ] ; this . _handleQueue . push ( row ) ; } else this . proto . handle ( row ) ; }
function ( user ) { var player = new Player ( user . id , this . physicsEngine ) ; this . players [ user . id ] = player ; return player ; }
function ( ) { requestAnimFrame ( this . update . bind ( this ) ) ; this . physicsEngine . update ( ) ; for ( var id in this . players ) { this . players [ id ] . update ( ) ; } }
function ( user ) { Parent . prototype . userJoined . call ( this , user ) ; var id = user . id ; var player = this . players [ id ] ; this . inputControllers [ id ] = new InputController ( player ) ; }
function ( ) { return { 'x' : Math . round ( this . canvas . width / this . tileSize ) , 'y' : Math . round ( this . canvas . height / this . tileSize ) } ; }
function ( ) { this . shiftMapRow ( ) ; }
function ( ) { this . map . pop ( ) ; this . map . unshift ( this . generateMapRow ( ) ) ; }
function ( err ) { callback ( "error creating rerepopo: " + ghData . repository . url + ", " + err , null ) ; }
function SongsTab ( ) { var contentHeader = ContentHeader ( '#CurrentSongDisplay' , 'Add Songs' , 'Search for artists or songs' ) ; UrlInput ( contentHeader ) ; return { setContentHeaderTitle : function ( title ) { contentHeader . setTitle ( title ) ; } } ; }
function ( ) { Player = chrome . extension . getBackgroundPage ( ) . YoutubePlayer ( ) ; Foreground ( ) ; }
function ( e ) { var code = e . which ; if ( code == 13 ) addPlaylist ( ) ; } ) . bind ( 'paste drop' , function ( ) { return addPlaylist ( ) ; }
function ( ) { var playlistName = addInput . val ( ) ; if ( playlistName . trim ( ) != '' ) { Player . addPlaylist ( playlistName ) ; playlistHeader . flashMessage ( 'Thanks!' , 2000 ) ; } }
function ( maxValue ) { selector . prop ( 'max' , maxValue ) ; repaint ( ) ; }
function ( totalParticles ) { cc . Assert ( totalParticles <= this . _allocatedParticles , "Particle: resizing particle array only supported for quads" ) ; this . _totalParticles = totalParticles ; }
function ( blendFunc ) { if ( this . _blendFunc . src != blendFunc . src || this . _blendFunc . dst != blendFunc . dst ) { this . _blendFunc = blendFunc ; this . _updateBlendFunc ( ) ; } }
function ( ) { "use strict" ; var pars ; pars = "opcion=1" + "&" + $ ( '#consulta' ) . serialize ( ) ; procesaAjax ( pars , 'resultados' , 'resultados' , false ) ; }
function ( ) { styleDoc ( '```html\n<div>Test</div>```' , { template : false } ) . should . equal ( '<pre><code class="lang-html"><span class="tag">&lt;<span class="title">div</span>&gt;</span>Test<span class="tag">&lt;/<span class="title">div</span>&gt;</span></code></pre>\n' + '<div class="style-doc-sample"><div>Test</div></div>' ) ; }
function ( event ) { that . cleanNumerations ( ) ; if ( that . showNumbers ( ) ) { that . createNumeratedHeaders ( ) ; } }
function ( obj ) { if ( ! obj || $ ( obj ) . length <= 0 ) { return false ; } return $ ( obj ) . find ( 'span[role=annotation]' ) . length > 0 ; }
function ( ) { this . element = this . $el ; this . collection = new SampleCollection ( ) ; }
function ( ) { Services . obs . notifyObservers ( observerSubject , CSP_VIOLATION_TOPIC , violatedDirective ) ; reportSender . sendReports ( blockedContentSource , violatedDirective , aSourceFile , aScriptSample , aLineNum ) ; }
function isAccessible ( tab ) { return ! ! tab && ( v12 ? ! ! tab . port && tab . readyState === 'complete' : true ) ; }
function ( ) { Utils . debug ( "Saving session" ) ; $ ( "#user-edit-modal" ) . modal ( "hide" ) ; $ ( "#user-modal" ) . modal ( "show" ) ; }
function ( ) { $ ( "#user-edit-modal" ) . modal ( "show" ) ; }
function ( ) { this . model . set ( "username" , $ ( ".username" ) . val ( ) ) ; $ ( ".confirm-password" ) . show ( ) ; $ ( ".password" ) . focus ( ) ; }
function ( k ) { if ( k === 'statusCode' || k === 'cookie' || k === 'set-cookie' ) return headers [ k ] = arg [ k ] }
function ( ) { var newsize = browser . evaluate ( "$('#slider-list>li').length;" ) ; expect ( newsize ) . to . equal ( currentSize + 1 ) ; done ( ) ; }
function ( err , user ) { if ( err ) return self . error ( ) ; console . log ( '--*' , user ) ; session . userID = user . _id ; self . redirect ( '/battle' ) ; }
function ( key ) { var data = $ . jStorage . get ( key ) ; if ( key != 'pairing_key' && data . name && data . config ) { html += pinned_template ( data ) ; } }
function ( dest ) { filter . prototype . pipe . apply ( this , arguments ) ; }
function ( ) { var server = new ServerReadableStream ( io ) ; var output = new OutputWritableStream ( $ ) ; server . resume ( ) ; server . pipe ( output ) ; }
function ( ) { var p = this . $ . samplePanels . getActive ( ) ; if ( p ) { p . destroy ( ) ; } }
function ( inControl , inA ) { this . inherited ( arguments ) ; enyo . Arranger . opacifyControl ( inControl , inA . top % this . colHeight !== 0 ? 0.25 : 1 ) ; }
function ( point , isColliding ) { if ( point . GetFixtureA ( ) . GetUserData ( ) == Constants . COLLISION_IDENTIFIER_FOOTSENSOR || point . GetFixtureB ( ) . GetUserData ( ) == Constants . COLLISION_IDENTIFIER_FOOTSENSOR ) { this . me . onFootSensorDetection ( isColliding ) ; } }
function ( ) { page ++ ; getRelatedContent ( ) ; }
function ( e , data ) { page = 0 ; addBinding ( ) ; contentData = data ; getRelatedContent ( ) ; }
function ( ) { for ( var i = 0 , c ; ( c = enyo . BingMap . scriptLoadedCbs [ i ] ) ; i ++ ) { c ( ) ; } enyo . BingMap . scriptLoadedCbs = [ ] ; }
function ( inSender , inEvent ) { this . $ . map . setMapType ( inEvent . mapType ) ; }
function ( inSender , inEvent ) { this . doBookmarkSelect ( { item : inEvent . item } ) ; }
function ( ) { return $curr . removeClass ( "" + options . transition + " out active reverse curr" ) ; }
function ( ) { views . carddetail . render ( this . card ) ; return changePage ( '#card-detail' , { transition : 'pop' } ) ; }
function ( ) { this . notifications ( ) ; }
function ( enabled ) { Services . prefs . setBoolPref ( 'devtools.debugger.remote-enabled' , value ) ; }
function ( value ) { Services . prefs . setIntPref ( 'devtools.debugger.remote-port' , value ) ; }
function hasAdd ( name , test , now , force ) { if ( hasCache [ name ] === void 0 || force ) { hasCache [ name ] = test ; } return now && has ( name ) ; }
function Promise ( ) { this . thens = arguments . length ? [ arguments ] : [ ] ; }
function promiseThen ( ) { this . thens . push ( arguments ) ; return this ; }
function promiseResolve ( ) { this . _complete ( 0 , arguments ) ; }
function promiseReject ( ex ) { this . _complete ( 1 , ex ) ; }
function scopedToUrl ( ) { var args = Array . prototype . slice . call ( arguments , 0 ) ; _t . plugin === null && ( args [ 1 ] = _t ) ; return toUrl . apply ( null , args ) ; }
function onPluginRun ( v ) { _t . def = v ; finish ( ) ; }
function isAutoComplete ( ) { var typeahead = priv . editProxy . data ( "typeahead" ) ; if ( typeahead && typeahead . $menu . is ( ":visible" ) ) { return typeahead ; } else { return false ; } }
function ( id , lambda , error_lambda ) { return _staticApi . get_object_by_key ( 'stream' , id , lambda , error_lambda ) ; }
function ( ) { me . removeSelectedTag ( tag_name ) ; tag . dispose ( ) ; $ ( '.acResults' ) . hide ( ) ; me . fixHeight ( ) ; }
function ( tag_name ) { me . addTag ( tag_name ) ; me . clearNewTagInput ( ) ; me . fixHeight ( ) ; }
function ( ) { $ ( '.titlebarText' ) . css ( { 'margin-left' : '20px' } ) ; $ ( '.titlebarLabel' ) . append ( '<div class="reschatw" style="float: left; width: 18px;height: 18px;background-image: url(https://s-static.ak.fbcdn.net/rsrc.php/v2/y1/r/HbofewrOY-l.png);position: absolute;margin-top: 0px;top: 1px;left: 1px;background-position-y: 152px;"></div>' ) ; dragobj = $ ( '.reschatw' ) ; resobj = $ ( '#fbDockChatTabs .fbMercuryChatTab.opened' ) ; resize ( ) ; }
function ( string1_decline , string2_normal , string3_normal ) { this . setCompQuery ( string1_decline , 'decline' ) ; this . setCompQuery ( string2_normal , 'normal' ) ; this . setCompQuery ( string3_normal , 'normal' ) ; }
function ( ) { element . onload = null ; self . application . ninja . elementMediator . addElements ( element , rules , true , false ) ; }
function ( ) { document . addEventListener ( "keydown" , this , false ) ; document . addEventListener ( "keyup" , this , false ) ; }
function ( ) { return this . _styleProperty ; }
function ( newVal ) { this . _valueEditorHottext = newVal ; }
function ( newVal ) { this . _dtextProperty = newVal ; }
function ( ) { return this . currentStage . elementModel . getProperty ( "offsetWidth" ) || parseInt ( this . currentStage . offsetWidth ) ; }
function ( ) { return this . currentStage . elementModel . getProperty ( "offsetHeight" ) || parseInt ( this . currentStage . offsetHeight ) ; }
function ( request , sender , sendResponse ) { if ( request == "refreshSettings" ) { chrome . extension . sendMessage ( null , 'getSettings' , chromeHandleMessage ) ; } }
function ( evnt , cb ) { return $this . on ( evnt , cb ) ; }
function ( evnt ) { var args = ( arguments . length > 1 ) ? __slice . call ( arguments , 1 ) : [ ] ; return $this . trigger ( evnt , args ) ; }
function ( msg ) { vncSocket . write ( new Buffer ( msg , 'base64' ) . toString ( 'binary' ) , 'binary' ) ; }
function ( code , reason ) { vncSocket . end ( ) ; Logging . Warn ( 'WebSocket client disconnected: ' + code + ' [' + reason + ']' ) ; }
function ( onSaved ) { _open ( null , true , onSaved ) ; }
function ( cb ) { console . log ( self . token ) ; if ( self . token ) { self . get ( '/me' , function ( me ) { cb ( me ) ; } ) ; } else { cb ( ) ; } }
function ( el , idx ) { if ( this . childNodes . length ) { this . insertBefore ( el , this . childNodes [ idx ] ) ; } else { this . appendChild ( el ) ; } }
function ( filter , no_save ) { if ( no_save ) return ; app . data . current_filter = filter ; }
function ( val ) { var elem = this ; if ( ! val && elem ) { $ . prop ( elem , 'value' , $ . prop ( elem , 'value' ) ) ; } }
function ( ) { addClassEmpty ( ) ; }
function ( ) { if ( $ ( '#parentId' ) . val ( ) == $ ( '#motechId' ) . val ( ) ) { $ ( "#motherIdError" ) . removeClass ( 'hide' ) ; return false ; } }
function handleNoGeolocation ( ) { window . location = Elm . domain + 'coming-soon/' ; }
function ( ) { Elm . error ( "Oops! We've encountered some troubles. Try again shortly!" , $content , 'prepend' ) ; }
function ( ) { Elm . error ( "Oops! We've encountered some troubles. Try again shortly!" , $content , 'prepend' ) ; }
function ( response ) { if ( response . success ) { window . location = response . location ; } else { Elm . error ( response . message , $content , 'prepend' ) ; $modal . modal ( 'show' ) ; } }
function ( ) { Elm . error ( "Oops! We've encountered some troubles. Try again shortly!" , $content , 'prepend' ) ; $modal . modal ( 'show' ) ; }
function ( ) { Elm . error ( "Oops! We've encountered some troubles. Try again shortly!" , $content , 'prepend' ) ; $modal . modal ( 'show' ) ; }
function ( ) { var exports , pork ; pork = require ( './pork' ) ; exports = module . exports = pork ; }
function ( ) { var val = this . $menu . find ( '.active' ) . attr ( 'data-value' ) this . $element . val ( this . updater ( val ) ) . change ( ) return this . hide ( ) }
function bucketExistsState ( exists ) { enableLookup ( exists ) ; enableDeleteBtn ( exists ) ; if ( exists === false ) { showPrevNextCont ( exists ) ; } }
function enableSaveBtn ( enable ) { docSaveBtn [ enable ? 'removeClass' : 'addClass' ] ( 'disabled' ) ; }
function ( doc ) { if ( ! doc ) { return ; } tryShowJson ( doc ) ; }
function ( selectedBucket ) { if ( selectedBucket === undefined ) { return ; } bucketExistsState ( ! ! selectedBucket ) ; }
function ( e ) { e . preventDefault ( ) ; self . documentIdCell . setValue ( undefined ) ; self . lookupIdCell . setValue ( undefined ) ; self . filter . rawFilterParamsCell . setValue ( undefined ) ; }
function ( doc ) { removeSpecialKeys ( doc ) ; self . jsonCodeEditor . setValue ( JSON . stringify ( doc , null , "  " ) ) ; stopSpinner ( ) ; enableDeleteBtn ( true ) ; enableSaveAsBtn ( true ) ; }
function ( ) { var self = this ; self . documentsPageNumberCell . setValue ( undefined ) ; self . lookupIdCell . setValue ( undefined ) ; }
function ( dbURL ) { self . rawDDocIdCell . setValue ( ddocId ) ; self . rawViewNameCell . setValue ( viewName ) ; self . rawSpatialNameCell . setValue ( undefined ) ; }
function ( dbURL ) { self . rawDDocIdCell . setValue ( ddocId ) ; self . rawViewNameCell . setValue ( undefined ) ; self . rawSpatialNameCell . setValue ( spatialName ) ; }
function ( element ) { return element . tagName == 'UL' ; }
function ( value ) { ssao . _noiseTextureSize = Math . pow ( 2 , value ) ; ssao . _noiseTextureSize = Math . min ( ssao . _noiseTextureSize , 512 ) ; ssao . dirty ( ) ; }
function ( ) { return ( navigator . language || navigator . browserLanguage || navigator . userLanguage || 'en' ) . substr ( 0 , 2 ) . toLowerCase ( ) ; }
function ( ) { var locale = localStorage . locale || Thin . getDefaultLocale ( ) ; return Thin . LOCALES [ locale ] ? locale : 'en' ; }
function ( ) { return ( navigator . language || navigator . browserLanguage || navigator . userLanguage || 'en' ) . substr ( 0 , 2 ) . toLowerCase ( ) ; }
function ( ) { var locale = localStorage . locale || Thin . getDefaultLocale ( ) ; return Thin . LOCALES [ locale ] ? locale : 'en' ; }
function ( element ) { this . prefix = "mwt" ; this . element = element || $ ( 'body' ) ; this . interceptAllLinks ( ) ; }
function ( o ) { var ty = this . construct ( ) . resolve ( o . types ) ; if ( ty !== undefined ) { ty . lint ( ) ; } return ty ; }
f this . foldingStartMarker = new RegExp ( "([\\[{])(?:\\s*)$|(" + markers + ")(?:\\s*)(?:#.*)?$" ) ; } ;
function ( item ) { var message = item . file + ":" + item . line ; if ( item . function ) message += " in " + item . function ; console . log ( "  " + message ) ; }
function ( ) { var ext = this . filename . match ( /\.[^.]+$/ ) [ 0 ] ; if ( ! ext ) ext = '.js' ; extensions [ ext ] ( this , this . filename ) ; }
function ( cartesian ) { var lon = cartesian . x / this . _halfEquatorCircumference ; var lat = cartesian . y / this . _quarterPolarCircumference ; return new Cartographic ( lon * Math . PI , lat * CesiumMath . PI_OVER_TWO , cartesian . z ) ; }
function ( ) { flight = scene . getCamera ( ) . getControllers ( ) . addFlight ( { destination : ellipsoid . cartographicToCartesian ( Cesium . Cartographic . fromDegrees ( - 118.26 , 34.19 , 100000.0 ) ) , duration : 4.0 } ) ; }
function ( ) { if ( typeof this . cartographic === 'undefined' ) { this . cartographic = wgs84 . cartesianArrayToCartographicArray ( this . cartesian ) ; } return this . cartographic ; }
function ( ) { if ( typeof this . cartesian === 'undefined' ) { this . cartesian = wgs84 . cartographicArrayToCartesianArray ( this . cartographic ) ; } return this . cartesian ; }
function ( movement ) { handleZoom ( this , movement , this . _ellipsoid . cartesianToCartographic ( this . _camera . position ) . height ) ; }
function ( ) { var ellipsoid = Ellipsoid . WGS84 ; var center = ellipsoid . cartographicToCartesian ( Cartographic . ZERO ) ; expect ( function ( ) { Shapes . computeCircleBoundary ( ellipsoid , center ) ; } ) . toThrow ( ) ; }
function ( ) { var ellipsoid = Ellipsoid . WGS84 ; var center = ellipsoid . cartographicToCartesian ( Cartographic . ZERO ) ; expect ( function ( ) { Shapes . computeCircleBoundary ( ellipsoid , center , - 1.0 ) ; } ) . toThrow ( ) ; }
function ( ) { var ellipsoid = Ellipsoid . WGS84 ; var center = ellipsoid . cartographicToCartesian ( Cartographic . ZERO ) ; expect ( function ( ) { Shapes . computeEllipseBoundary ( ellipsoid , center , 1.0 ) ; } ) . toThrow ( ) ; }
function ( ) { collection . addFlight ( { destination : Ellipsoid . WGS84 . cartographicToCartesian ( Cartographic . fromDegrees ( - 118.26 , 34.19 , 100000.0 ) ) , duration : 4.0 } ) ; }
function ( res ) { return __monad__ . return ( res ) ; }
function ( res ) { expect ( res . length ) . to . equal ( this . nodes . length ) ; }
function ( a , i ) { expect ( res [ i ] . id ) . to . equal ( this . nodes [ i ] . id ) ; }
function ( a , i ) { expect ( res [ i ] . url ) . to . equal ( this . nodes [ i ] . data . url ) ; }
function ( inSender ) { this . doSpaceSelected ( inSender ) ; }
function reAngle ( val ) { if ( isString ( val ) ) val = parseFloat ( val ) ; val = reRound ( val , 360 , true ) ; if ( val <= 0 ) val += 360 ; return val ; }
function handleResponse ( ok ) { win . dialog ( 'close' ) ; if ( ok && callback ) { callback ( userInput . val ( ) ) ; } win . remove ( ) ; }
function ( error , newNotification ) { if ( error ) { console . log ( "[NotificationAction.compileEmail] error - " + error ) ; callback ( null , new Object ( ) ) ; } else { callback ( null , newNotification ) ; } }
function ( err , results ) { if ( err ) { console . log ( "[NotificationAction.addUserNotification] error - " + err ) ; callback ( null , new Array ( ) ) ; } else { callback ( null , addedUserNotifications ) ; } }
function ( error , removedNotifications ) { if ( error ) { console . log ( "[UserNotification.removedUserNotifications] error - " + error ) ; callback ( null , new Array ( ) ) ; } else { callback ( null , removedNotifications ) ; } }
function ( error , removedNotifications ) { if ( error ) { console . log ( "[UserNotification.removeUserNotifications] error - " + error ) ; callback ( null , new Array ( ) ) ; } else { callback ( null , removedNotifications ) ; } }
function ( error , removedUserNotifications ) { if ( error ) { console . log ( "[NotificationListener.removeUserNotifications] error - " + error ) ; callback ( null , new Array ( ) ) ; return ; } else { callback ( null , removedUserNotifications ) ; } }
function ( err , results ) { if ( err ) { console . log ( "[NotificationAction.setupCourseMaterialNotifiers] error - " + error ) ; callback ( null , new Array ( ) ) ; } else { callback ( null , addedStudents ) ; } }
function ( error , updatedSettings ) { if ( error ) { console . log ( "[UserNotificationSettings.updateUserNotificationSettings] error - " + error ) ; callback ( null , new Object ( ) ) ; } else { callback ( null , updatedSettings ) ; } }
function ( error , newSettings ) { if ( error ) { console . log ( "[UserNotificationSettings.addNotificationSetting] error - " + error ) ; callback ( null , new Object ( ) ) ; } else { callback ( null , newSettings ) ; } }
function ( ) { self . remove ( ) ; }
function cameraLoaded ( ) { callback ( ) ; }
function ( ) { clearBuffers ( this . _parser ) ; this . emit ( "close" ) ; }
function ( error ) { return console . log ( '✎' . red , ( "Error: " + error ) . red ) ; }
function ( ) { $ ( '#number' ) . attr ( 'value' , localStorage . number ) ; update ( ) ; if ( localStorage . firstTime == undefined ) { $ ( '.helpbox' ) . toggle ( ) ; localStorage . firstTime = false ; } }
function ( ) { return aws . createClient ( this . config . secret , this . config . key , 'ec2.amazonaws.com' ) ; }
function ( ) { if ( ! this . maker ) { this . maker = new Y . mojito . RouteMaker ( this . routeConfig ) ; } return this . maker ; }
function getContent ( ) { options . getBlock ( 'search.form' , this . parallel ( ) ) ; }
function ( ) { this . model . on ( 'change' , this . render , this ) ; this . model . on ( 'destroy' , this . remove , this ) ; }
function ( exception ) { self . emit ( "netError" , exception ) ; self . conn . destroy ( ) ; }
function ( ) { parts [ 1 ] = func . call ( self ) ; el . setAttribute ( status , parts . join ( "" ) ) ; }
function ( ) { container . css ( "opacity" , "" ) ; container . hide ( ) ; hidden = true ; }
function ( ) { if ( animate ) { container . css ( animValues . property , "" ) ; } container . css ( "opacity" , "" ) ; hidden = false ; }
function ( e ) { var state = $bg . prop ( 'checked' ) ; $artboard . css ( 'background' , state ? '#34c429' : '' ) ; $canvas . css ( 'background' , state ? '#34c429' : '' ) ; }
function ( x ) { var regex = /^https?:\/\/(?=.{1,254}(?::|$))(?:(?!\d|-)(?![a-z0-9\-]{1,62}-(?:\.|:|$))[a-z0-9\-]{1,63}\b(?!\.$)\.?)+(:\d+)?$/i ; if ( typeof x !== 'string' || ! x . match ( regex ) ) { throw new Error ( "not a valid origin" ) ; } }
function ( canvasX , canvasY ) { return [ this . x , this . y , this . width , this . height ] ; }
function ( ) { return '\\' + this . type + '_{' + this . sub . outputText ( ) + '}^{' + this . sup . outputText ( ) + '}{' + this . eq . outputText ( ) + '}' ; }
function ( ) { $ ( '.selected' ) . removeClass ( 'selected' ) ; $ ( '.tab' ) . hide ( ) ; $ ( '#events_on_this_page' ) . addClass ( 'selected' ) ; $ ( '#events' ) . show ( ) ; }
function ( ) { $ ( '.selected' ) . removeClass ( 'selected' ) ; $ ( '.tab' ) . hide ( ) ; $ ( '#show_calendar' ) . addClass ( 'selected' ) ; $ ( '#agenda' ) . show ( ) ; }
function ( response ) { if ( response . status === 401 ) { callback ( [ ] ) ; } }
function ( position , relativeID ) { return this . addMenuItem ( DIVIDER , "" , position , relativeID ) ; }
function ( ) { this . emit ( 'subscribe_ready' ) ; if ( this . callback ) { process . nextTick ( this . callback ) ; } }
function ( index ) { this . index = index + 1 ; var galleryItemsEl = $ ( '#gallery ul li' ) ; galleryItemsEl . removeClass ( 'active' ) ; $ ( galleryItemsEl . get ( index ) ) . addClass ( 'active' ) ; }
function ( ) { this . $el . modal ( 'hide' ) ; this . remove ( ) ; zeega . app . busy = false ; return false ; }
function ( result , request ) { log . error ( 'Impossible to get Node' , this . logAuthor ) ; global . notify . notify ( _ ( 'Issue' ) , _ ( "The selected selector can't be found" ) , 'info' ) ; }
function ( ) { enunit . parseUnitString ( '/m' ) ; }
function ( page , node ) { if ( this . siblingNav ) { this . siblingNav . set ( 'node' , node ) ; } this . _setupAdTag ( ) ; }
function ( ) { dojo . removeClass ( dojo . body ( ) , siblingNavOpenClass ) ; dojo . publish ( '/window/resize' ) ; }
function ( argument ) { dojo . addClass ( dojo . body ( ) , siblingNavClass ) ; }
function ( ) { var func = this . isOpen ? 'close' : 'open' ; this [ func ] ( ) ; this . isOpen = ! this . isOpen ; }
function ( appSchemas ) { schemas = appSchemas ; console . log ( "starting" ) ; async . parallel ( [ startPolling , function ( cb ) { getMeetups ( schemas , cb ) } ] ) ; }
function startResponse ( err , badges ) { if ( err ) return next ( err ) ; var data = computeStats ( badges ) ; response . render ( 'stats' , { stats : data } ) ; }
function footer_email_form_show_details ( trigger_click ) { $ ( '#form-details' ) . slideDown ( 'normal' , function ( ) { if ( trigger_click ) { $ ( '#footer_email_submit' ) . trigger ( 'click' ) ; } } ) ; $ ( '#footer-email-form .form-details' ) . slideDown ( ) ; }
function ( ) { $ ( '#the_board' ) . center ( ) draw . setContext ( context ) draw . board ( ) draw . newGameButton ( ) }
function ( contents ) { $editorInput . text ( contents ) . attr ( 'contenteditable' , ! isResult ) ; Editor . highlight ( $editorInput . get ( 0 ) ) ; }
function showMapDirectPopup ( ) { if ( typeof mapDirect != 'undefined' ) { if ( markerFeatures [ mapDirect ] . popup == null ) fillPopup ( markerFeatures [ mapDirect ] ) ; showPopup ( markerFeatures [ mapDirect ] . popup ) mapDirect = undefined ; } }
function ( ) { var elt = document . getElementById ( "grLine" + this . id ) ; elt . parentNode . removeChild ( elt ) ; graphicsArray [ this . id ] = undefined ; }
function ( editor , event ) { var ret = this . _handle_codemirror_keyevent ( editor , event ) ; if ( ret != null ) { return ret ; } return false ; }
function ( json ) { this . loggedin_profile_id = json . loggedin_profile && json . loggedin_profile . profile_id ; this . listing = json . listing || { } ; this . commentlist = json . comments || [ ] ; }
function ( node ) { return node [ passFunction ] ( o ) ; }
function ( value ) { if ( ! arguments . length ) return this . _ [ prop ] this . _ [ prop ] = value return this }
function ( err , vfs ) { if ( err ) throw err ; watch ( vfs ) ; }
function ( ) { var loaded = this . loaded ; loaded |= loadedNodes . hasOwnProperty ( this . id ) ; loaded |= ! this . has_children ; loaded |= ( this . has_children && this . children . length > 0 ) ; return loaded ; }
function ( node ) { node . loaded = true ; loadedNodes [ node . id ] = node . id ; node . build ( ) ; if ( callback ) { callback ( node ) ; } node . setBusy ( false ) ; }
function ( event ) { node . selectChildren ( $ ( event . target ) . is ( ':checked' ) ) ; if ( params . selected ) { params . selected ( node , true ) ; } }
function ( ) { var loaded = this . loaded ; loaded |= loadedNodes . hasOwnProperty ( this . id ) ; loaded |= ! this . has_children ; loaded |= ( this . has_children && this . children . length > 0 ) ; return loaded ; }
function ( node ) { node . loaded = true ; loadedNodes [ node . id ] = node . id ; node . build ( ) ; if ( callback ) { callback ( node ) ; } node . setBusy ( false ) ; }
function ( event ) { node . selectChildren ( $ ( event . target ) . is ( ':checked' ) ) ; if ( params . selected ) { params . selected ( node , true ) ; } }
function clear ( ) { storage . removeItem ( "emails" ) ; storage . removeItem ( "siteInfo" ) ; storage . removeItem ( "managePage" ) ; }
function ( keyCode ) { if ( keyCode === 16 ) { ME . holdShift = true ; } if ( ME . util . isNeutralKey ( keyCode ) ) { ME . holdNeutralKey = true ; } }
function ( keyCode ) { if ( keyCode === 16 ) { ME . holdShift = false ; } if ( ME . util . isNeutralKey ( keyCode ) ) { ME . holdNeutralKey = false ; } }
function ( editor ) { console . log ( "updating preview in Mode " + this . name ) ; editor . htmlDiv . html ( this . toHTML ( editor ) || "<p>&nbsp;</p>" ) ; }
function ( editor ) { console . log ( "updating TA in Mode " + this . name ) ; editor . textArea . val ( this . toText ( editor ) ) ; }
function ( editor ) { editor . textArea . parent ( ) . show ( ) . find ( ":first-child" ) . focus ( ) [ 0 ] . setSelectionRange ( 0 , 0 ) ; editor . htmlDiv . attr ( "contentEditable" , false ) ; }
function ( editor ) { var states = this . getSelectionStates ( editor ) ; if ( this . id === 'wysiwyg' ) { states . wysiwyg = true ; } else { states . changeDataMode = this . id ; } return states ; }
function ( editor ) { return { } ; }
function ( e ) { var target = e . target ; that . runAction ( editor , target . className , target ) ; return false ; } ) . click ( function ( e ) { return false ; }
function ( e ) { if ( isTextarea || editor . is ( 'wysiwyg' ) ) { return editor . currentMode . pressed ( editor , e . keyCode ) ; } }
function ( e ) { if ( isTextarea || editor . is ( 'wysiwyg' ) ) { return editor . currentMode . released ( editor , e . keyCode ) ; } }
function ( ) { if ( isTextarea || editor . is ( 'wysiwyg' ) ) { editor . focus ( ) ; return editor . currentMode . clicked ( editor ) ; } }
function ( ) { editor . checkState ( ) ; clearTimeout ( timer ) ; timer = setTimeout ( function ( ) { editor . currentMode . updatePreview ( editor ) ; } , 1000 ) ; }
function ( modeId ) { var nextMode ; nextMode = ME . getMode ( modeId ) ; this . synchronize ( ) ; this . currentMode = nextMode ; nextMode . activate ( this ) ; }
function ( ) { return ME . getMode ( this . dataType ) ; }
function ( ) { var textArea = this . textArea ; this . scrollPosition = textArea . scrollTop ; this . selectionStart = textArea [ 0 ] . selectionStart ; this . selectionEnd = textArea [ 0 ] . selectionEnd ; }
function ( editor ) { editor . synchronize ( ) ; editor . settings . save ( editor ) ; }
function ( editor ) { align ( editor , "left" ) ; }
function ( editor ) { align ( editor , "right" ) ; }
function ( editor ) { align ( editor , "center" ) ; }
function ( editor , target ) { toggleList ( editor , target , "*" ) ; }
function ( editor , target ) { toggleList ( editor , target , "#" ) ; }
function ( title , uri ) { textileMode . replaceSelection ( editor , "\"" + title + "\":" + uri ) ; }
function ( ) { textileMode . replaceSelection ( editor , match [ 1 ] ) ; }
function ( ) { textileMode . updatePreview ( editor ) ; editor . checkState ( ) ; }
function ( ) { textileMode . replaceSelection ( editor , "" ) ; }
function ( ) { textileMode . updatePreview ( editor ) ; editor . checkState ( ) ; }
function ( editor ) { var html = textileCompiler . compile ( editor . textArea . val ( ) ) ; editor . htmlDiv . html ( html ) ; }
function ( editor , target ) { document . execCommand ( this . name , false , null ) ; }
function ( editor , target ) { handleList ( editor , target , 'ul' ) ; }
function ( editor , target ) { handleList ( editor , target , 'ol' ) ; }
function ( ) { if ( ! this . container . is ( '.multiselect-disabled' ) && this . container . is ( '.multiselect-selected' ) ) { set_state ( false , this , options ) ; } }
function ( ) { if ( ! this . container . is ( '.multiselect-disabled' ) && allowState ( currentState ) ) { set_state ( currentState , this , options ) ; changed = true ; } }
function load ( ) { _state = $ . jStorage . get ( KEY , { } ) ; }
function save ( ) { $ . jStorage . set ( KEY , _state ) ; }
function ( ) { ( this . checked ) ? c ++ : uc ++ ; }
function ( ) { State . load ( ) ; State . iterate ( function ( name , date ) { $ ( '#' + name ) . attr ( 'checked' , true ) . checkboxradio ( 'refresh' ) ; } ) ; update_numbers ( ) ; }
function ( ev ) { scrolls . scrollLeft ( $ ( ev . target ) . scrollLeft ( ) ) ; }
function onKPIData ( msg , result ) { var currentData = this . getCurrent ( ) ; if ( currentData ) { _ . extend ( currentData , result ) ; model . setCurrent ( currentData ) ; } }
function ( ) { bigPlayButton . removeEventListener ( "mouseup" , bigPlayClicked , false ) ; bigPlayButton . classList . remove ( "controls-ready" ) ; p . media . addEventListener ( "mouseover" , activate , false ) ; p . play ( ) ; }
function ( ) { p . off ( "play" , bigPlayListener ) ; bigPlayButton . classList . remove ( "controls-ready" ) ; p . media . addEventListener ( "mouseover" , activate , false ) ; }
function ( ) { if ( p . paused ( ) ) { p . play ( ) ; } else { p . pause ( ) ; } }
function ( deviceId , manufacturer , model , dmVersion , language ) { return sinon . stub ( { deviceId : deviceId , manufacturer : manufacturer , model : model , dmVersion : dmVersion , language : language , } ) ; }
function ( data ) { var stub = sinon . stub ( { isGenericAlert : function ( ) { } , } ) ; stub . data = data ; return stub ; }
function ( status ) { return sinon . stub ( { status : status , } ) ; }
function ( data ) { $ ( "#movie" ) . fadeOut ( 500 , function ( e ) { $ ( "#movie  > table" ) . empty ( "" ) ; } ) $ ( "#load" ) . html ( "<img src='/static/img/load16.gif' />" ) ; }
function ( sType , sItemID ) { if ( sType !== TYPE_TASK ) { return "" ; } return ( " onclick=\"javascript:" + m_sClassInstanceName + ".OnClick_ItemSelected(this,'" + sItemID + "');\" " ) ; }
function ( ) { CallBack_OnClick_ItemSelected ( objSelf , sItemID ) }
function ( objSelf , sItemID ) { $ ( objSelf ) . addClass ( "TreeItemNameSelected" ) ; window . setTimeout ( function ( ) { CallBack_OnClick_ItemSelected ( objSelf , sItemID ) } , MIN_SETTIMOUT ) ; }
function SubtitleTableViewCell ( reuseIdentifier ) { Pushpop . TableViewCell . prototype . constructor . apply ( this , arguments ) ; }
function ValueTableViewCell ( reuseIdentifier ) { Pushpop . TableViewCell . prototype . constructor . apply ( this , arguments ) ; }
function Value2TableViewCell ( reuseIdentifier ) { Pushpop . TableViewCell . prototype . constructor . apply ( this , arguments ) ; }
function TextAreaInputTableViewCell ( reuseIdentifier ) { Pushpop . TableViewCell . prototype . constructor . apply ( this , arguments ) ; }
function SelectInputTableViewCell ( reuseIdentifier ) { Pushpop . TableViewCell . prototype . constructor . apply ( this , arguments ) ; }
function ( ) { inner . hide ( ) ; $ ( "body" ) . unbind ( "click" ) ; f ( ) ; }
function ( ) { inner . hide ( ) ; $ ( "body" ) . unbind ( "click" ) ; }
function ( e ) { confirm_action ( "рекомендовать сообщение #" + message_id , function ( ) { api_call_alert ( "recommend" , { message : message_id } ) ; } , e ) ; }
function ( e ) { confirm_action ( "удалить сообщение #" + id , function ( ) { api_call_alert ( "delete" , { message : id } ) ; } , e ) ; }
function ( ) { context . clearRect ( 0 , 0 , canvasWidth , canvasHeight ) ; context . fillStyle = "#C0C0C0" ; context . fillRect ( 0 , 0 , canvasWidth , canvasHeight ) ; drawModel ( model ) ; }
function WebSocket ( req ) { var self = this ; this . wss = new ws . Server ( { noServer : true , clientTracking : false } ) ; Socket . call ( this , req ) ; }
function ( ) { if ( 'opening' == self . readyState && ws . OPEN == conn . readyState ) { self . readyState = 'open' ; self . emit ( 'open' ) ; } }
function ( ) { return checker . checkLines ( editorCtrler ) ; }
function ( ) { var year = this . getUTCFullYear ( ) ; if ( ( year % 100 != 0 && year % 4 == 0 ) || year % 400 == 0 ) { return 366 ; } else { return 365 ; } }
function ( ) { var oneJanStamp = Date . UTC ( this . getUTCFullYear ( ) , 0 , 1 ) ; return Math . floor ( ( this - oneJanStamp ) / 86400000 ) ; }
function ( ) { $ . ajax ( { url : '/admin/check_list_availability' , data : 'name=' + this . value , success : check_list_name_ok } ) ; }
function ( k , v ) { if ( ! ( k in newClass ) ) newClass [ k ] = v ; }
function ( err , row ) { if ( err ) throw err ; }
function ( err , row ) { if ( err ) throw err ; }
function ( evt ) { if ( ! project . forms [ formName ] . moveNext ( true ) ) { $ ( evt . target ) . focus ( ) ; } }
function ( err , solution ) { if ( err ) throw err ; res . header ( 'Content-Type' , 'text/plain' ) ; res . send ( callback ( solution ) ) ; }
function ( keyCode ) { if ( keyCode !== undef ) { return this . keyState [ keyCode ] ; } else { return this . keyState ; } }
function ( userId ) { var o = map [ userId ] ; if ( o != null && o != undefined ) { return o . sessionId ; } return "Null*" ; }
function ( ) { var clientSessionId = findConnectedClientByUserId ( this . currentTargetUser ) ; this . swarm ( "notifyChatMessage" , clientSessionId ) ; }
function ( data ) { var connection = this ; if ( ! connection . transport ) { throw "SignalR: Connection must be started before data can be sent. Call .start() before .send()" ; } connection . transport . send ( connection , data ) ; return connection ; }
function dragStart ( e ) { start = [ e . pageX , e . pageY ] ; whenDragStart ( start ) ; handler . mouseover ( dragDisable ) . mouseout ( dragDisable ) . click ( clickDisable ) ; }
function KeysFactory ( opt ) { return new Keys ( opt ) ; }
function ( arg ) { this . _unassigned . push ( new UnassignedAssignment ( this , arg , false ) ) ; }
function ( ) { types . registerType ( CommandType ) ; types . registerType ( ParamType ) ; }
function ( title , resulttype ) { if ( typeof ( optionInfo [ resulttype + '_only' ] ) != 'undefined' ) { $row . addClass ( resulttype + '_only' ) ; } }
function ( ) { if ( $ ( "#overwriteman" ) . is ( ':checked' ) ) { attoverwriteman = true ; } else { attoverwriteman = false ; } }
function ( ) { return this . embedPlayer . getTextTracks ( ) . length ; }
function ( request , sender , sendResponse ) { if ( request . method == "getLocalStorage" ) { sendResponse ( { data : localStorage [ request . key ] } ) ; } else sendResponse ( { } ) ; }
function ( ) { this . returnValue = false ; this [ "defaultPrevented" ] = true }
function ( ) { Object . defineProperty ( global , "pageXOffset" , { "get" : _getScrollX } ) ; Object . defineProperty ( global , "pageYOffset" , { "get" : _getScrollY } ) ; }
function ( element , pseudoElt ) { return element . currentStyle ; }
function ( ) { this . returnValue = false ; this [ "defaultPrevented" ] = true }
function ( ) { Object . defineProperty ( global , "pageXOffset" , { "get" : _getScrollX } ) ; Object . defineProperty ( global , "pageYOffset" , { "get" : _getScrollY } ) ; }
function ( element , pseudoElt ) { return element . currentStyle ; }
function _DOMContentLoaded ( ) { document . removeEventListener ( 'DOMContentLoaded' , _DOMContentLoaded ) ; if ( noDocumentReadyState ) document . readyState = "interactive" ; if ( _emulate_scrollX_scrollY ) _emulate_scrollX_scrollY ( ) ; if ( "classList" in document . body . firstChild ) { } }
function ( property , formatter ) { this . parent ( property ) ; this . formatter = formatter ; }
function ( property , style , formatter ) { this . formatter = formatter ; this . style = style ; this . parent ( property ) ; }
function ( rpcHandler , connector ) { return new GeolocationFeature . GeolocationFeature ( rpcHandler , connector ) }
function ( property , config ) { this . prototype . __animation [ property ] = config ; }
function ( ) { consolelog ( "Starting engageClassifyHabitatInterface" ) ; this . _addVectorLayer ( ) ; this . _addDrawControl ( ) ; this . _addModifyControl ( ) ; consolelog ( "Finished engageClassifyHabitatInterface" ) ; return null ; }
function ( fn ) { fn . call ( element , event ) ; }
function ( ) { return parseInt ( $ ( this ) . data ( "tiles-count" ) , 10 ) ; }
function ( ) { this . model . set ( { content : $ ( '[name="content"]' , this . $el ) . val ( ) , } ) ; this . model . save ( ) ; }
function ( ev ) { ev . preventDefault ( ) ; var id = parseInt ( ev . target . dataset . id ) ; }
function ( obj , callback ) { if ( obj . date ) { return callback ( null , obj . date ) ; } else { console . log ( obj . title ) ; return callback ( "Article has no date." ) } }
function getAsset ( file ) { var miloPath = getMiloPath ( ) ; return require ( 'fs' ) . readFileSync ( miloPath + 'libraries/milo/assets/' + file , 'utf-8' ) ; }
function sanitizeForRegex ( s ) { return s . replace ( /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g , "\\$&" ) ; }
function ( name ) { if ( ! fs . existsSync ( "./" + name ) ) { fs . mkdirSync ( "./" + name , "0777" ) ; return console . log ( "	" + name + " is generated." ) ; } }
function ( ) { setInterval ( updateRoom , 15000 ) ; }
function ( ) { Application . isLoggedIn ( false ) ; Application . user ( { } ) ; $ . cookie ( 'userId' , null ) ; $ . cookie ( 'sessionKey' , null ) ; return false ; }
function ( ) { _this . server . responses = [ ] ; _this . server . respondWith ( 'GET' , _this . url , TestResponses . chat . archived ) ; _this . server . respond ( ) ; }
function ( ) { tripwire . resetTripwire ( 2000 ) ; }
function ( ) { return ( __g . totalDistanceAlongDrag / __g . distanceFromStartToEnd ) > 1.5 ; }
function ( d ) { if ( __g . started || __g . canMove ) return __g . canMove = true ; }
function ( d ) { __g . canMove = false ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "west" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "east" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "north" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "south" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "north_west" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "south_west" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "south_east" ; }
function ( ) { __g . isResizing = true ; __g . resizeDirection = "north_east" ; }
function ( data ) { cGraph . nodes ( data . nodes ) cGraph . links ( data . links ) cGraph . edgeBinding ( ) graph_drawing = graphDrawing ( cGraph , svg ) graph_drawing . exit ( cGraph , 0 ) }
function ( data ) { rescaleGraph ( data ) cGraph . nodes ( data . nodes ) cGraph . links ( data . links ) cGraph . edgeBinding ( ) graph_drawing = graphDrawing ( cGraph , svg ) graph_drawing . move ( cGraph , 0 ) }
function ( data ) { rescaleGraph ( data ) cGraph . nodes ( data . nodes ) cGraph . links ( data . links ) cGraph . edgeBinding ( ) graph_drawing = graphDrawing ( cGraph , svg ) graph_drawing . resize ( cGraph , 0 ) }
function ( id ) { if ( $ ( '#go_new' ) . is ( ':checked' ) ) window . location = '/fragment/' + id ; else location . reload ( ) ; }
function ( params ) { params = params || { } ; this . port = params . port || '8125' ; this . host = params . host || 'localhost' ; this . client = dgram . createSocket ( "udp4" ) ; return this ; }
function ( api ) { describeOperation ( api , wsapis [ api ] ) ; }
function ( ) { if ( arguments . length !== 1 || ! Array . isArray ( arguments [ 0 ] ) ) { throw 'last requires one list as an argument' ; } return arguments [ 0 ] [ arguments [ 0 ] . length - 1 ] ; }
function ( ) { if ( arguments . length !== 1 || ! Array . isArray ( arguments [ 0 ] ) ) { throw 'head requires one list as an argument' ; } return arguments [ 0 ] . slice ( 0 , arguments [ 0 ] . length - 1 ) ; }
function updateLaunchTime ( origin ) { if ( ! runningApps [ origin ] ) { return ; } else { runningApps [ origin ] . launchTime = Date . now ( ) ; } }
function ( err , o ) { that . tilejson ( o ) ; if ( callback ) callback ( err , this ) ; }
function ( match ) { return match [ 1 ] . replace ( rBackslash , "" ) ; }
function ( evt ) { var data = self . getData ( ) ; if ( data ) data . value = $ ( this ) . val ( ) ; }
function ( event ) { var top = event . pageY + this . _dragOffset this . _setSplitterPosition ( top ) ; event . preventDefault ( ) ; }
function ( ) { var hoge = { hoge : function ( ) { return 'hoge' ; } } ; return expect ( ensure ( hoge , HogeInterface ) ) . to_eq ( true ) ; }
function ( e ) { var uDb = e . target . result ; if ( ! uDb . objectStoreNames . contains ( gazel . osName ) ) uDb . createObjectStore ( gazel . osName ) ; if ( onupgrade ) onupgrade ( uDb ) ; }
function ( e ) { var uDb = e . target . result ; if ( ! uDb . objectStoreNames . contains ( gazel . osName ) ) uDb . createObjectStore ( gazel . osName ) ; if ( onupgrade ) onupgrade ( uDb ) ; }
function ( err ) { throw err ; }
function ( ) { this . inherited ( arguments ) ; this . _by_idty_paths = { } ; }
function ( head , tail , direction ) { this . head = head ; this . trail = [ ] ; this . direction = direction ; this . targetDirection = direction ; this . tail = tail ; this . length = tail . length ; }
function ( snake , action ) { if ( action === "reset" ) { Snake . reset ( snake ) ; } else { snake . targetDirection = action ; } }
function ( response ) { assert ( response . entity . responseData ) ; }
function ( response ) { assert ( response . entity . responseData ) ; }
function ( response ) { assert . equals ( '/foo/bar' , response . request . path ) ; }
function ( serializer ) { assert . isFunction ( serializer . read ) ; assert . isFunction ( serializer . write ) ; }
function ( s ) { assert . same ( serializer , s ) ; }
function ( ) { assert ( true ) ; }
function ( done ) { when ( registry . lookup ( 'application/bogus' ) , undefined , function ( ) { assert ( true ) ; } ) . always ( done ) ; }
function ( response ) { assert . equals ( 'bar' , response . foo ) ; }
function ( response ) { assert . equals ( 'bar' , response . entity . foo ) ; }
function ( spec ) { spec . client ( { } ) . then ( undefined , function ( response ) { assert . equals ( 'bar' , response . entity . foo ) ; } ) ; }
function ( response ) { assert . equals ( 'bar' , response . entity . foo ) ; }
function ( response ) { assert . isString ( response ) ; }
function ( request ) { return when ( { request : request } ) ; }
function client ( request ) { return when ( { request : request , status : { code : 200 } , headers : { 'Content-Type' : 'application/json' } , entity : '{"foo":"bar"}' } ) ; }
function ( spec ) { assert ( spec . store instanceof RestStore ) ; }
function ( spec ) { assert . equals ( 'bar' , spec . resource . entity . foo ) ; assert . equals ( 'test/dojo/hello.json' , spec . resource . request . path ) ; }
function ( response ) { assert . equals ( 'bar' , response . foo ) ; }
function ( spec ) { spec . client ( { } ) . then ( function ( response ) { assert . equals ( 'bar' , response . foo ) ; } ) ; }
function ( response ) { assert . equals ( 399 , response . status . code ) ; }
function ( request ) { return when ( { request : request } ) ; }
function ( request ) { return when ( { request : request } ) ; }
function ( ) { this . actualizar_habilidades ( ) ; }
function ( ) { pilas . eliminar_actor ( this ) ; }
function ( ruta ) { return singleton . get ( ) . imagenes . cargar ( ruta ) ; }
function ( ) { var _pilas = "GOLA" ; function set ( n ) { _pilas = n ; } function get ( ) { return _pilas ; } return { set : set , get : get } ; }
function sumar ( a , b ) { return a + b ; }
function ( canvas ) { this . canvas = canvas ; this . x = 0 ; this . y = 0 ; this . centro_x = canvas . width / 2 ; this . centro_y = canvas . height / 2 ; }
function ( ) { return { x : this . centro_x - this . x , y : this . centro_y + this . y } ; }
function ( depurador ) { this . depurador = depurador ; this . g = depurador . g ; this . pilas = depurador . pilas ; }
function ( actor ) { var posicion = this . pilas . camara . obtener_posicion ( ) ; this . dibujar_cruz ( this . g , posicion . x + actor . x , posicion . y - actor . y ) ; }
function ( pilas ) { this . pilas = pilas ; this . g = new Graphics ( ) ; this . modos = [ ] ; }
function ( opciones ) { this . modos = [ ] ; if ( opciones . depuracion ) this . modos . push ( new ModoPuntoDeControl ( this ) ) ; }
function ( ) { this . g . clear ( ) ; }
function ( actor ) { for ( i = 0 ; i < this . modos . length ; i ++ ) this . modos [ i ] . dibuja_al_actor ( actor ) ; }
function ( ) { this . g . draw ( this . pilas . contexto ) ; }
function ( ) { this . suscriptores = [ ] ; }
function ( canvas ) { this . canvas = canvas ; this . click_de_mouse = new Evento ( ) ; this . mueve_mouse = new Evento ( ) ; this . conectar_eventos ( ) ; }
function ( e ) { eventos . click_de_mouse . emitir ( { x : e . clientX , y : e . clientY } ) ; }
function ( e ) { eventos . mueve_mouse . emitir ( { x : e . clientX , y : e . clientY } ) ; }
function ( ) { for ( var i = 0 ; i < this . habilidades . length ; i ++ ) { this . habilidades [ i ] . actualizar ( ) ; } }
function ( prefijo ) { this . prefijo = prefijo || "data/" ; }
function ( ruta ) { var imagen = new Bitmap ( this . prefijo + ruta ) ; return imagen ; }
f return { Pilas : pilas . Pilas } ; } ) ;
function ( mootools ) { return { Class : Class } ; }
function tickDone ( tickDepth_ ) { tickDepth = tickDepth_ || 0 ; nextTickQueue . splice ( 0 , nextTickIndex ) ; nextTickIndex = 0 ; inTick = false ; if ( nextTickQueue . length ) { process . _needTickCallback ( ) ; } }
function ( settings , ui ) { var $el = $ ( ui ) ; if ( $el . is ( 'a' ) ) { this . href = ui . href ; } }
function ( ) { $ ( "#" + this . divList ) . html ( '<img src="/images/loading.gif" alt="Loading.." /> Loading channel list...' ) ; this . channels = [ ] ; }
function ( ) { if ( this . _windows && metaWin . get_compositor_private ( ) && metaWin . get_workspace ( ) == this . metaWorkspace ) { this . _doAddWindow ( metaWin ) ; } return false ; }
function ( message ) { this . say ( channel , message ) ; }
function ( game ) { return "testingabc" ; }
function ( event ) { if ( ! windowsVersion ( ) ) self . postMessage ( null ) ; else { var data = JSON . parse ( event . data ) ; procSnapshot ( data [ 0 ] , data [ 1 ] ) ; } }
function ( worker ) { lastWorker = worker ; if ( ready ) worker . postMessage ( JSON . stringify ( ss . storage . h ) ) ; }
function ( options , selected ) { controls . change_content_select . set ( options , selected ) ; }
function ( option ) { html += '<option value="' + option [ 'id' ] + '"' ; if ( option [ 'id' ] === selected_id ) { html += "selected=selected" ; } html += '>' + option [ 'name' ] + '</option>' ; }
function TEST_adjustSyncValues ( syncValues ) { INITIAL_SYNC_DAYS = syncValues . days ; SYNC_REFRESH_USABLE_DATA_TIME_THRESH_NON_INBOX = syncValues . refreshNonInbox ; SYNC_REFRESH_USABLE_DATA_TIME_THRESH_INBOX = syncValues . refreshInbox ; SYNC_REFRESH_USABLE_DATA_OLD_IS_SAFE_THRESH = syncValues . oldIsSafeForRefresh ; SYNC_REFRESH_USABLE_DATA_TIME_THRESH_OLD = syncValues . refreshOld ; SYNC_USE_KNOWN_DATE_RANGE_TIME_THRESH_NON_INBOX = syncValues . useRangeNonInbox ; SYNC_USE_KNOWN_DATE_RANGE_TIME_THRESH_INBOX = syncValues . useRangeInbox ; }
function onNewMsgEnd ( ) { console . log ( '  new fetched, header processing' ) ; newChewReps . push ( $imapchew . chewHeaderAndBodyStructure ( msg ) ) ; console . log ( '   header processed' ) ; }
function MailAPI ( ) { this . _nextHandle = 1 ; this . _slices = { } ; this . _pendingRequests = { } ; this . config = { } ; this . onbadlogin = null ; }
function ( msg ) { this . _LOG . send ( msg . type ) ; window . setZeroTimeout ( function ( ) { TMB . __receiveMessage ( msg ) ; } ) ; }
function ( position ) { timestamp = ( new Date ( ) . getTime ( ) ) ; location = position . coords ; if ( typeof success == 'function' ) success ( position . coords ) ; }
function ( ) { if ( this . playing ) { this . onPaused ( ) ; } this . playing = false ; this . loading = false ; this . hasFocus = false ; this . trigger ( 'ended' ) ; }
function ( ) { if ( this . playing ) { this . onPaused ( ) ; } this . playing = false ; this . loading = false ; this . hasFocus = false ; this . trigger ( 'ended' ) ; }
function ( ) { if ( this . playing ) { this . onPaused ( ) ; } this . playing = false ; this . loading = false ; this . hasFocus = false ; this . trigger ( 'ended' ) ; }
function ( ) { window . onbeforeunload = ourOnBeforeUnload ; }
function ( ) { window . onbeforeunload = otherOnBeforeUnload ; }
function ( e ) { context . fn . saveCursorAndScrollTop ( ) ; e . preventDefault ( ) ; return false ; }
function ( context ) { $ ( this ) . parent ( ) . animate ( { borderTopColor : '#a0d8ff' , borderLeftColor : '#a0d8ff' , borderRightColor : '#a0d8ff' , borderBottomColor : '#a0d8ff' } , 'fast' ) ; }
function ( context ) { $ ( this ) . parent ( ) . animate ( { borderTopColor : '#aaaaaa' , borderLeftColor : '#aaaaaa' , borderRightColor : '#aaaaaa' , borderBottomColor : '#aaaaaa' } , 'fast' ) ; }
function ( context ) { if ( $ . collapsibleTabs ) { $ . collapsibleTabs . handleResize ( ) ; } }
function ( context ) { if ( $ . collapsibleTabs ) { $ . collapsibleTabs . handleResize ( ) ; } }
function ( data ) { if ( $ . isArray ( data ) && data . length ) { $el . suggestions ( 'suggestions' , data [ 1 ] ) ; } }
function ( ) { var jqXhr = $ ( this ) . data ( 'request' ) ; if ( jqXhr && $ . isFunction ( jqXhr . abort ) ) { jqXhr . abort ( ) ; $ ( this ) . removeData ( 'request' ) ; } }
function ( ) { $ ( '#new_event_submit' ) . click ( function ( ) { addDuration ( ) ; } ) ; }
function ( ) { addDuration ( ) ; }
function ( req , res ) { Logger . info ( "!! PONG GET REQUEST RECEIVED !!" ) ; return res . render ( "pong.html" ) ; }
function ( req , res ) { Logger . info ( "!! PONG JAVASCRIPT GET REQUEST RECEIVED !! " + req . params . file ) ; return res . sendfile ( 'public/javascripts/' + req . params . file ) ; }
function ( graph_id ) { this . navigate ( graph_id , true ) ; console . log ( "A new graph was set. Time to draw circles." ) ; }
function ( reqResErr , value ) { return reqResErr [ 1 ] . end ( reqResErr [ 2 ] . message ) ; }
function ( time , counter ) { return time . getMinutes ( ) == 0 && counter <= 20 ; }
function ( time , counter ) { return time . getMinutes ( ) == 0 && counter <= 20 ; }
function ( time , counter ) { return time . getMinutes ( ) <= 1 && counter <= 25 ; }
function ( name ) { this . people = new Map ( ) this . name = name this . topic = "" this . mode = [ ] }
function ( ) { bot . channels . has ( o . id ( "#kickedfrom" ) ) . should . equal ( false ) done ( ) }
function ( ch ) { bot . channels . has ( "#LOL[]\\~" ) . should . equal ( true ) done ( ) }
function ( ch ) { bot . channels . has ( chan . id ) . should . equal ( true ) done ( ) }
function ( error ) { if ( error ) { logger . error ( "Error during retry: " + error . stack ) ; } }
function ( error ) { if ( error ) { logger . error ( "Error updating WordPress: " + error . stack ) ; } }
function create_play_button ( ) { var play = document . createElement ( 'div' ) ; play . setAttribute ( 'class' , 'button play' ) ; return play ; }
function create_star_button ( ) { var star = document . createElement ( 'div' ) ; star . setAttribute ( 'class' , 'button star' ) ; return star ; }
function ( ) { current_focal_cell = cell ; echollage . updater . set_focal_artist ( track . artist_id ) ; }
function ( ) { assertThat ( this . panelWithDocument . getHeader ( ) . getState ( ) , equalTo ( DesktopPanelHeader . States . CONSTRUCTED ) ) ; }
function ( ) { assertThat ( this . panelWithDocument . getContentAreaElement ( ) , equalTo ( this . pageWrapperElement . getElements ( '.' + this . panelWithDocument . options . contentAreaElementStyle ) [ 0 ] ) ) ; }
function ( ) { return this . error == null ; }
function ( user ) { $ ( "#box" ) . append ( $ ( "<div><i>" + user . name + " timed out</i><div>" ) ) ; $ ( "#box" ) . animate ( { scrollTop : $ ( "#box" ) [ 0 ] . scrollHeight } , "0ms" ) ; }
function ( ) { $ ( "#box" ) . append ( $ ( "<div><i>Question timed out</i><div>" ) ) ; $ ( "#box" ) . animate ( { scrollTop : $ ( "#box" ) [ 0 ] . scrollHeight } , "0ms" ) ; }
function ( user ) { $ ( "#box" ) . append ( $ ( "<div><i>" + user . name + " buzzed in</i></div>" ) ) ; $ ( "#box" ) . animate ( { scrollTop : $ ( "#box" ) [ 0 ] . scrollHeight } , "0ms" ) ; }
function ( suffix ) { return Image . url ( this . id , suffix ) ; }
function ( ) { this . fimo . hostname = 'http://172.21.21.76:5000' ; }
function ( event ) { jumble = $ ( event . target ) . parents ( ".jumble" ) ; if ( jumble . length ) { return fimo . controller . wall ( "500d748aa52aa5516c000004" ) ; } }
function isObject ( o ) { return o === Object ( o ) ; }
function isString ( o ) { return Object . prototype . toString . call ( o ) === "[object String]" ; }
function ( ) { return this . _query || ( this . _query = qs . parse ( this . querystring ) ) }
function ( c ) { return new Card ( { 'rank' : c . rank , 'suit' : c . suit } ) ; }
function ( card , category ) { var id = category + "_" + card . get ( 'rank' ) + "_" + card . get ( 'suit' ) ; return id ; }
function ( ) { options . success ( data , "success" , null ) ; }
function share ( name , prop ) { this . proto [ name ] = prop ; }
function bless ( proto ) { proto . share = share ; extend ( proto , plugins ) ; return proto ; }
function ( optionName , index ) { optionName = optionName . trim ( ) ; config [ optionName ] = ( args [ 0 ] && args [ 0 ] [ optionName ] ) || args [ index ] ; }
function count ( number ) { number = number || 0 ; return ( counter += number ) ; }
function ( ) { root . Backbone = previousBackbone ; return this ; }
function ( field , newValue ) { field . setDisabled ( ( newValue == '' || newValue == null ) ) ; }
function ( character ) { if ( ! ! window . console && 'warn' in window . console ) { window . console . warn ( 'Date.Format: ' + character + ', is currently not a supported format.' ) ; } }
function ( ) { if ( typeof el . opt . onEnd == "function" ) el . opt . onEnd ( el ) ; el . locked = false ; }
function ( ) { this . on ( "afterVisibleChange" , function ( e ) { this . fire ( e . newVal ? "show" : "hide" ) ; } ) ; }
function ( ) { if ( ! this . token ) { var stored_api = JSON . parse ( localStorage . getItem ( "auth_object" ) ) ; _ . extend ( this , stored_api ) ; } return ( this . token !== null ) ; }
function ( ) { that . has_template = true ; this . notify ( 'post_fetch_template' ) ; dfrd . resolve ( ) ; }
function ( expected , stream , onFailure ) { if ( ! stream ) stream = 'EOF' ; else stream = '"' + stream + '"' ; return onFailure ( stream , 'expected ' + expected + ', got ' + stream ) ; }
function success ( stream , result ) { if ( stream ) return Parser . expected ( 'EOF' , stream , failure ) ; return result ; }
function ( ) { pragmaHeader . saveCommand ( ) ; return false ; }
function ( error , conn ) { if ( error ) { that . error ( 500 , error ) ; } callback ( ) ; }
function ( error , collection ) { if ( error ) { that . error ( 500 , error ) ; } that . collection = collection ; callback ( ) ; }
function ( error , item ) { if ( error ) { that . error ( 500 , error ) ; } if ( item == null ) { callback ( items ) ; } items . push ( new that ( item ) ) ; }
function ( error , item ) { if ( error ) { that . error ( 500 , error ) ; } callback ( item ? new that ( item ) : null ) ; }
function ( error ) { if ( error ) { that . error ( 500 , error ) ; } callback ( ) ; }
function ( code , message ) { mode . error . throw ( { code : code , message : 'Mongo: ' + message } ) ; }
function ( error , item ) { if ( error ) { that . error ( 500 , error ) ; } that . update ( item ) ; callback ( ) ; }
function ( code , message ) { this . static . error ( code , message ) ; }
function ( ) { expect ( testSystem1 . nearestStops ( [ "27" , "85" ] , 2 ) . length ) . toEqual ( 2 ) ; }
function ( ) { this . addWindow . close ( ) ; this . window . setLoading ( false ) ; this . controller . loadGroups ( [ values [ 'group' ] ] ) ; }
function ( repr ) { var obj = new Annotation ( repr , this ) ; obj . display ( ) ; this . annotations . push ( obj ) ; return obj ; }
function ( event ) { this . __setCurrentFocus ( event . data . focusIndex ) ; }
function ( ) { if ( new Date ( ) - last > 20000 ) { sendMessage ( [ 'done_timeout' ] ) ; } }
function ( ) { var undefClass = $ ( ".ui-page" ) . find ( "[class*='undefined']" ) ; ok ( undefClass . length == 0 ) ; start ( ) ; }
function ( $ ) { module ( "kitchen sink class test" ) ; asyncTest ( "Nothing on the page has a class that contains `undefined`." , function ( ) { var undefClass = $ ( ".ui-page" ) . find ( "[class*='undefined']" ) ; ok ( undefClass . length == 0 ) ; start ( ) ; } ) ; }
function ( ) { ok ( ! $ . support . orientation , "orientation is not supported" ) ; start ( ) ; }
function ( ) { my . ee . emit ( 'retry' , c + 1 , err ) ; retry ( c + 1 ) ; }
function ( count , err ) { console . log ( 'retry: %d %s' , count , JSON . stringify ( err ) ) ; }
function ( value , fcInternal ) { try { this . value = value ; this . fcInternal = fcInternal ; this . id = fcModel . JsValue . LAST_ID ++ ; } catch ( e ) { alert ( "JsValue - error when creating: " + e ) ; } }
function sayA ( ) { alert ( 'A' ) ; return false ; }
function sayB ( ) { alert ( 'B' ) ; return false ; }
function ( dest ) { util . puts ( "building..." ) ; dest = dest || prefix + ".js" ; build . build ( dest ) ; util . puts ( "> " + dest ) ; }
function ( ) { this . InputManager . init ( ) ; }
function ( cb ) { if ( window . name == 'auth_with_primary' ) window . location = 'https://login.persona.org/authenticate_with_primary#complete' ; else window . location = 'https://login.persona.org/sign_in#AUTH_RETURN' ; }
function mkdir_p ( p ) { if ( ! existsSync ( p ) ) { mkdir_p ( path . dirname ( p ) ) ; fs . mkdirSync ( p , "0755" ) ; } }
function ( ) { testActionStartsModule ( "doConfirmUser" , { email : TEST_EMAIL , siteName : "Unit Test Site" } , "check_registration" ) ; }
function ( ) { testActionStartsModule ( "doConfirmEmail" , { email : TEST_EMAIL , siteName : "Unit Test Site" } , "check_registration" ) ; }
function ( ) { equal ( $ ( "#error .moreInfo" ) . is ( ":visible" ) , true , "extra info is visible after click" ) ; start ( ) ; }
function ( api ) { describeOperation ( api , wsapis [ api ] ) ; }
function ( newStatus ) { failure = null ; status = newStatus ; if ( newStatus === Provisioning . NOT_AUTHENTICATED ) { failure = { code : "primaryError" , msg : "user is not authenticated as target user" } ; } }
function ( e ) { if ( _this . isInFullScreen ( ) ) { updateIframeSize ( ) ; } }
function ( url ) { url = url . replace ( /jamendo\.com\/(?:\w\w\/)?(album|list|track)\/([^\/]+)(\/.*)?$/ , "jamendo.com/$1/$2" ) ; url = url . replace ( /img\.jamendo\.com\/albums\/(\d+)\/covers\/\d+\.\d+\.jpg/ , "www.jamendo.com/album/$1/" ) ; url = url . replace ( /jamendo\.com\/\w\w\/artist\// , "jamendo.com/artist/" ) ; return url ; }
function fmt_table_short ( table ) { var res = '' ; for ( k in table ) { res += k + '=' + table [ k ] + '<br/>' ; } return res ; }
function ( ) { var name = esc ( this . params [ 'name' ] ) ; render ( { 'connection' : '/connections/' + name , 'channels' : '/connections/' + name + '/channels' } , 'connection' , '#/connections' ) ; }
function ( ) { if ( sync_post ( this , '/bindings/:vhost/e/:source/:destination_type/:destination' ) ) update ( ) ; return false ; }
function ( ) { if ( sync_delete ( this , '/bindings/:vhost/e/:source/:destination_type/:destination/:properties_key' ) ) update ( ) ; return false ; }
function set_timer_interval ( interval ) { timer_interval = interval ; reset_timer ( ) ; }
function ( html ) { replace_content ( 'main' , html ) ; postprocess ( ) ; postprocess_partial ( ) ; reset_timer ( ) ; }
function ( m ) { var str = esc ( params [ m . substring ( 1 ) ] ) ; if ( str == '' ) { throw ( m . substring ( 1 ) + " is required" ) ; } return str ; }
function resolve ( p , name ) { var resolved = path . resolve ( p , name ) ; if ( fs . existsSync ( resolved ) ) { return resolved ; } return resolveNodeModule ( path . resolve ( p ) , name ) ; }
function createFieldBoolean ( name , minOccurs ) { var field = createInput ( 'checkbox' , name ) ; return field ; }
function ( text ) { $ ( mynotes . Constants . PopupMessage ) . html ( text ) . addClass ( 'alert alert-error' ) . fadeIn ( 'slow' ) ; }
function ( ) { $ ( mynotes . Constants . PopupMessage ) . html ( "" ) . removeClass ( 'alert alert-error' ) . fadeOut ( 'slow' ) ; }
function ( data ) { tryLoad ( data , [ 'name' , 'definition' ] , this ) ; }
function ( event ) { this . centerMenuItems ( ) ; if ( this . visible ) { this . setDimensions ( ) ; } }
function ( event ) { this . centerMenuItems ( ) ; if ( this . visible ) { this . setDimensions ( ) ; } }
function ( ) { this . parent ( ) ; this . contentElement . addClass ( 'window-content' ) ; this . contentWrapperElement . addClass ( 'window-content-wrapper' ) ; }
function ( ) { window . removeEvent ( 'orientationchange' , this . bound ( '_onOrientationChange' ) ) ; this . iscroll . destroy ( ) ; this . iscroll = null ; this . parent ( ) ; return this ; }
function ( ) { this . iscroll . refresh ( ) ; return this ; }
function ( ) { return { x : - this . iscroll . x , y : - this . iscroll . y } ; }
function ( ) { return this . contentWrapperElement . getSize ( ) ; }
function ( ) { return this . contentWrapperElement . getScrollSize ( ) ; }
function ( ) { this . parent ( ) ; this . contentElement . addClass ( 'window-content' ) ; this . contentWrapperElement . addClass ( 'window-content-wrapper' ) ; }
function ( v , k ) { Ti . App . Properties [ 'set' + v ] ( prefix + k , self . model . get ( k ) ) ; }
function ( ) { if ( this . $element . parents ( '.collection-item' ) . length !== 0 ) { this . $element . parent ( '.collection-item' ) . remove ( ) ; } }
function ( ) { return Modernizr . testStyles ( "#modernizr div {width:100px} #modernizr :last-child{width:200px;display:block}" , function ( elem ) { return elem . lastChild . offsetWidth > elem . firstChild . offsetWidth ; } , 2 ) ; }
function ( doc , cdt , cdn ) { cur_frm . toggle_enable ( 'dt' , doc . __islocal ) cur_frm . cscript . dt ( doc , cdt , cdn ) ; }
function ( n , txt ) { var df = wn . meta . get_docfield ( cur_frm . doctype , n , cur_frm . docname ) ; if ( df ) df . options = txt ; refresh_field ( n ) ; }
function ( n , level ) { var df = wn . meta . get_docfield ( cur_frm . doctype , n , cur_frm . docname ) ; if ( df ) df . permlevel = level ; refresh_field ( n ) ; }
function ( save_action , onsave , onerr ) { save_doclist ( this . doctype , this . docname , save_action , onsave , onerr ) ; }
function ( ) { $ ( "#pick_date" ) . datetimepicker ( { dateFormat : 'yy-mm-dd ' , timeFormat : 'hh:mm:ss tt' , showMinute : false , stepHour : 1 , ampm : true } ) ; ; }
function ( job , next ) { spy2 . should . have . not . been . called ( ) ; next ( 'first try is a fail' ) ; }
function ( job , next ) { spy1 . should . have . been . called . once ; process . nextTick ( next ) ; }
function ( ) { if ( window . debug ) console . log ( 'redraw' , this . attr ( 'class' ) , this . get ( 0 ) ) ; this . layout ( ) ; }
function ( ) { if ( window . debug ) console . log ( 'redraw' , this . attr ( 'class' ) , this . get ( 0 ) ) ; this . layout ( ) ; }
function ( ) { if ( window . debug ) console . log ( 'redraw' , this . attr ( 'class' ) , this . get ( 0 ) ) ; this . layout ( { resize : false } ) ; }
function ( value ) { return typeof value !== 'undefined' ; }
function ( value ) { return util . isNumber ( value ) || util . isDate ( value ) ; }
function ( dir ) { var stat ; return fs . existsSync ( dir ) && ( stat = fs . statSync ( dir ) ) && stat . isDirectory ( ) ; }
function ( event , data ) { this . events . emit ( event , data , client ) ; }
function ( p ) { return p . paramName + ": " + p . paramValue . replace ( /'/g , "&quot;" ) ; }
function ( ) { new SNAKE . Game ( { debugStep : true , debugPrint : true } ) ; }
function ( e ) { if ( e . keyCode == 13 ) { performSearch ( ) ; e . preventDefault ( ) ; } }
function ( e , res , body ) { assert . ok ( res || e ) ; assert . equal ( ( res || e ) . headers . status || ( res || e ) . statusCode , code ) ; }
function makeName ( kind ) { if ( idNo === Number . MAX_VALUE ) { idNo = 0 ; } return "__" + kind + ( idNo ++ ) ; }
function setInsert ( a ) { if ( ! this . has ( a ) ) { this . push ( a ) ; } return this ; }
function pqPopMax ( keyOf ) { var i = this . pqMax ( keyOf ) ; if ( i < 0 ) { return null ; } var a = this [ i ] ; this . splice ( i , 1 ) ; return a ; }
function delayed ( ) { if ( ! execAsap ) { func . apply ( context , args ) ; } timeout = null ; }
function onPanning ( touch ) { lastMove = + new Date ( ) ; oldPoint = nowPoint ; nowPoint = { x : touch . clientX , y : touch . clientY } ; }
function ( data ) { $scope . name = data . name ; }
function ( data ) { $scope . time = data . time ; }
function ( e , triggered ) { $ . mobile . _handleHashChange ( path . parseUrl ( location . href ) . hash ) ; }
function ( ) { switchContext ( $ ( this ) . attr ( 'data-requestId' ) , 'Correlation' ) ; return false ; }
function ( ) { elements . title . find ( '.glimpse-url .loading' ) . fadeOut ( ) ; }
function ( ) { switchContext ( $ ( this ) . attr ( 'data-requestId' ) , 'Correlation' ) ; return false ; }
function ( ) { elements . title . find ( '.glimpse-url .loading' ) . fadeOut ( ) ; }
function ( ) { if ( fs . existsSync ( lock_file ) ) fs . unlinkSync ( lock_file ) ; if ( irc . debug ) console . log ( 'Quitting . . .' ) ; callback ( ) ; process . exit ( 0 ) ; }
function ( file ) { var exists = fs . existsSync ( file ) if ( ! exists ) { var sample_file = './' + path . basename ( file ) fs . writeFileSync ( file , fs . readFileSync ( sample_file ) ) review_required = true } }
function ( fn ) { return setTimeout ( fn , 16 ) }
function ( e ) { if ( self . lastmouseup ) { self . lastmouseup = false ; return self . cancelEvent ( e ) ; } else { return true ; } }
function ( py ) { self . stop ( ) ; self . lasttime = self . time ( ) ; self . speedy = 0 ; self . lasty = py ; self . lastscrolly = - 1 ; }
function ( ) { if ( self . timer ) { clearTimeout ( self . timer ) ; self . timer = 0 ; self . lastscrolly = - 1 ; } }
function ( data ) { _callback ( e , data , tags , options ) ; }
function ( data ) { $ ( "#build-output" ) . empty ( ) ; readerHandler ( data , projectCode , testType , pageUrl ) ; if ( callSuccessEvent != undefined && ! isBlank ( callSuccessEvent ) ) { successEvent ( pageUrl , data ) ; } }
function ( data ) { $ ( "#sqlqueryresults" ) . html ( data . sql_query ? data . sql_query : data ) . trigger ( 'makegrid' ) ; PMA_init_slider ( ) ; PMA_ajaxRemoveMessage ( $msgbox ) ; }
function ( ) { this . options . bubbles . at ( 0 ) . btapp . get ( 'torrent' ) . off ( 'add' , this . on_torrent , this ) ; this . torrent ( ) ; }
function ( ) { $ ( '.bubble_container' ) . addClass ( 'above_welcome_overlay' ) ; this . $el . html ( this . template ( { } ) ) ; setTimeout ( _ . bind ( this . done , this ) , 5000 ) ; return this ; }
function ( params ) { this . options = cloner . clone ( params ) ; }
function ( ) { parent . call ( this , cloner . clone ( protoProperties ) , cloner . clone ( staticProperties ) ) ; }
function ( ) { this . fieldset = $ ( '\       <fieldset id="attachment_fields" class="multiple_file_uploads">\         <div class="file_upload">\           <label for="edition_edition_attachments_attributes_0_attachment_attributes_title">Title</label>\           <input id="edition_edition_attachments_attributes_0_attachment_attributes_title"\ name="edition[edition_attachments_attributes][0][attachment_attributes][title]" size="30" type="text" value="something" />\           <div class="field_with_errors">\             <label for="edition_edition_attachments_attributes_0_attachment_attributes_file">File</label>\           </div>\           <div class="field_with_errors">\             <input id="edition_edition_attachments_attributes_0_attachment_attributes_file"\ name="edition[edition_attachments_attributes][0][attachment_attributes][file]" type="file" />\           </div>\           <input id="edition_edition_attachments_attributes_0_attachment_attributes_file_cache"\ name="edition[edition_attachments_attributes][0][attachment_attributes][file_cache]" type="hidden" />\         </div>\       </fieldset>\     ' ) ; $ ( '#qunit-fixture' ) . append ( this . fieldset ) ; this . fieldset . enableMultipleFileUploads ( ) ; }
function ( ) { compact . middleware ( ) ; }
function ( ) { compact . middleware ( [ ] ) . should . be . a ( 'function' ) ; }
function ( ) { done ( ) ; }
function ( helper ) { helper . compactJs ( ) . should . eql ( [ '/global.js' ] ) ; doneCount += 1 ; if ( doneCount === 2 ) { done ( ) ; } }
function ( ) { fs . unlinkSync ( srcPath + '/tmp.js' ) ; compactDebug . middleware ( [ 'global' ] ) ( req , res , function ( ) { done ( ) ; } ) ; }
function ( err , results ) { if ( err ) return fn ( err ) ; if ( query . id ) return fn ( null , results [ 0 ] ) ; fn ( null , results ) ; }
function node ( m ) { var reply = m . user + ': Please ctrl-f or cmd-f through the node docs at' + ' http://nodejs.org/docs/latest/api/all.html' m . say ( reply ) return reply }
function ( name , data ) { if ( ! listeners [ name ] ) { return ; } for ( var l in listeners [ name ] ) { listeners [ name ] [ l ] ( data ) ; } return exports ; }
function ( ) { this . eventhandler . loop ( ) ; for ( var i in this . objects ) { this . objects [ i ] . tick ( ) ; } }
function ( err , wikipage ) { console . log ( wikipage ) ; return res . send ( wikipage ) ; }
function ( error , collection ) { if ( error ) { that . error ( error ) ; } that . collection = collection ; callback ( ) ; }
function ( error , item ) { if ( error ) { that . error ( error ) ; } if ( item == null ) { callback ( items ) ; } items . push ( new that ( item ) ) ; }
function ( error , item ) { if ( error ) { that . error ( error ) ; } callback ( new that ( item ) ) ; }
function ( error , result ) { if ( error ) { that . error ( error ) ; } callback ( result ) ; }
function ( message ) { mode . error . throw ( { code : 500 , message : 'Mongo: ' + message } ) ; }
function ( error , item ) { if ( error ) { that . error ( error ) ; } that . update ( item ) ; callback ( ) ; }
function ( content ) { content . height ( content . height ( ) ) ; content . empty ( ) . css ( { 'background' : 'url(' + this . options . loader + ') no-repeat center top' , 'min-height' : 70 } ) ; }
function getWatchRowIndex ( row ) { var index = - 1 ; for ( ; row ; row = row . previousSibling ) { if ( Css . hasClass ( row , "watchRow" ) ) ++ index ; } return index ; }
function ( e ) { var url = $ ( this ) . attr ( 'href' ) ; if ( ! url || url == '#' || url . match ( 'http' ) ) return ; e . preventDefault ( ) ; loadURL ( url ) ; }
function ( data ) { $ ( '#content' ) . html ( data ) ; window . location . hash = url ; }
function ( data ) { if ( data . pass == masterpass ) { musicqueue . flushQueue ( ) ; clearTimeout ( dospotify . timeoutId ) ; io . sockets . emit ( 're_init' ) ; } }
function ( e ) { self . fireEvent ( 'itemSelected' , { name : e . rowData . title , } ) ; }
function ( e ) { var MapsWindow = require ( 'ui/common/maps/campusMap/MapsWindow' ) ; var mapsWindow = new MapsWindow ( ) ; navGroup . open ( mapsWindow , { animated : true } ) ; }
function ( ) { if ( settings . get ( 'debug' ) ) { window . vibe = self } if ( modal . hasDialogue ( throbberID ) ) { modal . close ( throbberID ) } }
function ( input ) { if ( input . debug . checked != self . get ( 'debug' ) ) { self . set ( 'debug' , input . debug . checked ) location . reload ( true ) } }
function ( ) { current = conversion ( buckets [ bucketIndex ] [ itemIndex ] ) ; findNext ( ) ; return current ; }
function ( ) { if ( current !== undef ) { removeItem ( current ) ; -- itemIndex ; findNext ( ) ; } else { return null ; } }
function ( data , status ) { if ( typeof data != "object" ) { location = location . protocol + "//" + location . host + "?returnUrl=" + location . pathname ; return ; } liToRemove . remove ( ) ; }
function ( data ) { if ( typeof data != "object" ) { location = location . protocol + "//" + location . host + "?returnUrl=" + location . pathname ; return ; } $ ( "#token-label" ) . text ( data . Token ) ; }
function ( ) { self . remove ( ) ; }
function setFileViewFocus ( fileSelectionFocus ) { if ( fileSelectionFocus !== PROJECT_MANAGER && fileSelectionFocus !== WORKING_SET_VIEW ) { throw new Error ( "Bad parameter passed to FileViewController.setFileViewFocus" ) ; } _fileSelectionFocus = fileSelectionFocus ; $ ( exports ) . triggerHandler ( "fileViewFocusChange" ) ; }
function ( path ) { var firstdot = getPathSegmentImpl ( null , path , 0 ) ; return firstdot === path . length ? "" : path . substring ( firstdot + 1 ) ; }
function ( path ) { var lastdot = lastDotIndex ( path ) ; return lastdot === - 1 ? "" : path . substring ( 0 , lastdot ) ; }
function ( prefix , suffix ) { prefix = prefix || "" ; suffix = suffix || "" ; return ! prefix ? suffix : ( ! suffix ? prefix : prefix + "." + suffix ) ; }
function ( root , segment , path ) { return path === "path3" ? fluid . NO_VALUE : undefined ; }
function ( ) { testOneStructure ( mapperTests ) ; }
function ( curr , total ) { if ( hasTimedOut ) return ; debug ( 'task "%s" at progress %d/%d' , task . get ( 'name' ) , curr , total ) ; task . emit ( 'progress' , job , curr , total ) ; }
function ( job , next ) { spy2 . should . have . not . been . called ( ) ; next ( 'first try is a fail' ) ; }
function ( job , next ) { spy1 . should . have . been . called . once ; process . nextTick ( next ) ; }
function ( ) { if ( common . isBlankOrUndef ( this . fields . end ) ) { this . fields . end = this . inferEndTime_ ( this . fields . start ) ; } }
function ( msg ) { if ( window . console ) { window . console . log ( msg ) ; } else { alert ( msg ) ; } }
function ( num ) { return ( num . toString ( ) . length == 1 ) ? '0' + num . toString ( ) : num . toString ( ) ; }
function ( x ) { return ( typeof x == 'undefined' ) || ( x . toString ( ) === '' ) ; }
function ( str , numChars ) { if ( str && str . length > numChars ) { var op = str . substring ( 0 , numChars - 2 ) + " \u2026" ; return op ; } return str ; }
function ( event ) { return [ '<a style="float: right;" href="' , event . fields . gcal_url , '" title="' , chrome . i18n . getMessage ( 'add_to_google_calendar' ) , '" target="_blank"><img src="' , common . ADD_TO_CALENDAR_BUTTON_URL , '"/></a>' ] . join ( '' ) ; }
function ( e ) { e . preventDefault ( ) ; $ ( '.button.dropdown' ) . not ( this ) . children ( 'ul' ) . removeClass ( 'show-dropdown' ) ; $ ( this ) . children ( 'ul' ) . toggleClass ( 'show-dropdown' ) ; }
function ( ) { $ ( '.buttons' ) . removeClass ( 'disabled' ) ; $ ( '#overlay' ) . fadeTo ( 'fast' , 0 ) ; }
function ( ) { updateDashboard ( ) ; }
function updateMosaic ( ) { $ . getScript ( '/dashboard/mosaic.js' ) ; setTimeout ( updateMosaic , 30000 ) ; }
function ( ) { updateMosaic ( ) ; }
function ( string , getter , setter , object_this ) { this . _getter = getter ; this . _setter = setter ; this . _object_this = object_this ; this . length = 0 ; this . value = "" ; this . DOMStringCollection_check_currentValue_and_Token ( "1" ) ; }
function ( token ) { this . DOMStringCollection_check_currentValue_and_Token ( token ) ; return _String_contains . call ( " " + this . value + " " , " " + token + " " ) ; }
function ( index ) { this . DOMStringCollection_check_currentValue_and_Token ( "1" ) ; return this [ index ] || null ; }
function ( data , fn , req , res ) { fn ( null , value ) ; }
function getTimeZone ( ) { var timezone = new Date ( ) . getTimezoneOffset ( ) ; timezone = Math . floor ( timezone / 60 ) ; return timezone ; }
function ( ) { sys . log ( "Centrum24: logging out" ) ; this . tab . document ( ) . findAllContaining ( "Logout" ) [ 0 ] . click ( ) ; this . tab . wait ( ) ; }
function ( callFrames , event ) { if ( this . traceOnPause ) { var trace = new Trace . Trace ( callFrames , event ) ; this . trace . push ( trace ) ; } }
function _onConnect ( ) { Inspector . Debugger . enable ( ) ; Inspector . DOMDebugger . setEventListenerBreakpoint ( "click" ) ; if ( ! LiveDevelopment . agents . script ) { ScriptAgent . load ( ) ; } }
function Trace ( callFrames , event ) { this . callFrames = callFrames ; this . event = event ; this . date = new Date ( ) ; this . children = [ ] ; this . _relateToTrace ( _lastTrace ) ; _lastTrace = this ; }
function ( ) { return this . imagesLoaded && ( ! this . options . safeLoad || m . windowLoaded ) ; }
function handleupload ( x ) { if ( x == "unexpectedrequest" ) alert ( "Something went wrong while uploading Data" ) ; else if ( x == "mysqlfailed" ) alert ( "Mysql Failed with Error" ) ; else if ( x == "sucess" ) alert ( "Data sucessfully Updated" ) ; }
function ( ) { this . recalculate_total_count ( ) ; this . countdiv . innerHTML = this . totalcount . toString ( ) ; }
function ( selector , view ) { if ( view ) { return this . setView ( selector , view , true ) ; } return this . setView ( selector , true ) ; }
function ( view ) { this . insertView ( name , view ) ; }
function ( ) { navigator . notification . alert ( "Your position cannot be determined, the korenmarkt is used as your location now." , null , "No geolocation" , "OK" ) ; }
function ( ) { if ( processing_mail ) { return self . try_deliver_host ( mx ) ; } }
function ( response ) { this . lognotice ( "delivered file=" + this . filename + ' response="' + response + '"' ) ; delivery_concurrency -- ; plugins . run_hooks ( "delivered" , this , response ) ; }
function test ( ) { waitForExplicitFinish ( ) ; setPermission ( testPageURL1 , "indexedDB" ) ; setPermission ( testPageURL2 , "indexedDB" ) ; executeSoon ( test1 ) ; }
function test3 ( ) { Components . classes [ "@mozilla.org/privatebrowsing;1" ] . getService ( Components . interfaces . nsIPrivateBrowsingService ) . removeDataFromDomain ( domains [ 1 ] ) ; setPermission ( testPageURL4 , "indexedDB" ) ; executeSoon ( test4 ) ; }
function ( limitedQuota ) { SimpleTest . waitForExplicitFinish ( ) ; allowIndexedDB ( ) ; if ( limitedQuota ) { denyUnlimitedQuota ( ) ; } else { allowUnlimitedQuota ( ) ; } clearAllDatabases ( function ( ) { testGenerator . next ( ) ; } ) ; }
function ( ) { testGenerator . close ( ) ; SimpleTest . finish ( ) ; }
function finishTest ( ) { resetUnlimitedQuota ( ) ; resetIndexedDB ( ) ; SimpleTest . executeSoon ( function ( ) { testGenerator . close ( ) ; SimpleTest . finish ( ) ; } ) ; }
function allowIndexedDB ( url ) { addPermission ( "indexedDB" , true , url ) ; }
function test ( ) { waitForExplicitFinish ( ) ; removePermission ( testPageURL , "indexedDB" ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; removePermission ( testPageURL , "indexedDB" ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; setPermission ( testPageURL , "indexedDB" ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL , "indexedDB" ) ; removePermission ( testPageURL , "indexedDB-unlimited" ) ; Services . prefs . setIntPref ( "dom.indexedDB.warningQuota" , 2 ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL , "indexedDB" ) ; removePermission ( testPageURL , "indexedDB-unlimited" ) ; Services . prefs . setIntPref ( "dom.indexedDB.warningQuota" , 2 ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL , "indexedDB" ) ; removePermission ( testPageURL , "indexedDB-unlimited" ) ; Services . prefs . setIntPref ( "dom.indexedDB.warningQuota" , 2 ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL , "indexedDB" ) ; removePermission ( testPageURL , "indexedDB-unlimited" ) ; Services . prefs . setIntPref ( "dom.indexedDB.warningQuota" , 2 ) ; executeSoon ( test1 ) ; }
function ( inSender , inEvent ) { inEvent . originator . setActive ( false ) ; return true ; }
function ( ) { var removedUISourceCodes = this . _releasedUISourceCodes ( ) ; this . _uiSourceCodeForScriptId = { } ; this . _scriptForUISourceCode = new Map ( ) ; this . _loadSnippets ( ) ; }
function ( storage , serializedSnippet ) { return new WebInspector . Snippet ( storage , serializedSnippet . id , serializedSnippet . name , serializedSnippet . content ) ; }
function isAccessible ( ) { var atab = opera . extension . tabs . getFocused ( ) ; return ! ! atab && ( typeof atab . port !== 'undefined' ? ! ! atab . port : true ) ; }
function enableButton ( e ) { button . disabled = ! isAccessible ( ) ; }
function ( hook_name , args , cb ) { args . content = args . content + require ( 'ep_etherpad-lite/node/eejs/' ) . require ( "ep_syntaxhighlighting/templates/syntaxHighlightingStyles.ejs" ) ; }
function ( ) { Utils . debug ( "Successfully authenticated user with their corpus server." ) ; }
function ( node , event ) { console . log ( 'container click handling' , Cards . _suppressClick , event . button ) ; if ( Cards . _suppressClick ) { Cards . _suppressClick = false ; return ; } clickFunc ( node , event ) ; }
function ( node , event ) { if ( event . button === 0 ) { console . log ( 'context from 0 observed, suppressing' ) ; Cards . _suppressClick = true ; } else event . preventDefault ( ) ; return holdFunc ( node , event ) ; }
function ( res ) { done ( assert . equal ( res , 'OK' , 'Values do not match.' ) ) ; }
function ( done ) { client . scard ( SET_KEY , function ( cnt ) { done ( assert . equal ( cnt , ADDS_COUNT , 'Count is not correct.' ) ) ; } ) ; }
function ( i ) { iColumn = aiColumns [ i ] ; this . style . width = that . s . aiInnerWidths [ iColumn ] + "px" ; }
function ( i ) { iColumn = aiColumns [ i ] ; this . style . width = that . s . aiInnerWidths [ iColumn ] + "px" ; }
function ( ) { if ( Users . remove ( data . name ) ) { socket . broadcast . emit ( 'count-update' , { count : Users . size } ) ; } }
function ( isMuted ) { this . muted = isMuted ; return SoundJS . tellAllInstances ( "mute" , null , isMuted ) ; }
function ( m ) { cLog ( "Successfully sent AJAX request from getMovies" ) ; PMM . Movies . processMovies ( m , callback ) ; }
function ( ) { this . hide ( ) . $element . off ( '.' + this . type ) . removeData ( this . type ) }
function ( ) { this . hide ( ) . $element . off ( '.' + this . type ) . removeData ( this . type ) }
function ( e ) { if ( ! this . enabled ) return ; this . clearPlaceholder ( ) ; this . open ( ) ; this . focusSearch ( ) ; e . preventDefault ( ) ; }
function ( msg , desc ) { var err = new Error ( msg ) ; err . type = 'TransportError' ; err . description = desc ; err . transport = this . name ; this . emit ( 'error' , err ) ; return this ; }
function RFrameStream__pause ( encoding ) { if ( RFrameStream . VERBOSE ) log ( "RFrameStream__pause: called" ) this . frap . pause ( ) }
function RFrameStream__resume ( encoding ) { if ( RFrameStream . VERBOSE ) log ( "RFrameStream__resume: called" ) this . frap . resume ( ) }
function ( errorCode , notification ) { debug ( "Raising error:" , errorCode , notification ) ; if ( typeof this . options . errorCallback == 'function' ) { this . options . errorCallback ( errorCode , notification ) ; } }
function ( ev ) { $ ( '.load-load' ) . show ( ) ; var colorChange = $ ( '#getcolor' ) . val ( ) ; $ ( '#color' ) . val ( colorChange ) ; }
function ( callback ) { __meteor_bootstrap__ . startup_hooks . push ( callback ) ; }
function ( ) { if ( xhr . readyState === 4 ) { equal ( xhr . responseText , js , "generatePopcornString generated expected Popcorn JS." ) ; start ( ) ; startTests ( ) ; } }
function ( ) { Ext . widget ( 'chooseexaminerswindow' , { title : gettext ( 'Set examiners' ) , itemId : 'setExaminersWindow' , panelConfig : { includeRemove : true , sourceStore : this . manageStudentsController . getRelatedExaminersRoStore ( ) } } ) . show ( ) ; }
function ( ) { console . error ( "onShown never fired" , arguments ) ; }
function onLoad ( ) { console . log ( "purplePanel load event" ) ; setTimeout ( loadJSAsync ) ; }
function ( ) { console . log ( '	LAYER LIST enter' ) this . drawDefaultControls ( ) ; this . delegateEvents ( ) ; this . onLayerEnter ( ) ; }
function ( ) { console . log ( '	LAYER LIST EXIT' ) this . undelegateEvents ( ) ; this . $el . find ( '#controls' ) . empty ( ) ; this . onLayerExit ( ) ; }
function ( layerModel ) { layerModel . visual . remove ( ) ; layerModel . controls . remove ( ) ; layerModel . trigger ( 'editor_layerExit' ) ; }
function ( ) { this . generateRandomPosition ( ) ; }
function ( ) { notification = new cdb . ui . common . Notification ( { el : $ ( '<div>' ) , template : 'template' } ) ; }
function ( ) { notification = new cdb . ui . common . Notification ( { el : $ ( '<div>' ) , timeout : 250 , template : 'template' } ) ; notification . open ( ) ; }
function ( ) { _ . defaults ( this . options , this . default_options ) ; this . template_base = this . options . template_base ? _ . template ( this . options . template_base ) : cdb . templates . getTemplate ( 'common/dialog' ) ; }
function ( dest , options ) { this . dest = dest this . destOptions = options stream . Stream . prototype . pipe . call ( this , dest , options ) }
function scrollTo ( $el ) { var top = $el . offset ( ) . top ; $ ( "html:not(:animated),body:not(:animated)" ) . animate ( { scrollTop : top - 20 } , 100 ) ; }
function ( data ) { wycFun . affirmBtnEnter ( data , 'ok' , [ '删除成功' , '删除失败' ] , 150 , 112 ) ; }
function ( ) { clearTimeout ( wycVal . timeNum ) ; $ ( this ) . dialog ( "close" ) ; }
function ( data ) { wycFun . affirmBtnEnter ( data , 'ok' , [ '格式化成功' , '格式化失败' ] , 150 , 112 ) ; }
function ( data ) { wycFun . affirmBtnEnter ( data , 'ok' , [ '创建成功' , '创建失败' ] , 150 , 112 ) ; }
function ( ) { $ ( "#dialog-delete" ) . dialog ( "open" ) ; }
function ( ) { $ ( ".j_diskPartCreate" ) . dialog ( "open" ) ; }
function ( e ) { e . preventDefault ( ) ; if ( ! options . inline ) { path_selector . hide ( ) ; } $ ( document ) . trigger ( options . button_event , [ get_selected ( ) ] ) ; }
function ( item ) { item = $ ( item ) ; to_ret . push ( { id : item . data ( 'node_id' ) , text : item . data ( 'node_name' ) , next_id : item . data ( 'next_node_id' ) } ) ; }
function ( monuments ) { $ ( '#results' ) . data ( 'monuments' , monuments ) ; mapFocusNeeded = true ; showMonumentsMap ( monuments , { lat : pos . coords . latitude , lon : pos . coords . longitude } , 10 ) ; }
function ( response ) { console . log ( response ) ; }
function ( data ) { firstPlay = true ; }
function ( ) { $ ( '#howto' ) . hide ( ) ; addInfo ( 'Du hast ein Rennen gestartet!' ) ; window . scrollTo ( 0 , 0 ) ; if ( firstPlay ) { postToWall ( "hat das LAMBDA Outrun-Edition Gewinnspiel gestartet. Gewinne auch Karten für unsere nächste Party: http://www.facebook.com/events/326641780751708/" ) ; attendEvent ( ) ; firstPlay = false ; } }
function ( headers ) { var h = '' ; for ( n in headers ) h += '<tr><th><code>' + n + ':</code></th><td><code>' + headers [ n ] + '</code></td></tr>' ; return h ; }
function ( item , index ) { ENME . params [ dojo . attr ( item , "name" ) ] = dojo . attr ( item , "value" ) ; }
function ( ) { widget . _autoSave ( ) ; }
function getjQueryObjectBeforeErrorMessage ( inputjQueryObject ) { if ( options [ 'append_to_control_group' ] ) { return inputjQueryObject . closest ( 'div.control-group' ) ; } if ( inputjQueryObject . next ( ) . hasClass ( "add-on" ) ) { return inputjQueryObject . next ( ) ; } return inputjQueryObject ; }
function ( ) { console . log ( 'Syncing' ) ; this . getidentifierstype ( onlineStore . getAt ( 0 ) . getData ( ) . uuid ) offlineStore . removeAll ( ) ; offlineStore . sync ( ) ; this . doDownload ( ) ; }
function init ( ) { canvas = document . getElementById ( "testCanvas" ) ; stage = new Stage ( canvas ) ; stage . addChild ( gameContainer ) ; gameContainer . alpha = 0.1 ; start ( ) ; }
function ( ) { return window . game . refresh_canvas_position ( ) ; }
function ( ) { _ . bindAll ( this , "index" , "loadViews" ) ; this . pizza = new httpizza . PizzaPersistenceHelper ( ) . getPizzaSession ( ) ; this . ingredients = new httpizza . Ingredients ( ) ; }
function ( canvas ) { if ( Modernizr . canvas ) { return canvas . getContext ( '2d' ) ; } else { alert ( "Your browser doesn't support the canvas api." ) ; throw "Browser doesn't support canvas api." ; } }
function ( canvas , pizza ) { that . clearCanvas ( canvas ) ; that . cheeseContext = that . cheeseContext || that . getContext ( canvas ) ; drawImagePattern ( that . cheeseContext , pizza . get ( 'cheeses' ) ) ; }
function ( canvas , pizza ) { that . clearCanvas ( canvas ) ; that . toppingsContext = that . toppingsContext || that . getContext ( canvas ) ; drawImagePattern ( that . toppingsContext , pizza . get ( 'toppings' ) ) ; }
function ( pizza ) { var json = JSON . stringify ( pizza . toJSON ( ) ) ; that . setSessionStorage ( 'pizza' , json ) ; }
function ( ) { var json = that . getSessionStorage ( 'pizza' ) ; return new httpizza . Pizza ( JSON . parse ( json ) ) ; }
function ( ) { $ ( this . el ) . html ( this . template ( ) ) ; this . renderCrust ( ) ; this . renderSauce ( ) ; this . renderCheese ( ) ; this . renderToppings ( ) ; }
function ( rez ) { return '//maps.google.' + rez [ 1 ] + '/' + rez [ 3 ] + '' + rez [ 4 ] + '&output=' + ( rez [ 4 ] . indexOf ( 'layer=c' ) > 0 ? 'svembed' : 'embed' ) ; }
function finishHandler ( originalValue , replacementString ) { this . _sidebarPane . applyStyleText ( this . _sidebarPane . nameElement . textContent + ": " + this . _sidebarPane . valueElement . textContent , false , false , false ) ; }
function ( ctor ) { return ctor ; }
function generateRandomIngredients ( ) { for ( var i = 0 ; i < spawns . length ; i ++ ) { spawns [ i ] = ingredients [ Math . ceil ( Math . random ( ) * 6 ) ] ; } }
function ( resp ) { Y . log ( 'rpc failure!' , 'warn' , NAME ) ; adapter . error ( resp . html ) ; }
function closeInstructionBox ( ) { if ( dojo . byId ( 'instructionDiv' ) ) { dojo . addClass ( 'instructionOuterDiv' , 'hidediv' ) ; dojo . addClass ( 'instructionDiv' , 'hidediv' ) ; dojo . byId ( 'mentor_field_box' ) . style . position = 'relative' ; } }
function ( ctx ) { ctx . $elements [ name ] = attrs . _id || attrs . id ; }
function createContentDiv ( ) { contentDiv = $ ( "<div/>" , { id : "contentDiv" } ) . appendTo ( parentDiv ) ; contentDiv . css ( { "border" : "1px solid" , "padding-top" : "10px" , "padding-bottom" : "10px" , "min-height" : "100px" } ) ; }
function ( kernel , declare , Carousel , DataMixin ) { kernel . deprecated ( "dojox/mobile/DataCarousel is deprecated" , "Use dojox/mobile/StoreCarousel instead" , 2.0 ) ; return declare ( "dojox.mobile.DataCarousel" , [ Carousel , DataMixin ] , { } ) ; }
function ( common ) { console . warn ( "dojox/mobile/mobile-all may include much more code than your application actually requires. We strongly recommend that you use a custom build." ) ; return common ; }
function ( view ) { this . hash [ view . id ] = view ; this . length ++ ; }
function ( id ) { if ( this . hash [ id ] ) { delete this . hash [ id ] ; this . length -- ; } }
function ( parent ) { return array . filter ( this . getViews ( ) , function ( v ) { return this . getParentView ( v ) === parent ; } , this ) ; }
function ( ) { this . leftPane . domNode . style . display = this . isPhone ( ) ? "none" : "" ; this . leftView . show ( ) ; }
function ( ) { if ( this . currentView ) { this . currentView . goTo ( - 1 ) ; } }
function ( val ) { this . incremental = val ; }
function ( ) { return array . filter ( this . getChildren ( ) , function ( w ) { return w . selected ; } ) [ 0 ] ; }
function ( ) { this . inherited ( arguments ) ; if ( ! this . _opened && ! this . _throttleHandler ) { this . _startSearchAll ( ) ; } }
function ( node ) { setTimeout ( function ( ) { domClass . remove ( node , "mblListItemFloat" ) ; domStyle . set ( node , { width : "" , top : "" } ) ; } , 0 ) ; }
function ( e ) { return this . domNode . style . display !== "none" ; }
function ( text ) { this . _set ( "label" , text ) ; this . labelNode . innerHTML = this . _cv ? this . _cv ( text ) : text ; }
function ( ) { return array . map ( this . getSlots ( ) , function ( w ) { return w . get ( "value" ) ; } ) ; }
function ( a ) { array . forEach ( this . getSlots ( ) , function ( w , i ) { w . set ( "value" , a [ i ] ) ; } ) ; }
function ( a ) { array . forEach ( this . getSlots ( ) , function ( w , i ) { w . setColor && w . setColor ( a [ i ] ) ; } ) ; }
function ( fromViewId , toViewId ) { return this . transitionInfo [ fromViewId . replace ( /^#/ , "" ) + ":" + toViewId . replace ( /^#/ , "" ) ] ; }
function ( w ) { console . log ( '[MIG:error] Carousel has no backward compatibility, since it was experimental in 1.7. The new Carousel supports dojo/store instead of dojo/data.' ) ; }
function ( w ) { console . log ( '[MIG:fixed] FixedSplitterPane: Deprecated. Use dojox/mobile/Container instead.' ) ; }
function ( ) { if ( dojo . hash ) { console . log ( '[MIG:fixed] dojo/hash detected. If you would like to enable the bookmarkable feature, require dojox/mobile/bookmarkable instead of dojo/hash' ) ; if ( dojo . require ) { dojo [ "require" ] ( "dojox.mobile.bookmarkable" ) ; } else { require ( [ "dojox/mobile/bookmarkable" ] ) ; } } }
function ( ) { this . minZBuffer2 = minZBuffer2 ; this . color = color ; }
function ( err , data ) { if ( err == null ) { } else { console . log ( "Error:" + err . toString ( ) ) ; } }
function ( err , data ) { if ( err == null ) { } else { console . log ( "Error:" + err . toString ( ) ) ; } }
function ( ) { console . log ( "Saving path" ) ; savePolygon ( path ) ; showArticles ( null , function ( err , data ) { $ ( 'section[role="main"]' ) . html ( data ) ; } ) ; }
function ( ) { console . log ( "Saving path" ) ; savePolygon ( path ) ; showArticles ( null , function ( err , data ) { $ ( 'section[role="main"]' ) . html ( data ) ; } ) ; }
function showArticles ( path , callback ) { if ( path == null ) { path = retrievePolygon ( ) ; } var coordStr = pathToCoordinateString ( path ) ; getArticlesWithinCoordinates ( coordStr , callback ) ; }
function ( response ) { if ( ! response || ! response . Result ) { alert ( "Oops - Didn't save order properly" ) ; } }
function ( e ) { if ( e . data === trackEvent ) { e . data . view . element . removeEventListener ( "mouseup" , trackEventClicked , true ) ; } }
function drawBall ( ) { ctx . fillStyle = pongBall . color ; ctx . fillRect ( pongBall . x , pongBall . y , pongBall . width , pongBall . height ) ; }
function ( fwNode , index , array ) { s += fwNode . _getHTML ( index , array . length , depth + 1 ) ; }
function ( config ) { config . test = "test" ; return config . verbosity = 0 ; }
function ( logger , log ) { if ( log . level >= config . verbosity ) { return print ( log . message ) ; } }
function ( command ) { return error ( "" + ( missing ( "Command " + command ) ) + "\n\nTry `neat help` for a list of the available commands." ) ; }
function ( err ) { if ( err != null ) { return error ( err . message ) ; } info ( "package.json generated" . green ) ; return typeof cb === "function" ? cb ( ) : void 0 ; }
function ( ) { info ( 'Documentation successfully generated' . green ) ; return typeof callback === "function" ? callback ( ) : void 0 ; }
function ( ) { Neat . setEnvironment ( env ) ; puts ( ( "Set environment " + env ) . yellow , 1 ) ; return target . apply ( null , arguments ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( red ( " FATAL " , logger . FATAL ) ) ) ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( red ( " ERROR " , logger . ERROR ) ) ) ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( yellow ( " WARN " , logger . WARN ) ) ) ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( green ( " INFO " , logger . INFO ) ) ) ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( blue ( " DEBUG " , logger . DEBUG ) ) ) ) ; }
function ( err , res ) { return console . log ( res ) && ( typeof cb === "function" ? cb ( ) : void 0 ) ; }
function ( config ) { config . verbosity = 0 ; config . engines = { templates : { } , databases : { } , tests : { } , logging : { } } ; return config . defaultLoggingEngine = 'console' ; }
function ( config ) { config . development = "development" ; return config . verbosity = 0 ; }
function ( config ) { config . production = "production" ; return config . verbosity = 3 ; }
function ( idImage , image ) { ed . execCommand ( 'mceInsertContent' , false , '<img src="' + basedir + 'web/files/cms_images/' + idImage + '.jpg"' + '/>' ) ; gallery . close ( ) ; }
function unload ( ) { Inspector . off ( "connect" , _onConnect ) ; Inspector . off ( "Debugger.breakpointResolved" , _onBreakpointResolved ) ; Inspector . off ( "Debugger.globalObjectCleared" , _onGlobalObjectCleared ) ; $exports . off ( ) ; }
function setTracepoint ( location ) { var breakpoint = new Breakpoint . Breakpoint ( location , undefined , true ) ; breakpoint . set ( ) ; return breakpoint ; }
function onSetBreakpoint ( event , location ) { var editor = _editorForLocation ( location ) ; if ( ! editor ) return ; editor . _codeMirror . setMarker ( location . lineNumber , null , "breakpoint" ) ; }
function onRemoveBreakpoint ( event , location ) { var editor = _editorForLocation ( location ) ; if ( ! editor ) return ; editor . _codeMirror . clearMarker ( location . lineNumber , null , "breakpoint" ) ; }
function onCurrentDocumentChange ( ) { parseDocument ( DocumentManager . getCurrentDocument ( ) ) ; }
function ( docId , revision ) { var Doc = ( docId && docId . match ( /^_design\// ) ) ? Design : Document ; return new Document ( docId || null , revision || null , this . _connection , this ) ; }
function ( key ) { Object . defineProperty ( prototype || self , key , { value : Observer . prototype [ key ] } ) }
function ( key ) { Object . defineProperty ( prototype || self , key , { value : Observer . prototype [ key ] } ) }
function Mix ( ) { }
function ( SceneManager , sceneId ) { if ( ! Runtime . currentEditor || Runtime . currentEditor . editorID != "davinci.review.CommentReviewEditor" ) { return ; } if ( this . _commentView ) { this . _commentView . updateStatesScenes ( ) ; } }
function ( i , val ) { $ ( sprintf ( fieldstr , sprintf ( "%s[]" , key ) , val ) ) . appendTo ( form ) ; }
function ( loglevel , s ) { if ( typeof window . console !== "undefined" && console . log && o . verbosity >= loglevel ) { console . log ( "jQuery.reloadify: " + s ) ; } }
function ( path ) { return IS_GLOBAL . test ( path ) ; }
function ( ) { Ember . assert ( "Can't set ObjectProxy's content to itself" , this . get ( 'content' ) !== this ) ; }
function ( ) { var selection = this . getPath ( 'owner.selection' ) ; selection . html ( '' ) ; selection . removeClass ( 'read-only is-selectable' ) ; }
function ( obj ) { return { message : 'hey' } ; }
function ( content , encoding ) { console . log ( 'encoding' , encoding ) ; load ( resource . url , content , resource . type , line ) ; }
function ( url , content , type ) { editorsByURL [ url ] = new PurpleOrionEditor ( url , content , type ) ; }
function ( url , line , column , character ) { var editor = editorsByURL [ url ] ; if ( editor ) { editor . setCursorOn ( line , column , character ) ; } else { console . error ( "no editor for url " + url ) ; } }
function ( ) { return { hash : $ . mobile . path . parseUrl ( location . href ) . hash || "#" + self . initialFilePath , title : document . title , initialHref : self . initialHref } ; }
function ( ) { console . log ( "scrollstop" ) }
function ( xhr , textStatus , thrownError ) { if ( xhr . status === 1223 || xhr . status === 409 ) { ret = false ; } else { ret = true ; } if ( callback ) { callback ( ret ) ; } }
function ( ) { return Types . tystr ( this . type , 0 ) + " " + this . name ; }
function ( ) { this . _listeners = [ ] ; this . _scopes = [ ] ; }
function ( a , b ) { if ( typeof a !== 'undefined' ) { return a ; } return b ; }
function ( ) { "use strict" ; var defaultValue = function ( a , b ) { if ( typeof a !== 'undefined' ) { return a ; } return b ; } ; return defaultValue ; }
function getCheckboxValue ( ) { if ( gebi ( "favePet" ) . checked ) { faveValue = gebi ( "favePet" ) . value ; } else { faveValue = "No" ; } ; }
function parseError ( stream , message ) { if ( stream ) { stream = "'" + stream + "'" ; } else { stream = 'EOF' ; } throw 'Parse Error: ' + message + ' at ' + stream ; }
function ( ) { methods [ settings . direction ] . apply ( $this ) ; }
function ( ) { methods [ settings . direction ] . apply ( $this ) ; }
function ( ) { methods [ settings . direction ] . apply ( $this ) ; }
function getURL ( command ) { url = '' ; switch ( command ) { case "blog" : url = "http://djds4rce.wordpress.com" ; break case "twitter" : url = "http://twitter.com/notsosleepy" ; break case "github" : url = "http://github.com/djds4rce" ; break default : url = '' } return url ; }
function ( fn ) { if ( block . total === Infinity ) { return block . pushAndRun ( fn ) ; } else { return block . push ( fn ) ; } }
function ( complete ) { var subBlock ; return subBlock = block . createSubBlock ( { name : name , fn : fn , complete : complete } ) ; }
function ( fn ) { if ( block . total === Infinity ) { return block . pushAndRun ( fn ) ; } else { return block . push ( fn ) ; } }
function ( err ) { if ( err ) { return done ( err ) ; } assert . equal ( false , finished , 'the group of tasks only finished once' ) ; return finished = true ; }
function ( err ) { if ( err ) { return done ( err ) ; } assert . equal ( false , finished , 'the group of tasks only finished once' ) ; return finished = true ; }
function ( err ) { if ( err ) { return done ( err ) ; } return ++ finished ; }
function ( ) { _ . bindAll ( this , 'render' ) ; this . _meta = { } ; }
function ( ) { _ . bindAll ( this , 'render' ) ; this . _meta = { } ; }
function ( ) { _ . bindAll ( this , 'render' ) ; this . _meta = { } ; }
function addGlobalErrorHandler ( ) { process . on ( 'uncaughtException' , function ( err ) { var su = require ( "swarmutil" ) ; su . perror ( err ) ; } ) ; }
function ( channel , message ) { var json = JSON . parse ( message ) ; json . channel = channel ; message = JSON . stringify ( json ) ; util . writeSizedString ( this . socket , message ) ; }
function ( messageObj ) { if ( messageObj . swarmingName != thisAdaptor . loginSwarmingName ) { console . log ( "Could not execute [" + messageObj . swarmingName + "] swarming without being logged in" ) ; this . close ( ) ; } else { this . executeSafe ( messageObj ) ; } }
function ( object ) { var out = "----------------------------------------------------------------------\n" + util . inspect ( util . format , arguments ) + "----------------------------------------------------------------------\n" ; util . puts ( out ) ; }
function setup ( ) { sinon . config . useFakeTimers = false ; }
function ( associatedObject ) { associatedObject [ self . __factory . identifier ] = options . omitNull ? '' : null associatedObject . save ( ) }
function ( ) { dojo . publish ( "/menuwidget/playAnimation" , [ ] ) ; }
function wireupExistingCommentEditors ( ) { var editDivs = $ ( 'div.usertext-edit' ) ; $ ( editDivs ) . each ( function ( ) { var editDiv = this ; var preview = addPreviewToParent ( editDiv ) ; addMarkdownEditorToForm ( editDiv , preview ) ; } ) ; }
function ( data ) { $ ( "#" + $container . attr ( "id" ) + "-loadedAttachments" ) . append ( data ) ; $videoField . val ( "" ) ; }
function ( index , element ) { new Pushpop . ModalViewStack ( element ) ; }
function ( charger , battery ) { var getBattery ; if ( charger === true && battery === true ) { getBattery = true ; } else { getBattery = false ; } return getBattery ; }
function ( ) { var p = { x : tools . Random . Number ( 50 ) + 0.0 , y : tools . Random . Number ( 50 ) + 0.0 } ; return p ; }
function ( raw_txt ) { if ( raw_txt != null ) this . text_data . raw_text = raw_txt ; return this . text_data . raw_text ; }
function ( ) { return /<\!--\s?(rocket|sb):\s?([\S]+)\s?([\s\S]*?)\s?-->([\s\S]*?)<\!--\s?end\s?-->/gm ; }
function ( ) { return /<\!--\s?(rocket|sb):\s?([\S]+)\s?([\s\S]*?)\s?-->([\s\S]*?)<\!--\s?end\s?-->/gm ; }
function ( ed , o ) { if ( ed . isDirty ( ) ) { ed . save ( ) ; ngModel . $setViewValue ( elm . val ( ) ) ; scope . $apply ( ) ; } }
function ( ed , o ) { if ( ed . isDirty ( ) ) { ed . save ( ) ; ngModel . $setViewValue ( elm . val ( ) ) ; scope . $apply ( ) ; } }
function updateSpeedIndicator ( ) { if ( animationController . isAnimating ( ) ) { speedIndicatorElement . innerHTML = clock . multiplier + 'x realtime' ; } else { speedIndicatorElement . innerHTML = clock . multiplier + 'x realtime (paused)' ; } }
function ( ) { animationController . play ( ) ; animReverse . set ( 'checked' , false ) ; animPause . set ( 'checked' , false ) ; animPlay . set ( 'checked' , true ) ; updateSpeedIndicator ( ) ; }
function ( userOptions ) { console . log ( "twitter init" ) ; options = $ . extend ( options , userOptions || { } ) ; self . twitterPromise = getTwitterPromise ( ) ; }
function ( ) { return this . firstName + ' ' + this . lastName ; }
function ( callback ) { _frames . push ( { callback : callback , distinctDependencies : [ ] } ) ; }
function ( require ) { return { 'listview/{id}' : require ( './listviewPanel/handler' ) , 'detailview/{id}' : require ( './detailviewPanel/handler' ) } ; }
function ( e , r , b ) { if ( e != null ) return res . end ( 'DB Not Found.' ) ; return render ( b , function ( err , html ) { return res . end ( html ) ; } ) ; }
function placeAllMarkers ( data ) { clearAllMarkers ( ) ; for ( var i in data ) { MapApplet . addLocation ( data [ i ] ) ; } }
function checkForDepletion ( g , gameRoom ) { if ( g . certainFish + g . actualMysteryFish <= 0 ) { g . depleted = true ; g . endSimulation ( ) ; } }
function ( property , propertyValue , attributeValue ) { return [ 'The ' + property + ' property must not exceed ' + attributeValue + ' character' + ( attributeValue > 1 ? 's' : '' ) + '.' , 'The length of the property is ' + propertyValue . length + '.' ] . join ( ' ' ) ; }
function ( property , propertyValue , attributeValue ) { return [ 'The ' + property + ' property must be exactly ' + attributeValue + ' character' + ( attributeValue > 1 ? 's' : '' ) + '.' , 'The length of the property is ' + propertyValue . length + '.' ] . join ( ' ' ) ; }
function ( ) { if ( ! this . mute ) { $ . get ( 'cgi-bin/sound/volume-more' ) ; soundWidget . setVolume ( soundWidget . volume + 5 ) ; } }
function ( klass ) { var ctx = this ; window . setTimeout ( function ( ) { $ ( ctx ) . removeClass ( klass ) ; } , 0 ) ; return ctx ; }
function ( actorEv , x , y ) { menuService . startNewGame ( ) ; menuService . changeState ( MENU_STATE_IDLE ) ; }
function ( err , item ) { if ( item ) { console . log ( "Scraper.init: Newest timestamp is from " + item . timestamp ) ; lastImage = item . image ; lastAcquire = Date . now ( ) ; } }
function toTuple ( a ) { return [ "Tuple" + a . length ] . concat ( a ) ; }
function ( input ) { return input . setSelection ( 0 , input . val ( ) . length ) ; }
function ( event ) { var keyCode ; keyCode = event . which | event . keyCode ; return keyCode !== 13 ; }
function ( json ) { if ( json . example && query . length > 0 ) { bot . speak ( json . example ) ; } else { bot . speak ( "I don't have an example of that." ) ; } }
function clear_years ( ) { $ ( "#year" ) . empty ( ) ; $ ( "#year" ) . append ( '<option value="0">Year</option>' ) ; }
function clear_months ( ) { $ ( "#month" ) . empty ( ) ; $ ( "#month" ) . append ( '<option value="0">Month</option>' ) ; }
function clear_days ( ) { $ ( "#day" ) . empty ( ) ; $ ( "#day" ) . append ( '<option value="0">Day</option>' ) ; }
function ( e ) { if ( $ ( LFM_WATCHED_CONTAINER ) . length > 0 ) { if ( LFM_isWaiting == 0 ) { LFM_isWaiting = 1 ; setTimeout ( LFM_updateNowPlaying , 10000 ) ; } return ; } }
function ( error , value ) { self . processAsyncMethodCallback ( error , value ) ; if ( ! error ) { callback ( null , self . options . cachedValue ) ; } else { callback ( error ) ; } }
function date ( gist ) { if ( ! gist || ! gist . date || ! _ . isDate ( gist . date ) ) throw new Error ( "the gist must have a date property of type date" ) ; return gist . created_at ; }
function getFirstGistFile ( gist ) { if ( ! gist || ! gist . files ) throw new Error ( "gist is missing or has no enumerable files property" ) ; return gist . files [ _ ( gist . files ) . keys ( ) [ 0 ] ] ; }
function isBlogGist ( gist ) { if ( ! gist || ! gist . files ) throw new Error ( "gist is missing or has no enumerable files property" ) ; var firstGistFile = getFirstGistFile ( gist ) ; var fileName = firstGistFile . filename ; return ( /blog_.+\.md/ ) . test ( fileName ) ; }
function ( error , gist ) { if ( ! error ) { var html = md ( gist . markdown ) ; callback ( null , gist . markdown , html ) ; } else { callback ( error ) ; } }
function ( error , gist ) { if ( ! error ) { var firstFile = getFirstGistFile ( gist ) ; callback ( null , { markdown : firstFile . content } ) ; } else { callback ( error ) ; } }
function ( error , json ) { if ( ! error ) { callback ( null , json ) ; } else { callback ( error ) ; } }
function ( asyncError ) { if ( ! asyncError ) { callback ( null , posts ) ; } else { callback ( asyncError ) ; } }
function toBlogPosts ( gists ) { return _ . chain ( gists ) . filter ( isBlogGist ) . map ( toBlogPost ) . sortBy ( date ) . value ( ) . reverse ( ) ; }
function ( error , gist ) { if ( ! error ) { var post = toBlogPost ( gist ) ; callback ( null , post ) ; } else { callback ( error ) ; } }
function activeIfEquals ( name , testName ) { return name === testName ? 'active' : '' ; }
function getNavClasses ( forSectionName ) { return { home : activeIfEquals ( 'home' , forSectionName ) , about : activeIfEquals ( 'about' , forSectionName ) , twitter : activeIfEquals ( 'twitter' , forSectionName ) , reading : activeIfEquals ( 'reading' , forSectionName ) } ; }
function ( error , viewModel ) { res . render ( 'index' , viewModel ) ; }
function ( req , res ) { var postId = req . params . id ; shared . getPostViewModel ( postId , function ( error , viewModel ) { res . render ( 'post' , viewModel ) ; } ) ; }
function index ( req , res ) { s . getReadingListViewModel ( function ( error , model ) { res . render ( 'reading' , model ) ; } ) ; }
function ( ) { this . doToolbar ( 'sync' ) }
function ( ) { this . doToolbar ( 'inbox' ) }
function ( ) { this . doExit ( ) }
function ( ) { this . doExit ( ) }
function ( ) { this . doToolbar ( 'menu' ) }
function ( ) { this . doToolbar ( 'not' ) }
function ( ) { this . doOption ( true ) }
function ( ) { this . doResources ( 'photo' ) }
function ( ) { this . doToolbar ( 'resources' ) }
function ( ) { this . doToolbar ( 'sch' ) }
function ( ) { this . doVis ( 'ors' ) }
function ( ) { this . doVis ( 'rdt' ) }
function ( ) { this . doVis ( 'vita' ) }
function ( ) { this . doVis ( 'alb' ) }
function ( ) { this . doVis ( 'blood' ) }
function ( ) { USER . name = '' ; USER . uuid = '' ; this . toPage ( PAGES . LOGIN_SCREEN ) }
function ( ) { loadModuleExports ( path . join ( 'bin' , 'raind' ) , mocks ) ; expect ( server . start ) . toHaveBeenCalled ( ) ; }
function ( ) { $ ( '#main_upload_start' ) . attr ( 'disabled' , ! ( ( this . checked ) && ( filestoupload > 0 ) ) ) ; $ ( "#upload_tooltip" ) . hide ( ) ; }
function ( e , data ) { filestoupload ++ ; if ( $ ( '#terms_of_service' ) . is ( ':checked' ) ) $ ( '#main_upload_start' ) . attr ( 'disabled' , false ) ; }
function ( req , res ) { res . render ( 'test.ejs' , { title : 'Mozilla Persona QUnit Test' , layout : false } ) ; }
function ( err , kp ) { keypair = kp ; trans . complete ( keypair . publicKey . serialize ( ) ) ; }
function ( ) { Create . create ( 3 , "Issue" ) ; }
function ( ) { Create . create ( 4 , "Solution" ) ; }
function ( ) { Create . create ( 8 , "Comment" ) ; }
function ( ) { Create . form . remove ( ) ; Create . overlay . remove ( ) ; }
function ( e ) { if ( e . target . className == "overlay" ) { Create . destroy ( ) ; } }
function ( ) { this . inherited ( arguments ) ; this . setValue ( null , true ) ; }
function ( ) { return timeoutLimit ; }
function ( ) { form_num = 0 ; lab_num = 0 ; this . getPatientList ( ) ; }
function ( viewName ) { return this . getViewInstances ( ) [ viewName ] ; }
function ( viewName ) { return this . getViewInstances ( ) [ viewName ] ; }
function is_unicode_digit ( ch ) { return UNICODE . digit . test ( ch ) ; }
function is_unicode_combining_mark ( ch ) { return UNICODE . combining_mark . test ( ch ) ; }
function is_identifier_char ( ch ) { return is_identifier_start ( ch ) || is_unicode_combining_mark ( ch ) || is_unicode_digit ( ch ) || is_unicode_connector_punctuation ( ch ) || ch == "\u200c" || ch == "\u200d" ; }
function ( ) { return tighten ( body , "lambda" ) ; }
function ( ) { return [ "toplevel" , tighten ( body ) ] ; }
function ( ) { return "debugger;" }
function ( rx , mods ) { if ( options . ascii_only ) rx = to_ascii ( rx ) ; return "/" + rx + "/" + mods ; }
function ( ) { this . template = cdb . templates . getTemplate ( 'dashboard/views/table_list_item' ) ; }
function ( data ) { if ( data . errors ) { data . errors . forEach ( function ( err ) { alert ( err . error_message ) } ) return ; } bSearch . trigger ( 'searched' , data ) }
function ( create_err , customer ) { stripe . customers . update ( customer . id , { description : "test" , card : { number : "4242424242424242" , exp_month : 12 , exp_year : 2020 , name : "T. Ester" } } , this . callback ) ; }
function ( ) { stripe . token . create ( { card : { number : "4242424242424242" , exp_month : 1 , exp_year : 2021 , name : "J. Ester" } , amount : 77 } , this . callback ) ; }
function ( ) { pool . release ( client ) ; }
function ( ) { return this . _opacityModifyRGB ; }
function ( ) { this . _super ( ) ; this . _color = cc . WHITE ( ) ; this . _opacityModifyRGB = false ; this . _fontStyleStr = "" ; }
function ( ) { return "Testing cc.LabelBMFont with Chinese character" ; }
function ( n ) { if ( typeof n == 'string' ) n = [ n ] ; for ( var i in n ) cur_frm . set_df_property ( n , 'hidden' , 1 ) ; }
function ( field ) { field . disabled = enable ? 0 : 1 ; }
function ( field ) { field . reqd = mandatory ? 1 : 0 ; }
function ( field ) { field . hidden = show ? 0 : 1 ; }
function ( ) { this . show ( ) ; }
function ( element , options ) { console . log ( this . options ) this . element . append ( can . view ( url + 'gadget/estadoUsuario/estadoUsuario.ejs' , this . options ) ) $ . mobile . changePage ( $ ( '#statusPage' ) ) }
function ( newVal ) { if ( arguments . length > 0 ) { boardLocked = newVal ; this . refreshBoard ( ) ; } return boardLocked ; }
function ( ) { return confirm ( 'Are you sure you want to remove this item?' ) ; }
function ( ) { that . unsavedChanges = true ; that . events . onChange . fire ( that . unsavedChanges ) ; }
function ( that ) { that . changeTracker . revert ( ) ; that . events . afterCancel . fire ( ) ; }
function ( item , index , orig ) { var feature = komooMap . features . pop ( ) ; feature . removeFromMap ( ) ; }
function ( geometry ) { this . geometry = geometry ; return this . initEvents ( ) ; }
function ( highlighted ) { this . highlighted = highlighted ; this . updateIcons ( ) ; return komoo . event . trigger ( this , 'highlight_changed' , this . highlighted ) ; }
function ( ) { var _ref ; return ( _ref = this . marker ) != null ? _ref . setMap ( this . map ) : void 0 ; }
function ( ) { return this . map ; }
function ( ) { var _ref ; return ( _ref = this . geometry ) != null ? _ref . getCenter ( ) : void 0 ; }
function ( options ) { var _ref ; return ( _ref = this . geometry ) != null ? _ref . setOptions ( options ) : void 0 ; }
function ( ) { var _ref ; return ( _ref = this . geometry ) != null ? _ref . getIcon ( ) : void 0 ; }
function ( ) { var _ref ; return ( ( _ref = this . feature ) != null ? _ref . getDefaultZIndex ( ) : void 0 ) || defaults . ZINDEX ; }
function ( pos ) { if ( pos != null ) { return new google . maps . LatLng ( pos [ 0 ] , pos [ 1 ] ) ; } else { return null ; } }
function ( latLng ) { if ( latLng ) { return [ latLng . lat ( ) , latLng . lng ( ) ] ; } else { return [ ] ; } }
function ( ) { return this . overlay . getVisible ( ) ; }
function ( flag ) { return this . overlay . setVisible ( flag ) ; }
function ( ) { var _base2 ; return typeof ( _base2 = this . overlay ) . getIcon === "function" ? _base2 . getIcon ( ) : void 0 ; }
function ( options ) { this . options = options != null ? options : { clickable : true , zIndex : this . getDefaultZIndex ( ) } ; return this . setOverlay ( new google . maps . Marker ( this . options ) ) ; }
function ( coords ) { this . bounds = null ; this . overlay . setPosition ( this . getLatLngFromArray ( coords ) ) ; return Point . __super__ . setCoordinates . call ( this , coords ) ; }
function ( markers ) { return this . overlay . addMarkers ( markers ) ; }
function ( marker ) { return this . overlay . addMarker ( marker ) ; }
function ( flag ) { return this . overlay . setEditable ( flag ) ; }
function ( ) { var _ref ; return ( ( _ref = this . feature ) != null ? _ref . getBorderOpacity ( ) : void 0 ) || defaults . BORDER_OPACITY ; }
function ( ) { var _ref ; return ( ( _ref = this . feature ) != null ? _ref . getBorderSize ( ) : void 0 ) || defaults . BORDER_SIZE ; }
function ( ) { return this . overlay . getPath ( ) ; }
function MultiLineString ( ) { MultiLineString . __super__ . constructor . apply ( this , arguments ) ; }
function is_unicode_digit ( ch ) { return UNICODE . digit . test ( ch ) ; }
function is_unicode_combining_mark ( ch ) { return UNICODE . combining_mark . test ( ch ) ; }
function is_identifier_char ( ch ) { return is_identifier_start ( ch ) || is_unicode_combining_mark ( ch ) || is_unicode_digit ( ch ) || is_unicode_connector_punctuation ( ch ) || ch == "\u200c" || ch == "\u200d" ; }
function ( ) { if ( element . val ( ) !== $ . data ( element , key ) ) { $ . removeData ( element , key ) ; element . trigger ( "keyup-change" ) ; } }
function ( ) { $ ( this ) . find ( 'ul' ) . css ( 'top' , '28px' ) ; $ ( this ) . find ( '.gear' ) . removeClass ( 'top-menu' ) ; }
function ( selector ) { var active_dbs = $ ( ".databases input[type=checkbox]" ) . not ( ":disabled" ) ; if ( active_dbs . length === 1 ) { active_dbs . check ( ) ; } return active_dbs ; }
function ( $ ) { $ . onedb = function ( selector ) { var active_dbs = $ ( ".databases input[type=checkbox]" ) . not ( ":disabled" ) ; if ( active_dbs . length === 1 ) { active_dbs . check ( ) ; } return active_dbs ; } ; }
function ping ( ) { tmp = that . val ( ) ; if ( tmp !== val ) { val = tmp ; that . change ( ) ; } setTimeout ( ping , 100 ) ; }
function ( ) { menuItem . _command . execute ( ) ; }
function ( entry ) { FileViewController . addToWorkingSetAndSelect ( entry . fullPath , FileViewController . PROJECT_MANAGER ) ; }
function ( doc ) { _fileSelectionFocus = selectIn ? selectIn : WORKING_SET_VIEW ; _selectCurrentDocument ( ) ; result . resolve ( doc ) ; }
function ( ) { result . resolve ( ) ; }
function ( declarationFunction ) { if ( ! declarationFunction . variableTable_ ) { var variableList = [ ] ; declarationFunction ( variableList ) ; declarationFunction . variableTable_ = new gf . sim . VariableTable ( variableList ) ; } return declarationFunction . variableTable_ ; }
function ( tag , flags , getter , setter ) { goog . base ( this , tag , flags ) ; this . getter_ = getter ; this . setter_ = setter ; }
function ( ) { return new gf . sim . Variable . Vec3 ( this . tag , this . flags , this . getter_ , this . setter_ ) ; }
function ( target , reader ) { var v = gf . sim . Variable . Vec3 . tmp_ ; reader . readVec3 ( v ) ; this . setter_ . call ( target , v ) ; }
function ( source , target ) { this . setter_ . call ( target , this . getter_ . call ( source ) ) ; }
function ( tag , flags , getter , setter , normalized ) { goog . base ( this , tag , flags ) ; this . getter_ = getter ; this . setter_ = setter ; this . normalized_ = normalized ; }
function ( ) { return new gf . sim . Variable . Quaternion ( this . tag , this . flags , this . getter_ , this . setter_ , this . normalized_ ) ; }
function ( source , target ) { this . setter_ . call ( target , this . getter_ . call ( source ) ) ; }
function ( ) { var $this = $ ( this ) ; if ( ! $this . find ( ".fd-list-check" ) . is ( ":checked" ) ) $this . removeClass ( "fd-list-selected" ) ; }
function ( ) { this . sendEncounterData ( personUuid , localStorage . regUuidencountertype , localStorage . screenerUuidlocation , localStorage . loggedInUser ) }
function ( mdown ) { return showdownParse ( mdown ) ; }
function ( err ) { res . json ( { error : err , data : [ ] } , 500 ) ; }
function ( pos ) { WordNetFile . appendLineChar ( fd , pos , 0 , buff , callback ) ; }
function ( lat , lon , zoom ) { _this . center ( lat , lon ) ; _this . zoom ( zoom ) ; _centerInitialized = true ; }
function ( req , res ) { renderer . home ( res ) ; }
function ( ) { holdReady = jasmine . createSpy ( 'holdReady' ) ; globals . jQuery = { readyWait : 0 , holdReady : holdReady } ; listener = jasmine . createSpy ( 'listener' ) ; loadEventSupport . addBeforeLoadListener ( listener ) ; }
function ( widget , srcElement ) { this . inherited ( arguments ) ; if ( widget . dijitWidget ) { widget . dijitWidget . disableTouchScroll = true ; } }
function ( ) { if ( ! finished ) { return 'Are you sure you want to leave? You will lose any progress you have made on the survey.' ; } }
function ( btnName ) { this . _set ( btnName , ! this . compute . isPhysical ( ) ) ; }
function ( data ) { var rows = my . parseCSV ( data , dataset ) ; dfd . resolve ( { records : rows , useMemoryStore : true } ) ; }
function KDef ( next , name ) { this . next = next ; this . name = name }
function ( k , e , val ) { return function ( ) { bind ( e , k . name , val ) ; return enter ( k . next , VOID ) } }
function ( ) { if ( this . head . prev === this . head ) return var n = this . head . prev . remove ( ) this . length -= 1 return n . data }
function ( ) { if ( this . head . next = this . head ) return var n = this . head . next . remove ( ) this . length -= 1 return n . data }
function ( ) { this . nid = private_get_mixin ( ) ; }
function ( k ) { return objc_msgSendSync ( this . nid , "valueForKey" , k ) ; }
function ( k , v ) { objc_msgSend ( this . nid , "setValue:forKey:" , v , k ) ; }
function ( ) { return objc_msgSendSync ( this . nid , "count" ) ; }
function ( f ) { var storage = objc_msgSendSync ( this . nid , "dictionary" ) ; for ( var k in storage ) { f ( k , storage [ k ] ) ; } }
function ( source ) { var target ; target = JSON . parse ( JSON . stringify ( source ) ) ; return target ; }
function ( value ) { return typeof value === 'number' || balUtilTypes . toString ( value ) === '[object Number]' ; }
function ( value ) { return typeof value === 'string' || balUtilTypes . toString ( value ) === '[object String]' ; }
function ( ) { if ( c . readyState == 1 ) c . send ( "&signal=ping" ) ; else { clearInterval ( A . keepAlive ) ; A . keepAlive = null } }
function ( html , toolbar , id , text , iconName ) { toolbar . append ( html ) ; $ ( "#" + id , toolbar ) . button ( { text : false , icons : { primary : iconName } } ) ; }
function ( ) { var mainBand = self . tl . getBand ( 0 ) ; mainBand . scrollToCenter ( mainBand . getMinVisibleDate ( ) ) ; }
function ( simulator , entityType , entityId , entityFlags ) { goog . base ( this , simulator , entityType , entityId , entityFlags ) ; this . owner_ = null ; this . state = entityType . allocateState ( this ) ; }
function ( ) { return ( this . simulator ) ; }
function ( packetSwitch ) { packetSwitch . register ( gf . sim . packets . ExecCommands . ID , this . handleExecCommands_ , this ) ; }
function ( callback , opt_scope ) { for ( var entityId in this . entities_ ) { var entity = this . entities_ [ Number ( entityId ) ] ; callback . call ( opt_scope || goog . global , entity ) ; } }
function ( ) { return ( this . simulator ) ; }
function ( priority , targetTime ) { this . simulator . getScheduler ( ) . scheduleEvent ( priority , targetTime , this . update , this ) ; }
function ( ) { var wasDirty = ! ! this . dirtyFlags ; this . dirtyFlags |= gf . sim . EntityDirtyFlag . UPDATED ; if ( ! wasDirty ) { this . simulator . invalidateEntity ( this ) ; } }
function ( er ) { if ( size === 0 ) { buffer = Buffer . concat ( buffers , pos ) ; } if ( encoding ) buffer = buffer . toString ( encoding ) ; return callback ( er , buffer ) ; }
function ( ) { _ . defaults ( this . options , this . default_options ) ; this . $input = this . $el . find ( 'input' ) ; this . render ( ) ; setTimeout ( this . _check , 500 ) ; }
function ( ) { app . set ( 'views' , __dirname + "/views" ) ; }
function ( element , entry ) { $ ( 'quicksearch_submit' ) . disable ( ) ; $ ( 'quicksearch_submit' ) . removeClassName ( 'button-blue' ) ; $ ( 'quicksearch_submit' ) . addClassName ( 'button-silver' ) ; return entry ; }
function ( tag ) { this . issueManager . issueFilterInstant ( 'tag:' + tag ) ; $ ( '#issueFilter' ) . focus ( ) ; }
function ( entry ) { FileViewController . addToWorkingSetAndSelect ( entry . fullPath , FileViewController . PROJECT_MANAGER ) ; }
function ( doc ) { _fileSelectionFocus = selectIn ? selectIn : WORKING_SET_VIEW ; _selectCurrentDocument ( ) ; result . resolve ( doc ) ; }
function ( ) { window . open ( 'desktop/server/showFeedback.php' ) ; }
function initiateInfoScroller ( ) { void 0 === infopagescroll ? ( infopagescroll = createScroller ( "infoscroller" ) , $j ( window ) . orientationChange ( initiateInfoScroller ) ) : infopagescroll . refresh ( ) }
function kc_hideIME ( imminent ) { IMERender . ime . classList . add ( 'hide' ) ; IMERender . hideIME ( imminent ) ; _reset ( ) ; }
function execImport ( importStat , scope ) { var target = getTarget ( importStat . id ) ; return exec ( target , scope ) ; }
function ( response , opts ) { alert ( 'server-side failure with status code ' + response . status ) ; }
function ( ) { dbGet . retrieveByCompound ( '7P' , callbackFunction , 'monomers' ) ; }
function isStandAlonCharacter ( c ) { for ( var i = 0 ; i < StandAlonForm . length ; i ++ ) { if ( StandAlonForm [ i ] == c ) { return true ; } } return false ; }
function getMedialFormCharacterFE ( c ) { for ( var i = 0 ; i < BaseForm . length ; i ++ ) { if ( c == BaseForm [ i ] ) { return MedialForm [ i ] ; } } return c ; }
function getFormCharacterFE ( c , formArr ) { for ( var i = 0 ; i < BaseForm . length ; i ++ ) { if ( c == BaseForm [ i ] ) { return formArr [ i ] ; } } return c ; }
function getLamAlefFE ( alef06 , LamAlefForm ) { for ( var i = 0 ; i < AlefTable . length ; i ++ ) { if ( alef06 == AlefTable [ i ] ) { return LamAlefForm [ i ] ; } } return alef06 ; }
function failure_message ( failures ) { var count = failures . length ; if ( count === 1 ) { return "1 JSHINT Failure" ; } else { return count + " JSHint Failures" ; } }
function ( list , index , target , record ) { Ext . Msg . alert ( 'You tapped leaf! : ' + record . get ( 'text' ) ) ; }
function ( dir ) { if ( ! existslib . existsSync ( dir ) ) return fs . mkdirSync ( dir ) ; }
function ( err , albums ) { res . render ( 'artist' , { title : artist . name , artist : artist , albums : albums } ) ; }
function ( ) { var shim = this . _boundingBox . shim ; if ( shim ) { shim . sync ( ) ; } } : function ( ) { }
function ( ) { var shim = this . _boundingBox . shim ; if ( shim ) { shim . sync ( ) ; } } : function ( ) { }
function ( ) { var shim = this . _boundingBox . shim ; if ( shim ) { shim . sync ( ) ; } } : function ( ) { }
function ( ) { new SNAKE . Game ; }
function ( e ) { e . stop ( ) ; }
function ( result ) { typeData . location = srv . mapify ( result . content . locationTypes ) ; }
function ( result ) { typeData . building = srv . mapify ( result . content . buildingTypes ) ; }
function ( ) { console . log ( $ ( this ) . attr ( 'alt' ) ) ; }
function ( ) { var ctx = prop . uiContext ; var w = prop . uiCanvas . width ; var h = prop . uiCanvas . height ; ctx . clearRect ( 0 , 0 , w , h ) ; prop . strokeCount = 0 ; }
function onMouseUp ( e ) { if ( ! prop . enabled ) return true ; prop . strokeCount ++ ; prop . mouseDown = false ; prop . started = false ; prop . uiContext . closePath ( ) ; }
function ( req , res ) { 'use strict' ; res . writeHead ( 200 , { 'Content-Type' : 'text/html' } ) ; res . end ( '<h1>Hello beer.js!!</h1>' ) ; }
function ( test ) { 'use strict' ; test . expect ( 1 ) ; test . ok ( 1 , "this assertion should FAIL!!" ) ; test . done ( ) ; }
function ( ) { return this . statusCode == 500 || this . type === "ProvisionedThroughputExceededException" || this . type === "Throttling" ; }
function ( ) { var err = new AmazonError ( { statusCode : 400 , type : "com.amazonaws.dynamodb.v20111205#Throttling" } ) ; err . retry . should . be . true ; }
function ( ) { $ ( "#gameMenu" ) . toggle ( 100 ) ; setTimeout ( function ( ) { $ ( "#workarea" ) . bind ( "click" , hidePushPopMenu ) ; } , 500 ) ; }
function ( ) { $ ( "#workarea" ) . unbind ( "click" , hidePushPopMenu ) ; $ ( "#gameMenu" ) . hide ( ) ; }
function ( event ) { if ( event . target != sidebarPopup [ 0 ] ) { closeSidebarPopup ( ) ; } }
function ( ) { projects . push ( $ ( this ) . parent ( '.project-item' ) . data ( 'id' ) ) ; }
function ( doc , cdt , cdn ) { cur_frm . set_footnote ( wn . markdown ( cur_frm . meta . description ) ) ; }
function ( doc , cdt , cdn ) { cur_frm . call_server ( 'get_transactions' , '' , cur_frm . cscript . update_selects ) ; cur_frm . cscript . select_doc_for_series ( doc ) ; }
function ( elem , match ) { return ( match === "*" && elem . nodeType === 1 ) || ! ! elem . nodeName && elem . nodeName . toLowerCase ( ) === match ; }
function ( ) { window . sessionStorage . setItem ( 'humpinatorPostSaver' , encodeURIComponent ( $ ( 'textarea[name="message"]' ) . val ( ) ) ) ; }
function ( ) { var savedpost = window . sessionStorage . getItem ( 'humpinatorPostSaver' ) ; if ( savedpost ) { $ ( 'textarea[name="message"]' ) . val ( decodeURIComponent ( savedpost ) ) ; window . sessionStorage . removeItem ( 'humpinatorPostSaver' ) ; } }
function ( objects , sync , fn ) { objects . doc2 = new lXapian . Document ( ) ; fn ( null ) ; }
function ( objects , sync , fn ) { objects . doc3 = new lXapian . Document ( ) ; fn ( null ) ; }
function ( ) { $ ( "#post" ) . cleditor ( ) ; }
get node ( ) { return require ( "./runners/node" ) ; } ,
function ( ) { var authorized = client . authorized || client . authorizationError === hosterr ; console . error ( 'expected: ' + ok + ' authed: ' + authorized ) ; assert . equal ( ok , authorized ) ; server . close ( ) ; }
function ( ) { jQuery ( this ) . dialog ( 'close' ) ; model . setFile ( filepath , editor . getSession ( ) . getValue ( ) , 1 , null , null , handle409 ) ; }
function ( ) { this . isLoaded = true ; PersistenceManager . init ( ) ; Cache . init ( ) ; this . onLoad ( ) ; }
function ( data ) { this . fire ( 'datachange' , { action : 'delete' , id : id } ) ; if ( success ) success . call ( context , deltaId ) ; }
function ( ) { return this . events . fire . apply ( this . events , arguments ) ; }
function ( ) { return this . list . length ; }
function ( ) { isSyncing = false ; isLive = ! ( Cache . isActive ( ) && ! Cache . isOnline ( ) ) ; Log . info ( "Synced with server" ) ; }
function ( ) { Log . info ( "Could sync with server" ) ; }
function ( ) { var classes = typeof this . typeList !== 'undefined' ? this . typeList : '' ; return classes + ' ' + this . data . name ? this . data . name : '' ; }
function ( name ) { return typeof this . views [ name ] !== 'undefined' ; }
function ( name ) { return typeof this . forms [ name ] !== 'undefined' ; }
function ( name ) { return typeof this . elements [ name ] !== 'undefined' ; }
function ( name ) { if ( this . views . hasOwnProperty ( name ) ) { this . views [ name ] . destroy ( ) ; delete this . views [ name ] ; } }
function ( name ) { if ( name == 'ui-view' ) return this ; if ( ! this . views . hasOwnProperty ( name ) ) throw "View '" + name + '" not found' ; return this . views [ name ] ; }
function ( ) { var router = restful . createRouter ( fixtures . Creature ) ; this . callback ( null , router ) ; }
function ( ) { var router = restful . createRouter ( [ fixtures . Creature , fixtures . User ] ) ; this . callback ( null , router ) ; }
function ( ) { var s = d . createElement ( 'script' ) ; s . src = c . engineDir + 'platform/jsloader.js' ; d . body . appendChild ( s ) ; s . c = c ; s . id = 'cocos2d-html5' ; }
function ( techIdent ) { return ( bemUtil . isPath ( techIdent ) && this . resolveTechPath ( techIdent ) ) || ( this . getLevel ( ) && this . resolveTechName ( techIdent ) ) || bemUtil . getBemTechPath ( techIdent ) ; }
function ( ) { return this . level ; }
function ( name , path ) { return createTech ( this . resolveTech ( path || name ) , name , this ) ; }
function ( item ) { if ( val === ( options . valueAccessor ? options . valueAccessor ( item ) : item ) ) counter ++ ; }
function ( ) { ko . cleanNode ( $ ( '#testContainer' ) [ 0 ] ) ; $ ( '#testContainer' ) . empty ( ) ; ko . validation . reset ( ) ; }
function ( path ) { ASSERT ( typeof path === "string" ) ; return path . length === 0 ? [ ] : path . split ( "/" ) . reverse ( ) ; }
function inviteToShareOnTwitter ( ) { $ ( '.fb_share.btn' ) . hide ( ) ; $ ( '.fb_share_message' ) . hide ( ) ; $ ( '.tweet' ) . show ( ) ; $ ( '.sharing-message' ) . text ( "You shared on Facebook! How about Twitter?" ) ; }
function ( ) { this . $el . html ( this . template ( this . model . attributes ) ) ; return this ; }
function dateFields ( model ) { return _ . filter ( model . constructor . metadata . fields , function ( field ) { return field . type == 'Date' } ) ; }
function ( tweet ) { var view = new TweetView ( { model : tweet } ) ; this . tweetListEl . append ( view . render ( ) . el ) ; tweetViews . push ( view ) ; Tweets . sort ( ) ; }
function getInfoLogMessagePrefix ( ) { return 'INFO [' + new Date ( ) . toString ( ) + '] CacheBlockFirstThenAsync: ' ; }
function storeNewCachedValue ( value ) { _cachedValue = value ; opt . nonErrorCallbackCount ++ ; opt . lastGet = new Date ( ) ; opt . logInfo ( 'updated the cached value %s times' , opt . nonErrorCallbackCount ) ; }
function getSharedViewModel ( forSectionName ) { return { topLevelMenuItems : getTopLevelMenuItems ( forSectionName ) } ; }
function gotReadingList ( error , readingListItems ) { if ( error ) { callback ( error ) ; } else { callback ( null , { title : 'Reading list' , items : readingListItems , shared : getSharedViewModel ( 'reading' ) } ) ; } }
function ( ) { return this . selection [ 0 ] === document . activeElement ; }
function ( updateSettings ) { callback ( null , updateSettings ) ; }
function ( error ) { callback ( error , null ) ; }
function ( errors , results ) { if ( errors ) { } else { } }
function ( error ) { }
function resetUploadStatus ( ) { $ ( '#upload-progress' ) . show ( ) ; $ ( '#upload-progress .bar' ) . width ( 0 ) . show ( ) ; $ ( '#thesis-submit' ) . addClass ( 'disabled' ) $ ( '#upload-error' ) . hide ( ) ; }
function ( name ) { ASSERT ( typeof name === "string" ) ; return name . slice ( - COLLSUFFIX . length ) !== COLLSUFFIX ; }
function ( iterator , context ) { return baidu . each ( this , iterator , context || this ) ; }
function ( array , iterator , context ) { return baidu . type . isArray ( array ) ? array . each ( iterator , context ) : array ; }
function ( array , filter , context ) { return baidu . type . isArray ( array ) ? array . filter ( filter , context ) : [ ] ; }
function ( ) { var n ; n = count_constraints ( ) ; return $ ( 'div#group_constraints' ) . append ( "      <div id = 'c" + n + "_constraint' class = 'constraint'>        <select name = 'c" + n + "_criteria'>          <option>Short name</option>          <option>Fullname</option>          <option>Course ID #</option>          <option>Category</option>        </select>        <select name = 'c" + n + "_operator'>          <option>is</option>          <option>is not</option>          <option>contains</option>          <option>does not contain</option>        </select>        <span id = 'c" + n + "_search_term_0'>          <input name = 'c" + n + "_search_term_0' type = 'text'/>          <input id = 'c" + n + "_st_num' value = '1' type = 'hidden'/>          <img src = 'images/add.png' class = 'add_search_term'/>        </span>      </div>    " ) ; }
function ( start , end ) { this . textBox . setSelectionRange ( start , end ) ; }
function ( context ) { return ( ! this . isInOtherPanel ( context ) && Firebug . commandEditor ) ? this . getCommandEditor ( ) . getExpression ( ) : this . getSingleRowCommandLine ( ) . value ; }
function ( xhr ) { return xhr . withCredentials = true ; }
function ( xhr ) { return xhr . withCredentials = true ; }
function ( ) { var user ; user = loadUser ( ) ; return user . userId ; }
function select ( ) { _draggable . selected = true ; _element . setAttribute ( "selected" , true ) ; }
function deselect ( ) { _draggable . selected = false ; _element . removeAttribute ( "selected" ) ; }
function ( ) { _draggable . selected = false ; element . removeEventListener ( "mousedown" , onMouseDown , false ) ; }
function ( ) { $ ( '.Mi .ot-anchor' ) . each ( P . comment ) ; }
function ( ) { $ ( this ) . find ( '.Mi .ot-anchor' ) . each ( P . comment ) ; }
function ( ) { $ ( 'body' ) . on ( 'mouseenter' , '.ii' , post ) . on ( 'mouseenter' , '.Ho' , comment ) . on ( 'mouseenter' , '.UW' , album ) ; }
function ( ) { $ ( 'body' ) . off ( 'mouseenter' , '.ii' , post ) . off ( 'mouseenter' , '.Ho' , comment ) . off ( 'mouseenter' , '.UW' , album ) ; }
function ( ) { grabbingNode = true ; setTimeout ( resetToDefaultState , 10 ) ; }
function ( ) { if ( ! base . has ( 'testPageView' ) ) { base . set ( 'testPageView' , new testPageView ) ; } base . get ( 'testPageView' ) . render ( ) ; this . switchPage ( 'testPage' ) ; }
function find_value_and_highlight_term ( template , value , term ) { if ( term && term != "" ) return template . replace ( new RegExp ( "(?![^&;]+;)(?!<[^<>]*)(" + value + ")(?![^<>]*>)(?![^&;]+;)" , "g" ) , highlight_term ( value , term ) ) ; else return template ; }
function ( ) { if ( this . _listener ) { this . clearEventListener ( ) ; } if ( this . parentNode ) { this . parentNode . removeChild ( this ) ; } }
function ( ) { this . sendEncounterData ( personUuid , localStorage . regUuidencountertype , llocalStorage . waitingUuidlocation , localStorage . loggedInUser ) }
function ( node ) { if ( node . attrs . id !== undefined ) { delete this . ids [ node . attrs . id ] ; } }
function ( ) { var index = that . attrs . index ; that . _updateIndex ( ) ; if ( that . afterFrameFunc && index === that . afterFrameIndex ) { that . afterFrameFunc ( ) ; } }
function ( ev ) { this . model . destroy ( ) ; }
function ( ) { var self = this ; this . $el . html ( '' ) ; this . model . each ( function ( m ) { self . _addTable ( m ) ; } ) ; }
function ( m ) { var li = new TableView ( { model : m } ) ; this . $el . append ( li . render ( ) . el ) ; this . addView ( li ) ; this . _updateListHeader ( ) ; }
function ( tag_name ) { var tag_names = this . _hidden_tags_input . val ( ) ; this . _hidden_tags_input . val ( tag_names + ' ' + tag_name ) ; $ ( '.acResults' ) . hide ( ) ; }
function ( ) { me . removeSelectedTag ( tag_name ) ; tag . dispose ( ) ; $ ( '.acResults' ) . hide ( ) ; }
function onsuccess ( ) { contactsList . refresh ( myContact ) ; reloadContactDetails ( myContact ) ; navigation . back ( ) ; }
function ( tableName , data ) { try { Private . initInsert ( tableName , data ) ; } catch ( error ) { WebbaseUtility . Log . show ( error . message ( ) ) ; } }
function ( key , value ) { var content = get ( this , 'content' ) ; Ember . assert ( fmt ( "Cannot delegate set('%@', %@) to the 'content' property of object proxy %@: its 'content' is undefined." , [ key , value , this ] ) , content ) ; return set ( content , key , value ) ; }
function ( req , res ) { 'use strict' ; res . writeHead ( 200 , { 'Content-Type' : 'text/html' } ) ; res . end ( '<h1>Hello Nuzz!</h1>' ) ; }
function ( test ) { 'use strict' ; test . expect ( 1 ) ; test . ok ( 1 , "this assertion should FAIL!!" ) ; test . done ( ) ; }
function ( done ) { console . log = oldConsoleLog ; process . stdout . write = oldStdout ; done ( ) ; }
function ( e ) { if ( e . keyCode === 13 ) { e . preventDefault ( ) ; sendText ( ) ; } }
function ( req , res , params ) { this . sessions . createSession ( req , res , { userId : 9 } ) ; res . end ( ) ; }
function ( ) { if ( this . _images ) { this . _setState ( 0 , 1 ) ; this . _slideshowCount = 0 ; this . _setSlideshowInterval ( ) ; this . fireEvent ( "start" ) ; } }
function ( milliseconds , callback ) { if ( typeof milliseconds === 'function' ) { return callback ( new Error ( 'Error: not a valid time to wait' ) ) ; } else { setTimeout ( callback , milliseconds ) ; } }
function ( err ) { console . log ( 'knox request error: ' + method ) ; }
function ( err ) { console . log ( 'putStream req error, calling cb %s' , err ) ; fn ( err , null ) ; }
function ( res ) { fn ( null , res ) ; } ) . on ( 'error' , function ( error ) { console . log ( 'calling del file cb' ) ; fn ( error ) ; }
function ( e ) { this . updateFromEditForm ( ) ; }
function ( message , i ) { io . sockets . emit ( 'broadcast' , JSON . parse ( message ) ) ; }
function ( ) { return _this . enqueue ( new RadiusEffect ( dot , fadeOutDuration , { startRadius : endRadius , endRadius : startRadius , callback : function ( ) { } } ) ) ; }
function ( event ) { if ( event . target === this . $wrapperDiv [ 0 ] ) { this . close ( ) ; } }
function ( fnc ) { for ( var i = 0 ; i < this . length ; i ++ ) { if ( false === fnc . call ( this , this [ i ] ) ) break } return this }
function ( e ) { if ( ! e . disabled ) { paths . push ( { path : e . path , label : e . name } ) ; } }
function ( inKind ) { return this . presentProperties ( this . showInherited ? inKind . allProperties : inKind . properties , inKind ) ; }
function ( overlays ) { return overlays . hide ( ) ; }
function ( overlays ) { return overlays . show ( ) ; }
function ( args ) { komoo . event . trigger ( that , eventName , args ) ; }
function ( ) { $ ( this . el ) . text ( "Red!" ) ; return this ; }
function ( ) { router . navigate ( 'red' , { trigger : true } ) ; }
function hashFor ( onChangeEvent ) { var newURL = onChangeEvent ? onChangeEvent . newURL : null ; if ( newURL ) { return newURL . replace ( /.*#/ , '' ) ; } return dloc . hash . replace ( /^#/ , '' ) ; }
function ( ) { var section = this . innerHTML ; history . pushState ( { section : section } , '' , '#' + section ) ; show_section ( section ) ; }
function ( value ) { Selections . remove ( value ) ; selections_holder . find ( 'li[data-value = "' + escapeHtml ( value ) + '"]' ) . remove ( ) ; }
function ( e ) { Search . runSearch ( ) ; }
function show ( ) { if ( orientation ) { orientation = screen . mozOrientation ; oriDisplay . innerHTML = orientation ; oriStatus . innerHTML = "PASS" ; } else { oriDisplay . innerHTML = "Not Supported" ; oriStatus . innerHTML = "FAIL" ; } }
function ( event ) { if ( ! ctrlKeyPressed ) { noSelection ( event ) ; } }
function ( ) { var value = get ( this , 'value' ) ; if ( value !== this . $ ( ) . val ( ) ) { this . $ ( ) . val ( value ) ; } }
function ( err , data ) { if ( data . hits ) { callback ( null , parseInt ( data . hits . total ) ) ; } else { callback ( err ) ; } }
function ( ed ) { this . parseCurrentLine ( ed , 0 , '' , true ) ; }
function attemptMergeWithPrevious ( e , allowDifferentListStyles , mergeParagraphs ) { var prev = skipWhitespaceNodesBackwards ( e . previousSibling ) ; if ( prev ) { return attemptMerge ( prev , e , allowDifferentListStyles ? prev : false , mergeParagraphs ) ; } else { return e ; } }
function isTabInList ( e ) { return e . keyCode === tinymce . VK . TAB && ! ( e . altKey || e . ctrlKey ) && ( ed . queryCommandState ( 'InsertUnorderedList' ) || ed . queryCommandState ( 'InsertOrderedList' ) ) ; }
function ( ) { return Matrix . create ( this . elements ) ; }
function replaceProtocol ( req ) { return 'https://' + req . headers . host + req . url ; }
function resetResponse ( ) { res = { redirect : function ( url ) { throw Error ( 'Redirection to ' + url ) ; } } ; }
function ( ) { expect ( middlewares . proxy ) . to . be . a ( 'function' ) ; expect ( proxy ) . to . be . a ( 'function' ) ; }
function ( done ) { req . secure = true ; expect ( function ( ) { ensureHttps ( req , res , function next ( ) { done ( ) ; } ) ; } ) . not . to . throwException ( ) ; }
function ( url ) { expect ( url ) . to . be ( 'https://127.0.0.1:80/faq.html' ) ; done ( ) ; }
function ( ) { priv . editProxy . data ( 'typeahead' ) . lookup ( ) ; }
function ( ) { priv . editProxy [ 0 ] . focus ( ) ; editproxy . beginEditing ( true ) ; priv . stopNextPropagation = false ; }
function ( ) { self . level ++ ; var levelCookie = self . getCookieLevel ( ) ; if ( ! levelCookie || levelCookie < self . level ) self . setCookie ( 'level' , self . level . toString ( ) ) ; }
function ( i ) { iColumn = aiColumns [ i ] ; this . style . width = that . s . aiInnerWidths [ iColumn ] + "px" ; }
function ( i ) { iColumn = aiColumns [ i ] ; this . style . width = that . s . aiInnerWidths [ iColumn ] + "px" ; }
function ( e ) { return jsv . debugMode ? ( "Error: " + ( e . message || e ) ) + ". " : '""' ; }
f var tmplConverter = tmpl . converters ; tmplConverter = tmplConverter && tmplConverter [ converter ] || converters [ converter ] ; return tmplConverter ? tmplConverter . call ( view , text ) : ( error ( "Unknown converter: {{" + converter + ":" ) , text ) ; }
function error ( message ) { if ( jsv . debugMode ) { throw new jsv . Error ( message ) ; } }
function unwatch_FileEventEmitter ( ) { fs . unwatchFile ( this . path ) ; this . emit ( 'async-fs::file::stopped_watching' , { path : this . path } ) ; }
function ( item ) { if ( ! initial_envs && item . select ) { initial_envs = [ item ] ; } }
function ( ) { if ( Radar . urlController . get ( 'selectedFromURL' ) . indexOf ( this . path ) != - 1 ) { this . set ( 'selected' , true ) ; } else { this . set ( 'selected' , false ) ; } }
function ( accessoryType ) { this . _accessoryType = ( accessoryType !== Pushpop . TableViewCell . AccessoryType . None ) ? accessoryType : null ; }
function ( editingAccessoryType ) { this . _editingAccessoryType = ( editingAccessoryType !== Pushpop . TableViewCell . EditingAccessoryType . None ) ? editingAccessoryType : null ; }
function ( ) { element . select ( ) ; }
function clear ( ) { clusterer . clearMarkers ( ) ; }
function ( e ) { mouseIsDown = false ; theScene . onmouseup ( e ) ; }
function ( key , width ) { var len ; len = Math . max ( 0 , width - ( "" + key ) . length ) ; return Array ( len + 1 ) . join ( '0' ) + key ; }
function showThirdPartyModules ( ) { if ( $ ( "#third-party-package-summaries" ) . html ( ) != "" ) { $ ( "#third-party-packages-subsection" ) . show ( ) ; } }
function resetMatchedElement ( ) { if ( matchedElement ) { matchedElement . css ( 'background-color' , originalBgColor ) ; matchedElement . unbind ( 'click.annotator' ) ; } }
function onMessage ( message ) { if ( false === next ( raw ? message : message . json ) && listener ) { messageManager . removeMessageListener ( address , listener ) ; listener = null ; } }
function ( iid ) { if ( iid . equals ( Ci . nsIServerSocketListener ) || iid . equals ( Ci . nsISupports ) ) return this ; throw Cr . NS_ERROR_NO_INTERFACE ; }
function updateSearch ( ) { var inputbox = document . getElementById ( "askQuestionInput" ) ; if ( inputbox . value != prevSearchQuery ) { prevSearchQuery = inputbox . value ; changePage ( 0 ) ; } }
function ( ) { return function ( ) { return new N3Parser ( { documentURI : 'doc/file.ttl' } ) ; } ; }
function ( ) { $ ( this ) . fadeOut ( 1500 ) ; }
function ( tile ) { var y = round ( tile . y ) , x = round ( tile . x ) ; return this . tilemap [ y ] [ x ] . isBlocking ( ) ; }
function ( tile ) { var y = round ( tile . y ) , x = round ( tile . x ) ; return this . tilemap [ y ] [ x ] . isBlocking ( ) ; }
function ( b ) { show . data = b . time_t ; }
function ( e ) { if ( self !== null ) method ( e . detail , caller , e ) ; }
function ( post ) { var uid = $jq ( ".posteruid" , post . el ) . first ( ) . text ( ) ; return uid != "(ID: Heaven)" && ! onlineIDs [ uid ] ; }
function ( ) { for ( var key in _animator . getQueue ( ) ) return false ; return _animator ; }
function ( ) { lostServer . show ( ) ; }
function ( ) { if ( App . Settings . Debug . enabled ) { console . error ( 'Error loading module ' + name ) ; } d . reject ( ) ; }
function ( ) { console . warn ( 'Error: ' + appPartsLocation + appParts [ i ] + '.js' ) ; }
function ( observer , context ) { var ctx = context || null ; this . _observers . push ( { observer : observer , context : ctx } ) ; }
function ( observer , context ) { for ( var i in this . _observers ) if ( this . _observers [ i ] . observer == observer && this . _observers [ i ] . context == context ) delete this . _observers [ i ] ; }
function ( ) { App . EM . trig ( 'SubFolder/workDialog:openDialog' ) ; }
function ( ) { if ( ! this . isPlaying ( ) ) return ; this . stop_ ( true ) ; }
function ( address ) { if ( typeof address === 'number' ) return null ; if ( typeof address === 'string' ) return address . split ( ':' ) [ 0 ] ; }
function ( data ) { var tokens ; this . savedBuffer += data ; tokens = this . savedBuffer . split ( '\0' ) ; if ( tokens . pop ( ) ) return [ ] ; this . savedBuffer = '' ; return tokens ; }
function ( subject , data , callback ) { if ( callback == null ) callback = null ; return this . send ( subject , data , callback ) ; }
function ( ) { if ( onsuccess ) onsuccess ( null ) ; }
function ( ) { createController ( { email : "testuser@testuser.com" } ) ; ok ( $ ( "#newEmail" ) . val ( ) , "testuser@testuser.com" , "email prepopulated" ) ; }
function ( ) { createController ( { window : win , add : false , email : "unregistered@testuser.com" , auth_url : "http://testuser.com/sign_in" , siteTOSPP : true } ) ; testElementExists ( ".tospp" , "tospp has been added to the DOM" ) ; }
function ( toTest , msg ) { equal ( typeof toTest , "undefined" , msg || "object is undefined" ) ; }
function ( toTest , msg ) { notEqual ( typeof toTest , "undefined" , msg || "object is defined" ) ; }
function ( className ) { if ( className != showSelector ) { dom . hide ( "." + className + ":not(." + showSelector + ")" ) ; } }
function enterEmailState ( ) { if ( ! dom . is ( "#email" , ":disabled" ) ) { this . submit = checkEmail ; showHint ( "start" ) ; } }
function onWindowUnload ( ) { this . publish ( "window_unload" ) ; }
function ( msg , info ) { info = info || { } ; info . siteTOSPP = self . siteTOSPP ; startAction ( "doAuthenticate" , info ) ; }
function ( ) { startAction ( "doPickEmail" , { origin : self . hostname , siteTOSPP : self . siteTOSPP } ) ; }
function ( msg , info ) { self . resetPasswordEmail = info . email ; info = helpers . extend ( info || { } , { siteTOSPP : self . siteTOSPP } ) ; startAction ( false , "doForgotPassword" , info ) ; }
function ( msg , info ) { info = info || { } ; self . stagedEmail = info . email ; startAction ( false , "doResetPassword" , info ) ; }
function ( ) { if ( ! isPendingSelection ) return ; isPendingSelection = false ; tableViewCell . didReceiveTap ( ) ; self . selectRowAtIndex ( tableViewCell . getIndex ( ) ) ; }
function ( ) { var uo = new UiOverlay ( ) ; uo . hide ( ) ; location . hash = "#logout" ; }
function ( attributes ) { this . _modelBinder = new Backbone . ModelBinder ( ) ; this . settings = attributes . settings ; this . render ( ) ; }
function ( e ) { e . preventDefault ( ) ; this . settings . get ( 'fields' ) . add ( this . model . clone ( ) ) ; this . $el . modal ( 'hide' ) ; }
function ( model , response ) { var url = window . location . pathname ; window . location . href = url . substr ( 0 , url . lastIndexOf ( '/' ) ) ; }
function ( ) { app . use ( express . bodyParser ( ) ) ; app . use ( app . router ) ; app . use ( express . static ( __dirname + '/images' ) ) ; }
function ( thisp , k , v ) { if ( key . test ( k ) && typeof my . cache [ k ] . value !== 'undefined' ) { delete my . cache [ k ] ; } }
function doneStop ( ) { self . signal ( "finalize" , dfdFinalize ) ; }
function deferredStop ( dfdStop ) { dfdStop . then ( function doneStop ( ) { self . signal ( "finalize" , dfdFinalize ) ; } , dfdFinalize . reject , dfdFinalize . notify ) ; self . signal ( "stop" , dfdStop ) ; }
function ( session ) { this . createSession ( session ) ; this . checkCookie ( session ) ; this . adminInterface ( ) ; this . showAllList ( ) ; this . submitNewFile ( ) ; this . addToDataSet ( ) ; }
function loadMonitor ( event ) { event . target . removeEventListener ( 'load' , loadMonitor ) ; if ( -- loadCounter <= 0 ) { initialisationComplete ( ) ; } ; }
function onConnect ( ) { debug ( 'Connected, starting handshake' ) var packet = new OutgoingPacket ( self , packets . TYPE_HANDSHAKE , binson . calculate ( options . handshake ) ) packet . writeBinson ( options . handshake ) self . sendPacket ( packet ) }
function ( root , factory ) { if ( typeof define === 'function' && define . amd ) { define ( [ 'underscore' , "jquery" , "backbone" ] , factory ) ; } }
function ( e ) { if ( this . suppressKeyPressRepeat ) return this . move ( e ) }
function ( e ) { if ( this . suppressKeyPressRepeat ) return this . move ( e ) }
function ( e ) { if ( $ . bbq . getState ( "repo" ) ) { repos . hideList ( ) ; } else { $ ( "#nextRepoPage" ) . hide ( ) ; repos . showList ( ) ; } }
function ( ) { return _InExpressionEmitter . _operatorPrecedence ; }
function onsuccess ( ) { if ( callback ) { callback ( deleteRequest ) ; } }
function onerror ( ) { if ( callback ) { callback ( null ) ; } window . setTimeout ( pendingMgr . deleteFromMsgDB ( msg , callback ) . bind ( pendingMgr ) , 500 ) ; }
function ( results ) { results [ 0 ] . set ( "like" , results [ 0 ] . get ( "like" ) ++ ) ; results [ 0 ] . save ( ) ; }
function ( data , template ) { template = template || this . options . template ; var compiler = this . Template || ( this . Template = new Epitome . Template ( ) ) ; return compiler . template ( template , data ) ; }
function ( localeCode ) { return ! localeCode ? CurrentLocalization : getLocalization ( localeCode , false ) ; }
function ( localeCode ) { return ! localeCode ? CurrentLocalization : getLocalization ( localeCode , false ) ; }
function ( a , b ) { b . split ( "" ) . forEach ( function ( c ) { Ub [ c ] = a } ) ; Vb += b }
function ( ) { if ( ! this . rest ) { return 1 ; } else { return 1 + this . rest . length ( ) ; } }
function browser_goBack ( ) { this . currentTab . dom . goBack ( ) ; }
function browser_goForward ( ) { this . currentTab . dom . goForward ( ) ; }
function ( existingPlace ) { if ( ! existingPlace ) this . db . savePlace ( place , callback ) ; }
function gh_addVisit ( uri , callback ) { this . addPlace ( uri ) ; var visit = { uri : uri , timestamp : new Date ( ) . getTime ( ) } ; this . db . saveVisit ( visit , callback ) ; }
function ( r ) { if ( r . status == 'success' ) { $ ( "#testplan-tree" ) . jstree ( "refresh" , - 1 ) ; } }
function ( r ) { show_notification_dialog ( r . status , r . message ) ; }
function extend ( dest , src ) { for ( var prop in src ) { if ( src . hasOwnProperty ( prop ) ) { dest [ prop ] = src [ prop ] } } return dest }
function ( ) { Services . obs . notifyObservers ( observerSubject , CSP_VIOLATION_TOPIC , violatedDirective ) ; reportSender . sendReports ( blockedContentSource , originalUri , violatedDirective , aSourceFile , aScriptSample , aLineNum ) ; }
function ( variable , message ) { if ( message ) console . log ( message ) ; console . log ( variable ) ; return console . log ( '' ) ; }
function ( x ) { "http://purl.org/NET/c4dm/event.owl#place" if ( x . get ( "http://purl.org/NET/c4dm/event.owl#place" ) ) { return x . get ( "http://purl.org/NET/c4dm/event.owl#place" ) ; } }
function console_disconnect ( ) { Client . connection . disconnect ( ) ; return false ; }
function ( post ) { var mykey = 'stats.a_test_value.mean_90' ; return _ . include ( _ . keys ( post ) , mykey ) && ( post [ mykey ] == testvalue ) ; }
function ( post ) { var mykey = 'stats.a_test_value.rate' ; return _ . include ( _ . keys ( post ) , mykey ) && ( post [ mykey ] == ( testvalue / ( me . myflush / 1000 ) ) ) ; }
function ( post ) { var mykey = 'stats.a_test_value.count' ; return _ . include ( _ . keys ( post ) , mykey ) && ( post [ mykey ] == testvalue ) ; }
function ( filepath ) { return 'docs/' + path . basename ( filepath ) + '_' + path . extname ( filepath ) . replace ( '.' , '' ) + '.html' ; }
function ( event ) { fluid . log ( "Direct proceed through " + event . type + " on " + fluid . dumpEl ( event . target ) ) ; that . blurPending = false ; that . options . handler ( control ) ; }
function ( schemaValue ) { var type = fluid . isPrimitive ( schemaValue ) ? schemaValue : schemaValue . type ; return type === "array" ? [ ] : { } ; }
function ( uri ) { return /^file:\/\// . test ( uri ) ; }
function DV_initializePanes ( ) { let stackframes = document . getElementById ( "stackframes+breakpoints" ) ; stackframes . setAttribute ( "width" , Prefs . stackframesWidth ) ; let variables = document . getElementById ( "variables" ) ; variables . setAttribute ( "width" , Prefs . variablesWidth ) ; }
function DV_destroyPanes ( ) { let stackframes = document . getElementById ( "stackframes+breakpoints" ) ; Prefs . stackframesWidth = stackframes . getAttribute ( "width" ) ; let variables = document . getElementById ( "variables" ) ; Prefs . variablesWidth = variables . getAttribute ( "width" ) ; }
function DVP_initialize ( ) { this . _vars = document . getElementById ( "variables" ) ; this . emptyText ( ) ; this . createHierarchyStore ( ) ; }
function ( url ) { let loc = url . href + url . leaf ; vs . addScript ( ss . getScriptLabel ( loc , url . href ) , { url : loc } ) ; }
function ( url ) { let loc = url . href + url . leaf ; vs . addScript ( ss . getScriptLabel ( loc , url . href ) , { url : loc } , true ) ; }
function ( ) { this . _super ( ) ; this . _color = cc . WHITE ( ) ; this . _opacityModifyRGB = false ; this . _fontStyleStr = "" ; }
function ( ) { return "Testing cc.LabelBMFont with Chinese character" ; }
function ( ) { queue . stop ( ) ; }
function ( ) { queue . stop ( ) ; }
function ( err , data , next ) { console . log ( 'LOG: ' , data ) ; next ( ) ; }
function ( ) { queue . onAny ( logMsg ) ; }
function ( ) { if ( endHandler ) endHandler ( _cursor ) ; }
function RemoteDebuggerPrompt ( ) { this . remote = { } ; }
function ( ev ) { var page = $ ( this ) . val ( ) ; showPage ( page , null , true ) ; ev . preventDefault ( ) ; }
function ( attrs ) { return attrs . shift ( ) . replace ( /^'|'$/g , '' ) + '(' + attrs . shift ( ) + ')' ; }
function handleDrag_dragleave ( e , handleDrag ) { if ( ! this . inChild ) { $ . single ( e . target ) . removeClass ( 'over' ) ; } }
function ( ) { testPasswordChangeFailure ( generateString ( bid . PASSWORD_MAX_LENGTH + 1 ) , "newpassword" , "missing old password, expected failure" ) ; }
function ( ) { testPasswordChangeFailure ( "oldpassword" , generateString ( bid . PASSWORD_MAN_LENGTH + 1 ) , "too short new password, expected failure" ) ; }
function ( ) { c . add ( { id : 1 } ) ; expect ( c . length ) . toEqual ( 1 ) ; }
function ( ) { c . add ( m ) ; expect ( c . get ( 1 ) ) . toBe ( m ) ; expect ( c . length ) . toEqual ( 1 ) ; }
function checkBrowserWidth ( ) { var browserWidth = getBrowserWidth ( ) ; if ( browserWidth < 1000 ) { $ ( 'body' ) . addClass ( 'thin' ) ; } else { $ ( 'body' ) . removeClass ( 'thin' ) ; } }
function ( nodeId , item ) { return iq ( { type : 'get' } , exports . ownerNS ) . c ( 'affiliations' , { node : nodeId } ) . root ( ) ; }
function ( level , message , conn , isError ) { return this . server . _logIf ( level , message , conn , isError ) ; }
function switchToSecure ( ) { self . _logIf ( 1 , "Secure passive connection started" ) ; self . dataSocket = cleartext ; setupPassiveListener ( ) ; }
function ( ) { self . _logIf ( 3 , "Passive data event: end" , self ) ; self . dataSocket = null ; }
function ( err ) { self . _logIf ( 0 , "Passive data event: error: " + err , self ) ; self . dataSocket = null ; }
function ( had_error ) { self . _logIf ( ( had_error ? 0 : 3 ) , "Passive data event: close " + ( had_error ? " due to error" : "" ) , self . socket ) ; }
function ( ) { self . _logIf ( 3 , "...client has connected now" ) ; callback ( self . dataSocket ) ; }
function ( ) { this . _logIf ( 0 , "Client connection error: " + err , this . socket ) ; this . socket . destroy ( ) ; }
function ( ) { this . _logIf ( 1 , "Client connection ended" , this . socket ) ; }
function ( ) { this . _logIf ( 1 , "Connection" , this ) ; wwenc ( this . socket , "220 FTP server (nodeftpd) ready\r\n" ) ; }
function ( commandArg ) { wwenc ( this . socket , "211-Features\r\n" + " SIZE\r\n" + ( ! this . server . options . tlsOptions ? "" : " AUTH TLS\r\n" + " PBSZ\r\n" + " PROT\r\n" ) + "211 end\r\n" ) ; }
function normalErrorHandler ( e ) { self . _logIf ( 3 , "Error with passive data listener: " + util . inspect ( e ) , self ) ; }
function ( e ) { if ( e . code == 'EADDRINUSE' && i < self . server . options . pasvPortRangeEnd ) self . pasv . listen ( ++ i ) ; }
function ( ) { self . _logIf ( 3 , "Passive data listener closed" , self ) ; }
function ( err ) { if ( err ) self . _logIf ( 0 , "Error writing 'Goodbye' message following QUIT" , err ) ; self . socket . end ( ) ; self . _closeDataConnections ( ) ; }
function ( err ) { self . _logIf ( 0 , "Error closing file following write error" , err ) ; }
function ( err ) { if ( err ) { self . dataSocket . removeListener ( 'data' , dataHandler ) ; self . _logIf ( 0 , "Error closing file following error on dataSocket" , err ) ; wwenc ( self . socket , "426 Connection closed; transfer aborted\r\n" ) ; } }
function ( err ) { if ( err ) { self . _logIf ( 0 , "Error writing slurp buffer to file following 'end' message" , err ) ; wwenc ( self . socket , "426 Connection closed; transfer aborted\r\n" ) ; return ; } onceOnDisk ( ) ; }
function ( err ) { if ( err ) { self . _logIf ( 0 , "Error closing file following 'end' message" , err ) ; wwenc ( self . socket , "426 Connection closed; transfer aborted\r\n" ) ; return ; } wwenc ( self . socket , "226 Closing data connection\r\n" ) ; }
function ( error , mediaFile ) { tuid = mediaFile . target ; console . log ( "t_uid = " + tuid ) ; test . ok ( mediaFile . should . have . property ( 'target' ) ) ; test . done ( ) ; }
function ( keyword ) { if ( keyword instanceof C . Symbol ) { return new C . String ( keyword . value , keyword . yy ) ; } else if ( keyword instanceof C . String ) { return k ; } }
function ( keyword ) { if ( keyword instanceof C . Symbol ) { return new C . String ( keyword . value , keyword . yy ) ; } else if ( keyword instanceof C . String ) { return k ; } }
function ( ) { _ . bindAll ( this , 'notice' ) ; this . bind ( 'change:schema' , this . _prepareSchema , this ) ; this . _prepareSchema ( ) ; this . sqlView = null ; this . data ( ) ; }
function ( e , resp ) { cdb . log . error ( "can't rename column" ) ; self . error ( 'error renaming column' , resp ) ; }
function ( checkBoxId , componentId , type ) { var value = jQuery ( '#' + checkBoxId ) . attr ( 'checked' ) == 'checked' ; PropertyManager . saveComponentProperty ( componentId , type , value , currentCallback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Inspector.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Inspector.disable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Memory.getDOMNodeCount' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Memory.getProcessMemoryDistribution' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.disable' , paramObject , opt_callback ) ; }
function ( scriptSource , opt_callback ) { var paramObject = { 'scriptSource' : scriptSource , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.addScriptToEvaluateOnLoad' , paramObject , opt_callback ) ; }
function ( identifier , opt_callback ) { var paramObject = { 'identifier' : identifier , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.removeScriptToEvaluateOnLoad' , paramObject , opt_callback ) ; }
function ( ignoreCache , scriptToEvaluateOnLoad , opt_callback ) { var paramObject = { 'ignoreCache' : ignoreCache , 'scriptToEvaluateOnLoad' : scriptToEvaluateOnLoad , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.reload' , paramObject , opt_callback ) ; }
function ( url , opt_callback ) { var paramObject = { 'url' : url , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.navigate' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getCookies' , paramObject , opt_callback ) ; }
function ( cookieName , domain , opt_callback ) { var paramObject = { 'cookieName' : cookieName , 'domain' : domain , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.deleteCookie' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getResourceTree' , paramObject , opt_callback ) ; }
function ( frameId , url , opt_callback ) { var paramObject = { 'frameId' : frameId , 'url' : url , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getResourceContent' , paramObject , opt_callback ) ; }
function ( text , caseSensitive , isRegex , opt_callback ) { var paramObject = { 'text' : text , 'caseSensitive' : caseSensitive , 'isRegex' : isRegex , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.searchInResources' , paramObject , opt_callback ) ; }
function ( frameId , html , opt_callback ) { var paramObject = { 'frameId' : frameId , 'html' : html , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.setDocumentContent' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.canOverrideDeviceMetrics' , paramObject , opt_callback ) ; }
function ( result , opt_callback ) { var paramObject = { 'result' : result , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.setShowPaintRects' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.getScriptExecutionStatus' , paramObject , opt_callback ) ; }
function ( value , opt_callback ) { var paramObject = { 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Page.setScriptExecutionDisabled' , paramObject , opt_callback ) ; }
function ( objectId , ownProperties , opt_callback ) { var paramObject = { 'objectId' : objectId , 'ownProperties' : ownProperties , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.getProperties' , paramObject , opt_callback ) ; }
function ( objectId , opt_callback ) { var paramObject = { 'objectId' : objectId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.releaseObject' , paramObject , opt_callback ) ; }
function ( objectGroup , opt_callback ) { var paramObject = { 'objectGroup' : objectGroup , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.releaseObjectGroup' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.run' , paramObject , opt_callback ) ; }
function ( enabled , opt_callback ) { var paramObject = { 'enabled' : enabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Runtime.setReportExecutionContextCreation' , paramObject , opt_callback ) ; }
function ( ) { chrome . experimental . devtools . remoteDebug . registerEvent ( 'Runtime.isolatedContextCreated' , [ 'context' ] ) ; chrome . experimental . devtools . remoteDebug . addDomainListener ( 'Runtime' , this ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.disable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.clearMessages' , paramObject , opt_callback ) ; }
function ( enabled , opt_callback ) { var paramObject = { 'enabled' : enabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.setMonitoringXHREnabled' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.addInspectedNode' , paramObject , opt_callback ) ; }
function ( heapObjectId , opt_callback ) { var paramObject = { 'heapObjectId' : heapObjectId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Console.addInspectedHeapObject' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.disable' , paramObject , opt_callback ) ; }
function ( userAgent , opt_callback ) { var paramObject = { 'userAgent' : userAgent , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.setUserAgentOverride' , paramObject , opt_callback ) ; }
function ( headers , opt_callback ) { var paramObject = { 'headers' : headers , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.setExtraHTTPHeaders' , paramObject , opt_callback ) ; }
function ( requestId , opt_callback ) { var paramObject = { 'requestId' : requestId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.getResponseBody' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.canClearBrowserCache' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.clearBrowserCache' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.canClearBrowserCookies' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.clearBrowserCookies' , paramObject , opt_callback ) ; }
function ( cacheDisabled , opt_callback ) { var paramObject = { 'cacheDisabled' : cacheDisabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Network.setCacheDisabled' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.disable' , paramObject , opt_callback ) ; }
function ( databaseId , opt_callback ) { var paramObject = { 'databaseId' : databaseId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.getDatabaseTableNames' , paramObject , opt_callback ) ; }
function ( databaseId , query , opt_callback ) { var paramObject = { 'databaseId' : databaseId , 'query' : query , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Database.executeSQL' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'IndexedDB.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'IndexedDB.disable' , paramObject , opt_callback ) ; }
function ( requestId , frameId , opt_callback ) { var paramObject = { 'requestId' : requestId , 'frameId' : frameId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'IndexedDB.requestDatabaseNamesForFrame' , paramObject , opt_callback ) ; }
function ( requestId , frameId , databaseName , opt_callback ) { var paramObject = { 'requestId' : requestId , 'frameId' : frameId , 'databaseName' : databaseName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'IndexedDB.requestDatabase' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.disable' , paramObject , opt_callback ) ; }
function ( storageId , opt_callback ) { var paramObject = { 'storageId' : storageId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.getDOMStorageEntries' , paramObject , opt_callback ) ; }
function ( storageId , key , value , opt_callback ) { var paramObject = { 'storageId' : storageId , 'key' : key , 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.setDOMStorageItem' , paramObject , opt_callback ) ; }
function ( storageId , key , opt_callback ) { var paramObject = { 'storageId' : storageId , 'key' : key , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMStorage.removeDOMStorageItem' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'ApplicationCache.getFramesWithManifests' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'ApplicationCache.enable' , paramObject , opt_callback ) ; }
function ( frameId , opt_callback ) { var paramObject = { 'frameId' : frameId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'ApplicationCache.getManifestForFrame' , paramObject , opt_callback ) ; }
function ( frameId , opt_callback ) { var paramObject = { 'frameId' : frameId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'ApplicationCache.getApplicationCacheForFrame' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'FileSystem.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'FileSystem.disable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getDocument' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.requestChildNodes' , paramObject , opt_callback ) ; }
function ( nodeId , selector , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'selector' : selector , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.querySelector' , paramObject , opt_callback ) ; }
function ( nodeId , selector , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'selector' : selector , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.querySelectorAll' , paramObject , opt_callback ) ; }
function ( nodeId , name , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'name' : name , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setNodeName' , paramObject , opt_callback ) ; }
function ( nodeId , value , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setNodeValue' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.removeNode' , paramObject , opt_callback ) ; }
function ( nodeId , name , value , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'name' : name , 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setAttributeValue' , paramObject , opt_callback ) ; }
function ( nodeId , text , name , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'text' : text , 'name' : name , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setAttributesAsText' , paramObject , opt_callback ) ; }
function ( nodeId , name , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'name' : name , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.removeAttribute' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getEventListenersForNode' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getOuterHTML' , paramObject , opt_callback ) ; }
function ( nodeId , outerHTML , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'outerHTML' : outerHTML , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setOuterHTML' , paramObject , opt_callback ) ; }
function ( query , opt_callback ) { var paramObject = { 'query' : query , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.performSearch' , paramObject , opt_callback ) ; }
function ( searchId , fromIndex , toIndex , opt_callback ) { var paramObject = { 'searchId' : searchId , 'fromIndex' : fromIndex , 'toIndex' : toIndex , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getSearchResults' , paramObject , opt_callback ) ; }
function ( searchId , opt_callback ) { var paramObject = { 'searchId' : searchId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.discardSearchResults' , paramObject , opt_callback ) ; }
function ( objectId , opt_callback ) { var paramObject = { 'objectId' : objectId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.requestNode' , paramObject , opt_callback ) ; }
function ( enabled , highlightConfig , opt_callback ) { var paramObject = { 'enabled' : enabled , 'highlightConfig' : highlightConfig , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setInspectModeEnabled' , paramObject , opt_callback ) ; }
function ( nodeId , highlightConfig , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'highlightConfig' : highlightConfig , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.highlightNode' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.hideHighlight' , paramObject , opt_callback ) ; }
function ( frameId , contentColor , contentOutlineColor , opt_callback ) { var paramObject = { 'frameId' : frameId , 'contentColor' : contentColor , 'contentOutlineColor' : contentOutlineColor , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.highlightFrame' , paramObject , opt_callback ) ; }
function ( path , opt_callback ) { var paramObject = { 'path' : path , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.pushNodeByPathToFrontend' , paramObject , opt_callback ) ; }
function ( nodeId , objectGroup , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'objectGroup' : objectGroup , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.resolveNode' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.getAttributes' , paramObject , opt_callback ) ; }
function ( nodeId , targetNodeId , insertBeforeNodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'targetNodeId' : targetNodeId , 'insertBeforeNodeId' : insertBeforeNodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.moveTo' , paramObject , opt_callback ) ; }
function ( enabled , opt_callback ) { var paramObject = { 'enabled' : enabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.setTouchEmulationEnabled' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.undo' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.redo' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOM.markUndoableState' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.disable' , paramObject , opt_callback ) ; }
function ( nodeId , opt_callback ) { var paramObject = { 'nodeId' : nodeId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getInlineStylesForNode' , paramObject , opt_callback ) ; }
function ( nodeId , forcedPseudoClasses , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'forcedPseudoClasses' : forcedPseudoClasses , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getComputedStyleForNode' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getAllStyleSheets' , paramObject , opt_callback ) ; }
function ( styleSheetId , opt_callback ) { var paramObject = { 'styleSheetId' : styleSheetId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getStyleSheet' , paramObject , opt_callback ) ; }
function ( styleSheetId , opt_callback ) { var paramObject = { 'styleSheetId' : styleSheetId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getStyleSheetText' , paramObject , opt_callback ) ; }
function ( styleSheetId , text , opt_callback ) { var paramObject = { 'styleSheetId' : styleSheetId , 'text' : text , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.setStyleSheetText' , paramObject , opt_callback ) ; }
function ( styleId , propertyIndex , disable , opt_callback ) { var paramObject = { 'styleId' : styleId , 'propertyIndex' : propertyIndex , 'disable' : disable , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.toggleProperty' , paramObject , opt_callback ) ; }
function ( ruleId , selector , opt_callback ) { var paramObject = { 'ruleId' : ruleId , 'selector' : selector , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.setRuleSelector' , paramObject , opt_callback ) ; }
function ( contextNodeId , selector , opt_callback ) { var paramObject = { 'contextNodeId' : contextNodeId , 'selector' : selector , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.addRule' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.getSupportedCSSProperties' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.startSelectorProfiler' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'CSS.stopSelectorProfiler' , paramObject , opt_callback ) ; }
function ( maxCallStackDepth , opt_callback ) { var paramObject = { 'maxCallStackDepth' : maxCallStackDepth , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Timeline.start' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Timeline.stop' , paramObject , opt_callback ) ; }
function ( enabled , opt_callback ) { var paramObject = { 'enabled' : enabled , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Timeline.setIncludeMemoryDetails' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Timeline.supportsFrameInstrumentation' , paramObject , opt_callback ) ; }
function ( ) { chrome . experimental . devtools . remoteDebug . registerEvent ( 'Timeline.eventRecorded' , [ 'record' ] ) ; chrome . experimental . devtools . remoteDebug . addDomainListener ( 'Timeline' , this ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.causesRecompilation' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.supportsNativeBreakpoints' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.disable' , paramObject , opt_callback ) ; }
function ( active , opt_callback ) { var paramObject = { 'active' : active , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.setBreakpointsActive' , paramObject , opt_callback ) ; }
function ( location , condition , opt_callback ) { var paramObject = { 'location' : location , 'condition' : condition , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.setBreakpoint' , paramObject , opt_callback ) ; }
function ( breakpointId , opt_callback ) { var paramObject = { 'breakpointId' : breakpointId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.removeBreakpoint' , paramObject , opt_callback ) ; }
function ( location , opt_callback ) { var paramObject = { 'location' : location , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.continueToLocation' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.stepOver' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.stepInto' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.stepOut' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.pause' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.resume' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.canSetScriptSource' , paramObject , opt_callback ) ; }
function ( scriptId , scriptSource , preview , opt_callback ) { var paramObject = { 'scriptId' : scriptId , 'scriptSource' : scriptSource , 'preview' : preview , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.setScriptSource' , paramObject , opt_callback ) ; }
function ( scriptId , opt_callback ) { var paramObject = { 'scriptId' : scriptId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.getScriptSource' , paramObject , opt_callback ) ; }
function ( functionId , opt_callback ) { var paramObject = { 'functionId' : functionId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.getFunctionDetails' , paramObject , opt_callback ) ; }
function ( state , opt_callback ) { var paramObject = { 'state' : state , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Debugger.setPauseOnExceptions' , paramObject , opt_callback ) ; }
function ( nodeId , type , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'type' : type , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.setDOMBreakpoint' , paramObject , opt_callback ) ; }
function ( nodeId , type , opt_callback ) { var paramObject = { 'nodeId' : nodeId , 'type' : type , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.removeDOMBreakpoint' , paramObject , opt_callback ) ; }
function ( eventName , opt_callback ) { var paramObject = { 'eventName' : eventName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.setEventListenerBreakpoint' , paramObject , opt_callback ) ; }
function ( eventName , opt_callback ) { var paramObject = { 'eventName' : eventName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.removeEventListenerBreakpoint' , paramObject , opt_callback ) ; }
function ( eventName , opt_callback ) { var paramObject = { 'eventName' : eventName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.setInstrumentationBreakpoint' , paramObject , opt_callback ) ; }
function ( eventName , opt_callback ) { var paramObject = { 'eventName' : eventName , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.removeInstrumentationBreakpoint' , paramObject , opt_callback ) ; }
function ( url , opt_callback ) { var paramObject = { 'url' : url , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.setXHRBreakpoint' , paramObject , opt_callback ) ; }
function ( url , opt_callback ) { var paramObject = { 'url' : url , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'DOMDebugger.removeXHRBreakpoint' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.causesRecompilation' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.isSampling' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.hasHeapProfiler' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.enable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.disable' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.start' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.stop' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.getProfileHeaders' , paramObject , opt_callback ) ; }
function ( type , uid , opt_callback ) { var paramObject = { 'type' : type , 'uid' : uid , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.getProfile' , paramObject , opt_callback ) ; }
function ( type , uid , opt_callback ) { var paramObject = { 'type' : type , 'uid' : uid , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.removeProfile' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.clearProfiles' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.takeHeapSnapshot' , paramObject , opt_callback ) ; }
function ( opt_callback ) { var paramObject = { } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.collectGarbage' , paramObject , opt_callback ) ; }
function ( objectId , objectGroup , opt_callback ) { var paramObject = { 'objectId' : objectId , 'objectGroup' : objectGroup , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.getObjectByHeapObjectId' , paramObject , opt_callback ) ; }
function ( objectId , opt_callback ) { var paramObject = { 'objectId' : objectId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Profiler.getHeapObjectId' , paramObject , opt_callback ) ; }
function ( value , opt_callback ) { var paramObject = { 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.setWorkerInspectionEnabled' , paramObject , opt_callback ) ; }
function ( workerId , message , opt_callback ) { var paramObject = { 'workerId' : workerId , 'message' : message , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.sendMessageToWorker' , paramObject , opt_callback ) ; }
function ( workerId , opt_callback ) { var paramObject = { 'workerId' : workerId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.connectToWorker' , paramObject , opt_callback ) ; }
function ( workerId , opt_callback ) { var paramObject = { 'workerId' : workerId , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.disconnectFromWorker' , paramObject , opt_callback ) ; }
function ( value , opt_callback ) { var paramObject = { 'value' : value , } ; chrome . experimental . devtools . remoteDebug . sendCommand ( 'Worker.setAutoconnectToWorkers' , paramObject , opt_callback ) ; }
function mergeArrays ( a , b ) { for ( var i = a . length - 1 ; i >= 0 ; i -- ) { a [ i ] = a [ i ] . merge ( b [ i ] ) ; } }
function ( status , callback ) { gitQue . push ( { task : switchBranch ( settings , status , callback ) , info : 'git:switchBranch :: ' + settings . forkedRepo } ) ; }
function ( status , callback ) { walkAndFix ( settings , status , callback ) ; }
function ( status , callback ) { gitQue . push ( { task : remoteRename ( settings , status , callback ) , info : '  git:remoteRename :: ' + settings . forkedRepo } ) ; }
function ( status , callback ) { deleteRepoIfExists ( settings , status , callback ) ; }
function ( status , callback ) { forkRepo ( settings , status , callback ) ; }
function ( status , callback ) { notifyAvailability ( settings , status , callback ) ; }
function ( status , callback ) { gitQue . push ( { task : remoteAddForkedOrigin ( settings , status , callback ) , info : '  git:remoteAddForkedOrigin :: ' + forkedRepo } ) ; }
function ( status , callback ) { gitQue . push ( { task : pushCommit ( settings , status , callback ) , info : '  git:pushCommit :: ' + forkedRepo } ) ; }
function ( status , callback ) { submitPullRequest ( settings , status , callback ) ; }
function ( status , callback ) { deleteRepo ( settings , status , callback ) ; }
function ( status , callback ) { cleanUpFileSystem ( settings , callback ) ; }
function ( callback ) { self . log . warn ( 'Endpoint ' + endpoint . blue + ' seems to already exist. Deleting...' . inverse . blue ) ; deleteRepo ( settings , 'DONE' , callback ) ; }
function ( ) { Messages . addError ( 'Connection is fail' ) ; }
function ( ) { if ( callback ) callback ( ) ; }
function ( response ) { if ( response == "OK" ) { addContextMenu ( ) ; pokki . rpc ( 'BackgroundWorker.updateFromGoogle()' ) ; Reader . syncSubscriptions ( ) ; window . localStorage . setItem ( "isSyncOn" , "true" ) ; } }
function Change__string ( str ) { try { return this . _stringBundle . GetStringFromName ( str ) ; } catch ( e ) { Components . utils . reportError ( "Missing string: " + str ) ; throw e ; } }
function allocate ( err , connection ) { if ( operation . retry ( err ) ) return ; fn ( operation . mainError ( ) , connection ) ; }
function ( ) { result . resolve ( ) ; }
function ( ) { this . changeViewsOfInternalModels ( ) ; window . appView . renderEditableCorpusViews ( ) ; }
function ( ) { if ( this . _images ) { this . _setState ( 0 , 1 ) ; this . _slideshowCount = 0 ; this . _setSlideshowInterval ( ) ; this . fireEvent ( "start" ) ; } }
function ( ) { assert . equal ( tech . getTechRelativePath ( ) , PATH . unixToOs ( process . env . COVER ? 'bem/lib-cov/legacy-techs/css' : 'bem/lib/legacy-techs/css' ) ) ; }
function getLanguage ( alias , strict ) { var normalizedAlias = alias . replace ( /^\*/ , '' ) . replace ( /^\./ , '' ) ; return langMap [ normalizedAlias ] || ( ! strict ? similarMap [ normalizedAlias ] : void 0 ) ; }
function ( Handlebars , depth0 , helpers , partials , data ) { helpers = helpers || Handlebars . helpers ; var foundHelper , self = this ; return "<div class=\"navbar\">  <div class=\"navbar-inner buttonBar\">    <div class=\"container\">    	<ul class=\"nav\">            <li style=\"width: 120px\">            	<div class=\"btn-group iconBtns newSlide\">            		<a class=\"btn btn btn-small menuBarOption\" data-option=\"createSlide\" href=\"#\"><i class=\"icon-plus\"></i>Slide</a>            	</div>            </li>            <li class=\"divider-vertical\">            </li>            <li>            	<div class=\"btn-group normalBtns\">            		<a class=\"btn btn-inverse dropdown-toggle btn-small disabled fontButton fontFamilyBtn\" data-toggle=\"dropdown\" title=\"Choose the font family\"><span class=\"text\">Lato</span><span class=\"caret\"></span></a>            		<ul class=\"dropdown-menu menuBarOption\" data-option=\"fontFamily\">            			<li>                                    <a class=\"lato\" href=\"#\" data-value=\"'Lato', sans-serif\">Lato</a>                                    <a class=\"ubuntu\" href=\"#\" data-value=\"'Ubuntu', sans-serif\">Ubuntu</a>                                    <a class=\"abril\" href=\"#\" data-value=\"'Abril Fatface', cursive\">Abril</a>                                    <a class=\"hammersmith\" href=\"#\" data-value=\"'Hammersmith One', sans-serif\">Hammersmith One</a>                                    <a class=\"fredoka\" href=\"#\" data-value=\"'Fredoka One', cursive\">Fredoka One</a>                                    <a class=\"gorditas\" href=\"#\" data-value=\"'Gorditas', cursive\">Gorditas</a>                                    <a class=\"pressstart\" href=\"#\" data-value=\"'Press Start 2P', cursive\">Press Start 2P</a>            			</li>            		</ul>            	</div>            </li>            <li>            	<div class=\"btn-group normalBtns\">            		<a class=\"btn btn-small btn-inverse dropdown-toggle disabled fontButton fontSizeBtn\" data-toggle=\"dropdown\" title=\"Choose the font size\"><span class=\"text\">72</span>            			<span class=\"caret\"></span></a>            		<ul class=\"dropdown-menu menuBarOption\" data-option=\"fontSize\">            			<li>                                    <a href=\"#\" data-value=\"144\">144</a>                                    <a href=\"#\" data-value=\"96\">96</a>                                    <a href=\"#\" data-value=\"72\">72</a>            				<a href=\"#\" data-value=\"64\">64</a>                                    <a href=\"#\" data-value=\"48\">48</a>                                    <a href=\"#\" data-value=\"36\">36</a>                                    <a href=\"#\" data-value=\"24\">24</a>                                    <a href=\"#\" data-value=\"16\">16</a>                                    <a href=\"#\" data-value=\"12\">12</a>                                    <a href=\"#\" data-value=\"8\">8</a>            			</li>            		</ul>            	</div>            </li>            <li>                  <div class=\"color-chooser normalBtns\"><div></div></div>            </li>            <li class=\"divider-vertical\">            </li>            <li>                  <div class=\"btn-group menuBarOption normalBtns\">                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"fontWeight\" data-value=\"bold\"><strong>B</strong></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"fontStyle\" data-value=\"italic\"><em>I</em></a>                        <a class=\"btn btn-small btn-inverse underline disabled fontButton\" data-option=\"fontDecoration\" data-value=\"underline\">U</a>                  </div>            </li>            <li>                  <div class=\"btn-group menuBarOption normalBtns\">                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"left\"><i class=\"icon-align-left icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"center\"><i class=\"icon-align-center icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"right\"><i class=\"icon-align-right icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"justify\"><i class=\"icon-align-justify icon-white\"></i></a>                  </div>            </li>            <li class=\"divider-vertical\">            </li>            <li>                  <div class=\"btn-group iconBtns\">                        <a class=\"btn menuBarOption\" data-option=\"textBox\"><i class=\"icon-text-width\"></i>Text</a>                        <a class=\"btn btn menuBarOption\" data-option=\"picture\"><i class=\"icon-picture\"></i>Image</a>                        <!-- <a class=\"btn btn menuBarOption\" data-option=\"table\"><i class=\"icon-th\"></i>Table</a>                        <a class=\"btn btn menuBarOption\" data-option=\"shapes\"><i class=\"icon-star\"></i>Shapes</a> -->                  </div>            </li>            <li class=\"divider-vertical\">            </li>        </ul>        <ul class=\"nav pull-right\">            <li>                  <div class=\"btn-group iconBtns\" style=\"display: inline-block\">                        <a class=\"btn transitionEditorBtn\" data-option=\"transitionEditor\"><i class=\"icon-th-large\"></i><span>Transitions</span></a>                  </div>                  <div class=\"btn-group iconBtns\" style=\"display: inline-block\">                        <a id=\"present\" class=\"btn btn-success transitionEditorBtn\" data-option=\"preview\"><i class=\"icon-play icon-white\"></i><span>Present</span></a>                  </div>            </li>        </ul>    </div>  </div></div><div class=\"mainContent\"></div>" ; }
function ( ) { console . log ( "end of question" ) ; div_question_display . innerHTML = '<em style="opacity: 0.5">En attente d\'une question…</em>' ; }
function ( ) { return callbackResult ; }
function ( agency ) { if ( agency [ lhs ] == undefined ) return false ; return agency [ lhs ] . toLowerCase ( ) . indexOf ( rhs ) > - 1 ; }
function ( root , segment , path ) { var existing = fluid . get ( source , path , getConfig ) ; return fluid . isArrayable ( existing ) ? "array" : "object" ; }
function ( source , getConfig ) { return function ( root , segment , path ) { var existing = fluid . get ( source , path , getConfig ) ; return fluid . isArrayable ( existing ) ? "array" : "object" ; } ; }
function ( err , result ) { if ( result ) { retResources . push . apply ( retResources , result ) ; callback ( null , retResources ) ; } else { callback ( err , null ) ; } }
function ( err ) { callback ( err , result ) ; }
function ( err , data ) { if ( data ) { questions . push ( data ) ; } callback ( ) ; }
function ( err ) { if ( err ) { callback ( err , null ) ; } else { callback ( null , questions ) ; } }
function ( err , req , data ) { if ( data ) { callback ( null , data ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { callback ( null , data . hits . hits ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { addUserToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( undefined ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data && data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( undefined ) ; } }
function ( err , result ) { if ( result ) { console . log ( 'Added question notification' ) ; callback ( null , esResult ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { callback ( null , data ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { callback ( null , data ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data && data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( undefined ) ; } }
function ( err , req , data ) { if ( data ) { callback ( null , data ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { callback ( null , data ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { addUserToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data . hits ) { addUsersToData ( data , callback ) ; } else { callback ( undefined ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { addUsersToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( err , req , esData ) { if ( esData ) { callback ( null , esData ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { callback ( err , data ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { callback ( null , data ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { callback ( null , data ) ; } else { callback ( err ) ; } }
function ( err , req , data ) { if ( data ) { callback ( null , data ) ; } else { callback ( err ) ; } }
function ( err , data ) { if ( data ) { addUsersToData ( data , callback ) ; } else { callback ( undefined ) ; } }
function ( ) { body = JSON . parse ( body ) ; test . ok ( body . errorcode === 0 && body . comment . _source . body && body . comment . _source . user ) ; test . done ( ) ; }
function ( err , stdout , stderr ) { if ( err ) { return exec ( "" + login + " -c " + ( quote ( command ) ) , callback ) ; } else { return callback ( null , stdout , stderr ) ; } }
function isLeftHandSide ( expr ) { return expr . type === Syntax . Identifier || expr . type === Syntax . MemberExpression ; }
function ( ) { cy . one ( 'layoutstop' , function ( ) { cy . nodes ( ) . trigger ( 'updateposition' ) ; } ) . layout ( { name : 'arbor' } ) ; }
function ( vm ) { this . _enableCsControls ( false , [ vm ] ) ; }
function ( vm ) { this . _enableCsControls ( true , [ vm ] ) ; }
function ( err , res ) { if ( err ) { log . critical ( err ) ; } }
function ( err2 , obj ) { if ( err2 ) { log . critical ( err2 ) ; } }
function ( err , res ) { if ( err ) { log . critical ( err ) ; } }
function ( err2 , res ) { if ( err2 ) { log . critical ( err2 ) ; } }
function ( err2 , res2 ) { if ( err2 ) { log . critical ( err2 ) ; } }
function ( err3 , res3 ) { if ( err3 ) { log . critical ( err3 ) ; } }
function ( err3 , obj3 ) { if ( err3 ) { log . critical ( err3 ) ; } }
function ( ) { document . querySelector ( '#indicator > li.active' ) . className = '' ; document . querySelector ( '#indicator > li:nth-child(' + ( this . currPageX + 1 ) + ')' ) . className = 'active' ; }
function ( ) { var $devopt = $ ( ".devopt" ) ; if ( _this . clickEgg == 2 ) { _this . clickEgg = 0 ; $devopt . show ( ) ; } else { $devopt . hide ( ) ; _this . clickEgg ++ ; } }
function ( ) { if ( this . _position . modified ) { this . _position . modified = false ; } return this . _position ; }
function help ( ) { process . argv = [ 'node' , 'mocha' , '--help' ] ; var helpStr = [ 'USAGE: mr-coverage [project-directory] [spec-directory or spec-files] + (mocha Options below, no need to set file path)' ] . join ( '\n' ) console . log ( helpStr ) ; require ( './lib/mocha-coverage' ) ; }
function ( filename ) { if ( Path . extname ( filename ) === '.js' ) { files . push ( Path . join ( basePath , folder , filename ) ) ; } }
function ( err ) { if ( err ) { console . log ( err . toString ( ) ) ; return ; } runMochaProxy ( consoleArgs ) ; }
function ( data ) { process . stdout . write ( data ) ; }
function ( data ) { process . stdout . write ( data ) ; }
function ( mdown ) { return showdownParse ( mdown ) ; }
function ( e ) { if ( $ ( e . relatedTarget ) . parents ( '.item' ) . get ( 0 ) != $ ( this ) . get ( 0 ) ) { aigua . resetMenu ( ) ; } }
function ( data ) { }
function ( err ) { var doReload = window . alert ( 'Whoooops! Something went wrong! We will reload now, ok?' ) ; window . location . reload ( ) ; }
function ( ) { this . setSubmitInProgress ( false ) ; this . main . setGlobalModulesNavigation ( ) ; phpr . pageManager . modifyCurrentState ( { moduleName : "Module" , id : undefined } , { forceModuleReload : true } ) ; }
function GitHubModel ( ) { var core = new Model ( ) ; core . resourcesBase = 'https://api.github.com' ; core . resource = 'users/yiannisk' ; core . mapMethod ( 'repos' , true , 'jsonp' ) ; return core ; }
function ( result ) { res . send ( 200 , encodeURIComponent ( JSON . stringify ( { code : 1 , data : result } ) ) ) ; }
function ( ) { spyOn ( Whitelist . prototype , "isFeatureAllowed" ) . andReturn ( false ) ; server . handle ( req , res ) ; expect ( res . send ) . toHaveBeenCalledWith ( 403 , jasmine . any ( String ) ) ; }
function ( data ) { $ ( "#build-output" ) . empty ( ) ; readerHandler ( data , projectCode , testType , pageUrl ) ; if ( callSuccessEvent != undefined && ! isBlank ( callSuccessEvent ) ) { successEvent ( pageUrl , data ) ; } }
function ( json ) { if ( json && json . data ) { for ( var i in json . data ) { this . addCity ( json . data [ i ] . name ) ; } this . refreshCitiesView ( ) ; } }
function ( ) { changed = false ; window . onbeforeunload = null ; }
function ( key ) { var prop = w [ key ] ; self [ key ] = prop . bind && prop . bind ( w ) || prop ; }
function runCallbacks ( ) { var callback ; while ( callback = self . callbacks . shift ( ) ) { try { callback . fn . call ( callback . context || self , self ) ; } catch ( e ) { } } }
function ( data , stat , req ) { _gaq . push ( [ '_trackEvent' , 'Extension' , 'Bum' , Bum . instance_id ] ) ; }
function ( key , value ) { var content = get ( this , 'content' ) ; Ember . assert ( fmt ( "Cannot delegate set('%@', %@) to the 'content' property of object proxy %@: its 'content' is undefined." , [ key , value , this ] ) , content ) ; return set ( content , key , value ) ; }
function ( ) { this . showView ( 'design' , this . renderDesignView , this . btnDesign , this . btnCode ) ; }
function ( ) { this . showView ( 'code' , this . renderCodeView , this . btnCode , this . btnDesign ) ; }
function writeAttr ( view , value ) { DEBUG_BEGIN ; ASSERT ( view instanceof jQuery , "expected jQuery object" ) ; if ( typeof value !== "string" ) { WARNING ( "be careful setting attribute " + attrName + " to a non-string value" ) ; } DEBUG_END ; view . attr ( attrName , value ) ; }
function ( url ) { url = url . replace ( /jamendo\.com\/(?:\w\w\/)?(album|list|track)\/([^\/]+)(\/.*)?$/ , "jamendo.com/$1/$2" ) ; url = url . replace ( /img\.jamendo\.com\/albums\/(\d+)\/covers\/\d+\.\d+\.jpg/ , "www.jamendo.com/album/$1/" ) ; url = url . replace ( /jamendo\.com\/\w\w\/artist\// , "jamendo.com/artist/" ) ; return url ; }
function ( listener , target ) { _namespace = namespace ; signal . add ( listener , target ) ; _namespace = null ; }
function ( id ) { cluster . workers [ id ] . disconnect ( ) ; pids . push ( cluster . workers [ id ] . process . pid ) ; }
function ( name ) { return function ( o ) { return value ( o ) [ name ] ; } ; } , { length : 1 , resolvers : [ String ] }
function ( name ) { return function ( obj ) { delete value ( obj ) [ name ] ; } ; } , { resolvers : [ String ] }
function ( element ) { var $element = jQuery ( element ) ; $element . addClass ( WAI_LANG_CLASS ) ; $element . attr ( 'data-gentics-aloha-repository' , 'wai-languages' ) ; $element . attr ( 'data-gentics-aloha-object-id' , $element . attr ( 'lang' ) ) ; }
function ( ) { filteredInputs ( $form ) . each ( markChangedField ) ; return true ; }
function ( hexShiftBy ) { var number2 = ByteCode . pop ( ) ; var number1 = ByteCode . pop ( ) ; var shift = number2 . value & hexShiftBy ; ByteCode . push ( number1 . shiftLeft ( shift ) ) ; }
function ( hexShiftBy ) { var number2 = ByteCode . pop ( ) ; var number1 = ByteCode . pop ( ) ; var shift = number2 . value & hexShiftBy ; ByteCode . push ( number1 . shiftRight ( shift ) ) ; }
function ( hexShiftBy ) { var number2 = ByteCode . pop ( ) ; var number1 = ByteCode . pop ( ) ; var shift = number2 . value & hexShiftBy ; ByteCode . push ( number1 . shiftRightUnsigned ( shift ) ) ; }
function ( field ) { var ref = field . getRef ( ) ; ByteCode . push ( ref . value ) ; }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value === 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value !== 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value < 0 ) { ByteCode . branch ( 3 , offset ) ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value <= 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value > 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( offset ) { var number = ByteCode . pop ( ) ; if ( number . value >= 0 ) { ByteCode . branch ( 3 , offset ) ; return ; } }
function ( index , constant ) { var currentValue = ByteCode . getLocal ( index ) ; ByteCode . setLocal ( index , Primitives . getInteger ( currentValue . value + constant ) ) ; }
function ( index ) { var newPC = ByteCode . getLocal ( index ) ; JVM . getExecutingThread ( ) . setPC ( newPC . value ) ; }
function ( ) { var arrayOfArguments = NativeFunctions . getArguments ( "(C)V" ) ; var charToPrint = arrayOfArguments [ 0 ] ; JVM . println ( String . fromCharCode ( charToPrint . value ) ) ; MethodRun . createReturn ( ) ; }
function ( ) { var arrayOfArguments = NativeFunctions . getArguments ( "(I)V" ) ; var intToPrint = arrayOfArguments [ 0 ] ; JVM . println ( intToPrint . value . toString ( ) ) ; MethodRun . createReturn ( ) ; }
function ( ) { var arrayOfArguments = NativeFunctions . getArguments ( "(D)V" ) ; var doubleToPrint = arrayOfArguments [ 0 ] ; JVM . println ( doubleToPrint . value . toString ( ) ) ; MethodRun . createReturn ( ) ; }
function ( ) { var arrayOfArguments = NativeFunctions . getArguments ( "(F)V" ) ; var floatToPrint = arrayOfArguments [ 0 ] ; JVM . println ( floatToPrint . value . toString ( ) ) ; MethodRun . createReturn ( ) ; }
function ( ) { Uize . Build . Util . runUnitTests ( 'Uize.Test.Uize' ) }
function resizeGame ( ) { console . log ( "window: " + window . innerWidth + ", " + window . innerHeight ) game . resized = true ; game . init ( ) ; }
function ( ) { game . nextStage ( ) ; $ ( '#modal-success' ) . fadeOut ( ) ; }
function ( ) { view . close ( ) ; App . vent . trigger ( 'webUser:guest' ) ; App . vent . trigger ( 'post:list' ) ; }
function ( ) { this . $el . html ( this . template ( this . model . toJSON ( ) ) ) ; $ ( '#nav-menu' ) . html ( this . el ) ; }
function ( data ) { self . errorMessage ( data . message ) ; }
function ( e , jqxhr , settings , exception ) { console . log ( "ajaxError" ) ; }
function ( successCallback , errorCallback ) { jsonCall ( "/monitors" , successCallback , errorCallback ) ; }
function ( ) { $ . route . hash ( $ . route . initial ) ; }
function ( array ) { var i = array . length , output = 0 while ( i ) { ; i -- ; output += array [ i ] } return output }
function ( result ) { if ( ! result || ! result . selected ) { return ; } newRelations . push ( { source : source , target : result , type : "affects" , "one-way" : false } ) ; }
function ( data ) { this . getRecommendedPicksStore ( ) . loadRawData ( data ) ; }
function ( ) { this . getDataView ( ) . doComponentLayout ( ) ; }
function ( request ) { var onInvokedInfo = JSON . parse ( request ) ; if ( onInvokedInfo . uri !== "invoke://localhost" ) { _event . trigger ( "invoked" , onInvokedInfo ) ; } }
function ( ) { var element = $ ( this ) ; if ( element . is ( "[title]" ) ) { element . data ( "ui-tooltip-title" , element . attr ( "title" ) ) . attr ( "title" , "" ) ; } }
function ( ) { var element = $ ( this ) ; if ( element . data ( "ui-tooltip-title" ) ) { element . attr ( "title" , element . data ( "ui-tooltip-title" ) ) ; } }
function ( ) { log ( "Game server disconnected.\n\n" ) ; $ ( "#status_oppo_img" ) . attr ( "src" , '/assets/lobby/broken.png' ) ; $ ( "#status_me_img" ) . attr ( "src" , '/assets/lobby/broken.png' ) ; $ ( '#chatInput' ) . attr ( 'disabled' , 'disabled' ) ; }
function ( ) { $ ( "#insertterms" ) . html ( this . value ? '&lt;input type="hidden" name="s.fvgf[]" value="SubjectTerms,or,' + this . value + '" /&gt;<br />' : '' ) ; }
function ( ) { this . model . set ( "title" , this . $el . find ( ".corpus-title-input" ) . val ( ) ) ; window . appView . addUnsavedDoc ( this . model . id ) ; }
function ( ) { var m = new Comment ( { } ) ; this . model . get ( "comments" ) . add ( m ) ; window . appView . addUnsavedDoc ( this . model . id ) ; }
function ( ) { this . model . set ( "title" , this . $el . find ( ".data-list-title" ) . val ( ) ) ; window . appView . addUnsavedDoc ( this . model . id ) ; }
function ( ) { console . log ( "I'm a new comment!" ) ; var m = new Comment ( { } ) ; this . model . get ( "comments" ) . add ( m ) ; window . appView . addUnsavedDoc ( this . model . id ) ; }
function ( ) { console . log ( "I'm a new comment!" ) ; var m = new Comment ( { } ) ; this . model . get ( "comments" ) . add ( m ) ; window . appView . addUnsavedDoc ( this . model . id ) ; }
function ( ) { Utils . debug ( "Saving session" ) ; $ ( "#user-edit-modal" ) . hide ( ) ; $ ( "#user-modal" ) . show ( ) ; this . model . saveAndEncryptUserToLocalStorage ( ) ; }
function ( index ) { if ( $ ( this ) . attr ( "sakai-entityid" ) === userToAdd . uuid ) { $ ( this ) . addClass ( 'fl-hidden' ) ; } }
function ( index ) { if ( $ ( this ) . attr ( "sakai-entityid" ) === userToAdd . uuid ) { $ ( this ) . addClass ( 'fl-hidden' ) ; } }
function ( index ) { if ( $ ( this ) . attr ( "sakai-entityid" ) === userToAdd . uuid ) { $ ( this ) . addClass ( 'fl-hidden' ) ; } }
function highlight ( color ) { document . designMode = "on" ; document . execCommand ( "BackColor" , false , color ) ; document . designMode = "off" ; }
function ( e ) { if ( e . keyCode == 13 ) { performSearch ( ) ; e . preventDefault ( ) ; } }
function ( ) { if ( geoEx . busyMask ) { geoEx . busyMask . hide ( ) ; } }
function ( line , index ) { msgLines [ index ] = Utils . escapeHTML ( line ) ; }
function ( value , callback ) { callback ( value ) }
function ( result ) { deferred = isError ( result ) ? deliver ( deferred , onError ( result ) ) : deliver ( deferred , onFulfill ( result ) ) }
function ( value , callback ) { if ( isPending ( value ) ) watch ( value , callback ) else callback ( value [ valueOf ] ) }
function Processor ( ) { this . _me ; this . _physicsEngine ; this . _camera ; this . _repository ; this . _inputControlUnit ; this . _keyboardInput ; this . _bodyDef ; this . init ( ) ; }
function ( e , type ) { type ? util . getRemoteFile ( e . uri , type ) : util . getRemotePage ( e . data . uri ) ; }
function ( e ) { if ( expandable ) { expand_chart ( $ ( this . container ) . parent ( ) ) ; } }
function isChanged ( vv ) { maybeSet ( vv ) ; return vv . lastChanged === timestamp ; }
function ( vv ) { if ( ! vv . writtenBy ) { vv . dependsOnSelf = false ; maybeSet ( vv ) ; } }
function unit ( name , src , dst ) { it ( name , function ( ) { assert . deepEqual ( candor . parser . parse ( src ) , dst ) ; } ) ; }
function ( evt ) { mouseX = evt . clientX ; mouseY = evt . clientY }
function ( obj ) { var curTop = 0 ; if ( obj . offsetParent ) { do { curTop += obj . offsetTop ; } while ( ! ! ( obj = obj . offsetParent ) ) ; } return curTop ; }
function ( ) { debugger ; var find = this . replace ( ".*" , '' ) ; find = $ . trim ( find ) ; if ( ua . indexOf ( find ) !== - 1 ) { isRestricted = true ; } }
function ( options ) { options = options || { } ; this . url = options . url || '/files' ; return this ; }
function ( data , textStatus , jqXHR ) { this . $el . removeClass ( 'loading' ) ; this . collection . add ( data ) ; this . trigger ( 'done' , this . collection , data , textStatus , jqXHR ) ; }
function ( jqXHR ) { this . $el . removeClass ( 'loading' ) ; this . trigger ( 'fail' , JSON . parse ( jqXHR . responseText ) , jqXHR ) ; }
function ( data , textStatus , jqXHR ) { this . $el . addClass ( 'loading' ) ; this . trigger ( 'uploading' ) ; this . $input . val ( '' ) ; }
function ( test ) { 'use strict' ; test . expect ( 1 ) ; test . ok ( 1 , "this assertion should FAIL!!" ) ; test . done ( ) ; }
function ( ) { return this . documents . length ; }
function ( wrapper ) { var parameters = step . parameters , original = step . original || step ; step = wrapper ( step ) step . parameters = parameters ; step . original = original ; }
function ( ) { afterload ( component . plot . getStatistics ( component . xAxis . getMin ( ) , component . xAxis . getMax ( ) , [ "has_data" , "y_max" , "y_min" ] ) ) ; }
function ( cb ) { $r . zadd ( 'tweets.cron' , ctime , tweet . id_str , cb ) }
function ( Handlebars , depth0 , helpers , partials , data ) { helpers = helpers || Handlebars . helpers ; var foundHelper , self = this ; return "<div class=\"navbar\">  <div class=\"navbar-inner buttonBar\">    <div class=\"container\">    	<ul class=\"nav\">            <li style=\"width: 120px\">            	<div class=\"btn-group iconBtns newSlide\">            		<a class=\"btn btn btn-small menuBarOption\" data-option=\"createSlide\" href=\"#\"><i class=\"icon-plus\"></i>Slide</a>            	</div>            </li>            <li class=\"divider-vertical\">            </li>            <li>            	<div class=\"btn-group normalBtns\">            		<a class=\"btn btn-inverse dropdown-toggle btn-small disabled fontButton fontFamilyBtn\" data-toggle=\"dropdown\" title=\"Choose the font family\"><span class=\"text\">Lato</span><span class=\"caret\"></span></a>            		<ul class=\"dropdown-menu menuBarOption\" data-option=\"fontFamily\">            			<li>                                    <a class=\"lato\" href=\"#\" data-value=\"'Lato', sans-serif\">Lato</a>                                    <a class=\"ubuntu\" href=\"#\" data-value=\"'Ubuntu', sans-serif\">Ubuntu</a>                                    <a class=\"abril\" href=\"#\" data-value=\"'Abril Fatface', cursive\">Abril</a>                                    <a class=\"hammersmith\" href=\"#\" data-value=\"'Hammersmith One', sans-serif\">Hammersmith One</a>                                    <a class=\"fredoka\" href=\"#\" data-value=\"'Fredoka One', cursive\">Fredoka One</a>                                    <a class=\"gorditas\" href=\"#\" data-value=\"'Gorditas', cursive\">Gorditas</a>                                    <a class=\"pressstart\" href=\"#\" data-value=\"'Press Start 2P', cursive\">Press Start 2P</a>            			</li>            		</ul>            	</div>            </li>            <li>            	<div class=\"btn-group normalBtns\">            		<a class=\"btn btn-small btn-inverse dropdown-toggle disabled fontButton fontSizeBtn\" data-toggle=\"dropdown\" title=\"Choose the font size\"><span class=\"text\">72</span>            			<span class=\"caret\"></span></a>            		<ul class=\"dropdown-menu menuBarOption\" data-option=\"fontSize\">            			<li>                                    <a href=\"#\" data-value=\"144\">144</a>                                    <a href=\"#\" data-value=\"96\">96</a>                                    <a href=\"#\" data-value=\"72\">72</a>            				<a href=\"#\" data-value=\"64\">64</a>                                    <a href=\"#\" data-value=\"48\">48</a>                                    <a href=\"#\" data-value=\"36\">36</a>                                    <a href=\"#\" data-value=\"24\">24</a>                                    <a href=\"#\" data-value=\"16\">16</a>                                    <a href=\"#\" data-value=\"12\">12</a>                                    <a href=\"#\" data-value=\"8\">8</a>            			</li>            		</ul>            	</div>            </li>            <li>                  <div class=\"color-chooser normalBtns\"><div></div></div>            </li>            <li class=\"divider-vertical\">            </li>            <li>                  <div class=\"btn-group menuBarOption normalBtns\">                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"fontWeight\" data-value=\"bold\"><strong>B</strong></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"fontStyle\" data-value=\"italic\"><em>I</em></a>                        <a class=\"btn btn-small btn-inverse underline disabled fontButton\" data-option=\"fontDecoration\" data-value=\"underline\">U</a>                  </div>            </li>            <li>                  <div class=\"btn-group menuBarOption normalBtns\">                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"left\"><i class=\"icon-align-left icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"center\"><i class=\"icon-align-center icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"right\"><i class=\"icon-align-right icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"justify\"><i class=\"icon-align-justify icon-white\"></i></a>                  </div>            </li>            <li class=\"divider-vertical\">            </li>            <li>                  <div class=\"btn-group iconBtns\">                        <a class=\"btn menuBarOption\" data-option=\"textBox\"><i class=\"icon-text-width\"></i>Text</a>                        <a class=\"btn btn menuBarOption\" data-option=\"picture\"><i class=\"icon-picture\"></i>Image</a>                        <!--<a class=\"btn btn menuBarOption\" data-option=\"iframe\"><i class=\"icon-globe\"></i>Website</a>-->                        <a class=\"btn btn menuBarOption\" data-option=\"video\"><i class=\"icon-facetime-video\"></i>Video</a>                        <!-- <a class=\"btn btn menuBarOption\" data-option=\"table\"><i class=\"icon-th\"></i>Table</a>                        <a class=\"btn btn menuBarOption\" data-option=\"shapes\"><i class=\"icon-star\"></i>Shapes</a> -->                  </div>            </li>            <li class=\"divider-vertical\">            </li>        </ul>        <ul class=\"nav pull-right\">            <li>                  <div class=\"btn-group iconBtns\" style=\"display: inline-block\">                        <a class=\"btn transitionEditorBtn\" data-option=\"transitionEditor\"><i class=\"icon-th-large\"></i><span>Transitions</span></a>                  </div>                  <div class=\"btn-group iconBtns\" style=\"display: inline-block\">                        <a class=\"btn btn-success transitionEditorBtn\" data-option=\"preview\"><i class=\"icon-play icon-white\"></i><span>Present</span></a>                  </div>            </li>        </ul>    </div>  </div></div><div class=\"mainContent\"></div>" ; }
function ( src ) { return activeSlide . add ( ComponentFactory . createImage ( _this . model . itemConfig ( src ) ) ) ; }
function ( opts ) { opts . option ( "story_id" , { "position" : 0 , "help" : "ID of the Tracker story to be estimated" , "required" : true } ) ; }
function ( opts ) { opts . options ( { "story_id" : { "position" : 0 , "help" : "ID of the Tracker story to be estimated" , "required" : true } , "estimate" : { "position" : 1 , "help" : "# of story points" , "required" : true } } ) ; }
function ( opts ) { opts . option ( "story_id" , { "position" : 0 , "help" : "ID of the Tracker story to be estimated" , "required" : true } ) ; }
function ( opts ) { opts . option ( "story_id" , { "position" : 0 , "help" : "ID of the Tracker story to be estimated" , "required" : true } ) ; }
function ( ) { var uuids = window . loot_native === undefined ? { } : window . loot_native . getUuids ( ) ; uuids = $ . parseJSON ( uuids ) ; return uuids ; }
function ( part ) { result += part instanceof Blob ? part . result : part ; getProps ( part ) ; }
function ( part ) { result += part instanceof Blob ? part . result : part ; getProps ( part ) ; }
function checkIt ( ) { if ( ! that . $el . parentsUntil ( 'body' ) || ! $ . isReady ) { setTimeout ( arguments . callee , 50 ) ; return ; } that . trigger ( 'DOMContentLoaded' ) ; }
function ( event ) { activateTab ( $ ( this ) . parent ( 'dd' ) ) ; }
function ( err , results ) { if ( err ) { return callback ( err ) ; } }
function ( err , result ) { if ( err ) { console . log ( "in error handler" ) ; return next ( err ) ; } console . log ( "created" ) ; res . end ( 'done' ) ; }
function ( err , individual ) { if ( err ) return next ( err ) ; console . log ( "created" ) ; res . end ( 'done' ) ; }
function ( ) { if ( ! this . _existingDialog ) return ; this . _existingDialog . close ( ) ; this . _existingDialog = null ; }
function ( op ) { this . _closeExistingDialog ( ) ; this . _processesDialog = null ; if ( this . _dialog ) { this . _dialog . close ( ) ; this . _dialog = null ; } }
function closeCollapsibleBlock ( ) { if ( inCollapsibleBlock ) { inCollapsibleBlock -- ; closeToFragment ( "div" ) ; if ( holder !== fragment ) { holder = holder . parentNode ; } openParagraph ( ) ; } }
function ( obj ) { unselectStudent ( s ) ; }
function ( ) { readjustment_width = this . width ( ) / 2 ; $ ( '#real_img' ) . css ( { "display" : "inline" , "left" : "50%" , "margin-left" : - readjustment_width } ) ; $ ( '#real_img' ) . fadeIn ( 800 ) ; }
function ( ) { return [ 'bemhtml' ] ; }
function duplicate ( value ) { var temp = varPool . acquire ( ) ; state . stack . push ( "(" + temp + " = " + value + ")" ) ; state . stack . push ( temp ) ; varPool . release ( temp ) ; }
function traceSource ( writer , abc ) { var tracer = SourceTracer ( writer ) ; abc . scripts . forEach ( function ( script ) { tracer . traceTraits ( script . traits ) ; } ) ; }
function ( name ) { var stel = Resource . make ( name ) ; stel . loading = stel . executing = true ; steal . preexecuted ( stel ) ; stel . executed ( ) return steal ; }
function ( ) { equals ( typeof Aloha . require , 'function' , 'Aloha.require() is available' ) ; }
function ( ) { equals ( typeof Aloha . bind , 'function' , 'Aloha.bind() is available' ) ; }
function ( newValue ) { return new Context ( newValue , this . doc ) ; }
function ( ctx , tmpl ) { if ( ctx . value ) { return tmpl . render ( this ) ; } else { return this . createFragment ( ) ; } }
function ( ctx , tmpl ) { if ( ! ctx . value ) { return tmpl . render ( this ) ; } else { return this . createFragment ( ) ; } }
function ( subcontext , subtemplate ) { node = this . createElement ( 'div' ) ; node . className = 'generated' ; return node ; }
function ( subcontext , subtemplate , opt ) { options = opt ; return subtemplate . document . createDocumentFragment ( ) ; }
function ( subcontext , subtemplate , opt ) { return subtemplate . document . createDocumentFragment ( ) ; }
function ( text ) { return text . replace ( new RegExp ( '«|»|!|\\?' , 'g' ) , ' ' ) ; }
function ( name , base ) { if ( this . prefix_registry [ name ] ) throw new Rx . Error ( "the prefix '" + name + "' is already registered" ) ; this . prefix_registry [ name ] = base ; }
function executeInitializers ( ) { return sequence ( contextHandlers . init , context ) ; }
function createComponents ( componentsToCreate , spec ) { for ( var name in componentsToCreate ) { createScopeItem ( name , spec [ name ] , components [ name ] ) ; } }
function ( provides ) { safeMixin ( context . components , provides ) ; }
function init ( context ) { if ( provide ) { return when ( wire ( provide ) , function ( provides ) { safeMixin ( context . components , provides ) ; } ) ; } }
function ready ( context ) { var components = context . components ; if ( components . hasOwnProperty ( '$exports' ) ) { context . components = components . $exports ; } return context ; }
function ( translation , result ) { return Matrix4 . fromRotationTranslation ( Matrix3 . IDENTITY , translation , result ) ; }
function ( ) { expect ( function ( ) { Matrix4 . fromRotationTranslation ( undefined , new Cartesian3 ( ) ) ; } ) . toThrow ( ) ; }
function ( pathToDatabase , callback ) { fs . exists ( pathToDatabase , callback ) ; }
function ( title , message ) { $ . pnotify ( { title : title , type : 'error' , icon : 'ui-icon ui-icon-script' , text : message } ) ; }
function ( ) { Mappr . resetJbbox ( ) ; Mappr . destroyRedo ( ) ; Mappr . showMap ( ) ; }
function ( ) { $ ( '#pan' ) . val ( 'up' ) ; Mappr . resetAndBuild ( ) ; }
function ( ) { $ ( '#pan' ) . val ( 'right' ) ; Mappr . resetAndBuild ( ) ; }
function ( ) { $ ( "#tabs" ) . tabs ( 'select' , 3 ) ; }
function ( ) { Mappr . resetJbbox ( ) ; $ ( '#zoom_out' ) . val ( 1 ) ; Mappr . destroyRedo ( ) ; Mappr . showMap ( ) ; $ ( '#zoom_out' ) . val ( '' ) ; }
function ( request ) { return true ; }
function ( series ) { series . originalKey = series . originalKey === undefined ? series . key : series . originalKey ; series . key = series . originalKey + ( series . bar ? ' (left axis)' : ' (right axis)' ) ; return series ; }
function ( key ) { return entries [ key ] ; }
function ( key , val ) { if ( entries [ key ] === undefined ) { count ++ ; } entries [ key ] = val ; }
function ( key ) { if ( entries [ key ] === undefined ) { return ; } delete entries [ key ] ; count -- ; }
function ( dirpath , mode ) { var self = this ; if ( ! fs . existsSync ( dirpath ) ) { self . mkdirSync ( path . dirname ( dirpath ) , mode ) ; fs . mkdirSync ( dirpath , mode ) ; } }
function ( test , assert ) { conn . cql ( config [ 'create_counter_cf#cql' ] , function ( err , res ) { assert . ifError ( err ) ; assert . ok ( res === undefined ) ; test . finish ( ) ; } ) ; }
function pass ( name ) { var o = Object . create ( options ) ; o . path = name ; o . maxAge = clientMaxAge ; o . root = dirPath ; staticSend ( req , res , next , o ) ; }
function ( ) { return this . tools || ( this . tools = { top : [ { id : 'configure' , action : 'navigateToConfigurationView' } ] } ) ; }
function ( err ) { if ( ! err . reported ) { throw err ; } }
function ( ) { delete self . _contentSetterParams ; if ( ! isFakeContent ) { if ( self . _started ) { self . _startChildren ( ) ; self . _scheduleLayout ( ) ; } self . _onLoadHandler ( cont ) ; } }
function ( txt ) { strictEqual ( txt , "1" , msg ( "Data.txt" ) ) ; start ( ) ; }
function ( response ) { notStrictEqual ( response . length , 0 , "Content length has no 0 size" ) ; start ( ) ; }
function ( ) { this . element . html ( "" ) ; this . element . removeClass ( 'sizedetect-container ui-widget-content' ) ; this . element . css ( this . _savedCSS ) ; return jQuery ( 'body' ) . unbind ( 'keyup' , this . _escHandler ) ; }
function ( ) { var val ; val = ( this . options . numberOfQuestions - this . sequence . length ) / this . options . numberOfQuestions * 100 ; return this . progressBar . progressbar ( 'value' , val ) ; }
function ( ) { Capkom . canClick ( ) ; console . info ( 'deactivate audio' ) ; return Capkom . profile . set ( { useAudio : false } ) ; }
function ( ) { Capkom . canClick ( ) ; console . info ( 'activate audio' ) ; return Capkom . profile . set ( { useAudio : true } ) ; }
function ( size , details ) { Capkom . profile . set ( { symbolsizeMin : size , symbolsizedetectDetails : details } ) ; Capkom . canClick ( ) ; return Capkom . clickNext ( ) ; }
function ( ) { this . element . html ( "" ) ; this . element . removeClass ( 'sizedetect-container ui-widget-content' ) ; this . element . css ( this . _savedCSS ) ; return jQuery ( 'body' ) . unbind ( 'keyup' , this . _escHandler ) ; }
function ( ) { var val ; val = ( this . options . numberOfQuestions - this . sequence . length ) / this . options . numberOfQuestions * 100 ; return this . progressBar . progressbar ( 'value' , val ) ; }
function ( err , req , data ) { console . log ( data ) ; callback ( ) ; }
function ( ) { lam ( env , [ args1 , body1 ] ) . value ( [ num ( 1 ) ] ) ; }
function ( ) { spec ( env , [ args1 , body1 ] ) . value ( env , [ num ( 143341 ) ] ) ; }
function ( ) { ok ( false , "haven't figured out spec yet -- need to change this into a function (??)" ) ; }
function ( value ) { if ( value == null ) { return '' ; } return value . __gcliQuery || 'Error' ; }
function ( name ) { console . log ( name ) ; }
function ( ) { console . log ( 'Script ' + name + ' loaded.' ) ; self . addDependency ( name ) ; }
function ( ) { instaedit . setParserCode ( this . getEditor ( ) . parserEditor . getSession ( ) . getValue ( ) ) ; instaedit . evalParser ( ) ; }
function ( ) { return 'http://floating-light-7013.herokuapp.com' ; }
function ( name , elementId ) { var element = document . getElementById ( elementId ) ; element . innerHTML = "Hello, " + name + ", JavaScript is running." ; }
function ( ) { var sayHello = function ( name , elementId ) { var element = document . getElementById ( elementId ) ; element . innerHTML = "Hello, " + name + ", JavaScript is running." ; } ; return { speakToMe : sayHello } ; }
function ( name , elementId ) { var element = document . getElementById ( elementId ) ; element . innerHTML = "Hello, " + name + ", JavaScript is running." ; }
function ( ) { var sayHello = function ( name , elementId ) { var element = document . getElementById ( elementId ) ; element . innerHTML = "Hello, " + name + ", JavaScript is running." ; } ; return { speakToMe : sayHello } ; }
function ( vvv ) { if ( vvv . determinedBy === null ) { undeterminedVars . push ( vvv ) ; } }
function ( event ) { $ ( this ) . attr ( 'checked' , $ ( option ) . is ( ':selected' ) ) ; return false ; }
function ( key ) { return jQuery . parseJSON ( storage . getItem ( name + "-" + key ) ) ; }
function ( key , value ) { storage . setItem ( name + "-" + key , jQuery . stringifyJSON ( value ) ) ; }
function ( type , data ) { storage . setItem ( name , jQuery . stringifyJSON ( { target : "p" , type : type , data : data } ) ) ; }
function ( type , data ) { if ( ! win . closed && win . fire ) { win . fire ( jQuery . stringifyJSON ( { target : "p" , type : type , data : data } ) ) ; } }
function remove ( array , e ) { var index = jQuery . inArray ( e , array ) ; if ( index > - 1 ) { array . splice ( index , 1 ) ; } }
function ( event ) { connector . signal ( "localSend" , jQuery . stringifyJSON ( { id : guid , event : event } ) ) ; }
function ( type , data ) { storage . setItem ( name , jQuery . stringifyJSON ( { target : "c" , type : type , data : data } ) ) ; }
function ( key ) { return jQuery . parseJSON ( storage . getItem ( name + "-" + key ) ) ; }
function ( key , value ) { storage . setItem ( name + "-" + key , jQuery . stringifyJSON ( value ) ) ; }
function ( ) { jQuery ( window ) . off ( "storage.socket" ) ; storage . removeItem ( name ) ; storage . removeItem ( name + "-opened" ) ; storage . removeItem ( name + "-children" ) ; }
function ( type , data ) { if ( ! win . closed && win . fire ) { win . fire ( jQuery . stringifyJSON ( { target : "c" , type : type , data : data } ) ) ; } }
function ( ) { if ( lastHash !== window . location . hash ) { $win . trigger ( evt ) ; lastHash = window . location . hash ; } }
function continue_game ( ) { ui_set_status ( "Starting game..." ) ; ui_show_screen ( "wait" ) ; send_continue ( ) ; }
function ( event , filename ) { }
function ( msg ) { throw new Error ( "Syntax error, unrecognized expression: " + msg ) ; }
function ( dir ) { if ( scope . active_directive ( dir ) ) return [ "block" ] ; scope . directives . push ( dir ) ; }
function parseError ( str , hash ) { if ( this . yy . parser ) { this . yy . parser . parseError ( str , hash ) ; return 2 ; } else { throw new Error ( str ) ; } }
function ( options ) { var worker = this . worker ; worker . registerCompiler ( ".json" , module . exports ) ; }
function ( error , thread ) { if ( error ) { res . render ( 'index' , { thread : null } ) ; } else { res . render ( 'index' , { thread : thread . getModel ( ) } ) ; } }
function ( thread ) { res . partial ( 'thread' , { thread : thread . getModel ( ) } ) ; }
function ( child ) { callback ( ) ; }
function ( child ) { this . child . push ( child ) ; }
function ( ) { return { msgText : this . msgText , author : this . author , id : this . id , childCount : this . getChildCount ( ) , child : this . child } ; }
function ( threadInDB , callback ) { console . log ( threadInDB . id ) ; self . repository . findThreadByID ( threadInDB . id , callback ) ; }
function ( threadInDB , callback ) { thread = threadInDB ; var threadChild = new t . Thread ( 'reMsg' , 'new testThreadSaveTree' , threadInDB ) ; self . repository . insertThread ( threadChild , callback ) ; }
function loadModel ( ) { console . log ( 'loadModel()' ) ; var loader = new THREE . JSONLoader ( ) ; loader . load ( 'assets/models/eagle.js' , function ( g ) { createModel ( g ) ; } ) ; }
function ( item ) { if ( item instanceof Array && item . length == 1 ) item = item [ 0 ] ; return item . HostingStatus ; }
function ( item ) { if ( item instanceof Array && item . length == 1 ) item = item [ 0 ] ; return item . HostingStatus && item . HostingStatus . Status === "stopped" ; }
function ( item ) { if ( item instanceof Array && item . length == 1 ) item = item [ 0 ] ; return item . HostingStatus && item . HostingStatus . Status === "started" ; }
function ( item ) { if ( item instanceof Array && item . length == 1 ) item = item [ 0 ] ; return item . HostingStatus && item . HostingStatus . Status === "stopped" ; }
function ( canvas , viewStart , viewEnd ) { this . canvas = canvas ; this . viewStart = viewStart ; this . viewEnd = viewEnd ; this . document = null ; this . glyph = null ; this . bbox = null ; }
function ( ) { return { start : this . bbox . x , end : this . bbox . x + this . bbox . width } }
function ( canvas , viewStart , viewEnd ) { this . canvas = canvas ; this . viewStart = viewStart ; this . viewEnd = viewEnd ; this . document = null ; this . glyph = null ; this . bbox = null ; }
function ( content ) { if ( content . charCodeAt ( 0 ) === 0xFEFF ) { return content . substring ( 1 ) ; } else { return content ; } }
function ( module , filename ) { var content ; content = compile ( stripBOM ( fs . readFileSync ( filename , 'utf8' ) ) , { filename : filename } ) ; return module . _compile ( content , filename ) ; }
function ( element , callbacks , syntaxHighlighter ) { this . element = element ; this . callbacks = callbacks ; this . syntaxHighlighter = syntaxHighlighter ; }
function ( id , numDeleted ) { this . titleNode = this . getTitleNode ( ) ; this . updateTitle ( ) ; if ( this . titleNode === null ) { this . cslId = - 1 ; } }
function ( id , amendedNode ) { if ( id === this . cslId ) { this . titleNode = amendedNode ; this . updateTitle ( ) ; } }
function ( ) { if ( req . readyState != 4 ) return ; if ( req . status != 200 && req . status != 304 ) { error ( req ) ; } else success ( req . responseText ) ; }
function ( term ) { return term . replace ( /trips/ , 'trip' ) . replace ( /s$/ , '' ) ; }
function setJsonData ( json ) { reset ( ) ; jsonData = $ . fromJsonRef ( json ) ; if ( ! jsonData . hasOwnProperty ( "paths" ) ) { pathCount = 0 ; } else { pathCount = jsonData . paths . length ; } }
function ( ) { self . emit ( 'error' , ex ) ; }
function ( ) { WebInspector . View . prototype . show . call ( this , WebInspector . inspectorView . panelsElement ( ) ) ; }
function ( ) { this . _searchInputElement . value = "" ; this . _performSearch ( "" ) ; WebInspector . inspectorView . setFooterElement ( null ) ; }
function ( ) { WebInspector . inspectorView . setFooterElement ( this . _element ) ; this . _searchInputElement . focus ( ) ; this . _searchInputElement . select ( ) ; }
function ( event ) { this . _performSearch ( this . _searchInputElement . value , true , false , false ) ; }
function ( event ) { this . _performSearch ( this . _searchInputElement . value , true , true , false ) ; }
function ( factory ) { if ( typeof define === 'function' && define . amd ) { define ( [ 'jquery' ] , factory ) ; } else if ( jQuery && ! jQuery . fn . qtip ) { factory ( jQuery ) ; } }
function ( factory ) { if ( typeof define === 'function' && define . amd ) { define ( [ 'jquery' ] , factory ) ; } else if ( jQuery && ! jQuery . fn . qtip ) { factory ( jQuery ) ; } }
function ( a ) { typeof define == "function" && define . amd ? define ( [ "jquery" ] , a ) : jQuery && ! jQuery . fn . qtip && a ( jQuery ) }
function ( ) { myStorage . StoreIn ( myStorageLocation , myStorageName ) ; }
function ( ) { myStorage . StoreIn ( myStorageLocation , myStorageName ) ; }
function ( ) { myStorage . StoreIn ( myStorageLocation , myStorageName ) ; }
function ( value ) { this . locX = value ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . locY = value ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . locZ = value ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . dLocX = value ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . dLocY = value ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . dLocZ = value ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . rotX = value ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . rotY = value ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . rotZ = value ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . dRotX = value ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . dRotY = value ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . dRotZ = value ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . ScaleX == value ) return this ; this . scaleX = value ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . ScaleY == value ) return this ; this . scaleY = value ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . ScaleZ == value ) return this ; this . scaleZ = value ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . dScaleX == value ) return this ; this . dScaleX = value ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . dScaleY == value ) return this ; this . dScaleY = value ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . dScaleZ == value ) return this ; this . dScaleZ = value ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( ) { return parseFloat ( this . locX ) ; }
function ( ) { return parseFloat ( this . locY ) ; }
function ( ) { return parseFloat ( this . locZ ) ; }
function ( ) { return new GLGE . Vec3 ( parseFloat ( this . locX ) , parseFloat ( this . locY ) , parseFloat ( this . locZ ) ) ; }
function ( result ) { console . log ( "result: " + result ) ; }
function ( obj ) { return { message : 'hey' } ; }
function ( content , encoding ) { console . log ( 'encoding' , encoding ) ; load ( resource . url , content , resource . type , line ) ; }
function ( url , content , type ) { editorsByURL [ url ] = new PurpleOrionEditor ( url , content , type ) ; }
function ( url , line , column , character ) { var editor = editorsByURL [ url ] ; if ( editor ) { editor . setCursorOn ( line , column , character ) ; } else { console . error ( "no editor for url " + url ) ; } }
function ( ) { return this . getCurrentFixPosition ( ) ; }
function ( ) { return new Rectangle ( this . position , this . getSize ( ) ) ; }
function ( err ) { log ( "\n<<< UNCAUGHT EXCEPTION! >>>\n\n" + err ) ; process . exit ( 1 ) ; }
function ( ) { clients [ client_id ] = socket ; current_connections ++ ; log ( client_name + 'connected\t\t(' + current_connections + ' current connections)' ) ; }
function ( ) { delete clients [ client_id ] ; current_connections -- ; log ( client_name + 'closed\t\t(' + current_connections + ' current connections)' ) ; }
function ( ) { log ( client_name + 'timed out!' ) ; }
function ( ) { log ( client_name + 'ended the connection' ) ; }
function ( e ) { log ( cliient_name + 'Uncaught error in send server: ' + e ) ; }
function ( ) { global . screen . get_active_workspace ( ) . get_neighbor ( Meta . MotionDirection . LEFT ) . activate ( global . get_current_time ( ) ) ; }
function ( ) { global . screen . get_active_workspace ( ) . get_neighbor ( Meta . MotionDirection . UP ) . activate ( global . get_current_time ( ) ) ; }
function ( msg ) { this . statusEl . text ( msg ) ; this . debug ( msg ) ; }
function ( msg ) { if ( console && console . log ) console . log ( msg ) ; }
function ( ) { var el = $ ( this ) ; var seekid = el . data ( "seekid" ) ; C4 . send ( "CANCEL_SEEK " + C4 . padId ( seekid ) ) ; }
function ( ) { var el = $ ( this ) ; var seekid = el . data ( "seekid" ) ; C4 . send ( "ACCEPT_SEEK " + C4 . padId ( seekid ) ) ; }
function syncTipsyLog ( ) { var tip = pv . Behavior . tipsy ; if ( tip && tip . setDebug ) { tip . setDebug ( pvc . debug ) ; tip . log = pvc . log ; } }
function ( level ) { _tip . debug = level ; }
function ( ) { this . textBox . focus ( ) ; }
function ( trackConfigs ) { this . publish ( '/jbrowse/v1/c/tracks/hide' , arguments ) ; }
function ( trackConfigs ) { this . addRecentlyUsedTracks ( dojo . map ( trackConfigs , function ( c ) { return c . label ; } ) ) ; this . publish ( '/jbrowse/v1/c/tracks/show' , arguments ) ; }
function ( ) { return topic . subscribe . apply ( topic , arguments ) ; }
function ( evt ) { this . browser . publish ( '/jbrowse/v1/v/tracks/hide' , [ trackConfig ] ) ; evt . stopPropagation ( ) ; }
function ( ) { this . browser . publish ( '/jbrowse/v1/v/tracks/show' , [ this . dataGrid . getItem ( index ) . conf ] ) ; }
function ( ) { this . browser . publish ( '/jbrowse/v1/v/tracks/hide' , [ this . dataGrid . getItem ( index ) . conf ] ) ; }
function ( opt ) { if ( typeof ( options [ opt ] ) != 'undefined' ) { self . options [ opt ] = options [ opt ] ; } }
function ( include_cross_hair ) { if ( typeof ( include_cross_hair ) != 'boolean' || include_cross_hair == true ) { this . include_cross_hair = true ; } else { this . include_cross_hair = false ; } }
function ( afterLoadingRoutine , omitLocalDataFetch ) { if ( ! omitLocalDataFetch ) { this . fetchDataSetsFromServer ( "localhost" , null , afterLoadingRoutine ) ; } }
function onClose ( had_error ) { self . destroy ( ) }
function ( ) { if ( WFrameStream . VERBOSE ) log ( "WFrameStream__write: sk 'drain' event" ) self . wrote_cnt += 1 self . draining = false self . emit ( 'drain' ) }
function WFrameStream__destroy ( ) { if ( this . draining && this . didDestroySoon ) return if ( this . didDestroy ) return this . didDestroy = true this . end ( ) delete this . frap this . emit ( 'close' ) }
function ( e ) { console . error ( ( ( e . stack && e . stack . toString ( ) ) || "Unresolved promise: no stack available" ) ) ; }
function ( ) { this . get ( "el" ) . on ( "keyup" , this . handleKeyEventInternal , this ) ; this . publish ( "click" , { bubbles : 1 } ) ; }
function DelegateChildren ( ) { this . __childIdMap = { } ; }
function ( ) { var self = this ; self . get ( "el" ) . on ( "mousedown mouseup mouseover mouseout dblclick contextmenu" , handleChildMouseEvents , self ) ; }
function ( ) { var model = t . createUserModel ( ) ; t . is ( model . get ( 'displayName' ) , 'J\u00F6rgen Sivesind' , 'Found display name, utf chars ok' ) ; t . is ( model . get ( 'email' ) , 'jsi@enonic.com' , 'Could read email' ) ; }
function ( expected , actual ) { actual = actual || "" if ( actual . indexOf ( expected ) == - 1 ) { util . debug ( "Expected:\n\n<" + actual + ">\n\nto contain <" + expected + ">" ) } }
function ( ) { $ ( '#password' ) . val ( "" ) ; }
function ( ) { updateGallery ( $ ( this ) . attr ( 'href' ) , window . params . queryParamsMax , undefined , undefined , window . params . isGalleryUpdate ) ; return false ; }
function ( ) { updateGallery ( undefined , window . params . queryParamsMax , window . params . offset , true , window . params . isGalleryUpdate ) ; return false ; }
function ( ) { $ ( "#searchTextField" ) . val ( '' ) ; updateGallery ( undefined , window . params . queryParamsMax , window . params . offset , undefined , window . params . isGalleryUpdate ) ; return false ; }
function ( ) { var element = this . features_ . pop ( ) ; this . updateLength_ ( ) ; return element ; }
function ( opts ) { this . initGoogleObject ( opts ) ; }
function ( object ) { this . object_ = object ; this . initEvents ( ) ; }
function ( opts ) { var options = opts || { clickable : true , visible : true , zIndex : this . getDefaultZIndex ( ) , } ; this . setObject ( new MultiMarker ( options ) ) ; }
function ( ) { NavigationManager . UnClaimTile ( this ) ; }
function ( entity , from , to ) { return [ { point : from , cost : 0 } ] ; }
function ( ) { that . onRender ( ) ; }
function ( that ) { cspace . globalEvents . setListeners ( { applier : that . globalModel . applier , model : that . globalModel . model , eventMap : { "primaryModel.csid" : that . events . primaryRecordCreated } } ) ; }
function ( err ) { console . log ( "%s ERROR: %s" , Ext . Date . format ( new Date ( ) , 'Y-m-d H:i:s' ) , err ) ; }
function isObject ( o ) { return checkType ( o , 'object' ) ; }
function isUndefined ( o ) { return checkType ( o , 'undefined' ) ; }
function isUndefinedOrNull ( o ) { return isUndefined ( o ) || null === o ; }
function ( ) { forth . stackTrace . push ( this . name ) ; forth . runCode ( this . code , this ) ; forth . stackTrace . pop ( ) ; }
function ( ) { forth . stackTrace = [ ] ; forth . loopStack = [ ] ; }
function ( ) { assert . deepEqual ( quadtree . decode ( '1310333011323110333011323110333011323110333011323111231111111111111111111111111111111111111111111111' ) . origin , { lng : 156.0 , lat : 35.0 } ) ; }
function ( ) { assert . deepEqual ( quadtree . decode ( '1310333011323' ) . origin , { "lng" : 155.98388671875 , "lat" : 34.991455078125 } ) ; }
function ( ) { assert . deepEqual ( quadtree . decode ( '131033301132301103330' ) . origin , { "lng" : 155.98088264465332 , "lat" : 35.00119686126709 } ) ; }
function Type__ctor ( ) { if ( arguments . length !== 0 ) return state . innerCtor . apply ( this , arguments ) ; }
function ( flavor ) { if ( flavor == 'Dutch Apple a la mode' ) return "is the very best!" ; if ( ! flavor || /^\s*$/ . test ( flavor ) ) return '' ; return "is yummy!" ; }
function ( progress ) { return 1 - easingFunction ( 1 - progress ) ; }
function ( easingFunction ) { return function ( progress ) { return 1 - easingFunction ( 1 - progress ) ; } ; }
function ( ) { return EaselJS . createCanvas ( 'SpriteSheetUtils-working' ) ; }
function ( ) { return SpriteSheetUtils . _getWorkingCanvas ( ) . getContext ( "2d" ) ; }
function ( ) { var el = 'a[name = "index_' + $ ( this ) . text ( ) + '"]' ; $ ( '#Artists' ) . stop ( ) . scrollTo ( el , 400 ) ; return false ; }
function ( xhr ) { if ( xhr . status == 401 ) { Trello . deauthorize ( ) ; Trello . authorize ( defaultOptions ) ; } else { $ ( "#view" ) . html ( "<h1>Connection to Trello API is broken, Please <a href='javascript:reload();'>Reload</a></h1>" ) ; } }
function ( lat , lon , zoom ) { _this . center ( lat , lon ) ; if ( this . getZoom ( ) <= 4 ) { _this . zoom ( zoom ) ; } _centerInitialized = true ; }
function ( ) { this . element . appendTo ( "#qunit-fixture" ) ; ok ( this . element . is ( "div" ) , "generated div" ) ; deepEqual ( this . element . data ( "ui-testWidget" ) , this , "instance stored in .data()" ) ; }
function ( ) { ok ( this . element . is ( "span[data-test=pass]" ) , "generated span with properties" ) ; deepEqual ( this . element . data ( "ui-testWidget" ) , this , "instace stored in .data()" ) ; }
function ( ) { deepEqual ( this . element [ 0 ] , elem [ 0 ] , "from element" ) ; deepEqual ( elem . data ( "ui-testWidget" ) , this , "instace stored in .data()" ) ; }
function ( ) { deepEqual ( this . element [ 0 ] , elem [ 0 ] , "from jQuery object" ) ; deepEqual ( elem . data ( "ui-testWidget" ) , this , "instace stored in .data()" ) ; }
function ( ) { deepEqual ( this . element [ 0 ] , elem [ 0 ] , "from selector" ) ; deepEqual ( elem . data ( "ui-testWidget" ) , this , "instace stored in .data()" ) ; }
function ( elem ) { return ! ! $ . data ( elem , fullName ) ; }
function ( ) { this . hostEditor . setInlineWidgetHeight ( this , this . $wrapperDiv . height ( ) , true ) ; }
function ( ) { console . log ( 'Express server listening on port ' + app . get ( 'port' ) ) ; }
function ( ) { self . _pasteMetaKeyPressed = e . metaKey ; }
function ( ) { this . isOpen = false ; this . popover . dispose ( ) ; if ( this . toggledTo ) { this . toggle ( this . toggledTo == 'bottom' ? 'top' : 'bottom' ) ; this . toggledTo = null ; } }
function ( ) { self . _heartbeat_received ( ) ; }
function ( data ) { console . log ( "tweet end " + photo . _id + " - " + photo . slug ) ; return callback ( null , data ) ; }
function ( data ) { console . log ( "done" ) ; return process . exit ( ) ; }
function ( err , result ) { console . log ( err ) ; console . log ( result ) ; callback ( result ) ; }
function ( ) { if ( ! that . options . selectableSelector ) { fluid . fail ( "Cannot refresh selectable context which was not initialised by a selector" ) ; } that . selectables = container . find ( options . selectableSelector ) ; that . selectablesUpdated ( ) ; }
function ( m , code ) { var v = eval ( code ) ; return v ? resolveDefs ( c , v , def ) : v ; }
function ( m , code ) { return "';" + unescape ( code ) + "out+='" ; }
function ( m , code ) { var v = eval ( code ) ; return v ? resolveDefs ( c , v , def ) : v ; }
function ( m , code ) { return "';" + unescape ( code ) + "out+='" ; }
function PromisedHandler ( ) { this . getSuggestions = function ( entry , callback ) { this . pendingSuggestion = { entry : entry , callback : callback } ; } ; this . $dispose = Aria . empty ; }
function FalseNamedArgument ( ) { this . text = '' ; this . prefix = '' ; this . suffix = '' ; this . type = 'false' ; }
function ArrayArgument ( ) { this . args = [ ] ; this . type = 'array' ; }
function ( ) { var MyError = P ( Error , { } ) ; try { throw MyError ( 'o noes' ) ; } catch ( e ) { assert . ok ( e instanceof MyError ) ; assert . ok ( e instanceof Error ) ; } }
function ( ) { this . $el . modal ( 'hide' ) ; this . remove ( ) ; zeega . app . busy = false ; return false ; }
function ( ) { var html = '<div class="modal" id="sequence-modal">' + '<div class="modal-header">' + '<button class="close">×</button>' + '</div>' + '<div class="modal-body">' + '<h3>Continue this layer to</h3>' + '<label class="checkbox"><input id="continue-next-frame" type="checkbox" value="next_frame"> next frame</label>' + '<label class="checkbox"><input id="continue-sequence" type="checkbox" value="sequence"> this sequence</label>' + '<div id="linked-frames-selector">linked frames</br>' + '<ul class="layer-list-checkboxes unstyled"></ul></div>' + '</div>' + '<div class="modal-footer">' + '<a href="#" class="btn close" >Cancel</a>' + '<a href="#" class="btn btn-success pull-right save">OK</a>' + '</div>' + '</div>' ; return html }
function ( ) { if ( this . value . match ( /^#([0-9A-F]){3}$|^#([0-9A-F]){6}$/img ) ) { set_color ( this . value ) ; update_color ( true ) ; run_onchange_event ( ) ; } }
function stop_drag ( ) { $ ( document ) . unbind ( "mouseup" , stop_drag ) ; $ ( document ) . unbind ( "mousemove" , drag ) ; drag_callbacks [ 1 ] ( current_color ) ; run_onchange_event ( ) ; }
function ( changed , previous , events , callback ) { if ( changed . a > changed . b ) { callback ( 'b must be bigger than a!' ) ; } else { callback ( null ) ; } }
function ( changed , previous , events , callback ) { if ( changed . d > changed . c ) { callback ( 'c must be bigger than d!' ) ; } else { callback ( null ) ; } }
function ( changed , previous , events , callback ) { if ( changed . a < previous . a ) { callback ( 'a must be bigger than a before!' ) ; } else { callback ( null ) ; } }
function ( ) { return this . fromNowTillEnd . workingDays ( ) ; }
function ( acc , x ) { return acc + x ; }
function ( ) { var this_ = this ; this . constructor . __super__ . initialize . apply ( this ) ; this . bind ( 'drag' , function ( offset ) { this_ . _update_pview_offset ( offset ) ; } ) }
function ( offset ) { this_ . _update_pview_offset ( offset ) ; }
function ( ) { done ( ) ; }
function ( req , res ) { 'use strict' ; res . writeHead ( 200 , { 'Content-Type' : 'text/plain' } ) ; res . end ( 'Hello, Dan' ) ; }
function ( test ) { 'use strict' ; test . expect ( 1 ) ; test . ok ( 1 , "this assertion should FAIL!!" ) ; test . done ( ) ; }
function ( total ) { return this . _loads [ this . _bsearch . call ( this . _totals , total ) ] ; }
function ( ) { $ ( "#addBuildForm" ) . validate ( ) ; $ ( "#actionBuildForm" ) . validate ( ) ; $ ( "#sendMailForm" ) . validate ( ) ; }
function ( ) { var options = this . options , models = options . models ; return ! models || models . length - options . rows . length > options . tippingPoint ; }
function ( row , col ) { return 0 ; }
function ( game1 ) { underTest . init ( 'fend' , [ 0 , 0 , 0 ] , function ( game2 ) { assert . equal ( false , game1 == game2 ) ; } ) ; }
function scrollCarousel ( carousel , item ) { $ ( carousel ) . jcarousel ( 'scroll' , item ) ; return false ; }
function ( similar ) { similarMap [ similar ] = langMap [ lang ] ; }
function getLanguage ( alias , strict ) { return langMap [ alias ] || ( ! strict ? similarMap [ alias ] : undefined ) ; }
function highlight ( code , language , options ) { var brush = new language . Brush ( ) ; brush . init ( { toolbar : false } ) ; return brush . getHtml ( code ) ; }
function ( ) { _element && _element . classList . add ( "fade-in" ) ; }
function createOverlayer ( is_default ) { append = '\ 			<div id="mp-overlayer">\     			<div id="mp-overlayer-background"></div>\     			<div id="mp-overlayer-message">\     				<div id="mp-message-content">\     					<div id="mp-message-table">\     						<div style="clear:both"></div>\     					</div>\     				</div>\     			</div>\     		</div>\ 		' ; if ( $ ( 'body' ) . children ( '#mp-overlayer' ) . length == 0 ) { $ ( 'body' ) . append ( append ) ; } }
function ( err , data ) { if ( err ) throw err ; res . end ( JSON . stringify ( data ) ) ; }
function ( err , data ) { if ( err ) throw err ; callback && callback ( undefined , data ) ; }
function ( ) { _this . doLoop ( ) ; }
function Interface ( classInfo ) { var ii = classInfo . instanceInfo ; assert ( ii . isInterface ( ) ) ; this . name = ii . name ; this . classInfo = classInfo ; }
function ( ) { return "[interface " + this . name + "]" ; }
function ObjectVectorClass ( scope , instance , baseClass ) { return createVectorClass ( toplevel . getClass ( "Object" ) ) ; }
function DoubleVectorClass ( scope , instance , baseClass ) { return createVectorClass ( toplevel . getClass ( "Number" ) ) ; }
function coerce ( obj , type ) { if ( obj == null || type . isInstance ( obj ) ) { return obj ; } else { throwErrorFromVM ( "TypeError" , "Cannot coerce " + obj + " to type " + type ) ; } }
function ( rawSourceCode , uiSourceCode ) { if ( ! uiSourceCode . url ) return ; this . _rawSourceCodeForUISourceCode . put ( uiSourceCode , rawSourceCode ) ; this . dispatchEventToListeners ( WebInspector . UISourceCodeProvider . Events . UISourceCodeAdded , uiSourceCode ) ; }
function ( rawSourceCode , uiSourceCode ) { if ( ! uiSourceCode . url ) return ; this . _rawSourceCodeForUISourceCode . remove ( uiSourceCode ) ; this . dispatchEventToListeners ( WebInspector . UISourceCodeProvider . Events . UISourceCodeRemoved , uiSourceCode ) ; }
function ( uiSourceCode ) { this . _addUISourceCode ( uiSourceCode ) ; }
function collapseProjectTree ( id ) { $$ ( 'table.list tr.child.' + id ) . each ( function ( e ) { e . addClassName ( 'hide' ) ; collapseProjectTree ( e . identify ( ) ) ; } ) }
function ( ) { if ( ++ counter === len ) { SyntaxHighlighter . highlight ( ) ; window . SyntaxHighlighterLoading = false ; } else { load ( arr [ counter ] , callBack ) ; } }
function ( v ) { return v != null && v !== '' ; }
function ( msg , scope ) { return def . error ( def . string . join ( " " , "Invalid operation." , def . format ( msg , scope ) ) ) ; }
function ( name , msg , scope ) { return def . error ( def . string . join ( " " , def . format ( "Invalid argument '{0}'." , [ name ] ) , def . format ( msg , scope ) ) ) ; }
function ( msg , scope ) { return def . error ( def . string . join ( " " , "Assertion failed." , def . format ( msg , scope ) ) ) ; }
function ( list ) { this . base ( ) ; this . _list = def . array . isLike ( list ) ? list : [ list ] ; this . _count = this . _list . length ; }
function addDim ( escapedDimLabel , label ) { tooltip . push ( '<b>' + escapedDimLabel + "</b>: " + ( def . html . escape ( label ) || " - " ) + '<br/>' ) ; }
function ( scene ) { return def . string . join ( "," , scene . acts . x . label , scene . acts . y . label ) ; }
function ( char ) { if ( char == '\n' || char == '>' ) { cont += 1 ; } else { cont = 0 ; } return _ttyWrite . apply ( this , arguments ) ; }
function ( err , data ) { if ( err ) { return callback ( err ) ; } details = { url : findProperty ( 'calendar-home-set' , data , true ) } ; callback ( null , details ) ; }
function setStatus ( num , str ) { document . getElementById ( 'Status' ) . value = str ; }
function Item_setRotation ( degrees ) { var value = degrees ? "rotate(%deg)" . replace ( /%/ , degrees ) : null ; iQ ( this . container ) . css ( { "transform" : value } ) ; }
function onZoomDone ( ) { $tab . removeClass ( "front" ) ; $canvas . css ( "transform" , null ) ; if ( typeof complete == "function" ) complete ( ) ; }
function checkForTransformAddition ( aEvent ) { if ( aEvent . attrName == "style" && aEvent . target . style . transform ) { transformChanged = true ; } }
function ( ) { jQuery ( this . element ) . addClass ( 'isModified' ) ; return this . _trigger ( 'modified' , null , { editable : this , content : this . getContents ( ) } ) ; }
function ( ) { SimpleTest . finish ( ) ; }
function ( code ) { var out = "require.define(\"" + this . moduleName ( ) + "\", function(require, module, exports) {\n(function() {\nrequire = hackRequire(require);\n" + code + "\n}).call(module.exports);\n});\n" ; return out ; }
function ( path ) { try { return origRequire ( path ) ; } catch ( e ) { return retryRequire ( path , e ) ; } }
function ( current ) { var key = window . prompt ( "Enter a url key" , current ) ; if ( key ) { key = this . encodeKey ( key ) ; this . shownGraph . setInfo ( "url" , key ) ; } return key ; }
function ( status ) { if ( status . success ) { pageHelpers . emailSent ( "waitForUserValidation" , oncomplete && oncomplete . curry ( true ) ) ; } else { tooltip . showTooltip ( "#could_not_add" ) ; oncomplete && oncomplete ( false ) ; } }
function ( array ) { var max = array [ 0 ] ; for ( var i = 0 ; i < array . length ; ++ i ) if ( max < array [ i ] ) max = array [ i ] ; return max ; }
function ( array ) { var min = array [ 0 ] ; for ( var i = 0 ; i < array . length ; ++ i ) if ( min > array [ i ] ) min = array [ i ] ; return min ; }
function OnEnterGameOverState ( ) { if ( orderSummary . isOrderComplete ( ) ) { } else { showOrderFailUI ( ) ; } }
function OnExitInGameState ( ) { document . onkeydown = null ; document . onkeyup = null ; controller . stopGame ( ) ; Ticker . removeAllListeners ( ) ; }
function ( ) { ok ( fired , "frame fired. (actual: " + fired + ")" ) ; endTest ( ) ; }
function ( format ) { if ( ! formatChangeData [ format ] ) { formatChangeData [ format ] = [ ] ; formatChangeData [ format ] . similar = similar ; } formatChangeData [ format ] . push ( callback ) ; }
function updateHistory ( sectionId , contentId , title ) { var dataToSave = { href : contentId , section : sectionId } ; history . pushState ( dataToSave , dataToSave . section ) ; }
function ( e ) { var section = e . originalEvent . state . section , content = e . originalEvent . state . href ; clickMode = 'history' ; $ ( 'a[data-section=' + section + '][href=' + content + ']' ) . trigger ( 'click' ) ; }
function ( e ) { console . log ( e ) ; }
function ( ) { $ ( kb . html ) . slideUp ( 300 ) ; isVisible = false ; }
function ( x , y , w , h ) { var _this = this , context = this . context_copy ; if ( _this . hasStarted ) { context . clearRect ( x , y , w , h ) ; } }
function ( v ) { return v != null && v !== '' ; }
function ( msg , scope ) { return def . error ( def . string . join ( " " , "Invalid operation." , def . format ( msg , scope ) ) ) ; }
function ( name , msg , scope ) { return def . error ( def . string . join ( " " , def . format ( "Invalid argument '{0}'." , [ name ] ) , def . format ( msg , scope ) ) ) ; }
function ( msg , scope ) { return def . error ( def . string . join ( " " , "Assertion failed." , def . format ( msg , scope ) ) ) ; }
function ( list ) { this . base ( ) ; this . _list = def . array . isLike ( list ) ? list : [ list ] ; this . _count = this . _list . length ; }
function addDim ( escapedDimLabel , label ) { tooltip . push ( '<b>' + escapedDimLabel + "</b>: " + ( def . html . escape ( label ) || " - " ) + '<br/>' ) ; }
function ( scene ) { return def . string . join ( "," , scene . acts . x . label , scene . acts . y . label ) ; }
function hideTipsy ( ) { setTarget ( null ) ; if ( $fakeTipTarget ) { $fakeTipTarget . tipsy ( "leave" ) ; } }
function onScanError ( error ) { scanning = false ; clear ( false ) ; if ( autoscan ) window . setTimeout ( scan , scanRate ) ; }
function ( e , _mode , _id ) { mode = _mode ; id = _id ; }
function ( ) { sakai . api . Util . Modal . open ( container ) ; }
function ( i , user ) { if ( user [ 'sakai:pool-content-created-for' ] ) { usersToFetch . push ( user [ 'sakai:pool-content-created-for' ] ) ; } }
function ( e ) { e . preventDefault ( ) ; $ ( document ) . trigger ( 'init.uploadnewversion.sakai' ) ; $ ( '#entity_contentsettings_dropdown' ) . jqmHide ( ) ; }
function ( success , collection ) { if ( success ) { $ ( document ) . trigger ( 'done.newaddcontent.sakai' , [ [ collection ] , 'user' ] ) ; } }
function ( groupid , $item ) { $ ( document ) . trigger ( 'done.tooltip.sakai' ) ; openTooltip ( groupid , $item ) ; }
function ( ) { $ ( document ) . trigger ( 'initialize.addToContacts.sakai' , [ dataCache [ userId ] ] ) ; }
function ( e , newContent ) { if ( newContent && newContent . length ) { handleRecentChangedContentData ( true , { results : newContent } ) ; } }
function ( i , id ) { batchRequests . push ( { 'url' : '/p/' + id + '.2.json' , 'method' : 'GET' } ) ; }
function ( e , tooltipData ) { hideTooltip ( ) ; $ ( document ) . trigger ( 'init.tooltip.sakai' , tooltipData ) ; }
function ( dialogContainer , options , addClose ) { var $dialogContainer = $ ( dialogContainer ) ; if ( addClose ) { $dialogContainer . jqm ( options ) . jqmAddClose ( addClose ) ; } else { $dialogContainer . jqm ( options ) ; } }
function ( dialogContainer ) { var $dialogContainer = $ ( dialogContainer ) ; $dialogContainer . jqmHide ( ) ; }
function ( id , showSettings , context , widgetData , widgetDataPassthrough , callback ) { var obj = this . loadWidgets ( id , showSettings , context , widgetData , widgetDataPassthrough , callback ) ; this . loaded . push ( obj ) ; }
function ( ) { $dialogNode . dialog ( "close" ) ; }
function ( editor , keyCode ) { if ( keyCode === 16 ) { ME . holdShift = true ; } if ( ME . util . isNeutralKey ( keyCode ) ) { ME . holdNeutralKey = true ; } }
function ( editor , keyCode ) { if ( keyCode === 16 ) { ME . holdShift = false ; } if ( ME . util . isNeutralKey ( keyCode ) ) { ME . holdNeutralKey = false ; } }
function ToolbarSelect ( name , options , clicked , isAvailable ) { ToolbarButton . apply ( this , [ name , clicked , isAvailable ] ) ; this . options = options || [ ] ; }
function ( callback ) { if ( this . is ( "wysiwyg" ) ) { this . currentMode . updateTextArea ( this , callback ) ; } else { this . currentMode . updatePreview ( this , callback ) ; } }
function ( editor , target ) { editor . changeDataMode ( target . value ) ; return true ; }
function ( editor ) { editor . synchronize ( ) ; editor . settings . save ( editor ) ; return true ; }
function ( editor ) { if ( editor . is ( 'wysiwyg' ) ) { editor . changeMode ( editor . dataType ) ; } else { editor . changeMode ( 'wysiwyg' ) ; } return true ; }
function ( ) { if ( tracing ) { endTrace ( ) ; } if ( ! tracingStack [ 0 ] ) { tracingStack [ 0 ] = { tag : 'p' } ; } }
function ( editor , callback ) { return textileCompiler . compile ( editor . textArea . val ( ) ) ; }
function ( match , startSpace , text , endSpace ) { startSpace = startSpace ? ' ' : '' ; endSpace = endSpace ? ' ' : '' ; return startSpace + delimiter + text + delimiter + endSpace ; }
function ( editor , keyCode ) { switch ( keyCode ) { case 13 : return pressedEnter ( editor , this ) ; default : this . prototype . pressed . apply ( this , [ editor , keyCode ] ) ; } }
function ( editor , callback ) { return editor . getDataMode ( ) . toText ( editor , callback ) ; }
function ( ) { var tb = editor . find ( ".toolbar" ) ; ok ( tb . find ( "a.save" ) . is ( ":visible" ) , "save button should be visible" ) ; ok ( tb . find ( "a.close" ) . is ( ":visible" ) , "close button should be visible" ) ; }
function ( ) { var string = "* item1\n* item2" ; textile . set ( string ) . select ( "item1" ) . disabled ( "alignCenter" ) . disabled ( "alignRight" ) . disabled ( "alignLeft" ) . click ( ".alignCenter" ) . equal ( string ) ; }
function ( ) { if ( ! -- remaining ) { load ( lang . delegate ( cache [ loadTarget ] ) ) ; } }
function ( ) { $panels . stop ( true , true ) ; }
function ( room ) { Session . set ( 'room' , room ) ; Players . update ( Session . get ( 'player_id' ) , { $set : { room : room , entered_at : new Date ( ) } } ) ; }
function ( ) { return Rooms . find ( { } , { $sort : { entered_at : 1 } } ) ; }
function ( ) { tile . attach ( $ ( '#' + tile . uniqueId ) ) ; }
function ( resolved ) { makeResolvable ( name , resolved ) ; itemPromise . resolve ( resolved ) ; }
function ( factory ) { var component = defer ( ) ; if ( ! spec . id ) spec . id = name ; factory ( component . resolver , spec , pluginApi ) ; return processComponent ( component , spec , name ) ; }
function ( proxy ) { return processLifecycle ( proxy , lifecycleSteps . init , this . _config ) ; }
function ( proxy ) { return processLifecycle ( proxy , lifecycleSteps . shutdown , this . _config ) ; }
function ( ) { return when . chain ( processListeners ( step , proxy , config ) , d , proxy ) ; }
function ( idx , button ) { var tag = $ ( button ) . attr ( 'data-textstyle' ) ; $ ( button ) . attr ( 'data-title' , buttonHandler . tooltips [ tag ] . disabled ) ; }
function ( ) { textStyle . formatCode . call ( Kreator , $span ) ; }
function ( ) { $ ( '#reveal section' ) . css ( { 'cursor' : 'crosshair' } ) ; $ ( 'span' ) . on ( 'click' , bHandler . removeSpan ) ; }
function ( e ) { e . preventDefault ( ) ; e . stopPropagation ( ) ; $ ( 'section' ) . html ( '' ) ; }
function ( sexp ) { return root [ "eval" ] ( compile ( sexp ) ) ; }
function ( x ) { x . quoted = true ; return x ; }
function ( x ) { x . unquoted = true ; return x ; }
function Raw ( text ) { this . text = text ; Raw . __super__ . constructor . apply ( this , arguments ) ; }
function ( ) { var _ref1 ; return "/" + this . pattern + "/" + ( ( _ref1 = this . modifiers ) != null ? _ref1 : '' ) ; }
function ( sname , args , yy ) { var s = sym ( sname , yy ) ; return new C . List ( [ s ] . concat ( args ) , yy ) ; }
function ( sexp ) { return root [ "eval" ] ( compile ( sexp ) ) ; }
function ( x ) { x . quoted = true ; return x ; }
function ( x ) { x . unquoted = true ; return x ; }
function ( sname , args , yy ) { var s = sym ( sname , yy ) ; return new C . List ( [ s ] . concat ( args ) , yy ) ; }
function ( event ) { if ( this . chatBox_ . classList . contains ( dotprod . views . ChatView . CHAT_BOX_VISIBLE_CLASS_NAME_ ) ) { event . stopPropagation ( ) ; } }
function ( rootNode ) { goog . base ( this , 'renderDom' , rootNode ) ; rootNode . appendChild ( this . canvas_ ) ; this . chatView_ . renderDom ( rootNode ) ; }
function ( packet ) { var player = this . playerIndex_ . findByName ( packet [ 0 ] ) ; var message = packet [ 1 ] ; this . chatView_ . addMessage ( player , message ) ; }
function ( key ) { return localStorage . hasOwnProperty ( moduleName + "$" + key ) ; }
function ( node ) { return HTMLArea . isIEBeforeIE9 ? node . innerText : node . textContent ; ; }
function ( mdown ) { return new Showdown . converter ( ) . makeHtml ( mdown ) ; }
function ( that ) { that . locate ( "password" ) . val ( "" ) ; }
function ( ) { FLICKR . overlay . hide ( ) ; FLICKR . gallery . moveToNextPage ( ) ; }
function ( msg ) { if ( msg . profile == window . app . profiles . DEFAULT ) { this . ondestroy ( ) ; this . _toolbar_visibility = false ; topCell . setTooolbarVisibility ( "command_line" , false ) ; } }
function ( str , doc ) { if ( typeof doc === "undefined" ) { doc = glbls . document ; } if ( ! doc ) { throw new OSXHError ( "Cannot render; no output document. Check the doc parameter." ) ; } return _render ( str , doc ) ; }
function ( ) { goog . style . setOpacity ( this . target , this . getLayer ( ) . getOpacity ( ) ) ; }
function ( ) { goog . style . showElement ( this . target , this . getLayer ( ) . getVisible ( ) ) ; }
function doHide ( ) { APP . emit ( el . id , 'cancel' ) ; }
function mouseLeave ( ) { -- entered ; if ( entered == 0 ) { clearTimeout ( hideTimeout ) ; hideTimeout = setTimeout ( doHide , autoHideDelay ) ; } }
function mouseEnter ( ) { ++ entered ; clearTimeout ( hideTimeout ) ; }
function ( hidden ) { if ( hideTimeout ) { clearTimeout ( hideTimeout ) ; hideTimeout = null ; } if ( autoHideDelay > 0 && ! hidden ) { entered = 1 ; mouseLeave ( ) ; } entered = 0 ; }
function ( ) { return this . _serverState == 'connected' ; }
function wHTML ( ) { var html = "<li id='" + this . id + "'><img src='img/bep.jpg' width='600' height='600' /> <h3>" + this . title + "</h3><a id='' class='aaa'></a><a id='' class='bbb'></a><a id='' class='ccc' onclick='reqpopup()' href='#request-box'></a>" + "<div style='clear:right;'></div>" + "<h1 style='{font-style:italic;}'>By:" + this . by + "</h1> <br>" + prettyDate ( this . added ) + "<br>" + "<a class='more' onclick='more(this);'>More</a><span class='respond' onclick='respopup()'>respond</span></li>" ; return html ; }
function ( ) { var serialization = delegate . repetition1 . _iterationTemplate . _ownerSerialization ; expect ( stripPP ( serialization ) ) . toBe ( '{"owner":{"prototype":"montage/ui/repetition.reel","properties":{"element":{"#":"list1"},"_isComponentExpanded":true,"ownerComponent":{"@":"__root__"}}},"__root__":{}}' ) ; }
function ( ) { return _this . $ ( '.btn-primary' ) . toggle ( _this . getTreeRoot ( ) . isAttribute ( ) ) ; }
function ( node ) { ModelYavetz . prototype . setCurrentPlanet . call ( this , node ) ; this . setAlpha ( this . currentPlanet . sphere [ 3 ] . axisAngle ) ; this . setBeta ( this . currentPlanet . betaRotate ) ; }
function ( ) { return { protocol : "https://" , domain : "ilanguage.iriscouch.com" , port : "443" , corpusname : "default" } ; }
function ( done ) { process . stdout . write = oldStdout ; wim . onEnd ( ) ; done ( ) ; }
function ( ) { var resetButton = document . querySelectorAll ( 'reset-button' ) ; resetButton . addEventListener ( 'click' , trackButtonClick ) ; if ( window . localStorage == null ) { alert ( "LocalStorage must be enabled for managing options." ) ; return ; } }
function ( element ) { var $element = jQuery ( element ) ; $element . addClass ( WAI_LANG_CLASS ) ; $element . attr ( 'data-gentics-aloha-repository' , 'wai-languages' ) ; $element . attr ( 'data-gentics-aloha-object-id' , $element . attr ( 'lang' ) ) ; }
function ( ) { that . parent . fire ( "paste" ) . fire ( "paste:composer" ) ; }
function ( paramName ) { return ( this . queryData_ . get ( paramName ) ) ; }
function ( ) { this . deck = document . getElementById ( "browsers" ) ; this . deck . addEventListener ( "click" , this , false , true ) ; }
function browser_followLink ( e ) { e . preventDefault ( ) ; if ( e . target . nodeName === 'A' ) { this . navigate ( e . target . getAttribute ( 'href' ) ) ; } }
function ( event ) { this . paddleX = event . offsetX ; }
function ( ) { return "Sprite: Simple action test" ; }
function ( ) { return "SpriteBatch: Simple action test" ; }
function ( ul , item ) { return $ ( "<li></li>" ) . data ( "item.autocomplete" , item ) . append ( "<a>" + item . label ) . appendTo ( ul ) ; }
function ( ul , item ) { return $ ( "<li></li>" ) . data ( "item.autocomplete" , item ) . append ( "<a>" + item . label ) . appendTo ( ul ) ; }
function ( ul , item ) { return $ ( "<li></li>" ) . data ( "item.autocomplete" , item ) . append ( "<a>" + item . label ) . appendTo ( ul ) ; }
function ( param_logMessage , param_cb ) { this . openLogSaves ++ ; this . _reLog ( param_logMessage , param_cb ) ; }
function ( ) { this . close ( ) ; }
function ( key ) { if ( entries [ key ] === undefined ) { return ; } delete timeStampMap [ key ] ; delete entries [ key ] ; count -- ; }
function ( ) { window . addEventListener ( "deviceorientation" , gyroscopeAPI . onSuccess ) ; gyroscopeAPI . watchID = setTimeout ( "gyroscopeAPI.executeCBs()" , gyroscopeAPI . options . frequency ) ; console . log ( "gyroscope.watch started" ) ; }
function ( ) { window . removeEventListener ( "deviceorientation" , gyroscopeAPI . onSuccess ) ; clearTimeout ( gyroscopeAPI . watchID ) ; console . log ( "gyroscope.watch stopped" ) ; }
function ( link ) { mobileNav . children ( 'select' ) . append ( '<option value="' + link . href + '">&raquo; ' + link . text + '</option>' ) ; }
function ( options ) { options = options || { } ; this . stream = options . stream || false ; return director . Router . prototype . configure . call ( this , options ) ; }
function ( value , key ) { var list = { } ; list . boards = value ; list . name = ( key !== "" || key === null ) ? orgList [ key ] [ 0 ] . displayName : "Personal" ; return list ; }
function ( evt ) { evt && evt . preventDefault ( ) }
function setInputDisabled ( state ) { domainBlacklistEl . disabled = state ; domainWhitelistEl . disabled = state ; whitelistEl . disabled = state ; for ( var key in durationEls ) { durationEls [ key ] . disabled = state ; } }
function fillStrokeClose ( bypassClose ) { executeContextFill ( ) ; executeContextStroke ( ) ; if ( bypassClose !== false ) { curContext . closePath ( ) ; } }
function ( ) { jqUnit . expect ( 1 ) ; var response = gpii . lifecycleManager . responseToSnapshot ( "org.gnome.desktop.interface" , parseHandlerResponseFunctionRequestNoSettings ) ; jqUnit . assertUndefined ( "parseHandlerResponse returning the correct payload" , response ) ; }
function firePPEvent ( data ) { $ ( '#ppEvents' ) . text ( JSON . stringify ( data ) ) ; $ ( '#ppEvents' ) . trigger ( 'baseEvent' ) ; console . log ( data ) ; }
function ( ) { assert . ok ( /^\d+\.\d+\.\d+$/ . test ( knox . version ) ) ; }
function ( ) { var client = knox . createClient ( { key : 'foobar' , secret : 'baz' , bucket : 'misc' , endpoint : 's3-eu-west-1.amazonaws.com' } ) ; assert . equal ( 's3-eu-west-1.amazonaws.com' , client . endpoint ) ; }
function ( done ) { client . del ( '/test/user.json' ) . on ( 'response' , function ( res ) { assert . equal ( 204 , res . statusCode ) ; done ( ) ; } ) . end ( ) ; }
function ( done ) { client . deleteFile ( '/test/user2.json' , function ( err , res ) { assert . ok ( ! err ) ; assert . equal ( 204 , res . statusCode ) ; done ( ) ; } ) ; }
function ( done ) { client . get ( '/test/user.json' ) . on ( 'response' , function ( res ) { assert . equal ( 404 , res . statusCode ) ; done ( ) ; } ) . end ( ) ; }
function ( done ) { client . head ( '/test/user.json' ) . on ( 'response' , function ( res ) { assert . equal ( 404 , res . statusCode ) ; done ( ) ; } ) . end ( ) ; }
function ( ) { assert . equal ( 'aGV5' , utils . base64 . encode ( 'hey' ) ) ; }
function ( ) { assert . equal ( 'hey' , utils . base64 . decode ( 'aGV5' ) ) ; }
function ( ) { return scope . modalName = true ; }
function ( ) { return scope . modalName = false ; }
function ( tab ) { console . log ( "onTabSelect: " + tab . title ) ; }
function update ( options ) { if ( ! isCancel ) { op = baidu . extend ( op , options || { } ) ; cancel ( ) ; render ( ) ; } }
function ( ) { return JSON . stringify ( this . toJSON ( ) ) ; }
function ( R ) { return new ( R ) ( { title : 'The Great Gatsby' , kind : 'Classic Novels' } ) ; }
function ( r ) { assert . equal ( r . toString ( ) , '{"kind":"Classic Novels","resource":"Book"}' ) ; }
function ( r ) { var restricted = r . toJSON ( ) ; assert . isObject ( restricted ) ; assert . ok ( ! restricted . title ) ; assert . ok ( restricted . kind ) ; }
function ( r ) { assert . include ( r , 'kind' ) ; assert . isString ( r . kind ) ; }
function ( ) { var tab = this . getCurrentTab ( ) ; return tab && tab . name . indexOf ( '.vpc' ) > 0 ? true : false ; }
function ( project ) { return project . get ( 'Name' ) ; }
function ( ) { log ( 'editAvatarView:render' ) ; this . _initMediaUploader ( ) ; $ ( '#avatar-viewer' ) . append ( '<img src="' + this . model . get ( 'Avatar' ) . Files . ThumbnailMedium . RelativeUri + '" />' ) ; return this ; }
function ( ) { this . showDetails ( ) ; }
function ( project ) { return project . get ( 'Name' ) ; }
function ( ) { log ( 'editAvatarView:render' ) ; this . _initMediaUploader ( ) ; $ ( '#avatar-viewer' ) . append ( '<img src="' + this . model . get ( 'Avatar' ) . Files . ThumbnailMedium . RelativeUri + '" />' ) ; return this ; }
function ( ) { this . showDetails ( ) ; }
function ( err , object ) { if ( err ) { console . warn ( 'findAndModify error response ' , err . message ) ; } else { console . log ( 'findAndModify response' , object ) ; } request = false ; findAndModifyLoop ( ) ; }
function ( key , building ) { if ( building != null && building . id == buildingID ) icon = 'img/markers/marker' + categoryID + 'fav.png' ; }
function ( key , building ) { if ( building . id == buildingID ) icon = 'img/markers/marker' + categoryID + 'seen.png' ; }
function ( evt ) { console . log ( 'markerclick' ) ; var caller = this ; if ( caller . popup == null ) fillPopup ( caller ) ; else showPopup ( caller . popup ) ; OpenLayers . Event . stop ( evt ) ; }
function ( ) { input . removeClass ( 'hidden-accessible' ) . click ( ) ; input . addClass ( 'hidden-accessible' ) ; }
function ( type ) { return prepareResult ( 'queryUids(' + type + ')' ) ; }
function ( data ) { var link ; link = this . updateModels ( data ) ; console . log ( 'link' , link ) ; if ( link ) { linksCollection . add ( link ) ; return link . save ( ) ; } }
function checkEmail ( email ) { if ( email == "" ) return false ; var regex = /^[a-zA-Z0-9]([a-zA-Z0-9]|[\._\-][a-zA-Z0-9])*\@[a-zA-Z0-9]([a-zA-Z0-9]|[\.\-][a-zA-Z0-9])*\.[a-zA-Z0-9]{2,255}$/ ; return ( regex . test ( email ) ) ; }
function ( ) { return "SELECT cartodb_id AS id, slug, title, title_color, title_subs, table_name, source, category_name, external, zmin, zmax, ST_XMAX(the_geom) AS xmax, \           ST_XMIN(the_geom) AS xmin, ST_YMAX(the_geom) AS ymax, ST_YMIN(the_geom) AS ymin, tileurl, true AS visible \           FROM " + layerTable + " \           WHERE display = TRUE ORDER BY displaylayer,title ASC" ; }
function ( ) { that . LayersObj . each ( function ( p ) { that . _addLayer ( p ) ; } ) ; Filter . addFilter ( 0 , 'regrowth' , 'Regrowth' , 'Coming soon...' , { disabled : true } ) ; }
function ( input ) { input = input . replace ( /&lt;?/g , "<" ) ; input = input . replace ( /&gt;?/g , ">" ) ; input = input . replace ( /&amp;?/g , "&" ) ; return input ; }
function ( text ) { text . should . eql ( "\n" + '      #1  \u001b[31m✖\u001b[39m  Foo' + "\n" ) ; console . log . restore ( ) ; done ( ) ; }
function ( error ) { self . emit ( 'error' , error ) ; cleanupWebsocketResources . call ( this , error ) ; }
function ( ) { throw "my error" }
function ( ) { throw "my error" }
function ( response ) { previewContent . html ( response [ 0 ] . matches [ 0 ] ) ; $ ( '#preview' ) . show ( ) ; }
function ( ) { document . getElementById ( "GameCanvas" ) . style . cursor = 'url(data/empty_cursor_flx.png), auto' ; }
function ( ) { Y . log ( 'rpc failure!' , 'warn' , NAME ) ; adapter . error ( resp . html ) ; }
function ( n ) { host = this . hostname ; }
function ( ) { var cartesian = new Cartesian2 ( 2.0 , 0.0 ) ; var expectedResult = new Cartesian2 ( 1.0 , 0.0 ) ; var result = cartesian . normalize ( ) ; expect ( result ) . toEqual ( expectedResult ) ; }
function ( ) { var cartesian = new Cartesian4 ( 1.0 , 2.0 , 0.0 , - 1.0 ) ; expect ( cartesian . getMaximumComponent ( ) ) . toEqual ( cartesian . y ) ; }
function ( cartesian ) { if ( typeof cartesian === 'undefined' ) { throw new DeveloperError ( 'cartesian is required' ) ; } return Math . max ( cartesian . x , cartesian . y , cartesian . z , cartesian . w ) ; }
function ( cartesian ) { return Math . sqrt ( Cartesian4 . magnitudeSquared ( cartesian ) ) ; }
function ( x ) { return ko . utils . unwrapObservable ( x ) }
function ( ) { if ( arguments . length > 0 ) { defaultOptions = arguments [ 0 ] ; } else { return defaultOptions ; } }
function ( ) { return options [ parentName ] . create ( { data : data || callbackParams . data , parent : callbackParams . parent } ) ; }
function ( ) { return options [ parentName ] && options [ parentName ] . update instanceof Function ; }
function ( change ) { options [ parentName ] . arrayChanged ( change . event , change . item ) ; }
function canHaveProperties ( object ) { var type = exports . getType ( object ) ; return ( ( type === "object" ) || ( type === "array" ) ) && ( object !== null ) ; }
function ( key ) { var existingIndex = ko . utils . arrayIndexOf ( keys , key ) ; var value = ( existingIndex >= 0 ) ? values [ existingIndex ] : undefined ; return value ; }
function ( x ) { return ko . utils . unwrapObservable ( x ) }
function ( ) { if ( arguments . length > 0 ) { defaultOptions = arguments [ 0 ] ; } else { return defaultOptions ; } }
function ( ) { return options [ parentName ] . create ( { data : data || callbackParams . data , parent : callbackParams . parent } ) ; }
function ( ) { return options [ parentName ] && options [ parentName ] . update instanceof Function ; }
function ( change ) { options [ parentName ] . arrayChanged ( change . event , change . item ) ; }
function canHaveProperties ( object ) { var type = exports . getType ( object ) ; return ( ( type === "object" ) || ( type === "array" ) ) && ( object !== null ) ; }
function ( key ) { var existingIndex = ko . utils . arrayIndexOf ( keys , key ) ; var value = ( existingIndex >= 0 ) ? values [ existingIndex ] : undefined ; return value ; }
function ( el ) { el = $ ( el ) ; if ( el . retrieve ( store ) ) $ ( el ) . removeEvents ( dragdrop ) . eliminate ( store ) . getFirst ( ) . destroy ( ) ; return this }
function ( e ) { e . stop ( ) ; this . getFirst ( ) . style . display = 'none' }
function ( f ) { transfer = uploadManager . upload ( Object [ append ] ( { } , options ) ) ; if ( transfer ) transfer . load ( f ) }
function ( ) { return this . element }
function ( ) { first . set ( 'title' , file . name + ' (' + ( this . value * 100 ) . format ( ) + '%)' ) }
function ( ) { this . state = 1 ; this . upload ( ) }
function ( f ) { transfer = uploadManager . upload ( Object [ append ] ( { } , op ) ) ; if ( transfer ) transfer . load ( f ) }
function ( ) { this . element [ getElement ] ( '.resume-upload' ) . style . display = '' }
function ( ) { if ( this . reader ) { if ( this . ready ) this . initUpload ( ) ; else setTimeout ( this . upload . bind ( this ) , 100 ) } else this . initUpload ( ) }
function ( ) { this . element [ getElement ] ( '.pause-upload' ) . set ( 'text' , Locale [ get ] ( 'uploadManager.RESUME' ) ) . style . display = '' }
function ( ) { this . selectTab ( this . createTab ( this . START_PAGE_URL ) ) ; this . showPageScreen ( ) ; }
function places_getTopSites ( maximum , callback ) { this . db . getPlacesByFrecency ( maximum , callback ) ; }
function ( ) { assert . ok ( subject . connection ) ; assert . ok ( subject . isOpen ) ; assert . equal ( subject . connection . name , name ) ; finishedOpen = true ; }
function ( ) { var db = new Calendar . Db ( 'b2g-test-calendar' ) ; this . _lastDb = db ; return this . _lastDb ; }
function ( ) { testSupport . calendar . requireProvider ( ) ; requireLib ( 'db.js' ) ; requireLib ( 'models/account.js' ) ; requireLib ( 'models/calendar.js' ) ; requireLib ( 'store/abstract.js' ) ; requireLib ( 'store/account.js' ) ; }
function ( done ) { testSupport . calendar . clearStore ( 'calendars' , done ) ; }
function ( ) { assert . instanceOf ( subject , Calendar . Store . Abstract ) ; assert . equal ( subject . db , db ) ; assert . deepEqual ( subject . _cached , { } ) ; }
function ( done ) { calendars = { } ; calStore = subject . db . getStore ( 'Calendar' ) ; model = subject . _createModel ( { providerType : 'Local' } ) ; subject . persist ( model , done ) ; }
function ( done ) { calendars [ 2 ] = new Calendar . Models . Calendar ( { accountId : 'some-other' , remote : { id : 666 } } ) ; calStore . persist ( calendars [ 2 ] , done ) ; }
function ( ) { var result = subject . _createModel ( { providerType : 'Local' } ) ; assert . equal ( result . providerType , 'Local' ) ; assert . isFalse ( ( '_id' in result ) ) ; }
function ( cb ) { cb ( null , remote ) ; }
function ( done ) { var store = subject . db . getStore ( 'Calendar' ) ; store . load ( function ( err , data ) { results = data ; done ( ) ; } ) ; }
function ( ) { var store = app . store ( 'Account' ) ; list = subject . accountList ; store . _cached = fixtures ; subject . render ( ) ; result = subject . element . innerHTML ; }
function ( ) { requireLib ( 'templates/calendar.js' ) ; requireLib ( 'views/settings.js' ) ; }
function al_putAlarmList ( alarm ) { AlarmManager . setEnabled ( alarm , alarm . enabled ) ; self . refresh ( ) ; }
function am_unset ( alarm ) { if ( alarm . alarmId ) { navigator . mozAlarms . remove ( alarm . alarmId ) ; } }
function am_gotAlarm ( alarm ) { self . _onFireAlarm = alarm ; var protocol = window . location . protocol ; var host = window . location . host ; window . open ( protocol + '//' + host + '/onring.html' , 'ring_screen' , 'attention' ) ; }
function am_snoozeHandler ( ) { this . set ( this . _onFireAlarm , true ) ; }
function aev_getDefaultAlarm ( ) { return { id : '' , alarmId : '' , label : 'Alarm' , hour : '10' , minute : '00' , enabled : true , repeat : '0000000' , sound : 'classic.wav' , snooze : 5 , color : 'Darkorange' } ; }
function al_putAlarmList ( alarm ) { AlarmManager . setEnabled ( alarm , alarm . enabled ) ; AlarmList . refresh ( ) ; }
function ( event ) { item . id = event . target . result ; if ( callback ) callback ( item ) ; }
function _getKeyCoordinateY ( y ) { var candidatePanel = document . getElementById ( 'keyboard-candidate-panel' ) ; var yBias = 0 ; if ( candidatePanel ) yBias = candidatePanel . clientHeight ; return y - yBias ; }
function kc_onResize ( nWidth , nHeight , fWidth , fHeihgt ) { if ( IMERender . ime . dataset . hidden ) return ; IMERender . resizeUI ( _currentLayout ) ; _updateTargetWindowHeight ( ) ; this . updateLayoutParams ( ) ; }
function trWait ( ) { nextNotification . removeEventListener ( 'transitionend' , trWait ) ; nextNotification . style . MozTransition = '' ; nextNotification . style . MozTransform = '' ; notificationNode . parentNode . removeChild ( notificationNode ) ; self . updateStatusBarIcon ( ) ; }
function ( event ) { self . isOpen = true ; self . connection = req . result ; callback ( null , self ) ; self . emit ( 'open' , self ) ; }
function Abstract ( db ) { this . db = db ; this . _cached = Object . create ( null ) ; Calendar . Responder . call ( this ) ; }
function Account ( ) { var self = this ; Calendar . Store . Abstract . apply ( this , arguments ) ; }
function ( value , onTrue ) { if ( value ) { return onTrue ; } else { return '' ; } }
function ( err , doc ) { if ( err ) { em . emit ( 'error' , err ) ; } else { em . emit ( 'data' , null , doc , _data ) ; } self . resume ( ) ; }
function ( ) { readjustment_width = this . width ( ) / 2 ; $ ( '#real_img' ) . css ( { "display" : "inline" , "left" : "50%" , "margin-left" : - readjustment_width } ) ; }
function ( ) { this . _attributes = { } ; this . delete ( ) ; this . fireEvent ( 'destroy' ) ; }
function ( hyper , undefined ) { function debug ( message ) { if ( ! HYPER_DEBUG ) { return ; } console . log ( message ) ; } hyper . debug = debug ; return hyper ; } ) ( { }
function ( resp ) { Y . log ( 'rpc failure!' , 'warn' , NAME ) ; adapter . error ( resp . html ) ; }
function ( lat , lng ) { var latLng = new google . maps . LatLng ( lat , lng ) ; this . panorama . setPosition ( latLng ) ; }
function ( ) { return callbackResult ; }
function handleAddressVerifyCheckResponse ( onComplete , status , textStatus , jqXHR ) { if ( status . status === 'complete' && status . userid ) setUserID ( status . userid ) ; complete ( onComplete , status . status ) ; }
function ( config ) { if ( config . provisioning ) { provisioning = config . provisioning ; } if ( config . pollDuration ) { pollDuration = config . pollDuration ; } }
function ( ) { provisioning = BrowserID . Provisioning ; User . resetCaches ( ) ; registrationComplete = false ; pollDuration = POLL_DURATION ; }
function handleEmailStaged ( actionName , msg , info ) { var actionInfo = { email : info . email , password : self . stagedPassword , siteName : self . siteName } ; self . stagedEmail = info . email ; startAction ( actionName , actionInfo ) ; }
function ( authentication ) { if ( authentication === "assertion" ) { redirectToState ( "authenticate_specified_email" , info ) ; } else { redirectToState ( "email_valid_and_ready" , info ) ; oncomplete ( ) ; } }
function ( ) { self . close ( self . verificationMessage , { mustAuth : false } ) ; oncomplete && oncomplete ( ) ; }
function ( ) { self . close ( self . verificationMessage , { mustAuth : false } ) ; oncomplete && oncomplete ( ) ; }
function ( status ) { equal ( status , "complete" ) ; start ( ) ; }
function ( status ) { equal ( status , "mustAuth" , "mustAuth response expected" ) ; testHelpers . testEmailMarkedVerified ( "registered@testuser.com" ) ; ok ( ! storage . getReturnTo ( ) , "staged on behalf of is cleared when validation completes" ) ; start ( ) ; }
function ( status ) { equal ( status , "mustAuth" , "mustAuth response expected" ) ; testHelpers . testEmailMarkedVerified ( "registered@testuser.com" ) ; ok ( ! storage . getReturnTo ( ) , "staged on behalf of is cleared when validation completes" ) ; start ( ) ; }
function ( i , node ) { var cslNode = new CSLEDIT . CslNode ( node ) ; if ( cslNode . hasAttr ( "name" ) ) { dropdownValues . push ( cslNode . getAttr ( "name" ) ) ; } }
function ( event , ui ) { $ ( '#search-box' ) . val = ui . item . value ; search_term = ui . item . value ; changeHashTo ( formatSearch ( search_term , page , classFilter ) ) ; }
function ( ) { if ( $ ( this ) . val ( ) == '' ) { $ ( this ) . val ( watermark ) ; $ ( this ) . css ( 'color' , '#555' ) ; } }
function ( ) { this . _passwordEntry . set_text ( '' ) ; this . _errorMessageLabel . show ( ) ; }
function tbHelp ( evt ) { tabs . open ( self . data . url ( "pages/about.html" ) ) ; }
function ( ) { that . focus ( true ) ; }
function ( ) { return series ; }
function ( presetJid ) { $ ( self ) . triggerHandler ( 'candy:core.login' , { presetJid : presetJid } ) ; }
function ( ) { var chatSoundPlayer = document . getElementById ( 'chat-sound-player' ) ; try { chatSoundPlayer . SetVariable ( 'method:stop' , '' ) ; chatSoundPlayer . SetVariable ( 'method:play' , '' ) ; } catch ( e ) { } }
function ( ) { if ( window . picasatter [ 'timer' ] ) window . picasatter [ 'timer' ] = false ; else window . picasatter [ 'timer' ] = true ; $ ( '#rend' ) . toggle ( ) ; }
function ( ) { var cmp_name = jQuery ( this ) . find ( '.friends_item_name' ) [ 0 ] . textContent ; if ( name < cmp_name ) { jQuery ( this ) . before ( to_insert ) ; inserted = true ; } }
function ( jid_id ) { var div = jQuery ( '#chat_' + jid_id + ' .chat_messages' ) . get ( 0 ) ; div . scrollTop = div . scrollHeight ; }
function ( body ) { Console . show_traffic ( body , 'incoming' ) ; }
function ( body ) { Console . show_traffic ( body , 'outgoing' ) ; }
function ( data ) { $ ( document ) . trigger ( changeEventName ) ; callback ( data ) ; }
function ( data ) { $ ( document ) . trigger ( changeEventName ) ; callback ( data ) ; }
function ( data ) { loggedIn = true ; user = data ; callback ( data ) ; }
function ( ) { inputComment . setData ( "" ) ; App . stack . pop ( ) ; }
function ( user ) { App . stack . pop ( ) ; }
function ( data ) { App . stack . pop ( ) ; }
function ( err , result ) { if ( err ) { socket . emit ( 'error' , { err : err . err } ) ; } else { } }
function ( event ) { $ ( "#location_search_input" ) . val ( $ ( this ) . text ( ) ) . change ( ) ; return false ; }
function transitionListener ( e ) { var sprite = e . target ; sprite . removeEventListener ( 'transitionend' , transitionListener ) ; document . body . removeChild ( sprite ) ; currentlyClosing = false ; if ( callback ) callback ( ) ; }
function ( ) { if ( this . head . next === this . head ) return var n = this . head . next . remove ( ) this . length -= 1 return n . data }
function ( ) { if ( fs . existsSync ( lock_file ) ) fs . unlinkSync ( lock_file ) ; if ( irc . debug ) console . log ( 'Quitting . . .' ) ; callback ( ) ; process . exit ( 0 ) ; }
function ( file ) { var exists = fs . existsSync ( file ) if ( ! exists ) { var sample_file = './' + path . basename ( file ) fs . writeFileSync ( file , fs . readFileSync ( sample_file ) ) review_required = true } }
function pushResourceData ( contentProvider ) { if ( ! resources [ contentProvider . contentURL ( ) ] ) resources [ contentProvider . contentURL ( ) ] = this . _makeResource ( contentProvider ) ; }
function ( event ) { var uiSourceCode = event . data ; this . _postNotification ( WebInspector . extensionAPI . Events . ResourceAdded , this . _makeResource ( uiSourceCode ) ) ; }
function ( ) { this . _callOrSetTimeout ( this . _commitIncrementalEdit . bind ( this , false , function ( ) { } ) ) ; }
function ( ) { if ( this . isDirty ( ) ) return this . _workingCopy ; return this . _content ; }
function ( ) { return typeof this . _workingCopy !== "undefined" && this . _workingCopy !== this . _content ; }
function ( ) { return this . getContentElement ( this . blockHelpKey ) ; }
function ( ) { return null ; }
function ( ) { var e = re . e ( this . name ) , f = this . _re_factory ; if ( f ) f . apply ( e , arguments ) ; return e ; }
function ( f ) { this . _re_method = f . bind ( re [ this . name ] ) ; return this ; }
function OnExitInGameState ( ) { document . onkeydown = null ; document . onkeyup = null ; controller . stopGame ( ) ; Ticker . removeAllListeners ( ) ; hideOrderSummaryUI ( ) ; }
function ( ) { expect ( define . amd ) . toBeDefined ( ) ; }
function ( e ) { this . parents ( 'form' ) . trigger ( 'submit' , [ this ] ) ; e . preventDefault ( ) ; return false ; }
function ( name ) { if ( ! fs . existsSync ( "./" + name ) ) { fs . mkdirSync ( "./" + name , "0777" ) ; return console . log ( "	" + name + " is generated." ) ; } }
function ( ) { this . parent ( ) ; }
function ( ) { this . fireWeapon ( ) ; }
function ( ) { this . fireWeaponRelease ( ) ; }
function ( ) { ig . game . stats . doors ++ ; this . parent ( ) ; }
function hideResizeRect ( ) { if ( selectedElm ) { selectedElm . removeAttribute ( 'data-mce-selected' ) ; } for ( var name in resizeHandles ) { dom . hide ( 'mceResizeHandle' + name ) ; } }
function ( ) { return ! ! this . getHealthFn_ ? this . getHealthFn_ ( ) : - 1 ; }
function ( value ) { players_ = value ; this . SetPlayerIndexes ( ) ; nbPlayers_ = players_ . length ; }
function ( ) { for ( var i = 0 , length = nbPlayers_ ; i < length ; ++ i ) this . GetPlayer ( i ) . Pause ( ) ; }
function ( ) { for ( var i = 0 , length = nbPlayers_ ; i < length ; ++ i ) this . GetPlayer ( i ) . Resume ( ) ; }
function ( ) { Stage . prototype . Center ( ) ; }
function ( ) { this . TeamA = CreateTeam ( 1 ) ; this . TeamB = CreateTeam ( 2 ) ; this . LoadAssets ( ) ; this . GetStage ( ) . Setup ( stage ) ; }
function ( ) { return this . TeamA ; }
function ( ) { if ( this . GetPlayerCount ( ) ) this . SetPlayerCount ( this . TeamA . GetPlayers ( ) . length + this . TeamB . GetPlayers ( ) . length ) ; return this . GetPlayerCount ( ) ; }
function ( ) { this . TeamA . InitText ( ) ; this . TeamB . InitText ( ) ; this . TeamB . GetComboText ( ) . ChangeDirection ( ) ; }
function ( ) { this . GetStage ( ) . Pause ( ) ; this . TeamA . Pause ( ) ; this . TeamB . Pause ( ) ; }
function ( ) { this . GetStage ( ) . Resume ( ) ; this . TeamA . Resume ( ) ; this . TeamB . Resume ( ) ; }
function ( ) { this . GetStage ( ) . Release ( ) ; this . TeamA . Release ( ) ; this . TeamB . Release ( ) ; }
function StartQuickMatch ( ) { u2_ . SetChar ( CHARACTERS . KEN ) ; game_ . StartMatch ( true , [ u2_ ] , [ ] , kensStage_ ) ; }
function ( id ) { var p = this . GetLeftMostPlayer ( ) ; return ! ! p && p . id_ == id ; }
function ( id ) { var p = this . GetRightMostPlayer ( ) ; return ! ! p && p . id_ == id ; }
function ( chunk ) { params += chunk . toString ( ) ; proxyReq . write ( chunk ) ; }
function ( ) { log . silly ( params , "params" ) ; proxyReq . end ( ) ; }
function ( ) { self . prepMsg ( self . sessionId , self . config . pzhId , "pzpDetails" , global . pzpServerPort ) ; self . pzptlsServerState = global . states [ 2 ] ; callback . call ( self , "startedPZP" ) ; }
function ( ) { processComments ( ) ; createDraftComment ( ) ; gCommentDlg . setDraftComment ( draftComment ) . setCommentsList ( comments , "file_attachment_comments" ) . positionToSide ( addCommentButton , { side : 'b' , fitOnScreen : true } ) ; gCommentDlg . open ( ) ; }
function displayTweets ( tweets ) { for ( var i = 0 ; i < tweets . results . length ; i ++ ) { lTweets += tweets . results [ i ] . text + "<br>" ; } ; lTweets += "</p>" ; }
function ( ) { expect ( taskListModel . forEach ) . toHaveBeenCalled ( ) ; }
function vibeApiDidDisconnect ( ) { initialiser . alertInterfaceToDisconnection ( ) connectionAssistantId = settingsAssistant . presentConnectionAssistant ( "Vibe lost connection to the server." , "<p>Connection to the Vibe Server has been lost, please check your connection to the Internet has not been terminated and that your Vibe Server has not been turned off.</p><p>If your connection settings need to be adjusted, please change them below and press Reconnect.</p><p>Note: Once connection is restored this dialogue will automatically close.</p>" , connectionAssistantHandler , "Reconnect" ) }
function InlineWidget ( ) { this . htmlContent = window . document . createElement ( "div" ) ; this . $htmlContent = $ ( this . htmlContent ) . addClass ( "inline-widget" ) ; this . $htmlContent . append ( "<div class='shadow top' />" ) . append ( "<div class='shadow bottom' />" ) ; }
function ( ) { extensionRequire = testWindow . brackets . getModule ( "utils/ExtensionLoader" ) . getRequireContextForExtension ( "JavaScriptQuickEdit" ) ; JavaScriptQuickEdit = extensionRequire ( "main" ) ; waitsForDone ( SpecRunnerUtils . openProjectFiles ( [ "ui/jquery.effects.core.js" ] ) , "openProjectFiles" ) ; }
function ( require , exports , module ) { "use strict" ; console . log ( "loading foo!" ) ; require ( "secondary" ) . bar ( ) ; exports . bar = function bar ( ) { console . log ( "in bar in foo!" ) ; } ; }
function _fileFromURL ( url ) { var comp = url . split ( "/" ) ; return comp [ comp . length - 1 ] ; }
function ( match , num ) { return typeof args [ num ] !== "undefined" ? args [ num ] : match ; }
function htmlEscape ( str ) { return String ( str ) . replace ( /&/g , "&amp;" ) . replace ( /"/g , "&quot;" ) . replace ( /'/g , "&#39;" ) . replace ( /</g , "&lt;" ) . replace ( />/g , "&gt;" ) ; }
function ( e ) { $ ( '#nb_messages' ) . text ( e || "0" ) . toggleClass ( "unread" , e > 0 ) ; }
function setTheme ( theme ) { preview . attr ( 'data-design' , theme ) ; udpateBackground ( ) ; }
function setLayout ( layout ) { itemMap . slide . attr ( 'data-layout' , layout ) ; udpateBackground ( ) ; }
function ( ) { return this . statusCode == 500 || this . type === "ProvisionedThroughputExceededException" || this . type === "Throttling" ; }
function ( ) { var err = new AmazonError ( { statusCode : 400 , type : "com.amazonaws.dynamodb.v20111205#Throttling" } ) ; err . retry . should . be . true ; }
function flush ( ) { bufs . forEach ( function ( buf ) { oldWrite ( buf ) } ) bufs = [ ] if ( waitingForEnd ) { waitingForEnd ( ) waitingForEnd = false } }
function ( w , cb ) { fs . fsync ( fd , function ( err ) { if ( err ) throw err ; writtenSinceLastSync = w cb ( ) } ) }
function ( ) { cb ( ) }
function ( ) { if ( buffering ) { forceWrite ( ) } ending = true if ( draining ) { lws . once ( 'drain' , function ( ) { oldEnd ( ) } ) ; } else { oldEnd ( ) } }
function ( ) { if ( draining ) { draining = false ; var ds = drainingSync drainingSync = [ ] ds . forEach ( lws . sync ) } }
function ( buf ) { currentSegmentSize += buf . length ; var to = totalOffset ; totalOffset += buf . length ; ws . write ( buf ) return to ; }
function ( ) { console . log ( 'closed segmented file' ) if ( cb ) cb ( ) ; }
function ( errorResponse ) { errorResponse = self . _wrapErrorResponse ( errorResponse ) ; self . onError ( errorResponse ) ; self . config . get ( "onError" ) ( errorResponse ) ; }
function ( ) { if ( this . jxhrInstance ) { this . jxhrInstance . abort ( ) ; } this . config . get ( "onClose" ) ( ) ; }
function ( ) { this . config . get ( "onClose" ) ( ) ; }
function ( ) { return false ; }
function ( water ) { if ( ! water ) { water = w . profile ; } return ( water . HCO * 0.819672131 ) - ( 0.714 * water . Ca ) - ( 0.585 * water . Mg ) ; }
function ( reporterInstance ) { reporterInstance . joe = joe ; joePrivate . reporters . push ( reporterInstance ) ; return joe ; }
function ( reporterInstance ) { joePrivate . reporters = [ ] ; if ( reporterInstance != null ) { joe . addReporter ( reporterInstance ) ; } return joe ; }
function ( ) { joePrivate . getGlobalSuite ( ) . exit ( ) ; if ( ! joe . hasExited ( ) ) { return joe . exit ( ) ; } }
function ( delay , fn ) { return setTimeout ( fn , delay ) ; }
function ( ) { var args ; args = 1 <= arguments . length ? __slice . call ( arguments , 0 ) : [ ] ; ++ this . total ; this . queue . push ( args ) ; return this ; }
function ( fn ) { if ( block . total === Infinity ) { return block . pushAndRun ( fn ) ; } else { return block . push ( fn ) ; } }
function ( complete ) { var subBlock ; return subBlock = block . createSubBlock ( { name : name , fn : fn , complete : complete } ) ; }
function ( fn ) { if ( block . total === Infinity ) { return block . pushAndRun ( fn ) ; } else { return block . push ( fn ) ; } }
function _Class ( ) { var _ref ; if ( ( _ref = this . runnerBlock ) == null ) { this . runnerBlock = new balUtilFlow . Block ( ) ; } }
function ( path , loop ) { var soundCache = this . _getEffectList ( path ) ; if ( soundCache ) { soundCache . loop = loop || false ; soundCache . play ( ) ; } return path ; }
function ( data ) { if ( data && data . meta ) { this . meta = data . meta ; } return data && data . objects ; }
function mapCoreApp ( name ) { return protocol + '//' + name + '.' + domain ; }
function imgError ( ) { img . src = '//' + window . location . host + '/resources/images/Unknown.png' ; }
function test_overall ( ) { do_check_neq ( webrtc . createAuthModule , null ) ; run_next_test ( ) ; }
function ( ) { $ ( this ) . toggleClass ( "open" ) ; $ ( this ) . closest ( 'li' ) . toggleClass ( "open" ) ; }
function ( ) { if ( done ) return ; res . send ( 200 ) ; if ( pending === 0 ) { socket . emit ( "done" ) ; } }
function ( data , link ) { loadAllWithFooter ( data , link , cb ) ; }
function ( ) { loadAllWithFooter ( reader . result , cb ) ; }
function ( ) { localyticsSession . init ( localyticsAppId ) ; localyticsSession . open ( ) ; localyticsSession . upload ( ) ; this . uploadTimer = setInterval ( localyticsSession . upload , 30000 ) ; }
function ( ) { localyticsSession . init ( localyticsAppId ) ; localyticsSession . open ( ) ; localyticsSession . upload ( ) ; this . uploadTimer = setInterval ( localyticsSession . upload , 3E4 ) }
function ( ) { localyticsSession . init ( localyticsAppId ) ; localyticsSession . open ( ) ; localyticsSession . upload ( ) ; this . uploadTimer = setInterval ( localyticsSession . upload , 30000 ) ; }
function ( listName , recordCount , loadTime ) { this . tagEvent ( 'Render List' , { list : listName , resultsetSize : bucketRecordCount ( recordCount ) , loadTimeRange : bucketLoadTime ( loadTime ) , loadTime : loadTime } ) ; }
function ( detailView , loadTime ) { this . tagEvent ( 'Render Detail' , { view : detailView , loadTimeRange : bucketLoadTime ( loadTime ) , loadTime : loadTime } ) ; }
function ( ) { localyticsSession . init ( localyticsAppId ) ; localyticsSession . open ( ) ; localyticsSession . upload ( ) ; this . uploadTimer = setInterval ( localyticsSession . upload , 3E4 ) }
function ( e2 ) { if ( e2 ) { throw e2 ; } }
function ( rootNode ) { goog . base ( this , 'renderDom' , rootNode ) ; rootNode . appendChild ( this . canvas_ ) ; this . chatView_ . renderDom ( rootNode ) ; this . debugView_ . renderDom ( rootNode ) ; }
function enableRampup ( ) { $ ( '#initProcesses' ) . removeAttr ( "readonly" ) ; $ ( '#initSleepTime' ) . removeAttr ( "readonly" ) ; $ ( '#processIncrement' ) . removeAttr ( "readonly" ) ; $ ( '#processIncrementInterval' ) . removeAttr ( "readonly" ) ; }
function ( ) { return Binary ( $2 , $1 , $3 , true ) ; }
function ( ) { restoreLayers ( $ ( this ) . attr ( 'data-type' ) , $ ( this ) . attr ( 'data-suffix' ) ) ; }
function ( ) { showOnlyLayer ( this ) ; return false ; }
function ( child ) { generateTutorial ( 'Tutorial: ' + child . title , child , helper . tutorialToUrl ( child . name ) ) ; saveChildren ( child ) ; }
function ( data ) { focusFlyer = "" ; $ ( '#address' ) . html ( data ) ; $ ( 'input#new_location' ) . val ( '' ) ; $ ( '#board_link' ) . show ( ) ; $ ( '#map_link' ) . hide ( ) ; }
function hide_show_event ( ) { section_handler = $ ( this ) . parent ( ) . parent ( ) . children ( "section" ) ; hide_show ( section_handler , $ ( this ) ) ; }
function ( error , stdout , stderr ) { if ( error || stderr ) { deferred . reject ( new Error ( stderr ) ) ; return ; } deferred . resolve ( ) ; }
function ( chunk ) { length += chunk . length ret . push ( chunk ) }
function ( chunk ) { chunk . copy ( buf , index , 0 , chunk . length ) index += chunk . length }
function ( ) { this . filemanager . addClass ( 'fm-updating' ) ; }
function ( ) { if ( $ ( "#before-date" ) . val ( ) && $ ( "#after-date" ) . val ( ) ) { return true ; } else { return false ; } }
function ( data ) { var endDate = new Date ( ) ; if ( ! filterIsOn ( ) ) { return moment ( endDate ) ; } else { return moment ( $ ( "#after-date" ) . val ( ) ) ; } }
function ( ) { var product = this . product ; product = packaging . makeInterface . call ( product ) ; return product ; }
function ( ) { counter . cancelDone ( ) ; counter . trigger ( resultName , arguments ) ; }
function ( ) { console . log ( 'successful post' ) ; }
function ( ) { console . log ( 'failed post' ) ; }
function ( value ) { if ( value !== 'undefined' ) { debugging = value ; } spaLog ( 'jQuery SPA (Single Page App) v' + SPA_VERSION ) ; spaLog ( 'https://github.com/dejanstrbac/spa' ) ; spaLog ( '~~~~ ~~~ ~~~ ~~~ ~~~ ~~~~ ~~~~ ~~~' ) ; spaLog ( 'Debug mode enabled' ) ; }
function success ( stream , result ) { if ( stream ) parseError ( stream , 'expected EOF' ) ; return result ; }
function ( err ) { if ( err ) { console . log ( "FAIL:" , err ) ; return ; } return f . apply ( null , Array . prototype . slice . call ( arguments , 1 ) ) ; }
function ( str ) { if ( "false" === str ) { return false ; } else if ( "true" === str ) { return true ; } else { return str ; } }
get doKindleImport ( ) { if ( typeof ( localStorage [ 'doKindleImport' ] ) == "undefined" ) { return false ; } else { return toBool ( localStorage [ 'doKindleImport' ] ) ; } } ,
function ( ) { var button = sandbox . find ( "#r-i-submit" ) [ 0 ] ; button . textContent = "Error (try again?)" ; button . classList . remove ( "disabled" ) ; }
function ( dirpath , callback ) { return callback ( null , { "isDirectory" : function ( ) { return true } } ) ; }
function ( canceled ) { if ( ! canceled ) els . removeClass ( "hasMenu" ) ; }
function ( ) { that . finishTransition ( oldDiv , currDiv ) ; }
function ( ) { that . finishTransition ( oldDiv , currDiv ) ; }
function ( ) { that . finishTransition ( oldDiv ) ; }
function ( ) { that . clearAnimations ( currDiv ) ; }
function ( ) { that . css3animate ( oldDiv , { x : "-100%" , y : 0 , time : "1ms" , scale : 1 , rotateY : "0deg" , complete : function ( ) { that . finishTransition ( oldDiv ) ; } } ) ; }
function ( ) { that . css3animate ( currDiv , { x : "0%" , time : "150ms" , scale : 1 , rotateY : "0deg" , complete : function ( ) { that . clearAnimations ( currDiv ) ; } } ) ; }
function ( oldDiv , currDiv ) { oldDiv . style . display = 'none' ; this . doingTransition = false ; if ( currDiv ) this . clearAnimations ( currDiv ) ; }
function ( ) { police . config . set ( 'id' , null ) ; police . config . set ( 'token' , null ) ; police . winston . info ( 'User has been logged out' ) ; police . config . save ( police ) ; }
function ( ) { loadData ( 'is-signed-in' , { } , 'signin' ) ; }
function ( x ) { if ( re . is ( x ) ) { this . $el . css ( 'left' , x ) ; return this ; } return this . $el . position ( ) . left ; }
function ( y ) { if ( re . is ( y ) ) { this . $el . css ( 'top' , y ) ; return this ; } return this . $el . position ( ) . top ; }
function ( et_time ) { $ ( '.tomato_time' ) . html ( et_time . time ) ; }
function ( e , dd ) { setPosition ( methods . confinePositionToLimit ( dd . handle . left + dd . deltaX - $sliderControl . offset ( ) . left , dd . limit ) ) ; }
function ( ) { this . disconnect ( c ) ; dojo . style ( this . arrowWrapper , "visibility" , "" ) ; }
function isBlogGist ( gist ) { var firstGistFile = getFirstGistFile ( gist ) ; var fileName = firstGistFile . filename ; return /blog_.+\.md/ . test ( fileName ) ; }
function ( value ) { return invokeInfo . uri . match ( value ) ; }
function ( type ) { return invokeInfo . type . match ( type [ "#text" ] [ 0 ] . replace ( "*" , "" ) ) ; }
function ( code ) { var out = "require.define('" + this . moduleName ( ) + "', function(require, module, exports) {\n(function() {\nrequire=hackRequire(require);\n" + code + "\n}).call(module.exports)});\n" ; return out ; }
function ( data ) { $ . unblockUI ( ) ; var ifr = document . createElement ( "IFRAME" ) ; document . body . appendChild ( ifr ) ; ifr . height = 1 ; ifr . src = data . download_link ; }
function ( data ) { $ . unblockUI ( ) ; var ifr = document . createElement ( "IFRAME" ) ; document . body . appendChild ( ifr ) ; ifr . src = data . download_link ; }
function date ( gist ) { return gist . created_at ; }
function getFirstGistFile ( gist ) { return gist . files [ _ ( gist . files ) . keys ( ) [ 0 ] ] ; }
function ( asyncError ) { if ( asyncError ) { return callback ( asyncError ) ; } return callback ( null , posts ) ; }
function ( ) { if ( this . _isRoot ) throw new Error ( 'root has no parent' ) ; return Node . create ( this . document , this . elem . parentNode ) ; }
function ( ) { if ( this . _isSingleton ) throw new Error ( 'can not get content from singleton element' ) ; return this . elem . innerHTML ; }
function ( data ) { console . log ( data ) render ( data . current_turn . board , data . template . width , data . template . height ) ; }
function ( timestamp ) { this . lastUpdateTimestamp = timestamp ; }
function ( rsp ) { notifyCallbacks ( comment . id , comment . issue_status ) ; if ( rsp . last_activity_time ) { gReviewRequest . markUpdated ( rsp . last_activity_time ) ; } }
function handler ( jqXHR , textStatus , errorThrown , data ) { $ . log ( 'Ignore the XMLHttpRequest error.  CAA returned XML stating that CAA has no images for this release.' ) ; $row . trigger ( 'loaded' ) ; }
function caa_response_mediator ( response , textStatus , jqXHR ) { return INNERCONTEXT . UTILITY . processCAAResponse ( response , textStatus , jqXHR , { $row : $row } ) ; }
function ( table ) { if ( dojo . isIE ) { try { while ( table . hasChildNodes ( ) ) { table . deleteRow ( 0 ) ; } } catch ( e ) { } } else { table . innerHTML = '' ; } }
function onPrefChangeDummy ( evt ) { ok ( false , "onPrefChangeDummy shouldn't be invoked!" ) ; }
function ( ) { debug . error ( 'An error has occured whilst trying to save the link' ) ; sakai . api . Util . progressIndicator . hideProgressIndicator ( ) ; }
function ( ) { $ ( this ) . children ( 'span' ) . toggle ( ) ; $ ( '#inserterbar_more_widgets_container' , $rootel ) . toggle ( ) ; resetPosition ( ) ; }
function ( ) { $ ( window ) . trigger ( 'startdrag.contentauthoring.sakai' ) ; sakai . api . Util . Draggable . setIFrameFix ( ) ; }
function ( ) { $ ( window ) . trigger ( 'stopdrag.contentauthoring.sakai' ) ; sakai . api . Util . Draggable . removeIFrameFix ( ) ; }
function ( ) { $ ( '#inserterbar_more_widgets_container .s3d-outer-shadow-container' , $rootel ) . jcarousel ( { animation : 'slow' , easing : 'swing' , scroll : 4 , itemFirstInCallback : carouselBinding , itemFallbackDimension : 4 } ) ; $inserterbarMoreWidgetsContainer . hide ( ) ; }
function ( ) { addNewPage ( ) ; }
function ( ev , cps ) { if ( $ ( '.versions_widget' , $rootel ) . is ( ":visible" ) ) { currentPageShown = cps ; doInit ( ) ; } }
function ( d ) { g . nodes_array . push ( jQuery . extend ( true , { } , d ) ) }
function ( d ) { d . currentX = d . x ; d . currentY = d . y ; return d . baseID ; }
function ( d ) { d . currentX = d . x ; d . currentY = d . y ; return d . x }
function ( d ) { var p = d3 . mouse ( this ) ; __g . prevMovePoint = [ p [ 0 ] , p [ 1 ] ] ; __g . moveLasso = true ; }
function ( d ) { if ( d . selected ) { selList . push ( d . baseID ) ; return 'red' ; } return 'steelblue' ; }
function ( err , cleaned ) { assert . deepEqual ( err . message , 'String is not in range' , 'len test (negative case)' ) ; }
function ( err , cleaned ) { assert . deepEqual ( err . message , 'String is not in range' , 'len test (negative case 2)' ) ; }
function ( err , cleaned ) { assert . deepEqual ( err . message , 'String is not in range' , 'notContains test (negative case)' ) ; }
function ( ) { that . setDisplay ( 'none' ) ; that . triggerEvent ( Panel . ANIM_END ) ; }
function ( e ) { if ( ! timedOut ) { deferred . reject ( e ) ; clearTimeout ( timeout ) ; } }
function ( error ) { this . autosave = true ; this . dialogWidget . hide ( ) ; this . _showErrorMessage ( error || ENME . getMessage ( "tp_publish_error" , "An error occurred when trying to publish your survey" ) ) ; }
function ( ) { before ( ) ; assert . equal ( 1 , socket . sent . length ) ; assert . includes ( socket . sent , 'available' ) ; }
function ( ) { before ( ) ; handlers . error ( { msg : 'error' } ) ; assert . equal ( 1 , UI . messages . length ) ; assert . includes ( UI . messages , 'error' ) ; }
function ( ) { $ ( "li:gt(4)" , this ) . hide ( ) ; if ( $ ( 'li' , this ) . length > 5 ) $ ( "li:nth-child(5)" , this ) . after ( "<a href='#' class=\"more\">More...</a>" ) ; }
function ( e ) { self . done ( 'error' , new Error ( "Connection timeout." ) ) ; }
function writeOriginalSentences ( ) { for ( var s = 0 ; s < sentences . length ; s ++ ) { $ ( "#sent" + s ) . html ( sentences [ s ] ) ; } }
function ( offset , line , column , s , n , c , p ) { var key = ( s === ">" ) ? "partial" : s ; return [ key , n , c , p ] }
function ( offset , line , column , s , n , c , p ) { var key = ( s === ">" ) ? "partial" : s ; return [ key , n , c , p ] }
function DTA_preNest ( ) { let windowUtils = this . browser . QueryInterface ( Ci . nsIInterfaceRequestor ) . getInterface ( Ci . nsIDOMWindowUtils ) ; windowUtils . suppressEventHandling ( true ) ; windowUtils . suspendTimeouts ( ) ; }
function DTA_postNest ( aNestData ) { let windowUtils = this . browser . QueryInterface ( Ci . nsIInterfaceRequestor ) . getInterface ( Ci . nsIDOMWindowUtils ) ; windowUtils . resumeTimeouts ( ) ; windowUtils . suppressEventHandling ( false ) ; }
function add_nameserver ( ) { var ul = document . getElementById ( "nameservers" ) ; var new_li = document . createElement ( 'li' ) ; new_li . innerHTML = lbl_host + ": <input type=\"text\" class=\"host\" onChange=\"return resolve(get_nameservers());\"/> " + lbl_ip + ": <input type=\"text\" class=\"IP\" /></li>" ; ul . appendChild ( new_li ) ; }
function ( bytes , context ) { if ( ! bytes . length ) throw ArgumentError ( ) ; this . _load ( bytes ) ; }
function ( ) { if ( ! this . _swfVersion ) throw Error ( ) ; return this . _swfVersion ; }
function ( val ) { if ( ! ( val instanceof ColorTransform ) ) throw TypeError ( ) ; this . _colorTransform = val ; }
function ( ) { var $s = $ ( "section h2:contains('FOO')" , doc ) ; expect ( $s . attr ( "id" ) ) . toEqual ( "foo" ) ; flushIframes ( ) ; }
function ( val ) { if ( ! ( val in STATES ) ) { throw new Error ( 'Invalid connection state: ' + val ) ; } this . _readyState = val ; this . emit ( STATES [ val ] ) ; }
function ( err ) { if ( err ) { self . error ( err , callback ) ; } else { self . onClose ( ) ; callback && callback ( ) ; } }
function ( done ) { var db = start ( { uri : 'mongodb://localasdfads/fakeeee' , noErrorListener : 1 } ) db . on ( 'error' , function ( ) { done ( ) ; } ) ; }
function ( ) { console . log ( this . model ) ; $ ( this . el ) . html ( Mustache . render ( this . template , { name : this . model . get ( "name" ) } ) ) ; return this ; }
function ( ) { return ( source === "demo" || source === "graphite" ) ; }
function ( ) { _ . bindAll ( this , "render" , "sourceChanged" , "showConnectionError" ) ; collections . metrics . source = this . model . get ( 'source' ) || $ . Sources . getDefaultTarget ( ) ; }
function ( e ) { lbl . text = e . name ; }
function ( ) { this . updatedRelatedFields ( ) ; }
function ( e ) { me . onInput ( e ) ; }
function ( key ) { return ! get ( this , dependentKey ) ; }
function ( key ) { var val = get ( this , dependentKey ) ; return val === undefined || val === null || val === '' || ( Ember . isArray ( val ) && get ( val , 'length' ) === 0 ) ; }
function ( key ) { return ! ! get ( this , dependentKey ) ; }
function ( ) { Ember . trySet ( obj , toPath , fromValue ) ; }
function ( ) { Ember . trySet ( Ember . isGlobalPath ( fromPath ) ? window : obj , fromPath , toValue ) ; }
function ( ) { this . willReopen ( ) ; reopen . apply ( this . PrototypeMixin , arguments ) ; return this ; }
function ( ) { reopen . apply ( this . ClassMixin , arguments ) ; Ember . Mixin . _apply ( this , arguments , false ) ; return this ; }
function ( ) { var parentPath = get ( this , 'parentState.path' ) , path = get ( this , 'name' ) ; if ( parentPath ) { path = parentPath + '.' + path ; } return path ; }
function ( ) { var modelType = get ( this , 'modelType' ) ; if ( typeof modelType === 'string' ) { return Ember . get ( window , modelType ) ; } else { return modelType ; } }
function ( ) { return get ( this , 'viewName' ) === get ( this , 'tabsContainer.currentView' ) ; }
function ( ) { return get ( this , labelPath ) ; }
function ( ) { return get ( this , valuePath ) ; }
function ( ) { return this . get ( 'admins' ) != null ; }
function ( element , valueAccessor ) { var value = ko . utils . unwrapObservable ( valueAccessor ( ) ) ; element . style . display = value ? "block" : "none" ; }
function ( element , valueAccessor ) { var value = ko . utils . unwrapObservable ( valueAccessor ( ) ) ; element . style . display = value ? "inline" : "none" ; }
function ( ) { return ko . utils . arrayFilter ( self . todos ( ) , function ( todo ) { return todo . done ( ) ; } ) . length ; }
function ( pass ) { getPassword ( 'Confirm password: ' , function ( pass2 ) { if ( pass === pass2 ) { fn ( pass ) ; } else { throw new Error ( 'Passwords do not match.' ) ; } } ) ; }
function ( x , y ) { var t = y / 23 ; t = t - ( t % 1 ) - 1 ; return t ; }
function ( n ) { return n . token ; }
function ( value ) { if ( value === null ) { return '' ; } return value . toString ( ) . replace ( this . injection_rx , '' ) ; }
function ( value ) { if ( value === null ) { return '' ; } return value . toString ( ) . replace ( this . injection_rx , "\\$1" ) ; }
function ( value ) { if ( value === null ) { return '' ; } return value . toString ( ) . toLowerCase ( ) . replace ( /\W+/g , '_' ) . replace ( /[^\W]$/ , '' ) ; }
function ( ) { return this . _historyHash . get ( ) ? true : false ; }
function ( ) { return this . _historyHash . get ( ) ? true : false ; }
function changed ( ) { for ( var i = 0 , len = listeners . change . length ; i < len ; i ++ ) { listeners . change [ i ] ( col ) ; } }
function OnExitInGameState ( ) { document . onkeydown = null ; document . onkeyup = null ; controller . stopGame ( ) ; hideOrderSummaryUI ( ) ; Ticker . removeListener ( window ) }
function ( ) { return checkbox . get ( 0 ) . checked }
function ( field_model , parent_element ) { var checkbox = dm4c . render . checkbox ( field_model ) parent_element . append ( checkbox ) return function ( ) { return checkbox . get ( 0 ) . checked } }
function ( topic ) { var page_model = create_page_model ( topic , "page" ) dm4c . trigger_plugin_hook ( "pre_render_page" , topic , page_model ) render_page_model ( page_model , "page" ) dm4c . render . associations ( topic . id ) }
function ( topic ) { var page_model = create_page_model ( topic , "form" ) dm4c . trigger_plugin_hook ( "pre_render_form" , topic , page_model ) render_page_model ( page_model , "form" ) return function ( ) { dm4c . do_update_topic ( topic_renderer . build_topic_model ( page_model ) ) } }
function create_page_model ( topic , render_mode ) { return topic_renderer . create_page_model ( topic , undefined , "" , topic , render_mode ) }
function ( parent_element , level ) { renderer . render_fields ( this . values , parent_element , level ) }
function ( parent_element , level ) { form_reading_function = renderer . render_form_elements ( this . values , parent_element , level ) }
function ( ) { layer . setVisibility ( false ) this_trak . data ( "ready" , true ) var text = this_trak . text ( ) this_trak . text ( text . substring ( 0 , text . length - 4 ) ) }
function f ( n ) { if ( n < 10 ) return n * n ; return f ( ~ ~ ( n / 10 ) ) + ( n % 10 ) * ( n % 10 ) ; }
function asdf ( x ) { if ( x < 10 ) return ( 10 + x ) ; return asdf ( x % 10 ) * asdf ( ~ ~ ( x / 10 ) ) ; }
function ( ) { var segment = Settings . BIPLUGIN ? "/pentahorepository2/resource" : "/repository2/resource" ; return encodeURI ( Saiku . session . username + segment ) ; }
function ( ) { var u = Settings . BIPLUGIN ? encodeURI ( Saiku . session . username + "/pentahorepository2/resource" ) : encodeURI ( Saiku . session . username + "/repository2/resource" ) ; return u ; }
function ( ) { var segment = Settings . BIPLUGIN ? "/pentahorepository2/?type=saiku" : "/repository2/?type=saiku" ; return encodeURI ( Saiku . session . username + segment ) ; }
function ( targetExpression ) { JSIL . Host . error ( new Error ( "A reference to expression '" + targetExpression + "' could not be translated." ) ) ; }
function ( source , context ) { this . context = context && new nroonga . Context ( context ) ; this . name = this . getName ( source ) ; this . cachedIndexFields = { } ; this . tableName ; this . termsTableName ; }
function ( field ) { return this . cachedIndexFields [ field ] || ( this . cachedIndexFields [ field ] = new IndexField ( field , this ) ) ; }
function ( ) { return this . _context || ( this . _context = new nativeNroonga . Database ( databasePath ) ) ; }
function ( e ) { this . onOk ( e ) ; }
function ( ) { setSyncStatus ( 3 , "Offline (Error sending, retrying)" ) ; setTimeout ( uploadName , 15 * 1000 , cName , cEmail , cSubject , postID , threadID , isLateOpSend ) ; }
function ( ) { $ . mobile . changePage ( "#settings" , { transition : "slideup" } ) ; }
function ( ) { var notebook_id = IPython . notebook . get_notebook_id ( ) ; var url = $ ( 'body' ) . data ( 'baseProjectUrl' ) + notebook_id + '/copy' ; window . open ( url , '_blank' ) ; return false ; }
function Cache ( options ) { var options = options || { } , store = store || new MemoryStore ( options ) ; return store ; }
function createOptions ( req , res , options ) { options = merge ( options , req . helpers ) ; if ( calipso . data ) { options = merge ( options , calipso . data ) ; } return options ; }
function ( req , res ) { req . helpers = { } ; for ( var helper in this . dynamicHelpers ) { req . helpers [ helper ] = this . dynamicHelpers [ helper ] ( req , res , this ) ; } }
function ( module ) { module . fn . route ( req , res , module , app , group ( ) ) ; }
get keypadView ( ) { delete this . keypadView ; return this . keypadView = document . getElementById ( 'keyboard-container' ) ; } ,
function ( e ) { _this . updatePropertiesFromManifest ( e . target ) ; setErrorState ( false ) ; }
function ( ) { var columns = processor . getColumns ( ) ; var expected = [ 'name' , 'address' , 'email_address' , 'description' , 'age' , 'product' ] ; assert . deepEqual ( columns . sort ( ) , expected . sort ( ) ) ; }
function ( part ) { part . parent = this ; this . childs . push ( part ) ; }
function ( manifest , fn ) { manifest . bugs = 5 ; fn ( manifest , manifest . version , [ "Invalid data type for bugs; must be a string." ] ) ; }
function showRegistrationInfo ( info ) { dom . setInner ( "#email" , info . email ) ; if ( info . returnTo ) { dom . setInner ( ".website" , info . returnTo ) ; updateRedirectTimeout ( ) ; dom . show ( ".siteinfo" ) ; } }
function clear ( ) { storage . removeItem ( "emails" ) ; storage . removeItem ( "siteInfo" ) ; storage . removeItem ( "managePage" ) ; }
function setReturnTo ( returnToURL ) { storage . returnTo = JSON . stringify ( { at : new Date ( ) . toString ( ) , url : returnToURL } ) ; }
function testCannotConfirm ( ) { testHelpers . testErrorVisible ( ) ; }
function ( selector , msg ) { ok ( $ ( selector ) . is ( ":visible" ) , msg || selector + " should be visible" ) ; }
function ( selector , msg ) { ok ( $ ( selector ) . length , msg || ( "element '" + selector + "' exists" ) ) ; }
function ( selector , msg ) { equal ( $ ( selector ) . length , 0 , msg || ( "element '" + selector + "' does not exist" ) ) ; }
function ( err ) { console . log ( err ) ; done ( err ) ; }
function ( err , value ) { if ( ERR ( err , callback ) ) return ; callback ( null , { lastEdited : value } ) ; }
function isIndex ( urlPath ) { return options . indexes && path . basename ( urlPath ) === options . index ; }
function ( request , is_last_request , do_raw ) { if ( ! is_last_request && ! request . was_responded_to ) return [ ] ; return [ templates . _request_headers ( request , do_raw ) , templates . _request_body ( request , do_raw ) ] }
function ( event ) { this . is_unloaded = true ; if ( this . current_response ) this . current_response . _update_event_urlunload ( event ) ; }
function ( event ) { this . last_method = event . method ; this . current_request = new cls . NetworkLoggerRequest ( this ) ; this . requests_responses . push ( this . current_request ) ; this . current_request . _update_event_request ( event ) ; }
function ( event ) { if ( ! this . current_request ) { this . current_request = new cls . NetworkLoggerRequest ( this ) ; this . requests_responses . push ( this . current_request ) ; } this . current_request . _update_event_requestheader ( event ) ; }
function ( event ) { if ( ! this . current_request ) { this . current_request = new cls . NetworkLoggerRequest ( this ) ; this . requests_responses . push ( this . current_request ) ; } this . current_request . _update_event_requestfinished ( event ) ; }
function ( event ) { if ( ! this . current_response ) { this . current_response = new cls . NetworkLoggerResponse ( this ) ; this . requests_responses . push ( this . current_response ) ; } this . current_response . _update_event_responsebody ( event ) ; }
function ( ) { return ( this . events . length && this . endtime - this . starttime ) || 0 ; }
function ( ) { return Boolean ( this . current_request ) ; }
function ( event ) { if ( ! event . mimeType ) { this . no_used_mimetype = true ; } this . responsebody = event ; }
function ( beaconUrl ) { var beacon = new Image ( ) ; beacon . src = beaconUrl ; }
function ( ) { var answer = confirm ( 'Are you sure?' ) ; return answer ; }
function checkedHandler ( ) { if ( self . _isAlive ( ) ) { return handler . apply ( self , arguments ) ; } }
function ( req , res , next ) { console . log ( "USER: " , req . user ) ; res . redirect ( '/profile' ) ; }
function ( req , res , next ) { console . log ( "PROFILE: " , req . user ) ; res . render ( 'profile' , { user : JSON . stringify ( req . user ) } ) ; }
function isUnique ( item , i , arr ) { return indexOf ( arr , item , i + 1 ) === - 1 ; }
function ( ) { 'use strict' ; function isFunctionCompatible ( func1 , func2 ) { return func1 . mandatory === func2 . mandatory && func1 . optional >= func2 . optional ; } return isFunctionCompatible ; }
function ( isNumber , isString , isBoolean ) { 'use strict' ; function isImmutable ( value ) { return value == null || isBoolean ( value ) || isNumber ( value ) || isString ( value ) ; } return isImmutable ; }
function ( p ) { if ( p && ! ( p instanceof ViewSource ) && p . isInstanceOf ( _Plugin ) ) { p . set ( "disabled" , true ) } }
function ( p ) { if ( p && p . isInstanceOf ( _Plugin ) ) { p . set ( "disabled" , false ) ; } }
function ( ) { return this . attrs . width === 'auto' ? this . getTextWidth ( ) + this . attrs . padding * 2 : this . attrs . width ; }
function ( ) { return this . attrs . width === 'auto' ? this . getTextWidth ( ) + this . attrs . padding * 2 : this . attrs . width ; }
function startResponse ( err , badges ) { if ( err ) return next ( err ) ; var data = computeStats ( badges ) ; response . render ( 'stats' , { stats : data } ) ; }
function onDocumentMouseUp ( event ) { event . preventDefault ( ) ; isMouseDown = false ; onMouseDownPosition . x = event . clientX - onMouseDownPosition . x ; onMouseDownPosition . y = event . clientY - onMouseDownPosition . y ; render ( ) ; }
function ( ) { oDynamicTable . iCurrentPage = oDynamicTable . iCurrentPage + 1 ; oDynamicTable . render ( ) ; }
function hasUrl ( ) { if ( getUrl ( ) == null || getUrl ( ) == '' ) { return false ; } return true ; }
function ( scriptUrl ) { if ( window . console ) console . log ( "Loading " + scriptUrl + "..." ) ; document . write ( "<scr" + "ipt type='text/javascript' src='" + scriptUrl + "'></sc" + "ript>" ) ; }
function ( ) { toShow . unwrap ( ) ; }
function ( ) { wrapper . animate ( { height : toShow . height ( ) + 'px' } , 500 , function ( ) { toShow . fadeIn ( function ( ) { toShow . unwrap ( ) ; } ) ; } ) ; }
function ( json ) { _this . receiveMessages ( json ) ; _this . errorSleepTime = 500 ; console . log ( '-> poll after receiveMessages' ) ; _this . poll ( ) ; }
function ( ) { wrapper . animate ( { height : '0px' } , time + 100 , function ( ) { loginTitle . unwrap ( ) ; } ) ; }
function ( done ) { components . get ( req , db , 12345 , function ( err , component ) { should . not . exist ( component ) ; done ( ) ; } ) ; }
function ( done ) { elements . get ( req , db , 12345 , function ( err , element ) { should . not . exist ( element ) ; done ( ) ; } ) ; }
function ( parentName ) { var singularName = parentName . substring ( 0 , parentName . length - 1 ) ; return parentName + ':' + req . params [ singularName + '_id' ] ; }
function ( req , res ) { res . render ( 'index' ) ; }
function ( error , email ) { should . not . exist ( error ) ; email . should . equal ( response . email ) ; done ( ) ; }
function ( ) { this . __jumpLock = true ; this . __lstate = obj_clone ( this . state ) ; this . __pstate = this . _state ? obj_clone ( this . _state ) : null ; }
function ( ) { var result = this . state ; this . state = this . __lstate ; this . _state = this . __pstate ; this . __lstate = null ; this . __jumpLock = false ; return result ; }
function ( id , user ) { players [ user . nick ] = new player ( new point ( user . x , user . y ) , user . direction ) ; }
function ( ) { var pr = Ext . getCmp ( 'modx-panel-resource' ) ; if ( pr ) { pr . markDirty ( ) ; } return false ; }
function ( ) { displayEventsList ( ) ; }
function ( e ) { search ( ) ; }
function ( string , query , page ) { return query + ( parseInt ( currentPage , 10 ) + 1 ) ; }
function createEditorContainer ( element ) { var container = $ ( "<div/>" ) ; container . attr ( "id" , "editor-" + element . attr ( "id" ) ) ; container . addClass ( "ace-editor" ) ; element . after ( container ) ; return container ; }
function push ( box , prepend ) { if ( prepend ) { container . prepend ( box ) . masonry ( 'reload' ) ; } else { container . append ( box ) . masonry ( 'reload' ) ; } }
function ( ) { for ( var i = 0 ; Gen . data . length > i ; i ++ ) { Gen . locked [ i ] = false ; } Gen . button ( ) ; Gen . show ( ) ; }
function handleBeforeFeatureEvent ( event , callback ) { var feature = event . getPayloadItem ( 'feature' ) ; self . currentFeature = self . buildFeature ( feature ) ; console . log ( 'starting:' , feature . getName ( ) ) ; callback ( ) ; }
function ( menu ) { if ( menu . data ( 'swipePanel' ) ) { menu . swipePanel ( 'remove' ) ; } }
function ( ) { testHelpers . setup ( ) ; createModule ( { enableDelayMS : 10 } ) ; }
function ( x ) { return Math . asin ( 1 / x ) ; }
function ( x ) { return Math . log ( x + Math . sqrt ( x * x - 1 ) ) ; }
function ( x ) { return 0.5 * Math . log ( ( x + 1 ) / ( x - 1 ) ) ; }
function ( x ) { return Math . log ( ( 1 + Math . sqrt ( 1 + x * x ) ) / ( x ) ) ; }
function ( x ) { return Math . acos ( 1 / x ) ; }
function ( x ) { return Math . log ( x + Math . sqrt ( x * x + 1 ) ) ; }
function ( x ) { return 0.5 * Math . log ( ( 1 + x ) / ( 1 - x ) ) ; }
function ( x ) { return 1 / Math . tan ( x ) ; }
function ( x ) { return ( Math . exp ( x ) + Math . exp ( - x ) ) / ( Math . exp ( x ) - Math . exp ( - x ) ) ; }
function ( x ) { return 1 / Math . sin ( x ) ; }
function ( x ) { return 2 / ( Math . exp ( x ) - Math . exp ( - x ) ) ; }
function ( x ) { return Math . exp ( x ) ; }
function ( x ) { return 1 / x ; }
function ( ) { this . $supers ( 'onChildAdded_' , arguments ) ; this . _shallSize = true ; }
function ( ) { var span = jQuery ( '<span>' ) . addClass ( 'utorrent-uquest-span' ) . attr ( 'title' , 'Download torrent' ) ; jQuery ( this ) . addClass ( 'utorrent-uquest-inject' ) . append ( span ) ; }
function ( ) { this . set ( 'Active' , ! this . get ( 'Active' ) ) ; }
function ( w , h ) { $heatmap_canvas . attr ( 'width' , w / backing_scale_width ) ; $heatmap_canvas . attr ( 'height' , h / ( backing_scale_height ) ) ; }
function ( ) { return '[DummyLog]' ; }
function ( amount ) { if ( amount === 0 ) { message = 'Build fixed' ; details = 'Build 123 fixed' ; } else { message = 'Build failed' ; details = 'Build 123 failed' ; } failedBuildsCount = amount ; return this ; }
function ( buildInfo ) { return buildInfo . state . failedBuildsCount === 1 ; }
function ( buildInfo ) { return buildInfo . state . failedBuildsCount === 1 ; }
function ( buildInfo ) { return buildInfo . state . failedBuildsCount === 1 ; }
function ( info ) { return info . name === name && info . baseUrl === 'bamboo' && info . typeName === 'Atlassian Bamboo' ; }
function ( ) { return iframeElement . contentWindow . require !== undefined ; }
function ( ) { plansUpdated ++ ; if ( plansUpdated === this . plansCount ) { this . updateFinished . dispatch ( ) ; } }
function showBuildFixedBadge ( ) { var badgeInfo = { text : '\u2022' , color : [ 0 , 255 , 0 , 200 ] } ; setBadge ( badgeInfo ) ; }
function showStateUnknownBadge ( ) { var badgeInfo = { text : ' ' , color : [ 200 , 200 , 200 , 200 ] } ; setBadge ( badgeInfo ) ; }
function setBadge ( badgeInfo ) { chrome . browserAction . setBadgeText ( { text : badgeInfo . text } ) ; chrome . browserAction . setBadgeBackgroundColor ( { color : badgeInfo . color } ) ; }
function ( event , index ) { if ( scrollable . getIndex ( ) !== index ) { $ ( '#service-add-wizard .steps li.active' ) . removeClass ( 'active' ) ; $ ( '#service-add-wizard .steps li' ) . eq ( index ) . addClass ( 'active' ) ; } }
function ( event , index ) { if ( index === 1 ) { $ ( '#service-add-name' ) . focus ( ) ; } }
function ( seconds ) { function onTimeout ( ) { self . elapsed . dispatch ( ) ; } this . timeout = seconds ; var self = this ; setTimeout ( onTimeout , this . timeout * 1000 ) ; }
function ( ) { __coverage_data [ 'Class.js__from_6_13_to_6_28' ] [ 51 ] ++ ; a ++ ; }
function ( ) { __coverage_data [ 'Class.js__from_6_13_to_6_28' ] [ 54 ] ++ ; a ++ ; }
function ( worker ) { debug ( 'kill worker ' + worker . pid ) worker . kill ( ) }
function ( worker , task ) { debug ( 'Task ' + task . name + ' worker ' + worker . pid + ' died' ) }
function ( worker ) { debug ( 'kill worker ' + worker . pid ) worker . kill ( ) }
function ( task , worker , message ) { debug ( task . name , worker . id , message ) }
function ( ) { self . master . emit ( 'death' , worker , self ) delete self . workers [ id ] delete self . master . workers [ id ] }
function ( templates ) { renderMenu ( ) ; renderUser ( ) ; setCountUnreadMessages ( ) ; setUserName ( ) ; addBinding ( ) ; forceShowLoginUrl ( ) ; }
function addComputedVariable ( cellType , fn ) { var initialValue ; var vv = this . addVariable ( cellType , initialValue ) ; var mm = this . addOneWayConstraint ( [ vv ] , fn ) ; runtime . enqueue ( mm ) ; return vv ; }
function isChanged ( ) { return this . hasDraft ( "value" ) ; }
function publishChange ( ) { ASSERT ( this . isChanged ( ) , "expected a change to publish" ) ; this . publish ( "value" ) ; }
function ( vv ) { if ( ! vv . writtenBy ) { maybeSet ( vv ) ; } }
function ( ) { if ( this . hasNext ( ) ) { this . select ( this . index + 1 ) ; } else { this . trigger ( OUT_OF_BOUNDS_EVENT , [ this . $element , NEXT_EVENT ] ) ; } return this ; }
function ( ) { if ( this . hasPrevious ( ) ) { this . select ( this . index - 1 ) ; } else { this . trigger ( OUT_OF_BOUNDS_EVENT , [ this . $element , PREVIOUS_EVENT ] ) ; } return this ; }
function ( ) { $ ( '#BBTagsHolder' ) . toggle ( ) ; }
function ( err , rows , fields ) { if ( err ) throw err ; if ( callback ) { callback ( u ) ; } }
function ( feature ) { return feature . setMap ( _this . map , opt_force ) ; }
function ( ) { var _this = this ; return komoo . event . addListener ( this . map , "zoom_changed" , function ( ) { } ) ; }
function ( e ) { return _this . isMouseover = false ; }
function ( e ) { return _this . isMouseover = true ; }
function ( e ) { return _this . isMouseover = false ; }
function ( data ) { feature [ _this . contentViewName ] = data ; return _this . setContent ( data ) ; }
function ( e ) { return _this . map . openInfoWindow ( _this . options ) ; }
function ( ) { return this . featureType . border_size ; }
function ( ) { return this . featureType . borderSizeHover ; }
function ( ) { return this . featureType . borderColor ; }
function ( ) { return this . featureType . backgroundColor ; }
function ( ) { return this . featureType . backgroundOpacity ; }
function ( e ) { return that . setOptions ( { strokeWeight : that . getBorderSizeHover ( ) } ) ; }
function ( type ) { if ( this . _type != null ) throw Error ( "type is already set" ) ; if ( type . equals ( Type . Type . integerType ) ) type = Type . Type . numberType ; this . _type = type ; }
function ( ) { console . error ( "onShown never fired" , arguments ) ; }
function onLoad ( ) { console . log ( "purplePanel load event" ) ; setTimeout ( loadJSAsync ) ; }
function Game ( ) { this . render = __bind ( this . render , this ) ; this . isReady = false ; this . debugOptions = window . location . hash . substr ( 1 ) . split ( ',' ) ; }
function ( key ) { return this . debugOptions . indexOf ( key ) !== - 1 ; }
function ( ) { return document . getElementById ( 'chat-log' ) . innerHTML = '' ; }
function ( ) { return "foo" ; }
function ( x ) { return x ; }
function ( x ) { return this . a = x ; }
function ( x ) { return x ; }
function ( x ) { return x + 1 ; }
function ( x ) { return x - 1 ; }
function ( x , y ) { return y - 1 ; }
function ( x ) { if ( typeof x === 'number' ) { return 0 - x ; } else { return ! x ; } }
function ( x ) { return this . name + x ; }
function ( ) { var o_construct_bad ; return o_construct_bad = { a : 42 } ; }
function ( ) { var o_construct_bad ; return o_construct_bad = { a : 42 } ; }
function ( ) { var c ; return c = [ "foo" , 42 ] ; }
function ( x ) { return x ; }
function ( b ) { return arguments . length ; }
function ( ) { var pathname = getPath ( ) ; var selection = "" ; imageTagger ( pathname ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . scheduleUpdateForTarget ( this , 0 , false ) ; return true ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . unscheduleUpdateForTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . pauseTarget ( this ) ; cc . ActionManager . sharedManager ( ) . pauseTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . resumeTarget ( this ) ; cc . ActionManager . sharedManager ( ) . resumeTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . unscheduleAllSelectorsForTarget ( this ) ; }
function ( dt ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . pauseTarget ( this ) ; }
function ( dt ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . unscheduleAllSelectors ( ) ; }
function updateIcon ( buildingID , category ) { if ( mapLoaded ) markerFeatures [ buildingID ] . marker . setUrl ( getIcon ( buildingID , category ) ) ; }
function ( e , data ) { $ ( "li[rel=test_case],li[rel=test_suite]" , this ) . data ( "jstree" , PLAN_CASE_MENU ) ; $ ( "li[rel=test_project]" , this ) . data ( "jstree" , { contextmenu : { } } ) ; }
function ( ) { this . input = sagecell . util . createElement ( "input" , { "type" : "checkbox" } ) ; this . input . checked = this . control [ "default" ] ; return this . input ; }
function ( deps , cb , er ) { deps . rjsSkipMap = true ; return context . require ( deps , cb , er ) ; }
function ( _frequency ) { this . frequency = _frequency ; this . _function . setFrequency ( this . frequency ) ; if ( this . env . getState ( ) > 1 ) this . env . setState ( 0 ) ; }
function ( _frequency ) { this . frequency = _frequency ; this . _function . setFrequency ( _frequency ) ; if ( this . env . getState ( ) > 1 ) this . env . setState ( 0 ) ; }
function ( r , rt ) { if ( r . message == 1 ) { cur_frm . refresh ( ) ; } }
function ( r , rt ) { if ( r . message == 1 ) { cur_frm . refresh ( ) ; } }
function ( ) { cur_frm . call_server ( 'check_duplicate' , 1 ) }
function ( ) { return 'select name, description from tabItem where is_stock_item="No" and is_sales_item="Yes"\ 		and name not in (select name from `tabSales BOM`)\ 		and `%(key)s` like "%s"' }
function ( txt ) { if ( ! wn . md2html ) { wn . require ( 'js/lib/showdown.js' ) ; wn . md2html = new Showdown . converter ( ) ; } return '<div class="markdown">' + wn . md2html . makeHtml ( txt ) + '</div>' ; }
function ( ) { cur_frm . amend_doc ( ) }
function ( txt ) { if ( ! wn . md2html ) { wn . require ( 'js/lib/showdown.js' ) ; wn . md2html = new Showdown . converter ( ) ; } return '<div class="markdown">' + wn . md2html . makeHtml ( txt ) + '</div>' ; }
function ( r , rt ) { if ( r . message == 1 ) { cur_frm . refresh ( ) ; } }
function ( r , rt ) { if ( r . message == 1 ) { cur_frm . refresh ( ) ; } }
function ( doc ) { return 'SELECT DISTINCT `tabSales Taxes and Charges Master`.name FROM \ 		`tabSales Taxes and Charges Master` WHERE `tabSales Taxes and Charges Master`.company = "' + doc . company + '" AND `tabSales Taxes and Charges Master`.company is not NULL \ 		AND `tabSales Taxes and Charges Master`.docstatus != 2 \ 		AND `tabSales Taxes and Charges Master`.%(key)s LIKE "%s" \ 		ORDER BY `tabSales Taxes and Charges Master`.name LIMIT 50' ; }
function findCallback ( ) { buildContacts ( request . result , successCb ) ; }
function ( ) { s . close ( ) assert . equal ( error . reason , "socket hang up" ) assert . equal ( /request timed out$/ . test ( error . message ) , true ) done ( ) }
function ( ) { s . close ( ) assert . equal ( error . reason , "aborted" ) assert . equal ( /response timed out$/ . test ( error . message ) , true ) done ( ) }
function ( index , value ) { $ ( value ) . find ( 'a[redirect-link=true] div' ) . addClass ( 'hover' ) ; }
function ( index , value ) { $ ( value ) . find ( 'a[redirect-link=true] div' ) . removeClass ( 'hover' ) ; }
function ( options ) { this . _super ( options ) ; this . on ( 'collision:bullet:player' , this . onHit ) ; this . outOfBoundsKill = 200 ; }
function ( delta ) { this . _super ( delta ) ; if ( this . outOfBounds ( this . outOfBoundsKill ) ) { this . alive = false ; } }
function ( err , data ) { if ( ! err ) self . _addData ( data ) ; callback . apply ( null , [ err ] . concat ( scopedModels ) ) ; }
function ( inputContainer ) { $ ( ".success, .error" ) . remove ( ) ; if ( inputContainer ) { $ ( "#buildid-range" ) . remove ( ) ; inputContainer . removeClass ( "info" ) ; } }
function schedCycle ( ) { var names = schedGetHead ( ) for ( var i in names ) { schedRemovePlayer ( names [ i ] ) schedAddPlayer ( names [ i ] ) } }
function ( goInside ) { try { forth . step ( goInside ) ; } catch ( err ) { forth . terminal . error ( err ) ; } forth . dbg . redraw ( ) ; forth . redrawStack ( ) ; }
function ( event ) { if ( this . isDrawing ) { this . doDraw ( event ) ; } else { this . doSnap ( event ) ; } this . drawLastSnap ( ) ; }
function onTxnComplete ( ) { call ( opts . complete , null , { results : results } ) ; }
function ( ) { this . sandbox . setTransformOrigin ( "30% 10%" ) ; if ( q . env . get ( "css.transform" ) != null ) { this . assertEquals ( "30% 10%" , this . sandbox . getTransformOrigin ( ) ) ; } }
function ( trackEvent ) { if ( ! trackEvent || ! ( trackEvent instanceof TrackEvent ) ) { throw new Error ( "trackEvent must be valid to start an editor." ) ; } return openEditor ( trackEvent ) ; }
function ( e ) { startX = e . touches [ 0 ] . pageX ; startY = e . touches [ 0 ] . pageY ; swipe = false ; }
function ( ) { this . handler . sendMessage ( { 'command' : 'isReady' } ) ; }
function ( ) { return this . canvas ; }
function ( heading , message ) { this . drawInvalidText ( heading ) ; }
function ( event ) { console . log ( "DEBUG in cardImage clickEventHandler" ) ; game . handleCardClicked ( card ) ; }
function ( req , res ) { run . exportGPX ( req , res , req . params . runID , dbClient ) ; }
function ( req , res ) { if ( conf . stagingServer ) { req . session . userID = req . params . uid ; } res . render ( 'redirect' , { title : 'Redirecting ...' , redirectURL : 'http://localhost:5555/' } ) }
function ( ) { console . log ( "eagerfeet server listening on port %d" , PORT ) ; }
function ( gpx , fileName ) { dbClient . query ( 'update Runs set exported = "yes" where runID = ?' , [ runID ] ) ; res . setHeader ( 'Content-Disposition' , 'attachment; filename=' + fileName ) ; res . setHeader ( 'Content-Type' , 'application/gpx+xml' ) ; res . send ( gpx ) ; }
function ( error , compressedRun ) { fs . writeFile ( DATADIR + user . userID + '/' + runID + '.json.gz' , compressedRun ) ; }
function Bus ( ) { var bus = Gibberish . Bus ( arguments ) . connect ( Master ) ; return bus ; }
function ( ) { this . _topic . remove ( ) ; delete testApp ; }
function ( $result ) { var scroll = $result . position ( ) . top + $ ( '#result' ) . scrollTop ( ) ; $ ( '#result' ) . animate ( { scrollTop : scroll } ) ; }
function ( done ) { p . on ( 'data' , getHandler ( 'a"b)cd"' , done ) ) p . debug ( console . log ) p . write ( '(a"b)c' ) console . log ( '___' ) p . write ( 'd")ef' ) }
function ( i , index ) { if ( array [ index ] !== undefined ) { ret . push ( array [ index ] ) ; } }
function ( req , res , next ) { res . header ( "Access-Control-Allow-Origin" , "*" ) ; res . header ( "Access-Control-Allow-Headers" , "Origin, X-Mime-Type, X-Requested-With, X-File-Name, Content-Type" ) ; next ( ) ; }
function readySite ( data ) { var iframe = $ ( "#" + String ( data . site_id ) ) ; insertHTMLIntoIframe ( data . src , iframe ) ; Notes [ data . site_id ] = data . notes ; }
function ( ) { var length = model . get ( '_entities.length' ) ; model . remove ( '_entities' , 0 , length ) ; }
function skipToLinkedTime ( e ) { if ( deepLink !== false && playerCount === 1 ) { e . data . player . setCurrentTime ( deepLink [ 0 ] ) ; deepLink = false ; } }
function initialKillProcess ( ) { console . log ( '------------>initialKillProcess<------------' + clinetNr ) ; writeDataFile ( ) ; writeFinichetFile ( ) ; redyToKill ( ) ; }
function ( index , value ) { if ( value [ 0 ] == 't' ) { anewcurrentarray [ value . substring ( 2 ) ] = $ ( "#td_" + value ) . val ( ) ; } }
function ( ) { cb ( null , blockingMock [ parseInt ( key , 10 ) ] ) ; }
function ( tmp ) { var html = tmp ( that . model . toJSON ( ) ) ; that . $el . html ( html ) ; that . onRenderComplete ( callback ) ; }
function ( tmp ) { var html = tmp ( that . model . toJSON ( ) ) ; that . $el . html ( html ) ; that . onRenderComplete ( callback ) ; }
function ( tmp ) { var html = tmp ( that . model . toJSON ( ) ) ; that . $el . html ( html ) ; that . onRenderComplete ( callback ) ; }
function ( ) { compressedFileSizes [ file ] = String ( fs . readFileSync ( fileOutput ) ) . length ; processNextFile ( idx , file , fileOutput ) ; }
function ( node , update_launch_sco ) { if ( node . children . length ) { return scorm_lastchild ( node . children [ node . children . length - 1 ] ) ; } else { return node ; } }
function ( ev ) { scorm_activate_item ( scorm_skipprev ( scorm_tree_node . getHighlightedNode ( ) , true ) ) ; }
function ( ev ) { scorm_launch_prev_sco ( ) ; }
function ( ev ) { scorm_activate_item ( scorm_up ( scorm_tree_node . getHighlightedNode ( ) , true ) ) ; }
function ( ev ) { scorm_launch_next_sco ( ) ; }
function ( ev ) { scorm_activate_item ( scorm_skipnext ( scorm_tree_node . getHighlightedNode ( ) , true ) ) ; }
function ( ) { $ ( document ) . on ( 'click' , '#' + buttonAddOptionId , addMultipleChoiceOption ) ; num_inputs = 1 ; }
function ( ) { return connection . getAutocommit ( ) ; }
function ( ) { $ . mobile . pushStateEnabled = false ; $ . mobile . hashListeningEnabled = false ; debug ( "mobile init" ) ; $ ( document ) . delegate ( 'div' , "pageshow" , Panoptic . pageChange ) ; }
function ( name ) { var args = Array . prototype . slice . call ( arguments ) ; _webview . executeJavascript ( "webworks.event.trigger('" + name + "', '" + JSON . stringify ( args . slice ( 1 ) ) + "')" ) ; }
function ( handler ) { if ( handler ) { handler . func . apply ( undefined , parsedArgs ) ; } }
function ( ) { req . params . ext = "NotAnExt" ; defaultPlugin . exec ( req , succ , fail , args ) ; expect ( fail ) . toHaveBeenCalledWith ( - 1 , jasmine . any ( String ) , 404 ) ; }
function ( event ) { if ( confirm ( "Restore defaults will erase all changes you make.\n Are you sure you want to continue?!\n" ) ) ui . PrefsDlg . restore_defaults ( ) ; }
function ( event ) { if ( confirm ( 'The operation will erase the access token of this profile.\n Are you sure you want to continue?!\n' ) ) { conf . clear_token ( conf . current_name ) ; $ ( '#profile_avatar_list a.selected' ) . click ( ) ; } }
function ( result ) { results . push ( result ) ; suitesFinished ++ ; if ( suitesFinished === suitesCreated ) { that . logger . log ( results ) ; that . _closeDb ( ) ; } }
function wrap ( node ) { return { node : node , loading : 0 , context : { } , attrs : { } } }
function children ( child ) { for ( ; child != null ; child = child . nextSibling ) { if ( ! visit ( wrap ( child ) ) ) return false ; } return true ; }
function ( path ) { try { var file = Components . classes [ '@mozilla.org/file/local;1' ] . createInstance ( Components . interfaces . nsILocalFile ) ; file . initWithPath ( path ) ; return file ; } catch ( e ) { return false ; } }
function ( type ) { try { return Components . classes [ '@mozilla.org/file/directory_service;1' ] . createInstance ( Components . interfaces . nsIProperties ) . get ( type , Components . interfaces . nsIFile ) ; } catch ( e ) { return false ; } }
function ( def , file ) { filePath = path . relative ( baseDir , file ) ; filePath = filePath . replace ( /\\+/g , '/' ) ; imagesDef [ filePath ] = def ; }
function ( state ) { var _ref1 ; return ( _ref1 = _this . dialog ) != null ? _ref1 . dialog ( "close" ) : void 0 ; }
function ( innerContent ) { return innerContent . append ( _this . explainPanel ) ; }
function ( e ) { _this . cursor . hide ( ) ; jQuery ( document . elementFromPoint ( e . clientX , e . clientY ) ) . trigger ( 'click' ) ; _this . cursor . show ( ) ; return false ; }
function ( ) { Capkom . console . info ( 'canClick: true' ) ; return Capkom . profile . set ( { canClick : true } ) ; }
function ( ) { if ( this . timer ) { Capkom . console . info ( "Cancel timeout" ) ; return clearTimeout ( this . timer ) ; } }
function ( ) { Capkom . canClick ( ) ; Capkom . console . info ( 'deactivate audio' ) ; return Capkom . profile . set ( { useAudio : false } ) ; }
function ( ) { Capkom . canClick ( ) ; Capkom . console . info ( 'activate audio' ) ; return Capkom . profile . set ( { useAudio : true } ) ; }
function ( ) { return done ( ) ; }
function ( res ) { Capkom . profile . set ( { wordmatch : res } ) ; Capkom . clickNext ( ) ; return jQuery ( ':Capkom-wordmatch.play-area' , element ) . wordmatch ( 'destroy' ) ; }
function ( res ) { Capkom . profile . set ( { wordmatch : res } ) ; Capkom . clickNext ( ) ; return jQuery ( ':Capkom-wordmatch.play-area' , element ) . wordmatch ( 'destroy' ) ; }
function ( ) { compact . middleware ( ) ; }
function ( ) { compact . middleware ( [ ] ) . should . be . a ( 'function' ) ; }
function ( ) { done ( ) ; }
function ( helper ) { helper . compactJs ( ) . should . eql ( [ '/global.js' ] ) ; doneCount += 1 ; if ( doneCount === 2 ) { done ( ) ; } }
function ( ) { fs . unlinkSync ( srcPath + '/tmp.js' ) ; compactDebug . middleware ( [ 'global' ] ) ( req , res , function ( ) { done ( ) ; } ) ; }
function setPrivacy ( privacy ) { var dialog = document . getElementById ( "calendar-event-dialog" ) ; dialog . _privacy = privacy ; debug ( "setPrivacy: " + privacy ) ; _updateTitle ( ) ; }
function ( ) { $ ( '.dropdown-toggle' ) . dropdown ( ) ; $ ( ".alert" ) . alert ( ) ; }
function ( ) { this . open ( e . target ) ; }
function ( totalParticles ) { cc . Assert ( totalParticles <= this . _allocatedParticles , "Particle: resizing particle array only supported for quads" ) ; this . _totalParticles = totalParticles ; }
function ( blendFunc ) { if ( this . _blendFunc . src != blendFunc . src || this . _blendFunc . dst != blendFunc . dst ) { this . _blendFunc = blendFunc ; this . _updateBlendFunc ( ) ; } }
function ( ) { if ( ! this . _children ) this . _children = [ ] ; return this . _children ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . pauseTarget ( this ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . pauseTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getScheduler ( ) . resumeTarget ( this ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . resumeTarget ( this ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getActionManager ( ) . removeAllActionsFromTarget ( this ) ; }
function ( frame ) { var animFrame = new cc . AnimationFrame ( ) ; animFrame . initWithSpriteFrame ( frame , 1 , null ) ; this . _frames . push ( animFrame ) ; this . _totalDelayUnits ++ ; }
function ( arrayOfSpriteFrameNames , delay ) { var animation = new cc . Animation ( ) ; animation . initWithSpriteFrames ( arrayOfSpriteFrameNames , delay ) ; return animation ; }
function ( ) { if ( cc . s_sharedAnimationCache ) { cc . s_sharedAnimationCache . _animations = null ; cc . s_sharedAnimationCache = null ; } }
function ( dt ) { this . unschedule ( this . unpause ) ; var node = this . getChildByTag ( TAG_GROSSINI ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . resumeTarget ( node ) ; }
function ( time ) { this . unschedule ( this . resumeGrossini ) ; var grossini = this . getChildByTag ( TAG_GROSSINI ) ; cc . Director . sharedDirector ( ) . getActionManager ( ) . resumeTarget ( grossini ) ; }
function ( ) { return new ActionTargeted ( ) }
function ( ) { return new cc . Action ( ) ; }
function ( action , speed ) { cc . Assert ( action != null , "" ) ; this . _innerAction = action ; this . _speed = speed ; return true ; }
function ( action , speed ) { var ret = new cc . Speed ( ) ; if ( ret && ret . initWithAction ( action , speed ) ) { return ret ; } return null ; }
function ( target ) { this . _target . setVisible ( true ) ; }
function ( time ) { this . _target . setVisible ( false ) ; }
function ( time ) { this . _target . setVisible ( ! this . _target . isVisible ( ) ) ; }
function ( time ) { this . _target . setFlipX ( this . _flipX ) ; }
function ( ) { return cc . FlipX . create ( ! this . _flipX ) ; }
function ( x ) { var ret = new cc . FlipX ( ) ; if ( ret . initWithFlipX ( x ) ) return ret ; return null ; }
function ( time ) { this . _target . setFlipY ( this . _flipY ) ; }
function ( ) { return cc . FlipY . create ( ! this . _flipY ) ; }
function ( y ) { var ret = new cc . FlipY ( ) ; if ( ret . initWithFlipY ( y ) ) return ret ; return null ; }
function ( time ) { this . _target . setPosition ( this . _position ) ; }
function ( time ) { this . execute ( ) ; }
function ( ) { cc . Assert ( false , "cc.IntervalAction: reverse not implemented." ) ; return null ; }
function ( ) { if ( this . _last != - 1 ) { this . _actions [ this . _last ] . stop ( ) ; } this . _super ( ) ; }
function ( target ) { this . _total = 0 ; this . _nextDt = this . _innerAction . getDuration ( ) / this . _duration ; this . _super ( target ) ; this . _innerAction . startWithTarget ( target ) ; }
function ( target ) { this . _super ( target ) ; if ( this . _animation . getRestoreOriginalFrame ( ) ) { this . _origFrame = target . displayFrame ( ) ; } this . _nextFrame = 0 ; this . _executedLoops = 0 ; }
function ( ) { this . _targets = [ ] ; }
function ( config , socket , tty ) { this . config = config ; this . socket = socket ; this . tty = tty ; }
function ( error , stdout , stderr ) { console . log ( stderr ) assert . ok ( error !== null , 'Error executing numb' ) assert . ok ( fs . existsSync ( process . cwd ( ) + '/Numbfile' ) , 'Numbfile wasn\'t created' ) }
function ( error ) { self . log_error ( error ) ; stream . end ( ) ; }
function ( had_error ) { self . log ( "Connection closed." ) ; self . connected = false ; }
function ( ) { if ( ! this . connected || ! this . stream ) return ; this . log ( "Closing connection upon request!" ) ; this . stream . destroy ( ) ; }
function ( ) { $ ( '#' + divPrecarga ) . html ( imgCarga ) ; }
function ( ) { "use strict" ; var pars ; pars = { opcion : 2 , tipo : $ ( '#tipoComparativa' ) . val ( ) } ; procesaAjax ( pars , 'comparativas' , 'comparativas' , datePicker ) ; }
function ( data ) { window . location . reload ( ) ; }
function ( ) { this . inherited ( arguments ) ; if ( ! ( this . params && "value" in this . params ) ) { this . value = this . indeterminate ? Infinity : this . progress ; } }
function ( ) { setFixtures ( '<div id="feed"></div>' ) ; return this . $element = $ ( '#feed' ) ; }
function ( ) { if ( gj . browser . msie != undefined ) { document . onkeydown = null ; } document . onkeypress = null ; this . listeners = [ ] ; }
function ( ) { if ( gj . browser . msie != undefined ) { document . onkeydown = null ; } document . onkeypress = null ; this . listeners = [ ] ; }
function closePrimaryUser ( callback ) { this . close ( "primary_user" , _ . extend ( primaryInfo , { email : email , requiredEmail : true , add : ! ! auth_level } ) ) ; callback && callback ( ) ; }
function ( key , val ) { if ( val > 0 ) { $ ( "#cost---" + key ) . attr ( 'checked' , 'checked' ) ; } else { $ ( "#cost---" + key ) . removeAttr ( 'checked' ) ; } }
function ( ) { self . scenarioLoadComplete ( true ) ; $ ( '.scenario-row' ) . tooltip ( ) ; }
function ( ) { expect ( true ) . toBe ( true ) ; }
function ( ) { text = "123" ; lexer = new Hyper . Lexer ( text ) ; lexer . reader . readNextChar ( ) ; }
function ( ) { text = "0" ; lexer = new Hyper . Lexer ( text ) ; lexer . reader . readNextChar ( ) ; }
function ( ) { expect ( lexer . __readNumber__ ( text [ 0 ] ) . type ) . toEqual ( Hyper . TokenType . NUMBER ) ; }
function ( ) { expect ( lexer . __readNumber__ ( text [ 0 ] ) . type ) . toEqual ( Hyper . TokenType . NUMBER ) ; }
function ( ) { expect ( lexer . __readNumber__ ( text [ 0 ] ) . type ) . toEqual ( Hyper . TokenType . NUMBER ) ; }
function ( ) { var tok = lexer . __readNumber__ ( text [ 0 ] ) ; expect ( tok . text ) . toEqual ( text ) ; }
function isNumberStart ( c ) { return NUMBER_START_PATTERN . test ( c ) ; }
function exponent_sign ( ) { if ( c == '+' || c == '-' || DIGIT_PATTERN . test ( c ) ) { return states . EXPONENT ; } throw new LexError ( "Invalid number literal." ) ; }
function ( ) { return this . col ; }
function ( e ) { appView . datumsView . newDatum ( ) ; app . router . showDashboard ( ) ; }
function ( ) { return this || ( 0 , eval ) ( 'this' ) ; }
function ( ) { if ( this . _isCacheDirty ) return ; this . _isCacheDirty = true ; if ( this . _parent ) { this . _parent . _setNodeDirtyForCache ( ) ; } }
function ( newRotation ) { if ( this . _rotation == newRotation ) return ; this . _rotation = newRotation ; this . _rotationRadians = this . _rotation * ( Math . PI / 180 ) ; this . setNodeDirty ( ) ; }
function ( x ) { this . _position . x = x ; this . setNodeDirty ( ) ; }
function ( y ) { this . _position . y = y ; this . setNodeDirty ( ) ; }
function ( ) { if ( this . _batchNode && ! this . _recursiveDirty ) { this . _recursiveDirty = true ; this . _dirty = true ; if ( this . _hasChildren ) this . setDirtyRecursively ( true ) ; } }
function ( ) { Meteor . subscribe ( "bandnames" ) ; }
function ( i , citation ) { limitReferenceIndexesForCitation ( i ) ; }
function ( ) { if ( ! suppressUpdate && "viewController" in CSLEDIT ) { CSLEDIT . viewController . styleChanged ( "formatCitations" ) ; } }
function ( i , attributeIndex ) { if ( nodeData . attributes [ attributeIndex ] . enabled && isValidValue ( nodeData . attributes [ attributeIndex ] . value , schemaAttribute ) ) { thisAttribute = nodeData . attributes [ attributeIndex ] ; return false ; } }
function ( ) { var $this = $ ( this ) , cslId ; cslId = parseInt ( $this . attr ( attribute ) ) ; if ( cslId >= parentId + numChildNodes ) { $this . attr ( attribute , cslId + 1 ) ; } }
function ( i , choice ) { $ . each ( choice . refs , function ( i2 , ref ) { var define = defineProperties [ ref ] ; attributesMerge ( choice . attributes , define . attributes ) ; } ) ; }
function ( i , choiceRef ) { choice . refs . push ( choiceRef ) ; containsChoice = true ; }
function ( comment ) { return CSLEDIT . cslParser . cslCodeFromCslData ( get ( ) , comment ) ; }
function ( jsonData , comment , fullClosingTags ) { var cslXml = '<?xml version="1.0" encoding="utf-8"?>\n' ; if ( typeof ( comment ) === "string" ) { cslXml += "<!-- " + comment + " -->\n" ; } cslXml += xmlNodeFromJson ( jsonData , 0 , fullClosingTags ) ; return cslXml ; }
function ( oldString , newString ) { var diffs = dmp . diff_main ( oldString , newString ) ; dmp . diff_cleanupSemantic ( diffs ) ; return prettyHtml ( diffs ) ; }
function ( oldString , newString ) { var diffs ; console . time ( "diffs" ) ; diffs = dmp . diff_main ( oldString , newString ) ; console . timeEnd ( "diffs" ) ; return dmp . diff_levenshtein ( diffs ) ; }
function ( ) { this . processURI ( ) ; this . updateDisplay ( ) ; }
function ( ) { this . firstLoop = true ; this . newNote = true ; this . seqIdx = 0 ; this . elapsed = 0 ; this . block . writeSample = 0 ; }
function ( value ) { return ! ! value ? new Handlebars . SafeString ( value . toString ( ) ) : "" ; }
function date ( gist ) { return gist . created_at ; }
function getFirstGistFile ( gist ) { return gist . files [ _ ( gist . files ) . keys ( ) [ 0 ] ] ; }
function ( asyncError ) { if ( asyncError ) { return callback ( asyncError ) ; } return callback ( null , posts ) ; }
function ( ) { if ( ! this . get ( "title" ) ) { this . set ( { "title" : this . defaults . title } ) ; } }
function ( ) { this . model . save ( { title : this . input . val ( ) } ) ; $ ( this . el ) . removeClass ( "editing" ) ; }
function ( ) { return { title : this . input . val ( ) . trim ( ) , order : Todos . nextOrder ( ) , done : false } ; }
function ( attr ) { return this . attributes [ attr ] ; }
function ( ) { model . trigger ( 'destroy' , model , model . collection , options ) ; }
function ( resp , xhr ) { return resp ; }
function ( ) { return new this . constructor ( this . attributes ) ; }
function ( resp , xhr ) { return resp ; }
function ( route ) { route = route . replace ( escapeRegExp , '\\$&' ) . replace ( namedParam , '([^\/]+)' ) . replace ( splatParam , '(.*?)' ) ; return new RegExp ( '^' + route + '$' ) ; }
function ( ) { this . $el . remove ( ) ; return this ; }
function ( ) { parent . apply ( this , arguments ) ; }
function ( object , prop ) { if ( ! ( object && object [ prop ] ) ) return null ; return _ . isFunction ( object [ prop ] ) ? object [ prop ] ( ) : object [ prop ] ; }
function ( type , message ) { return util . format ( '[%s](haredis#%d) %s: %s' , new Date ( ) . toTimeString ( ) . split ( ' ' ) [ 0 ] , this . connection_id , type , message ) ; }
function ( manager ) { var record = get ( manager , 'record' ) ; record . trigger ( 'becameInvalid' , record ) ; }
function ( manager ) { var record = get ( manager , 'record' ) ; record . trigger ( 'didLoad' ) ; }
function ( manager , dirtyType ) { var record = get ( manager , 'record' ) ; if ( dirtyType === 'created' ) { record . trigger ( 'didCreate' , record ) ; } else { record . trigger ( 'didUpdate' , record ) ; } }
function ( manager ) { var record = get ( manager , 'record' ) ; record . trigger ( 'didDelete' , record ) ; }
function ( manager ) { var record = get ( manager , 'record' ) ; record . trigger ( 'becameError' , record ) ; }
function ( json ) { this . didCreateRecords ( store , type , records , json ) ; }
function ( card , playerNumber , stackNumber ) { GameState . dealCard ( card , playerNumber , stackNumber ) ; $rootScope . $apply ( ) ; }
function dragstart ( e ) { e . dataTransfer . effectAllowed = "copy" ; var realtarget = $ ( e . target ) . closest ( ".tracker-div" ) ; e . dataTransfer . setData ( "Text" , realtarget . attr ( "id" ) ) ; }
function ( ) { return this . embedPlayer . getTextTracks ( ) . length ; }
function d3_time_expandYear ( d ) { return d + ( d > 68 ? 1900 : 2000 ) ; }
function ( error ) { if ( error . code === 'notfound' ) res . send ( "Slider '" + sliderName + "' NOT FOUND" , 404 ) ; else res . send ( error . toString ( ) , 500 ) ; }
function update ( ) { if ( _state ) { _icon . removeAttribute ( "data-state" ) ; } else { _icon . setAttribute ( "data-state" , true ) ; } }
function onMouseUp ( e ) { _button . removeAttribute ( "data-mouse-state" ) ; window . removeEventListener ( "mouseup" , onMouseUp , false ) ; }
function ( e ) { _button . setAttribute ( "data-mouse-state" , "depressed" ) ; window . addEventListener ( "mouseup" , onMouseUp , false ) ; }
function ( data , status , jq ) { unique = ( status == "success" ) ; }
function ( ) { getNextBatch ( i ) ; }
function set_number_of_reps ( number_of_reps ) { $ ( '#profiles-number-of-reps' ) . html ( number_of_reps ) ; if ( number_of_reps === 1 ) { $ ( '#profiles-number-of-reps-plural' ) . html ( '' ) ; } else { $ ( '#profiles-number-of-reps-plural' ) . html ( 's' ) ; } }
function ( ) { $ ( '#profiles_listview' ) . hide ( ) ; $ ( '#profiles_gridview' ) . show ( ) ; hash_set_value ( 'view' , 'grid' ) ; redraw_grid ( ) ; }
function ( path ) { this . xdata . __cpath = path ; }
function ( func ) { this . xdata . __cfunc = func ; }
function ( ) { this . setAttribute ( 'class' , this . highlight ) ; this . style [ 'border-left-color' ] = bb . options . bb10HighlightColor ; }
function ( ) { this . setAttribute ( 'class' , this . normal ) ; this . style [ 'border-left-color' ] = 'transparent' ; }
function ( ) { this . setAttribute ( 'class' , this . highlight ) ; this . style [ 'border-left-color' ] = bb . options . bb10HighlightColor ; }
function ( ) { this . setAttribute ( 'class' , this . normal ) ; this . style [ 'border-left-color' ] = 'transparent' ; }
function ( ) { this . setAttribute ( 'class' , this . highlight ) ; this . style [ 'border-left-color' ] = bb . options . bb10HighlightColor ; }
function ( ) { this . setAttribute ( 'class' , this . normal ) ; this . style [ 'border-left-color' ] = 'transparent' ; }
function ( m ) { return params [ m . substr ( 1 , m . length - 2 ) ] || '' ; }
function ( ) { var id = obj [ self . identifier ] return self . target . find ( { where : { 'id' : id } } ) }
function ( topic ) { Object . keys ( topic ) . forEach ( function ( key ) { assert . deepEqual ( topic [ key ] , nconf . get ( key ) ) ; } ) ; }
function ( e ) { $ ( '.button.dropdown' ) . not ( this ) . children ( 'ul' ) . removeClass ( 'show-dropdown' ) ; $ ( this ) . children ( 'ul' ) . toggleClass ( 'show-dropdown' ) ; }
function ( ) { self . orbitWidth = self . $element . outerWidth ( ) ; self . orbitHeight = self . $element . height ( ) ; }
function ( e ) { e . preventDefault ( ) ; var $this = $ ( this ) ; $ ( settings . tooltipClass ) . hide ( ) ; methods . showOrCreateTip ( $this ) ; }
function ( ) { if ( this . $ . item instanceof Article ) { return this . $ . item ; } return null ; }
function ( ) { cdb . log . debug ( "compiling carto" ) ; var style = this . $ ( 'textarea' ) . val ( ) ; this . model . set ( { tile_style : style } ) ; }
function ( ) { Y . log ( 'rpc failure!' , 'warn' , NAME ) ; adapter . error ( resp . html ) ; }
function ( entityType , zOrder ) { var obj = me . entityPool . newInstanceOf ( entityType ) ; if ( obj ) { api . add ( obj , zOrder ) ; } }
function toggle_topic ( toggler , toggleNum ) { if ( document . getElementById ) { imageSwitch = toggler ; targetElement = toggler . parentNode . parentNode . nextSibling ; toggleexacttopic ( targetElement , imageSwitch , toggleNum , false , true ) ; } }
function save_toggles ( ) { savetogglestate ( to36baseString ( toggleBinaryGlobal ) ) ; }
function ( value ) { value && baidu . paramCheck ( '^(?:number|string)$' , 'baidu.dom.scrollTop' ) ; return value === undefined ? ret . get ( this [ 0 ] ) : ret . set ( this [ 0 ] , value ) || this ; }
function ( xhr , e , et ) { var jo = { "status" : et } ; }
function ( xhr , e , et ) { var jo = { "status" : "server error" } ; if ( callback !== null ) { callback ( jo ) ; } }
function ( ) { that . hide ( ) }
function ( val , prefix ) { var matcher = new RegExp ( '^' + prefix + '(.*)' ) ; return ! matcher . test ( val ) ? prefix + val : val ; }
function ( msg , info ) { info = info || { } ; self . stagedEmail = info . email ; startAction ( false , "doResetPassword" , info ) ; }
function ( ) { mediator . publish ( "reset_password" , { email : TEST_EMAIL } ) ; mediator . publish ( "user_confirmed" ) ; equal ( actions . info . doEmailConfirmed . email , TEST_EMAIL , "doEmailConfirmed called with correct email" ) ; }
function showForm ( form ) { form . addEventListener ( "click" , function ( event ) { } , true ) ; }
function ( newVal ) { if ( arguments . length > 0 ) { this . board . locked = newVal ; this . refreshBoard ( ) ; } return this . board . locked ; }
function ( ) { stream . destroy ( ) ; }
function ( j , button ) { if ( ! ( typeof j === 'number' && typeof button === 'string' ) ) { config_old . push ( j ) ; } }
function ( ) { return this . nodeName === markup [ 0 ] . nodeName ; }
function ( button ) { Aloha . Selection . changeMarkupOnSelection ( jQuery ( '<' + button + '>' ) ) ; }
function ( message ) { this . name = 'DeveloperError' ; this . message = message ; try { var err = new Error ( ) ; this . error = err ; } catch ( ex ) { } }
function ( message ) { this . name = 'RuntimeError' ; this . message = message ; try { var err = new Error ( ) ; this . error = err ; } catch ( ex ) { } }
function ( ) { _success = null ; _error = null ; window . clearInterval ( _interval ) ; }
function ( ) { spyOn ( window , "setInterval" ) . andReturn ( 1 ) ; spyOn ( window , "clearInterval" ) ; }
function ( newKey ) { Account . _profilePicKey = newKey || Math . random ( ) ; }
function ( newKey ) { if ( ! Account . _profilePicKey ) { this . setProfilePicKey ( ) ; } return Account . _profilePicKey ; }
function ( size , useKey ) { size = size || 'large' ; return this . links . images . profile [ size ] + ( ! ! useKey ? ( '?x=' + this . getProfilePicKey ( ) ) : '' ) ; }
function ( newKey ) { Account . _profilePicKey = newKey || Math . random ( ) ; }
function ( newKey ) { if ( ! Account . _profilePicKey ) { this . setProfilePicKey ( ) ; } return Account . _profilePicKey ; }
function ( size , useKey ) { size = size || 'large' ; return this . links . images . profile [ size ] + ( ! ! useKey ? ( '?x=' + this . getProfilePicKey ( ) ) : '' ) ; }
function encodeCookie ( cookie ) { var date = new Date ( Date . now ( ) + ONE_DAY ) return cookie . replace ( /expires=.*?(;|$)/i , 'expires=' + date . toGMTString ( ) ) ; }
function setProperties ( obj , map ) { for ( var key in map ) { var value = map [ key ] ; obj [ key ] = executeJSON ( game , value ) ; } }
function ( window ) { villo = window . villo || { } ; villo . version = "0.9.9 z1" ; }
function ( e ) { if ( e . success ) { var user = e . users [ 0 ] ; alert ( 'Welcome to ShootNSell!' ) ; loginWin . close ( ) ; homeWin . open ( ) ; } else { } }
function ( ) { updateLayout ( ) ; }
function ( Networker , SocketIO ) { function Client ( location ) { this . socket = SocketIO . connect ( location ) ; this . networker = new Networker ( this . socket ) ; } return Client ; }
function ( ) { if ( this . gameController ) this . gameController . destruct ( ) ; this . gameController = null ; }
function GameController ( physicsEngine ) { console . log ( 'constructor called' ) ; this . players = { } ; if ( ! physicsEngine instanceof Engine ) { throw physicsEngine + " is not of type Engine" ; } this . physicsEngine = physicsEngine ; }
function ( user ) { this . gameController . userIdLeft ( user . id ) ; this . sendCommandToAllUsersExcept ( "userLeft" , user . id , user ) ; delete this . users [ user . id ] ; }
function ( command , options , user ) { this . gameController . progressGameCommandFromUser ( command , options , user ) ; }
function GameController ( ) { Parent . call ( this , new PhysicsEngine ( ) ) ; this . inputControllers = { } ; this . update ( ) ; this . updateWorld ( ) ; }
function ( self , operator , operatore ) { operator = operator || operatore ; if ( operator in XPath . operators ) { return XPath . operators [ operator ] ; } else { return operator ; } }
function ( ) { jpath ( 'i18n(\'%Folders_Unread\', new)' ) . should . equal ( 'i18n(\'%Folders_Unread\', .new)' ) }
function ( ) { jpath ( '$a - $b' ) . should . equal ( 'a - b' ) ; }
function ( section ) { if ( section ) { fields . push ( section . fields ) ; } }
function ( err ) { calipso . e . post_emit ( 'USER_LOGOUT' , u ) ; if ( res . statusCode != 302 ) { res . redirect ( returnTo || 'back' ) ; return ; } next ( ) ; }
function ( ) { window . location = '.' ; }
function ( ) { $ ( form ) . find ( '.error' ) . text ( gettext ( 'An error occurred.' ) ) ; $ ( form ) . find ( 'button' ) . attr ( 'disabled' , false ) ; }
function ( ) { this . socket . emit ( "regist" , { "mode" : "client" , "lastid" : this . lastid } ) ; }
function ( exists ) { if ( exists === false ) { console . log ( "Activities store doesn't exist, creating it." ) ; store . save ( { key : "activities" , options : { } } ) } }
function get_obstacle_color ( i ) { var rgb = obstacles . color ? obstacles . color [ i ] : options . default_obstacle_color ; return "rgb(" + rgb [ 0 ] + "," + rgb [ 1 ] + "," + rgb [ 2 ] + ")" ; }
function ( choice , index ) { items . push ( { label : choice . title , icon : choice . icon , value : index } ) ; }
function ( url ) { if ( url ) { return url . replace ( /(\.png|\.jpg|\.jpeg)(\d*)/ , '.grid.json' ) ; } }
function ( ) { ko . setTemplateEngine ( new dummyTemplateEngine ( ) ) ; testNode . innerHTML = "Start <!-- ko template: { data: someData } -->Childprop: [js: childProp]<!-- /ko --> End" ; ko . applyBindings ( { someData : { childProp : 'abc' } } , testNode ) ; value_of ( testNode ) . should_contain_html ( "start <!-- ko template: { data: somedata } -->childprop: abc<!-- /ko -->end" ) ; }
function ( event , ui ) { programCarrying = makeCodeFromOptions ( $ ( this ) . text ( ) ) ; carrying = createBlock ( programCarrying ) ; return carrying ; }
function ( event ) { that . cleanNumerations ( ) ; if ( that . showNumbers ( ) ) { that . createNumeratedHeaders ( ) ; } }
function ( obj ) { if ( ! obj || $ ( obj ) . length <= 0 ) { return false ; } return $ ( obj ) . find ( 'span[role=annotation]' ) . length > 0 ; }
function ( pokes ) { this . pokes = pokes ; }
f MediaFile . deleteMediaFile ( args , function ( error , deletedMediaFile ) { if ( ! error ) { callback ( null , deletedMediaFile ) ; } else { callback ( error , null ) ; } } ) }
function ( i ) { p . editor . save_block ( this ) ; }
function ( topic , data ) { data = $ . isFunction ( data ) ? { "handler" : data } : data ; events . subscribe ( $ . extend ( { "topic" : topic } , data ) ) ; }
function ( key , value , callback ) { db_client . set ( key , value , callback ) ; }
function Networker ( socketLink ) { this . socketLink = socketLink ; this . gameController = null ; this . init ( ) ; }
function ( ) { this . gameController . destruct ( ) ; this . gameController = null ; }
function ( userId ) { this . gameController . userJoined ( userId ) ; console . log ( "User " + userId + " joined" ) ; }
function ( userId ) { this . gameController . userLeft ( userId ) ; }
function ( resource ) { return resource . replace ( /_/g , " " ) . replace ( /\%28/g , "(" ) . replace ( /\%29/g , ")" ) . replace ( /http:\/\/dbpedia\.org\/resource\//gi , "" ) ; }
function ( ) { return _ . size ( storage ) ; }
function ( data ) { xmppchat . UI . addUserToRosterUI ( user_id , bare_jid , data . fullname , status ) ; }
function ( data ) { xmppchat . UI . addUserToRosterUI ( user_id , bare_jid , data . fullname , 'offline' ) ; }
function ( ) { $ ( this ) . dialog ( "close" ) ; var jid = $ ( that ) . parent ( ) . attr ( 'data-recipient' ) ; xmppchat . Roster . unsubscribe ( jid ) ; }
function ( e ) { var $el = $ ( this ) ; if ( 'undefined' != typeof $el . data ( 'confirm' ) && ! confirm ( $el . data ( 'confirm' ) ) ) return false ; }
function ( tofetch , removed ) { if ( $ . isFunction ( this . options . fetch ) ) { this . options . fetch ( tofetch , removed ) ; } }
function ( data ) { debug ( "recvHello" ) ; }
function ( form , action ) { Ext . msg . error ( 'Gagal menghapus berkas!' ) ; }
function ( done ) { var val = 45 ; gazel . dbName = "gazel" + new Date ; setGet ( done , 'foo' , val , function ( setRep , getRep ) { return getRep === val ; } ) ; }
function ( err ) { throw err ; }
function ( res ) { isOk ( done ) ( res ) ; }
function ( e ) { trackId = $ ( this ) . parent ( ) . parent ( ) . find ( '.jp-playlist-item-free' ) . attr ( 'trackId' ) ; rmTrack ( trackId , myPlaylist . name ) ; }
function namespace ( name ) { var m = /^(?:(.*):)?(.*)$/ . exec ( name ) ; return [ mitnk_mdict_json_to_dom . namespaces [ m [ 1 ] ] , m [ 2 ] ] ; }
function ( ) { var item = new BoxItem ( ) ; }
function onComplete ( items , request ) { var item = items [ 0 ] ; t . assertEqual ( [ "<img src='images/Alabama.jpg'/>Alabama" ] , store . getLabel ( item ) ) ; }
function onComplete ( items , request ) { var item = items [ 0 ] ; t . assertTrue ( store . containsValue ( item , "name" , "Alaska" ) ) ; }
function onComplete ( items , request ) { var item = items [ 0 ] ; t . assertTrue ( store . isItemLoaded ( item ) ) ; }
function onError ( error , request ) { throw new Error ( error ) ; }
function onComplete ( items , request ) { t . assertEqual ( 5 , items . length ) ; }
function onError ( error , request ) { throw new Error ( error ) ; }
function onComplete ( items , request ) { t . t ( began , "onBegin was called" ) ; t . assertEqual ( 4 , items . length ) ; }
function onError ( error , request ) { throw new Error ( error ) ; }
function onComplete ( items , request ) { t . assertEqual ( 5 , items . length ) ; }
function onError ( error , request ) { throw new Error ( error ) ; }
function onError ( error , request ) { throw new Error ( error ) ; }
function onError ( error , request ) { throw new Error ( error ) ; }
function ( target , req ) { this . _target = target ; this . _req = req ; }
function ( callback ) { var options = { uri : this . _target , method : 'GET' , headers : { 'Authorization' : this . generateAuthHeader ( ) } , timeout : 20000 } ; makeRequest ( options , callback ) }
function ( callback ) { var options = { uri : this . _target , method : 'DELETE' , headers : { 'Authorization' : generateAuthHeader ( ) } , timeout : 20000 } ; makeRequest ( options , callback ) }
function ( error , response , body ) { console . log ( "Response received: " + body ) ; callback ( error , response , body ) ; }
function ( d ) { g . nodes_array . push ( jQuery . extend ( true , { } , d ) ) }
function ( d ) { d . currentX = d . x ; d . currentY = d . y ; return d . baseID ; }
function ( d ) { d . currentX = d . x ; d . currentY = d . y ; return d . x }
function ( d ) { var p = d3 . mouse ( this ) ; __g . prevMovePoint = [ p [ 0 ] , p [ 1 ] ] ; __g . moveLasso = true ; }
function ( d ) { if ( d . selected ) { selList . push ( d . baseID ) ; return 'red' ; } return 'steelblue' ; }
function ( dest ) { util . puts ( "building..." ) ; dest = dest || prefix + ".js" ; build . build ( dest ) ; util . puts ( "> " + dest ) ; }
function ( inScope ) { return ( this . expr . mayHaveSideEffects ( inScope ) ) || ( beingDeclared ( this . assignee ) ) . length ; }
function ( inScope ) { return ( this . condition . mayHaveSideEffects ( inScope ) ) || ( ! this . condition . isFalsey ( ) && this . block . mayHaveSideEffects ( inScope ) ) ; }
function ( ) { loadStyleSheet ( testWindow . document , "ExtensionUtils-test-files/sub dir/third.css" ) ; }
function ( ) { this . _isCacheDirty = true ; if ( this . _parent ) { this . _parent . _setNodeDirtyForCache ( ) ; } }
function ( user ) { $ ( 'body' ) . empty ( ) . append ( '<div id=widgets></div>' ) ; this . initHashChangeTracker ( ) ; this . init ( user ) ; }
function ( err ) { if ( err . type === 'connectionerror' ) return ; var doReload = window . confirm ( 'Whoooops! Something went wrong! We will reload now, ok?' ) ; if ( doReload ) window . location . reload ( ) ; }
function ( err ) { var doReload = window . alert ( 'Whoooops! Something went wrong! We will reload now, ok?' ) ; window . location . reload ( ) ; }
function ( message ) { window . alert ( message ) ; }
function ( error , starListener ) { notificationArray . push ( starListener ) ; callback ( null , notificationArray ) ; }
function ( error , notificationListener ) { if ( error ) { console . log ( error ) ; } test . ok ( notificationListener . should . have . property ( 'user' , 'A7S7F8GA7SD11A7SDF8ASD7G' ) ) ; test . done ( ) ; }
function ( error , updatedSettings ) { console . log ( error ) ; test . ok ( updatedSettings . should . have . property ( "notificationOnNewResource" , 3 ) ) ; test . done ( ) ; }
function ( e ) { e . stopPropagation ( ) ; }
function ( update ) { viewModel . ai ( update . aList ) ; $ ( '#ai-list .ai' ) . listview ( ) ; }
function ( ) { openJqmDialog ( '#bidding-page' ) ; }
function ( obj ) { var curtop = 0 ; if ( obj . offsetParent ) { do { curtop += obj . offsetTop ; } while ( obj = obj . offsetParent ) ; } return curtop ; }
function ( text ) { var type = require ( 'jsdoc/tag/type' ) , tagType = type . getTagType ( text ) ; return tagType . type || text ; }
function ( doclet , tag ) { var borrows = parseBorrows ( doclet , tag ) ; doclet . borrow ( borrows . target , borrows . source ) ; }
function parseVariable ( type ) { var variable = null ; if ( /^(\.\.\.)(.+)$/ . test ( type ) ) { type = RegExp . $2 ; variable = true ; } return { type : type , variable : variable } ; }
function ( ) { return express . static ( resolve ( __dirname , '../../public' ) ) ; }
function parseProgram ( ) { var program ; strict = false ; yieldAllowed = false ; yieldFound = false ; program = { type : Syntax . Program , body : parseProgramElements ( ) } ; return program ; }
function ( ) { this . setCityConfig ( 'baltimore' ) ; var dashboardView = new Dashboard . Views . Main ( { "config" : Config } ) ; this . showView ( dashboardView ) ; dashboardView . initDailyBriefingController ( ) ; }
function ( city ) { this . setCityConfig ( city ) ; var dashboardView = new Dashboard . Views . Main ( { "config" : Config } ) ; this . showView ( dashboardView ) ; dashboardView . initDailyBriefingController ( ) ; }
function ( options ) { Config = options . config ; return this . render ( ) ; }
function ( xhr ) { xhr . setRequestHeader ( "Authorization" , "Basic " + encodeBase64 ( user + ":" + password || "" ) ) ; if ( typeof origBeforeSend === "function" ) origBeforeSend . apply ( this , xhr ) ; }
function ( ) { info ( "Your bundle is complete." . green ) ; return typeof cb === "function" ? cb ( ) : void 0 ; }
function ( config ) { config . production = "production" ; return config . verbosity = 1 ; }
function ( string ) { return puts ( prefix ( string , inverse ( red ( " FATAL " ) ) ) , Logger . FATAL ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( red ( " ERROR " ) ) ) , Logger . ERROR ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( yellow ( " WARN " ) ) ) , Logger . WARN ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( green ( " INFO " ) ) ) , Logger . INFO ) ; }
function ( string ) { return puts ( prefix ( string , inverse ( blue ( " DEBUG " ) ) ) , Logger . DEBUG ) ; }
function ( eventDateObj ) { this . set ( { eventYear : eventDateObj . getFullYear ( ) , eventMonth : eventDateObj . getMonth ( ) , eventDate : eventDateObj . getDate ( ) , } ) ; }
function ( err , xtagJson ) { if ( xtagJson ) xtagJson . controlLocation = ghData . branchUrl + "/" + tagUrl ; onComplete ( err , xtagJson ) ; }
function ( ) { Utils . debug ( "Saving session" ) ; $ ( "#user-edit-modal" ) . modal ( "hide" ) ; $ ( "#user-modal" ) . modal ( "show" ) ; }
function ( ) { $ ( "#user-edit-modal" ) . modal ( "show" ) ; }
function ( err , icon ) { if ( err ) { throw err ; } return icon ; }
function ( require ) { var $ = require ( 'jquery' ) ; var homePageView = require ( 'js/view/homePageView' ) ; return function ( ) { console . log ( 'woooo!' ) ; } ; }
function ( ) { var results = this . inherited ( arguments ) ; this . discoverControlParent ( ) ; return results ; }
function updateContents ( ) { return ; $ . ajax ( "/api/connectors/installed" , { success : function ( data , textStatus , jqXHR ) { if ( hidden ) return ; dataLoaded ( data , true ) ; } } ) }
function ( ) { if ( this . root && this . selectAll ) { return this . selectAllText ; } return false ; }
function ( ) { if ( this . root && this . selectAll ) { return this . selectAllText ; } return false ; }
function ( error ) { console . log ( "Error connecting to MongoHQ" ) ; }
function ( error , db ) { console . log ( 'connected to db' ) ; db . addListener ( "error" , function ( error ) { console . log ( "Error connecting to MongoHQ" ) ; } ) ; db_defer . resolve ( db ) ; }
function ( err , result ) { callback ( result ) ; }
function ( e ) { console . log ( "Got error: " + e . message ) ; callback ( { cashboard : [ ] , error : e . message } ) ; }
function ( ) { $ ( ".img_loading" ) . css ( { "display" : "block" , "text-align" : "center" } ) ; $ . get ( "/build_database_for_testcase	" , function ( ) { window . location = "/version" ; } ) ; }
function ( ) { $ ( "#input_apiKey" ) . change ( function ( ) { save_token_again ( this ) ; } ) ; $ ( "#input_baseUrl" ) . change ( function ( ) { save_url_again ( this ) ; } ) ; }
function ( res ) { controller . endpoints . empty ( ) ; $ ( '.img_loading' ) . css ( "display" , "none" ) ; controller . endpoints . append ( res ) ; controller . toggleEndpoints ( ) ; }
function ( ) { AIRTIME . showbuilder . fnRemove ( [ { id : data . id , timestamp : data . timestamp , instance : data . instance } ] ) ; }
function ( uri ) { console . log ( uri ) ; }
function ( ) { this . social_services = { twitter : { } , facebook : { } } ; this . user_profile = new Backbone . Model ( NEWSBLUR . user_social_profile ) ; }
function ( html ) { var $new_comments = $ ( html ) ; this . $el . replaceWith ( $new_comments ) ; this . setElement ( $new_comments ) ; this . story_view . attach_tooltips ( ) ; this . initialize ( ) ; }
function ( options ) { this . story = options . story ; if ( ! this . options . on_social_page ) { this . user = NEWSBLUR . assets . user_profiles . find ( this . model . get ( 'user_id' ) ) ; } }
function ( score ) { score . category = map [ score . key ] . display ; }
function ( require ) { var ListViewPanelHandler = require ( './listviewPanel/handler' ) ; var DetailViewPanelHandler = require ( './detailviewPanel/handler' ) ; return { 'listview/{id}' : new ListViewPanelHandler ( ) , 'detailview/{id}' : new DetailViewPanelHandler ( ) } ; }
function ( entry ) { if ( _ . isFunction ( self . setValue ) && entry . value == startingValue ) { self . setValue ( startingValue ) ; } }
function ( ) { $ ( "body" ) . animate ( { scrollTop : $ ( "#who-we-are" ) . offset ( ) . top - 50 } , 1000 ) ; }
function ( event ) { var target = $ ( event . target ) . closest ( "span[cslid]" ) , cslId = parseInt ( target . attr ( 'cslId' ) , 10 ) ; reverseSelectNode ( cslId ) ; }
function ( event ) { var target = $ ( event . target ) . closest ( "li[cslid]" ) , cslId = parseInt ( target . attr ( 'cslId' ) , 10 ) ; highlightOutput ( cslId ) ; }
function ( event ) { var target = $ ( event . target ) . closest ( "li[cslid]" ) , cslId = parseInt ( target . attr ( 'cslId' ) , 10 ) ; unHighlightNode ( cslId ) ; }
function ( ) { return "" ; }
function ( ) { return "" ; }
function ( data ) { var json = $ . parseJSON ( data ) ; var Memplex = json . data ; Controller . loadMemplex ( Memplex ) ; }
function checkForHint ( editor ) { $ ( "#codehint-text" ) . focus ( ) ; }
function ( ) { checkForHint ( editor ) ; }
function ( ) { checkForHint ( EditorManager . getFocusedEditor ( ) ) ; }
function ( data ) { if ( data ) { if ( data . errorcode === 0 ) { alert ( 'OK OK REFRESH NOW' ) ; } else { alert ( data . message ) ; } } else { alert ( 'CANNOT CONNECT TO DATABASE' ) ; } }
function ( stream_id ) { Log ( 'debug' , 'Playing recorded' ) ; mixpanel . track ( 'play-recorded' ) ; init_player ( { provider : 'rtmp' , netConnectionUrl : 'rtmp://recorded.stream.tapin.tv/cfx/st/' , url : 'mp4:' + stream_id + '/stream' , isLive : false , streamId : stream_id } ) ; }
function ( ) { return true ; }
function ( div ) { player_div = JQuery ( '<div id="player"></div>' ) ; $ ( '#currently-playing' ) . after ( player_div ) }
function ( time ) { my . update ( ) ; my . render ( ) ; requestAnimFrame ( my . tick ) ; }
function ( element ) { jQuery ( element ) . find ( 'div.inputs input[type="checkbox"]' ) . each ( function ( ) { Omeka . Items . enableWysiwygCheckbox ( this ) ; } ) ; }
function ( e ) { var self = this ; return { type : e . type || 'Syntax' , message : e . message , filename : path . basename ( self . config . target ) , filepath : self . config . target } }
function ( cfg , callback ) { try { new CssCombo ( cfg , callback ) ; } catch ( e ) { utils . log ( e ) ; callback && callback ( e ) ; } }
function ( ) { toast . set ( 'fetch full text failed.' ) . show ( ) ; }
function ( views ) { if ( ! Util . basicAuthHeader ) { Ext . getCmp ( 'mainView' ) . setMasked ( false ) ; } }
function ( ) { return [ 'login' , 'screener' , 'registration' , 'registrationextjs4' , 'pharmacy' , 'chw' , 'outpatient' ] ; }
function ( ) { this . sortBy ( 'urgency' ) ; }
function ( rpcHandler , connector ) { return new GeolocationFeature . GeolocationFeature ( rpcHandler , connector ) }
function ( ) { Utils . debug ( "Successfully authenticated user with their corpus server." ) ; c . replicateCorpus ( couchConnection ) ; }
function ( ) { return _loadProject ( _getDefaultProjectPath ( ) ) ; }
function ( ) { var result = testWindow . brackets . test . ProjectManager . openProject ( path ) ; result . done ( function ( ) { isReady = true ; } ) ; }
function ( msg ) { dbg ( 'to c&c' , msg ) ; switch ( msg . cmd ) { case 'log' : ws . send ( JSON . stringify ( { cmd : 'post' , p : msg . p } ) ) ; break ; } }
function ( eventData ) { if ( ! form . isValid ( settings . validators ) ) { return eventData . preventDefault ( ) ; } }
function ( t ) { t . ok ( true , "nested ok" ) t . end ( ) }
function calculator_backSpace ( ) { this . clearBackspaceTimeout ( ) ; this . startBackspaceTimeout ( ) ; this . stack . splice ( this . stack . length - 1 , 1 ) ; this . updateDisplay ( ) ; }
function calc_errorTimeout ( self ) { self . display . parentNode . classList . remove ( 'error' ) ; self . errorTimeout = null ; }
function ( match , _ , pre , num ) { pre = pre || '' ; return pre + '(0-' + num + ')' ; }
function ( ts ) { var pos = ts . GetPosition ( ) ; this . camera . Set ( pos . x , pos . y , pos . z ) ; this . elevation = ts . geoposition . elevation ; }
function ( ) { var jid = jQuery ( this ) . attr ( 'jid' ) ; if ( jid != '[object object]' ) { Client . roster . push ( jid ) ; } }
function ( ) { $ ( tagname + "[refid='" + id + "']" ) . html ( $ ( 'textarea#edit' ) . val ( ) ) ; $ ( tagname + "[refid='" + id + "']" ) . addClass ( "edited" ) ; }
function ( value ) { this . locX = parseFloat ( value ) ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . locY = parseFloat ( value ) ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . locZ = parseFloat ( value ) ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . dLocX = parseFloat ( value ) ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . dLocY = parseFloat ( value ) ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . dLocZ = parseFloat ( value ) ; this . translateMatrix = null ; this . staticMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . rotX = parseFloat ( value ) ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . rotY = parseFloat ( value ) ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . rotZ = parseFloat ( value ) ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . dRotX = parseFloat ( value ) ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . dRotY = parseFloat ( value ) ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { this . mode = GLGE . P_EULER ; this . dRotZ = parseFloat ( value ) ; this . staticMatrix = null ; this . rotmatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . ScaleX == value ) return this ; this . scaleX = parseFloat ( value ) ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . ScaleY == value ) return this ; this . scaleY = parseFloat ( value ) ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . ScaleZ == value ) return this ; this . scaleZ = parseFloat ( value ) ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . dScaleX == value ) return this ; this . dScaleX = parseFloat ( value ) ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . dScaleY == value ) return this ; this . dScaleY = parseFloat ( value ) ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( value ) { if ( this . dScaleZ == value ) return this ; this . dScaleZ = parseFloat ( value ) ; this . staticMatrix = null ; this . scaleMatrix = null ; this . updateMatrix ( ) ; return this ; }
function ( ) { return this . locX ; }
function ( ) { return this . locY ; }
function ( ) { return this . locZ ; }
function ( ) { return new GLGE . Vec3 ( this . locX , this . locY , this . locZ ) ; }
function transportDocError ( data ) { this . workerReadyPromise . reject ( data ) ; }
function ( ) { error = W3S . Core . Ajax . fieldValidation ( $ ( this ) , conf . tags ) ; if ( error . length ) { $ ( this ) . addClass ( conf . errCls ) ; return error ; } }
function ( ) { function Detector ( ) { } Detector . IDENTIFIER = { TILE : "tile" , PLAYER : "player" , PLAYER_HEAD : 'head' , PLAYER_CHEST : 'chest' , PLAYER_LEGS : 'legs' , PLAYER_FOOT_SENSOR : 'footsensor' } return Detector ; }
function ( err , results ) { files . push ( node ) ; if ( err ) { doneProcessingNode ( err ) ; return ; } return doneProcessingNode ( null ) ; }
function ( err ) { return doneResolvingDependencyChain ( err , files ) ; }
function ( data ) { $ ( '#display' ) . html ( data . info ) ; $ ( '#submitbtn' ) . removeAttr ( "disabled" ) ; }
function ( ) { loadContent ( ) ; loadDialogs ( ) ; ContextMenu . init ( ) ; WebUI . init ( ) ; }
function DVB_destroy ( ) { let breakpoints = this . _breakpoints ; breakpoints . removeEventListener ( "click" , this . _onBreakpointClick , false ) ; this . empty ( ) ; this . _breakpoints = null ; }
function DVP_destroy ( ) { this . empty ( ) ; this . _currHierarchy = null ; this . _prevHierarchy = null ; this . _vars = null ; }
function ( ) { finalCheck ( ) ; closeDebuggerAndFinish ( ) ; }
function ( ) { contextMenu . hidePopup ( ) ; closeDebuggerAndFinish ( ) ; }
function ( aState , str ) { check ( aState , str , isString , 'string->symbol' , 'string' , 1 ) ; aState . v = types . symbol ( str . toString ( ) ) ; }
function ( aState , bstr ) { check ( aState , bstr , isByteString , 'bytes-length' , 'byte string' , 1 ) ; aState . v = bstr . length ( ) ; }
function updateIndexes ( manifest ) { var input = manifest . obj ? $ ( '#mediaDiv table tbody input' ) : $ ( '#contentTable tbody input' ) ; input . each ( function ( i ) { $ ( this ) . val ( i + 1 ) ; } ) ; }
function ( event , ui ) { manifest . save ( ) ; updateIndexes ( manifest ) ; }
function ( ) { window . open ( this . _url ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.features.autoselect.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.features.prefill.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.macros.MyTemplate" } , { fn : this . testAsyncLoadTplTwo , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.refresh.Refresh" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.writingTemplates.TemplateStatements" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.utils.dragdrop.Drag" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.autocomplete.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.button.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.calendar.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.checkbox.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.datefield.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.datepicker.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.dialog.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.div.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.errorlist.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.fieldset.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.gauge.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.icon.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.iconbutton.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.link.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.list.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.multiselect.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.numberfield.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.passwordfield.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.radiobutton.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.select.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.selectbox.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.sortindicator.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.tab.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.tabpanel.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.template.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.text.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.textfield.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.timefield.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.widgets.tooltip.Snippet" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.cssTemplates.MyTemplate" } , { fn : this . testAsyncLoadTplTwo , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.domEvents.Main" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.domInteractions.DomInteractionTemplate" } , { fn : this . testAsyncLoadTplTwo , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.fibo.Fibonacci" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( ) { Aria . loadTemplate ( { div : "TESTAREA" , classpath : "snippets.templates.localization.statics.LocalizedTemplate" } , { fn : this . notifyTestEnd , scope : this } ) ; }
function ( response ) { console . log ( response ) ; }
function ( ) { $ ( "#dataHolder" ) . empty ( ) ; $ . ajax ( { url : "data/data.json" , type : "GET" , dataType : "json" , success : function ( response ) { console . log ( response ) ; } } ) ; }
function ( frame ) { var c = _ . isNull ( frame . get ( 'layers' ) ) ? 0 : frame . get ( 'layers' ) . length ; frame . loader = new loaderView ( { count : c } ) ; }
function ( key , x , y , e , graph ) { return '<h3>' + key + " - " + x + '</h3>' + '<p>' + y + '</p>' }
function clear ( ) { clusterer . clearMarkers ( ) ; }
function ( ) { self . titleObj . appendChild ( document . createTextNode ( " (update failed)" ) ) ; if ( callback ) callback ( ) ; }
function ( job , next ) { spy2 . should . have . not . been . called ( ) ; next ( 'first try is a fail' ) ; }
function ( job , next ) { spy1 . should . have . been . called . once ; process . nextTick ( next ) ; }
function onMove ( e ) { setCenter ( e ) ; render ( ) ; }
function onMove ( e ) { setCenter ( e ) ; render ( ) ; }
function ( err ) { if ( err ) { if ( err . code === 'EACCES' ) { console . log ( "Must be root, try: sudo jslint --update" ) ; process . exit ( 1 ) ; } throw err ; } cb ( ) ; }
function definePseudo ( loader , id , exports ) { let uri = resolveURI ( id , loader . mapping ) ; loader . modules [ uri ] = { exports : exports } ; }
function language ( ) { return bestMatchingLocale ? bestMatchingLocale . split ( "-" ) [ 0 ] . toLowerCase ( ) : null ; }
function ( ) { model . removeComponent ( pathname ) ; }
function browser_followLink ( e ) { e . preventDefault ( ) ; if ( e . target . nodeName === 'A' ) { this . navigate ( e . target . getAttribute ( 'href' ) ) ; } }
function ( deviceId , manufacturer , model , dmVersion , language ) { return sinon . stub ( { deviceId : deviceId , manufacturer : manufacturer , model : model , dmVersion : dmVersion , language : language , } ) ; }
function ( data ) { var stub = sinon . stub ( { isGenericAlert : function ( ) { } , } ) ; stub . data = data ; return stub ; }
function ( status ) { return sinon . stub ( { status : status , } ) ; }
function ( event ) { if ( event . which === 13 && ! event . shiftKey ) { if ( this . rendered ) { this . edit ( ) ; return false ; } ; } ; }
function ( ) { $ ( '#statisticsresponsefilters' ) . hide ( 1000 ) ; $ ( '#filterchoices' ) . hide ( ) ; $ ( '#filterchoice_state' ) . val ( '1' ) ; $ ( '#vertical_slide2' ) . hide ( ) ; }
function ( ) { $ ( '#statisticsresponsefilters' ) . show ( 1000 ) ; $ ( '#filterchoices' ) . show ( ) ; $ ( '#filterchoice_state' ) . val ( '' ) ; $ ( '#vertical_slide2' ) . show ( ) ; }
function ( callback ) { db . createCollection ( 'game' , { capped : true , size : 100000 } , callback ) ; }
function ( collection , resposne ) { console . log ( resposne ) ; }
function ( ) { getCode ( query . id , writeCodeLines , handleAjaxError ) ; $ ( '#text' ) . val ( '' ) ; closeCommentBox ( ) ; }
function ( file , i , a ) { return /^chapter.*html/ . test ( file ) ; }
function parseError ( stream , message ) { throw 'Parse Error: ' + message + ', got \'' + stream + '\'' ; }
function supportsSelectionAPI ( ) { return 'selectionStart' in el [ 0 ] ; }
function zeroPad ( str , length ) { var zeros = "0000000000" ; while ( length - str . length > zeros . length ) str = zeros + str ; return zeros . substring ( 0 , length - str . length ) + str ; }
function ( ) { steal . build ( 'juristr/scripts/build.html' , { to : '../' } ) ; }
function ( ) { this . pager = { count : 20 , page : 1 , total : 0 } ; }
function ( ) { $ . webshims . refreshCustomValidityRules ( elem ) ; if ( $ ( elem ) . is ( '.form-ui-invalid, .form-ui-valid' ) ) { $ ( elem ) . trigger ( 'refreshvalidityui' ) ; } }
function ( ) { b . webshims . refreshCustomValidityRules ( c ) ; b ( c ) . is ( ".form-ui-invalid, .form-ui-valid" ) && b ( c ) . trigger ( "refreshvalidityui" ) }
function ( ) { $ . webshims . refreshCustomValidityRules ( elem ) ; if ( $ ( elem ) . is ( '.form-ui-invalid, .form-ui-valid' ) ) { $ ( elem ) . trigger ( 'refreshvalidityui' ) ; } }
function ( errors , request ) { var classDef = this . _instantiateTemplate ( errors , parser , request , true ) ; classDef . setAnalysisContextOfVariables ( createContext ( parser ) ) ; classDef . analyze ( createContext ( parser ) ) ; return classDef ; }
function onCurrentDocumentChange ( ) { removePopup ( ) ; $ ( ".CodeMirror-lines" ) . on ( "mousemove" , onLinesMouseMove ) . on ( "mouseout" , onLinesMouseOut ) ; }
function init ( ) { $ ( DocumentManager ) . on ( "currentDocumentChange" , onCurrentDocumentChange ) ; setTimeout ( onCurrentDocumentChange , 0 ) ; }
function ( data ) { console . log ( 'PUT player update' ) ; console . log ( data ) ; disable_game_invitation ( data ) ; }
function ( elem ) { if ( elem . parentNode ) { elem . parentNode . selectedIndex ; } return elem . selected === true ; }
f writer . writeVec4 ( this . getter_ . call ( target ) ) ; } ;
function ( comp , name ) { return comp . data ( ) . wluiVars [ name ] ; }
function updateRedirectTimeout ( ) { dom . setInner ( "#redirectTimeout" , secondsRemaining ) ; }
function ( ) { testHelpers . setup ( ) ; bid . Renderer . render ( "#page_head" , "site/confirm" , { } ) ; $ ( document . body ) . append ( $ ( '<div id=redirectTimeout>' ) ) ; $ ( ".siteinfo,.password_entry" ) . hide ( ) ; }
function ( ) { $ ( '#redirectTimeout' ) . remove ( ) ; testHelpers . teardown ( ) ; }
function ( err , res , body ) { assert . equal ( res . statusCode , 301 ) ; assert . equal ( res . headers . location , "http://localhost:9090/foo" ) ; }
function ( ) { getPastedContent ( ) ; Aloha . activeEditable . smartContentChange ( event ) ; }
function ( field ) { if ( self . values [ field ] !== undefined ) { values [ field ] = self . values [ field ] } }
function ( jqXHR , textStatus , errorThrown ) { jQuery ( '#plg_quickicon_extensionupdate' ) . find ( 'span' ) . html ( plg_quickicon_extensionupdate_text . UPTODATE ) ; }
function ( event ) { var AddMeAgain = require ( 'ui/categories' ) ; AddMeAgain ( nav , event . row . uri ) ; }
function ( ) { expect ( lengthFilter ( 'abcde' ) ) . toBe ( 5 ) ; }
function ( e ) { if ( ! e . isRightButton ( ) ) { this . _choose ( e . getNode ( 'tag:a' ) ) ; } }
function ( err ) { var prefix = 'Static file (' + http . req . url + ') ' ; if ( err ) { callback ( prefix + ( err . stack || err ) ) ; return ; } callback ( prefix + 'File not found' ) ; }
function ( views ) { if ( ! Util . basicAuthHeader ) { Ext . getCmp ( 'mainView' ) . setMasked ( false ) ; } }
function ( obj ) { console . log ( this . id , obj ) ; }
function ( kernel , Calendar ) { kernel . experimental ( "dojox/widget/CalendarViews" ) ; return { } ; }
function ( nWidth , nHeight , fWidth , fHeihgt ) { if ( IMERender . ime . dataset . hidden ) return ; _draw ( ) ; }
function ( ) { this . bind ( 'error' , function ( model , error ) { } ) ; }
function ( ) { Utils . debug ( "USER init: " + this . el ) ; }
function ClientGame ( networker , id ) { this . networker = networker ; this . clientProcessor = new ClientProcessor ( this ) ; this . clientProcessor . spawnMeWithId ( id ) ; this . players = { } ; }
function ( command , options ) { this . clientProcessor . processGameCommand ( command , options ) ; }
function Doll ( physicsEngine , id ) { this . id = id ; this . physicsEngine = physicsEngine ; this . body ; this . legs ; this . contactPoint ; this . init ( this . physicsEngine . getWorld ( ) ) ; }
function ( x , y ) { this . body . SetPosition ( new Box2D . Common . Math . b2Vec2 ( x / Settings . RATIO , y / Settings . RATIO ) ) ; this . body . SetActive ( true ) ; }
function ( ) { return this . body ; }
function ( friction ) { if ( ! friction ) friction = - 1 ; if ( this . legs . GetFriction ( ) != friction ) { this . legs . SetFriction ( friction ) ; } }
function ( ) { this . setFriction ( Settings . PLAYER_FRICTION ) ; }
function ( ) { var vector = new Box2D . Common . Math . b2Vec2 ( 0 , - 0.05 ) ; this . body . ApplyImpulse ( vector , this . body . GetPosition ( ) ) ; }
function ( userId ) { }
function ( userId ) { this . serverProcessor . userIdLeft ( userId ) ; }
function ( user ) { this . serverGame . userIdLeft ( user . id ) ; this . sendCommandToAllUsersExcept ( "userLeft" , user . id , user ) ; delete this . users [ user . id ] ; }
function ( e ) { Ti . App . fireEvent ( 'annotationSelected' , { message : 'good luck' } ) ; }
function ( ) { if ( this . index && ( this . index + 2 >= this . imgWidthStick . length ) ) { this . proloadImg ( 2 ) ; } }
function ( err ) { console . error ( err ) ; console . log ( "Node NOT Exiting..." ) ; }
function blockError ( buf , blockBuf , copyFilename ) { if ( copyFilename ) { buf . filename = blockBuf . filename ; buf . source = blockBuf . source ; } buf . line = blockBuf . line ; buf . col = blockBuf . col ; }
function ( ) { this . $el . data ( 'isotope' ) }
function ( ) { result . resolve ( ) ; }
function ( evt ) { events . push ( evt ) ; }
function ( evt ) { events . push ( evt ) ; }
function ( runID ) { gotResponse = false ; http . open ( 'get' , 'myphp.php?id=' + runID ) ; http . onreadystatechange = processResponse ; http . send ( null ) ; }
function ( ) { origRepoTypes . push ( { value : $ ( this ) . val ( ) , text : $ ( this ) . text ( ) } ) ; }
function ( selectedIndex ) { if ( selectedIndex == 0 ) { sf . core . exit ( false ) ; } }
function ( model , resp ) { if ( success ) { success ( model , resp ) ; } if ( model . __fetchSuccessCallback ) { var tmp = model . __fetchSuccessCallback ; model . __fetchSuccessCallback = null ; tmp . apply ( model ) ; } }
function ( model , resp ) { if ( error ) { error ( model , resp ) ; } if ( model . __fetchErrorCallback ) { var tmp = model . __fetchErrorCallback ; model . __fetchErrorCallback = null ; tmp . apply ( model ) ; } }
function isDeferred ( suspiciousObject ) { return _ . isObject ( suspiciousObject ) && suspiciousObject . promise && typeof suspiciousObject . promise === 'function' ; }
function assertDeferredByResult ( deferred , result ) { if ( typeof result === 'undefined' ) { result = true ; } return deferred [ result ? 'resolve' : 'reject' ] ( result ) ; }
function ( match ) { return match . toUpperCase ( ) ; }
function ( match ) { return match . toLowerCase ( ) ; }
function ( ) { var result = controller . checkSession . apply ( controller , _arguments ) ; if ( isDeferred ( result ) ) { return result ; } else { return assertDeferredByResult ( new $ . Deferred ( ) , result ) ; } }
function ( ) { return { 'ControllersPool' : ControllersPool } ; }
function ( context , args ) { if ( Smartgraphs . graphingTool . get ( "lineCount" ) == 2 ) { this . get ( 'owner' ) . set ( 'requestedCursorStyle' , 'default' ) ; } return ; }
function ( ) { console . log ( app . collections . dashboards ) var dashboardsView = new app . views . Dashboards ( { collection : app . collections . dashboards } ) ; that . showView ( dashboardsView ) ; }
function ( ) { if ( this . model ) this . model . off ( ) ; }
function ( ) { if ( this . model ) this . model . off ( ) ; }
function ( ) { $ ( this ) . submitted = false ; QuickApps . preventDoubleSubmit ( this ) ; }
function ( ) { if ( window . chrome ) { return new ChromeTabWatcher ; } else if ( window . opera ) { return new OperaTabWatcher ; } else if ( window . jetpack ) { return new FirefoxJetpackTabWatcher ; } return new TabWatcher ; }
function ( id , url , callback ) { targets . push ( { tab : id , startUrl : url , callback : callback } ) ; startTimer ( ) ; return true ; }
function ( tab ) { emit ( callback , tab . id , url ) ; }
function ( tab ) { emit ( callback , tab . id , url ) ; }
function ( ) { chrome . tabs . remove ( id ) ; }
function ( ) { chrome . tabs . update ( id , { active : true } ) ; }
function ( url , callback ) { var tab = opera . extension . tabs . create ( { url : url , focused : true } ) ; emit ( callback , tab . id , url ) ; }
function ( tab ) { callback && emit ( callback , tab , url ) ; callback = null ; }
function ( tab ) { callback && emit ( callback , tab , url ) ; callback = null ; }
function ( ) { return window . self == window . top ; }
function init ( ) { foo = proxyquire . require ( '../test/samples/foo-without-require-override' ) ; }
function ( service , params ) { var id = this . _getCommunicationId ( ) ; return this . _communicate ( service , params , "PUT" , id , data ) ; }
function ( ) { clipboardHelper . copyString ( stringToCopy , document ) ; }
function ( str , doc ) { Components . classes [ "@mozilla.org/widget/clipboardhelper;1" ] . getService ( Components . interfaces . nsIClipboardHelper ) . copyString ( str , doc ) ; }
function ( preExpectedVal , doc ) { var cbHelperSvc = Components . classes [ "@mozilla.org/widget/clipboardhelper;1" ] . getService ( Components . interfaces . nsIClipboardHelper ) ; cbHelperSvc . copyString ( preExpectedVal , doc ) ; }
function copyPref ( ) { var pref = gPrefView [ view . selection . currentIndex ] ; gClipboardHelper . copyString ( pref . prefCol + ';' + pref . valueCol , document ) ; }
function copyName ( ) { gClipboardHelper . copyString ( gPrefView [ view . selection . currentIndex ] . prefCol , document ) ; }
function copyValue ( ) { gClipboardHelper . copyString ( gPrefView [ view . selection . currentIndex ] . valueCol , document ) ; }
function ( ) { const kXferableContractID = "@mozilla.org/widget/transferable;1" ; const kXferableIID = Components . interfaces . nsITransferable ; var trans = Components . classes [ kXferableContractID ] . createInstance ( kXferableIID ) ; trans . init ( null ) ; return trans ; }
function ( ) { cbHelper . copyString ( kTestString , document ) ; }
function ( ) { Components . classes [ "@mozilla.org/widget/clipboardhelper;1" ] . getService ( Components . interfaces . nsIClipboardHelper ) . copyString ( url , document ) ; }
function ( ) { let clipboardHelper = Cc [ "@mozilla.org/widget/clipboardhelper;1" ] . getService ( Ci . nsIClipboardHelper ) ; clipboardHelper . copyStringToClipboard ( expectedString , testWin . document , Ci . nsIClipboard . kSelectionClipboard ) ; }
function ( manager , tile ) { tile . element . src = theLayer . emptyImage ; theLayer . tiles [ tile . element . id ] = tile . element ; theLayer . positionTile ( tile . element ) ; }
function ( manager , tile ) { tile . element . src = theLayer . emptyImage ; theLayer . tiles [ tile . element . id ] = tile . element ; theLayer . positionTile ( tile . element ) ; }
function runTest ( ) { allowUnlimitedQuota ( ) ; SimpleTest . waitForExplicitFinish ( ) ; testGenerator . next ( ) ; }
function finishTest ( ) { resetUnlimitedQuota ( ) ; SimpleTest . executeSoon ( function ( ) { testGenerator . close ( ) ; SimpleTest . finish ( ) ; } ) ; }
function allowUnlimitedQuota ( url ) { addPermission ( "indexedDB-unlimited" , true , url ) ; }
function ( ) { render ( { 'links' : '/federation-links' , 'upstreams' : '/parameters/federation-upstream' , 'globals' : '/parameters/federation' } , 'federation' , '#/federation' ) ; }
function ( ) { render ( { 'upstreams' : '/parameters/federation-upstream' } , 'federation-upstreams' , '#/federation-upstreams' ) ; }
function ( ) { render ( { 'upstream' : '/parameters/federation-upstream/' + esc ( this . params [ 'id' ] ) } , 'federation-upstream' , '#/federation' ) ; }
function ( ) { var num_keys = [ 'expires' , 'message-ttl' , 'max-hops' , 'prefetch-count' , 'reconnect-delay' ] ; put_parameter ( this , [ ] , num_keys ) ; return false ; }
function link_fed_conn ( name ) { return _link_to ( fmt_escape_html ( name ) , '#/federation-upstreams/' + esc ( name ) ) }
function ( event ) { if ( ! this . showingDatepicker ) { $ ( '#transaction-modal' ) . parent ( ) . remove ( ) ; } this . showingDatepicker = false ; }
function ( ) { var seriesCollection , dataProvider = this . get ( "dataProvider" ) ; if ( dataProvider ) { seriesCollection = this . _parseSeriesCollection ( ) ; } return seriesCollection ; }
function ( ) { var axes ; if ( this . get ( "dataProvider" ) ) { axes = this . _parseAxes ( ) ; } return axes ; }
function ( val ) { if ( this . get ( "dataProvider" ) ) { val = this . _setAxes ( val ) ; } return val ; }
function ( val ) { if ( this . get ( "dataProvider" ) ) { val = this . _parseSeriesCollection ( val ) ; } return val ; }
function ( val ) { var dataProvider = this . _setDataValues ( val ) ; if ( ! this . _seriesKeysExplicitlySet ) { this . _seriesKeys = this . _buildSeriesKeys ( dataProvider ) ; } return dataProvider ; }
function ( ) { if ( me . connected ) { me . connected = false ; me . transport_down ( ) ; me . fireEvent ( 'transport_down' , this ) ; } }
function ( ) { log . debug ( ' + Authed' , me . logAuthor ) ; if ( ! me . connected ) { me . connected = true ; me . transport_up ( ) ; me . fireEvent ( 'transport_up' , this ) ; } }
function ( ) { return this . _projectionMatrixStack [ this . _projectionMatrixStack . length - 1 ] ; }
function ( err , result ) { assert . ok ( ! err ) ; assert . deepEqual ( [ { x : user , n : null } ] , result ) ; done ( ) ; }
function ( winId ) { chrome . windows . get ( winId , { populate : true } , VisibilityTracker . winChanged ) ; }
function ( callback ) { chrome . extension . sendRequest ( { command : 'timesummary' } , callback ) ; }
function mapApp ( name ) { return 'app://' + name + '.' + domain ; }
get view ( ) { delete this . view ; return this . view = document . getElementById ( 'recents-container' ) ; } ,
function ( ) { this . setContentSize ( cc . Director . sharedDirector ( ) . getWinSize ( ) ) ; return true ; }
function ( ) { return cc . SplitCols . create ( 3 , this . _duration / 2.0 ) ; }
function ( message ) { this . name = 'DeveloperError' ; this . message = message ; this . error = new Error ( ) ; }
function ( message ) { this . name = 'RuntimeError' ; this . message = message ; this . error = new Error ( ) ; }
function ( ) { return navigator . userAgent . match ( /iphone|ipad|android|silk/i ) ; }
function ( data ) { console . log ( "fetched locale data for " + lang ) ; locale [ lang ] = data ; }
function ( i , node ) { var cslNode = new CSLEDIT . CslNode ( node ) ; if ( cslNode . hasAttr ( "name" ) ) { dropdownValues . push ( cslNode . getAttr ( "name" ) ) ; } }
function ( ) { var length = CSLEDIT . preGeneratedExampleCitations . exampleCitationsFromMasterId [ defaultStyle ] . length ; exampleIndex = ( exampleIndex + length ) % length ; formatExampleDocument ( ) ; clearResults ( ) ; }
function ( e ) { var CompetitionsWindow = require ( 'ui/common/competitions/CompetitionsWindow' ) ; var competitionsWindow = new CompetitionsWindow ( navGroup ) ; navGroup . open ( competitionsWindow ) ; }
function ( e ) { var CertificationsWindow = require ( 'ui/common/certifications/CertificationsWindow' ) ; var certificationsWindow = new CertificationsWindow ( navGroup ) ; navGroup . open ( certificationsWindow ) ; }
function foo ( ) { var x = 3 ; delete x ; }
function ( ) { if ( processing_mail ) { return self . try_deliver_host ( mx ) ; } }
function ( response ) { this . lognotice ( "delivered file=" + this . filename + ' response="' + response + '"' ) ; delivery_concurrency -- ; plugins . run_hooks ( "delivered" , this , response ) ; }
function close_popup ( ) { student_list_modal . hide ( ) ; student_list_modal = null ; }
function ( ) { logIf ( 3 , "Passive data event: end" , conn ) ; conn . dataSocket = null ; }
function ( err ) { logIf ( 0 , "Passive data event: error: " + err , conn ) ; conn . dataSocket = null ; }
function ( had_error ) { logIf ( ( had_error ? 0 : 3 ) , "Passive data event: close " + ( had_error ? " due to error" : "" ) , socket ) ; }
function ( ) { logIf ( 3 , "Passive data listener closed" , conn ) ; }
function ( object , response ) { if ( ! ( object && object . parseBeforeLocalSave ) ) return response ; if ( _ . isFunction ( object . parseBeforeLocalSave ) ) { return object . parseBeforeLocalSave ( response ) ; } }
function ( req , res ) { res . render ( 'forgot.ejs' , { title : 'Forgot Password' , fullpage : false , email : req . query . email , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( req , res ) { res . render ( 'verify_email_address.ejs' , { title : 'Complete Registration' , fullpage : true , token : req . query . token , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( req , res ) { res . render ( 'test.ejs' , { title : 'Mozilla Persona QUnit Test' , layout : false } ) ; }
function showRegistrationInfo ( info ) { dom . setInner ( "#email" , info . email ) ; if ( info . returnTo ) { dom . setInner ( ".website" , info . returnTo ) ; updateRedirectTimeout ( ) ; dom . show ( ".siteinfo" ) ; } }
function ( ) { dom . fireEvent ( window , "resize" ) ; }
function onSubmit ( ) { if ( ! dom . hasClass ( "body" , "submit_disabled" ) && this . validate ( ) ) { this . submit ( ) ; } return false ; }
function ( options ) { var self = this ; self . options = options || { } ; self . bind ( "form" , "submit" , cancelEvent ( onSubmit ) ) ; }
function ( err , kp ) { keypair = kp ; trans . complete ( keypair . publicKey . serialize ( ) ) ; }
function ( template , vars ) { renderer . render ( target + " .contents" , template , vars ) ; dom . addClass ( BODY , className ) ; dom . fireEvent ( window , "resize" ) ; this . visible = true ; }
function ( ) { dom . removeClass ( BODY , className ) ; dom . fireEvent ( window , "resize" ) ; this . visible = false ; }
function storeEmails ( emails ) { storage . emails = JSON . stringify ( emails ) ; }
function clear ( ) { storage . removeItem ( "emails" ) ; storage . removeItem ( "siteInfo" ) ; storage . removeItem ( "managePage" ) ; }
function testCannotConfirm ( ) { testHelpers . testErrorVisible ( ) ; }
function ( selector , className , msg ) { ok ( $ ( selector ) . hasClass ( className ) , msg || selector + " has className: " + className ) ; }
function ( index ) { this . index = index ; var galleryItemsEl = $ ( '#gallery ul li' ) ; galleryItemsEl . removeClass ( 'active' ) ; $ ( galleryItemsEl . get ( index - 1 ) ) . addClass ( 'active' ) ; }
function ( goInside ) { try { forth . step ( goInside ) ; } catch ( err ) { terminal . error ( err ) ; } forth . dbg . redraw ( ) ; forth . redrawStack ( ) ; }
function ( x , y ) { this . _point = new cc . Point ( x || 0 , y || 0 ) ; }
function ( ) { initialize ( ) ; }
function ( xhr , type ) { console . log ( type + " " + xhr . statusText + "!" ) ; }
function ( ) { ajax ( 'GET' , '/newsblur/reader/feeds' , null , processFeeds ) ; }
function ( xhr , type ) { console . log ( type + " " + xhr . statusText + "!" ) ; }
function ( xhr , type ) { console . log ( type + " " + xhr . statusText + "!" ) ; }
function ( args ) { var light = args [ 0 ] ; var lightsource = args [ 1 ] ; node . setLight ( light ) ; defer . resolve ( node ) ; }
function Game ( ) { this . clients = { } ; this . articles = { } ; this . players = { } ; this . nextPlayerId = 0 ; }
function ( ) { if ( $ ( this ) . attr ( 'href' ) == '#' ) { return } parent . location = $ ( this ) . attr ( 'href' ) return false ; }
function ( spec ) { spec = spec || { } ; spec . input_type = 'password' ; var that = IPA . text_widget ( spec ) ; return that ; }
function isTrade ( ) { var opp = cloned [ getOpposite ( ) ] . prices . peek ( ) ; return ( BUY == orderType ) ? price >= opp : price <= opp ; }
function say_status ( msg ) { if ( $status_element ) { $status_element . stop ( ) . show ( ) . text ( msg ) ; } }
function ( data , textStatus ) { message_manager . show_available_messages ( data ) ; if ( typeof ( callback ) === "function" ) { callback . call ( $ ( this ) , data ) ; } }
function ( ) { setInterval ( updateRoom , 5000 ) ; }
function ( ) { $ . mobile . defaultPageTransition = "slide" ; if ( $ . mobile . maxScrollForTransition ) { $ . mobile . maxScrollForTransition = function ( ) { return 0 ; } ; } }
function ( ) { $ . mobile . defaultPageTransition = "slide" ; if ( $ . mobile . maxScrollForTransition ) { $ . mobile . maxScrollForTransition = function ( ) { return 0 ; } ; } }
function ( plugin , spec ) { if ( ! this . buttonSpecs [ plugin ] ) { this . buttonSpecs [ plugin ] = [ ] ; } this . buttonSpecs [ plugin ] . push ( spec ) ; }
function ( data ) { showScene ( 'win' ) ; if ( data == - 1 ) { showWin ( 'boss' ) ; } else { showWin ( ~ ~ data - 1 ) ; } }
function ( text ) { text = this . clearText ( text ) ; return this . trim ( text . split ( /[|$|\b|\(|\)|[ \s\xA0'\.,:"]+/gi ) ) ; }
function ( data ) { if ( typeof ( data ) === 'string' ) wikis = JSON . parse ( data ) ; else wikis = data ; d . resolve ( wikis ) ; }
function ( ) { error = W3S . Core . Ajax . fieldValidation ( $ ( this ) , conf . tags ) ; if ( error ) { $ ( this ) . addClass ( conf . errCls ) ; return false ; } }
function ( ) { return '<div id="main">\n  <div class="container-fluid">\n\n    {{#if databases}}\n    <table class="table table-striped table-databases">\n      <thead>\n      <tr>\n        <th>Name</th>\n        <th>Template</th>\n      </tr>\n      </thead>\n      <tbody>\n        {{#each databases}}\n        <tr>\n          <td class="name">\n            <a title="{{db}}/{{name}}" href="{{url}}">\n              {{#if dashicon}}\n              <img class="icon" alt="Icon" src="{{dashicon}}" />\n              {{else}}\n              <img class="icon" alt="Icon" src="img/icons/default_22.png" />\n              {{/if}}\n            </a>\n            <a title="{{db}}/{{name}}" href="{{url}}">\n              {{db}}\n            </a>\n          </td>\n          <td class="template">\n            {{#if title}}{{title}}{{else}}{{name}}{{/if}}\n          </td>\n        </tr>\n        {{/each}}\n      </tbody>\n    </table>\n    {{/if}}\n\n  </div>\n</div>\n\n<div class="admin-bar visible-admin">\n  <div class="admin-bar-inner">\n    <div id="admin-bar-status"></div>\n    <div id="admin-bar-controls">\n      <a id="databases-add-btn" class="btn btn-success" href="#">\n        <i class="icon-plus-sign"></i> Add new\n      </a>\n      <a id="databases-refresh-btn" class="btn btn-primary" href="#">\n        <i class="icon-refresh"></i> Refresh list\n      </a>\n    </div>\n  </div>\n</div>\n' ; }
function stream ( ) { if ( done ) return ; cleanup ( ) ; if ( fn ) self . on ( 'finish' , fn ) ; }
function ( arg ) { set ( self . source === null ? arg : arg [ self . source ] , idx ) ; } , failure , utility . merge ( { withCredentials : self . credentials }
function ( i ) { if ( typeof args . data [ i ] === "object" ) delete args . data [ i ] ; }
function ( ) { return exports . isCalled . call ( this , 0 , 1 ) }
function fail ( con , oCon ) { var err = new Error ( 'contract failed: ' + abbrev ( con ) + ' *must* be called before ' + abbrev ( oCon ) + ' but it was called after' ) err . type = 'contract' throw err }
function ( result ) { if ( ! result || ! result . selected ) { return ; } newRelations . push ( { source : source , target : result , type : "affects" , "one-way" : false } ) ; }
function ( particle , particleIdx ) { particle . set ( 'friction' , { value : value } ) ; }
function ( ) { var _ref ; if ( ( _ref = partyCur . contact ) == null ) { partyCur . contact = [ ] ; } return partyCur . contact . push ( contactCur ) ; }
function ( attrs ) { var _ref ; if ( ( _ref = codeListCur . codes ) == null ) { codeListCur . codes = { } ; } return codeListCur . codes [ codeCur . id ] = codeCur ; }
function ( attrs ) { var _ref ; if ( ( _ref = dsdCur . dimensionDescriptor ) == null ) { dsdCur . dimensionDescriptor = { } ; } return dsdCur . dimensionDescriptor [ comp . id ] = comp ; }
function ( attrs ) { var _ref ; if ( ( _ref = dsdCur . dimensionDescriptor ) == null ) { dsdCur . dimensionDescriptor = { } ; } return dsdCur . dimensionDescriptor [ comp . id ] = comp ; }
function ( attrs ) { var _ref ; if ( ( _ref = dsdCur . attributeDescriptor ) == null ) { dsdCur . attributeDescriptor = { } ; } return dsdCur . attributeDescriptor [ comp . id ] = comp ; }
function ( attrs ) { var _ref ; if ( ( _ref = attributeCur . AttachmentMeasure ) == null ) { attributeCur . AttachmentMeasure = [ ] ; } return attributeCur . AttachmentMeasure . push ( this . stringBuffer ) ; }
function ( attrs ) { var _ref ; if ( ( _ref = comp . attributeRelationship ) == null ) { comp . attributeRelationship = { } ; } return comp . attributeRelationship . group = this . stringBuffer ; }
function ( attrs ) { var _ref ; if ( ( _ref = dsdCur . dimensionGroupDescriptor ) == null ) { dsdCur . dimensionGroupDescriptor = { } ; } return dsdCur . dimensionGroupDescriptor [ comp . id ] = comp ; }
function ( attrs ) { var _ref ; if ( ( _ref = comp . dimensions ) == null ) { comp . dimensions = [ ] ; } return comp . dimensions . push ( this . stringBuffer ) ; }
function ( attrs ) { var _ref ; if ( ( _ref = groupCur . groupKey ) == null ) { groupCur . groupKey = { } ; } return groupCur . groupKey [ attrs . id ] = attrs . value ; }
function ( attrs ) { var _ref ; if ( ( _ref = groupCur . attributes ) == null ) { groupCur . attributes = { } ; } return groupCur . attributes [ attrs . id ] = attrs . value ; }
function ( attrs ) { var _ref ; if ( ( _ref = seriesCur . attributes ) == null ) { seriesCur . attributes = { } ; } return seriesCur . attributes [ attrs . id ] = attrs . value ; }
function ( ) { var _ref ; if ( ( _ref = partyCur . contact ) == null ) { partyCur . contact = [ ] ; } return partyCur . contact . push ( contactCur ) ; }
function ( attrs ) { var _ref ; if ( ( _ref = headerCur . receiver ) == null ) { headerCur . receiver = { } ; } return headerCur . receiver [ attrs . id ] = partyCur ; }
function ( attrs ) { var _ref ; if ( ( _ref = headerCur . structure ) == null ) { headerCur . structure = { } ; } return headerCur . structure [ structureCur . structureID ] = structureCur ; }
function ( attrs ) { var _ref ; if ( ( _ref = conceptCur . coreRepresentation ) == null ) { conceptCur . coreRepresentation = { } ; } return conceptCur . coreRepresentation . textFormat = attrs ; }
function ( attrs ) { var _ref ; if ( ( _ref = componentCur . dimension ) == null ) { componentCur . dimension = [ ] ; } return componentCur . dimension . push ( attrs . id ) ; }
function ( attrs ) { var _ref ; if ( ( _ref = componentCur . attributeRelationship ) == null ) { componentCur . attributeRelationship = { } ; } return componentCur . attributeRelationship . group = attrs . id ; }
function ( attrs ) { var _ref ; if ( ( _ref = componentCur . attributeRelationship ) == null ) { componentCur . attributeRelationship = { } ; } return componentCur . attributeRelationship . primaryMeasure = attrs . id ; }
function ( attrs ) { var _ref ; if ( ( _ref = codeListCur . codes ) == null ) { codeListCur . codes = { } ; } return codeListCur . codes [ codeCur . id ] = codeCur ; }
function ( ) { var _ref ; if ( ( _ref = conceptSchemeCur . concepts ) == null ) { conceptSchemeCur . concepts = { } ; } return conceptSchemeCur . concepts [ conceptCur . id ] = conceptCur ; }
function ( ) { var _ref ; if ( ( _ref = dataStructureCur . dimensionDescriptor ) == null ) { dataStructureCur . dimensionDescriptor = { } ; } return dataStructureCur . dimensionDescriptor [ componentCur . id ] = componentCur ; }
function ( ) { var _ref ; if ( ( _ref = dataStructureCur . dimensionDescriptor ) == null ) { dataStructureCur . dimensionDescriptor = { } ; } return dataStructureCur . dimensionDescriptor [ componentCur . id ] = componentCur ; }
function ( ) { var _ref ; if ( ( _ref = dataStructureCur . attributeDescriptor ) == null ) { dataStructureCur . attributeDescriptor = { } ; } return dataStructureCur . attributeDescriptor [ componentCur . id ] = componentCur ; }
function ( ) { $ . getJSON ( USERS_BY_DAY_STATISTICS_URL , function ( users_by_day ) { lines_chart ( users_by_day , "#users_by_day" ) ; } ) ; $ . getJSON ( TOMATOES_BY_DAY_STATISTICS_URL , function ( tomatoes_by_day ) { lines_chart ( tomatoes_by_day , "#tomatoes_by_day" ) ; } ) ; }
function ( err , data ) { if ( err ) { console . error ( 'tried to tweet: ' + tweet ) ; console . error ( err ) ; process . exit ( 1 ) ; } console . log ( 'tweeted: ' + tweet ) ; }
function ( authenticated ) { if ( authenticated ) { self . publish ( "authentication_success" ) ; } else { self . publish ( "authentication_fail" ) ; tooltip . showTooltip ( "#cannot_authenticate" ) ; } complete ( callback , authenticated ) ; }
function ( ) { unexpectedMessage ( "assertion_generated" ) ; errorCB = expectedError ; xhr . useResult ( "ajaxError" ) ; storage . addEmail ( "registered@testuser.com" , { } ) ; dialogHelpers . getAssertion . call ( controllerMock , "registered@testuser.com" , testHelpers . expectedFailure ) ; }
function ( ) { expectedMessage ( "password_submit" ) ; expectedMessage ( "authentication_success" ) ; dialogHelpers . authenticateUser . call ( controllerMock , "testuser@testuser.com" , "password" , function ( authenticated ) { equal ( authenticated , true , "user is authenticated" ) ; start ( ) ; } ) ; }
function ( ) { errorCB = expectedError ; xhr . useResult ( "ajaxError" ) ; expectedMessage ( "password_submit" ) ; dialogHelpers . authenticateUser . call ( controllerMock , "testuser@testuser.com" , "password" , testHelpers . unexpectedSuccess ) ; }
function ( ) { expectedMessage ( "reset_password_staged" , { email : "registered@testuser.com" } ) ; dialogHelpers . resetPassword . call ( controllerMock , "registered@testuser.com" , "password" , function ( reset ) { ok ( reset , "password reset" ) ; start ( ) ; } ) ; }
function ( msg , info ) { if ( calls [ msg ] ) { throw msg + " triggered more than once" ; } calls [ msg ] = info || true ; cb && cb . apply ( null , arguments ) ; }
function ( message ) { return message in calls ; }
function ( message , expectedFields ) { ok ( message in calls , message + " was triggered" ) ; if ( expectedFields ) this . testObjectValuesEqual ( calls [ message ] , expectedFields ) ; }
function ( message , expectedFields ) { start = function ( origStart ) { TestHelpers . testTriggered ( message , expectedFields ) ; start = origStart ; start ( ) ; } . bind ( null , start ) ; register ( message ) ; }
function ( ) { return 'gh-token*1' ; }
function ( ) { event . trigger ( "AppResume" ) ; }
function ( ) { event . trigger ( "AppPause" ) ; }
function ( ) { var cb = jasmine . createSpy ( ) ; target . addEventListener ( "pause" , cb ) ; event . trigger ( "AppPause" , null , true ) ; expect ( cb ) . toHaveBeenCalled ( ) ; }
function ( ) { var cb = jasmine . createSpy ( ) ; target . addEventListener ( "pause" , cb ) ; event . trigger ( "AppPause" , null , true ) ; expect ( cb ) . toHaveBeenCalled ( ) ; }
function ( ) { var cb = jasmine . createSpy ( ) ; target . addEventListener ( "resume" , cb ) ; event . trigger ( "AppResume" , null , true ) ; expect ( cb ) . toHaveBeenCalled ( ) ; }
function ( e ) { if ( e . status === 200 ) { GM_openInTab ( 'http://exhentai.org/?f_shash=' + sha1Hash ( e . responseText ) + '&fs_similar=1&fs_exp=1' , false , true ) ; } else { GM_log ( 'Error: ' + e . statusText ) ; } }
function ( data ) { console . log ( data ) ; $ ( "#winner" ) . append ( "<img class='userImg' src='" + data . url + "'>" ) ; $ ( "#status" ) . text ( "Winner above!" ) ; }
function ( ) { raises ( _ . template ( '<% if x %>' ) ) ; }
function ( that ) { that . db . query ( { method : 'POST' , path : '_compact' , body : { } } , function ( err ) { if ( err ) console . log ( 'Failed to compact -- ' + err ) ; } ) ; }
function ( index , item ) { self . _renderItemData ( ul , item ) ; }
function ( ul , item ) { return this . _renderItem ( ul , item ) . data ( "ui-autocomplete-item" , item ) ; }
function ( obj ) { return toString . call ( obj ) === '[object Date]' ; }
function ( value ) { if ( value === null ) { return '' ; } return value . toString ( ) . replace ( BeJS . injectionRegExp , "\\$1" ) ; }
function ( ) { be . shownAsTime ( 'string' ) . should . equal ( '00:00:00' ) }
function ( ) { feri . navGroup . close ( feri . iconWin , { animated : true } ) ; feri . dashboardActive = true ; }
function ( ) { return ! ! fired ; }
function ( ) { var self = jQuery ( this ) ; self . triggerHandler ( "setData" + part , parts ) ; jQuery . data ( this , key , value ) ; self . triggerHandler ( "changeData" + part , parts ) ; }
function ( name , value ) { return jQuery . access ( this , jQuery . attr , name , value , arguments . length > 1 ) ; }
function ( name , value ) { return jQuery . access ( this , jQuery . prop , name , value , arguments . length > 1 ) ; }
function ( event ) { event . _submit_bubble = true ; }
function ( types , selector , data , fn ) { return this . on ( types , selector , data , fn , 1 ) ; }
function ( elem ) { return jQuery . sibling ( ( elem . parentNode || { } ) . firstChild , elem ) ; }
function ( elem , computed ) { if ( computed ) { var ret = curCSS ( elem , "opacity" ) ; return ret === "" ? "1" : ret ; } else { return elem . style . opacity ; } }
function ( p ) { return p ; }
function ( p ) { return ( - Math . cos ( p * Math . PI ) / 2 ) + 0.5 ; }
function ( json , operands ) { return jpath . exec ( json , operands . slice ( 0 , 2 ) ) != jpath . exec ( json , operands . slice ( 2 ) ) ; }
function ( json , operands ) { return jpath . exec ( json , operands . slice ( 0 , 2 ) ) != jpath . exec ( json , operands . slice ( 2 ) ) ; }
function ( ) { expect ( jpath ( json , '/.handlers.name' ) ) . toEqual ( [ 'messages' , 'folders' , 'settings' ] ) ; }
function ( cy ) { window . cy = cy ; window . $$ = $ . cytoscape ; }
function visibility ( v ) { if ( v != null && typeof v == typeof "" && ( v == "hidden" || v == "visible" ) ) { return v ; } else { } }
function number ( n ) { if ( n != null && typeof n == typeof 1 && ! isNaN ( n ) ) { return n ; } else { } }
function nodeShape ( name ) { var ret = $ . cytoscape ( "renderer" , "svg" , "nodeshape" , name ) ; if ( ret == null ) { } return ret ; }
function lineStyle ( name ) { var ret = $ . cytoscape ( "renderer" , "svg" , "linestyle" , name ) ; if ( ret == null ) { } return ret ; }
function ( i , element ) { if ( element . rscratch ( ) . svgGroup != null ) { self . svgRemove ( element . rscratch ( ) . svgGroup ) ; element . rscratch ( { } ) ; } else { } }
function ( extremisPoint ) { this . extremis = extremisPoint ; if ( extremisPoint != null ) { this . modelReference [ 1 ] = extremisPoint . modelReference ; this . update ( ) ; this . hasExtremis = true ; } }
function onload ( ) { this . onload = empty ; this . onerror = empty ; self . onData ( this . responseText ) ; self . get ( ) ; }
function ( req , res ) { res . local ( 'util' , util ) ; renderCachableView ( req , res , 'forgot.ejs' , { title : 'Forgot Password' , fullpage : false , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( req , res ) { res . local ( 'util' , util ) ; renderCachableView ( req , res , 'verify_email_address.ejs' , { title : 'Complete Registration' , fullpage : true , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( assertion ) { if ( callback ) { callback ( assertion ) ; callback = null ; } }
function ( err , html ) { if ( err ) { console . log ( err ) ; } else { $ ( '#view-root' ) . html ( html ) ; } }
function ( ) { dust . compile ( this . innerHTML , this . getAttribute ( 'data-name' ) ) ; }
function ( err , html ) { if ( err ) { console . log ( err ) ; } else { $ ( '#view-root' ) . html ( html ) ; } }
function ( ) { dust . compile ( this . innerHTML , this . getAttribute ( 'data-name' ) ) ; }
function ( err , buffer ) { if ( err ) { self . send ( 500 ) ; } else { self . data = buffer ; self . dispatch ( ) ; } }
function ( parentName ) { var singularName = parentName . substring ( 0 , parentName . length - 1 ) ; return parentName + ':' + req . params [ singularName + 'Id' ] ; }
function ( parentName ) { var singularName = parentName . substring ( 0 , parentName . length - 1 ) ; return parentName + '/:' + singularName + 'Id' ; }
function ( ) { this . $el . html ( this . template ( this . options . component . toJSON ( ) ) ) ; return this ; }
function ( event ) { event . preventDefault ( ) ; this . layoutView . trigger ( 'applyElementEdits' ) ; }
function ( theme , event ) { $ ( '.layer-popover' ) . hide ( ) ; }
function ( ) { var found = self . layerSearchIndex [ self . searchTerm ( ) ] ; self . openThemes . push ( found . theme ) ; found . layer . activateLayer ( ) ; }
function ( attrs , opts ) { var model = new this . vie . Literal ( ) ; _ . extend ( model , { } ) ; return model . set ( attrs ) ; }
function ( attrs , opts ) { var model = new this . vie . Literal ( ) ; _ . extend ( model , { } ) ; return model . set ( attrs ) ; }
function ( type , editor ) { if ( this . options . editorOptions [ editor ] === undefined && editor !== null ) { throw new Error ( "No editor " + editor + " configured" ) ; } this . options . editorWidgets [ type ] = editor ; }
function ( property , editor ) { if ( this . options . editorOptions [ editor ] === undefined && editor !== null ) { throw new Error ( "No editor " + editor + " configured" ) ; } this . options . editorWidgets [ property ] = editor ; }
function ( e ) { this . init ( e ) ; var instance = this ; $ ( window ) . resize ( function ( ) { instance . init ( ) ; } ) ; }
function ( ) { var tag = $ ( this ) . val ( ) , string = textStyle . paragraph ( tag , $span ) ; if ( string ) $span . html ( string ) ; }
function ( ) { if ( typeof ( Uint8Array ) !== "undefined" ) return new Uint8Array ( resultBytes ) ; else return resultBytes ; }
function ( rawText ) { var result = eval ( rawText ) ; return result ; }
function ( testVal ) { var index = fluid . model . transform . matchValueMapperFull ( testVal , expander , expandSpec ) ; return index === - 1 ? null : expandSpec . options [ index ] ; }
function ( feature ) { extBasename = _idLookup [ feature . id ] ; if ( extBasename ) { extensions . push ( extBasename ) ; } else { throw localize . translate ( "EXCEPTION_FEATURE_NOT_FOUND" , feature ) ; } }
function ( ) { if ( jQuery ( this ) . attr ( 'class' ) !== null && jQuery ( this ) . attr ( 'class' ) . length === 0 ) { jQuery ( this ) . removeAttr ( 'class' ) ; } }
function ( ) { setTimeout ( function ( ) { referenceError } , 0 ) }
function ( ) { referenceError }
function ( ) { caughtError = false ; try { referenceError } catch ( e ) { caughtError = true ; } }
function ( ) { expect ( error . toString ( ) ) . toEqual ( "ReferenceError: Can't find variable: zomg" ) ; phantom . onError = phantom . defaultErrorHandler ; }
function switchToSecure ( ) { logIf ( 1 , "Secure connection started" ) ; conn . socket = cleartext ; socket = cleartext ; socket . addListener ( 'data' , dataListener ) ; conn . secure = true ; }
function ( ) { return this . _dirty ; }
function ( event ) { event . preventDefault ( ) ; var excerpt = $ ( this ) . closest ( '.post-excerpt' ) ; wantsToComment = true ; excerpt . find ( '.show-more' ) . click ( ) ; }
function ( msg ) { this . getEl ( ) . mask ( msg ) ; }
function ( ) { this . getEl ( ) . unmask ( ) ; }
function ( packet ) { var err = this . _packetToError ( packet ) ; err . fatal = true ; this . end ( err ) ; }
function EditPostCtrl ( $scope , $log , $routeParams , PostSrv , PostRes ) { $log . info ( 'EditPostCtrl' ) ; $scope . PostSrv = PostSrv ; $scope . post = PostRes . get ( { id : $routeParams . postId } ) ; }
function ( cb ) { return PostRes . update ( { id : this . _id } , angular . extend ( { } , this , { _id : undefined } ) , cb ) ; }
function ( post ) { PostSrv . cache . remove ( getCacheKey ( ) ) ; post . destroy ( function ( ) { $location . path ( 'post/' ) ; } ) ; }
function ( result ) { $ ( rootNode ) . empty ( ) ; appendBlogPost ( rootNode , result ) ; $ ( ) . toastmessage ( 'showNoticeToast' , 'some message here' ) ; }
function ( doc , req ) { return { title : 'New Logbook Entry' , content : templates . render ( 'logbook_new.html' , req , { } ) } ; }
function ( doc , req ) { return { title : 'Logbook Entry Saved' , content : templates . render ( 'logbook_saved.html' , req , { } ) } ; }
function ( doc , req ) { return { title : 'Logbook Entry Deleted' , content : templates . render ( 'logbook_deleted.html' , req , { } ) } ; }
function ( doc , req ) { doc . title = 'FEC Test' ; return { title : doc . title , content : templates . render ( 'fec_test.html' , req , doc ) } ; }
function ( doc , req ) { doc . title = 'CALD Test' ; return { title : doc . title , content : templates . render ( 'cald_test.html' , req , doc ) } ; }
function ( doc , req ) { doc . title = 'See Reflections Test' ; return { title : doc . title , content : templates . render ( 'see_refl.html' , req , doc ) } ; }
function ( doc , req ) { doc . title = 'CGT Test' ; return { title : doc . title , content : templates . render ( 'cgt_test.html' , req , doc ) } ; }
function ( doc , req ) { doc . title = 'FIFO Test' ; return { title : doc . title , content : templates . render ( 'fifo_test.html' , req , doc ) } ; }
function ( doc , req ) { doc . title = 'Motherboard Stability Test' ; return { title : doc . title , content : templates . render ( 'mb_stability_test.html' , req , doc ) } ; }
function ( doc ) { if ( doc . config && doc . type != 'board' ) { doc . config . db . forEach ( function ( db ) { emit ( db . db_id , 1 ) ; } ) ; } }
function ( doc ) { if ( doc . config && doc . type != 'board' ) { emit ( doc . type , 1 ) ; } }
function ( doc ) { if ( doc . type == 'tag' ) { emit ( doc . board , [ doc . created , doc . status , 1 ] ) ; } }
function ( ) { map_image = new Image ( ) ; map_image . src = background_image_path ; }
function ( error ) { if ( error ) { console . log ( error . message ) ; console . log ( error . stack ) ; console . log ( util . inspect ( error ) ) ; return ; } }
function ( ) { this . transport . on ( 'error' , function ( ) { debug ( 'error triggered by discarded transport' ) ; } ) ; clearTimeout ( this . pingIntervalTimer ) ; clearTimeout ( this . pingTimeoutTimer ) ; }
function ( err , results ) { if ( err ) { return callback ( err ) ; } callback ( null ) ; }
function ( err , result ) { if ( err ) { return next ( err ) ; } console . log ( "nodes deleted" ) ; res . end ( 'TO DO change to JSON success response' ) ; }
function ( d , i ) { return i }
function ( _ ) { if ( ! arguments . length ) return getDX ; getDX = _ ; return chart ; }
function ( req , res ) { req . logout ( ) ; req . session . destroy ( ) ; res . json ( { ok : true } ) ; }
function ( exes ) { cb ( exes . length > 0 ) }
function ( rax , ray ) { this . rotationX = rax ; this . rotationY = ray ; this . dirty = true ; return this ; }
function ( rax , ray ) { this . rotationX = rax ; this . rotationY = ray ; this . dirty = true ; return this ; }
function ( ) { $ ( this ) . dialog ( "close" ) ; $ ( "tr#discoSubmitRow input:first" ) . trigger ( "click" ) ; }
function ( e ) { valueOf ( testRun , e . success ) . shouldBeTrue ( ) ; valueOf ( testRun , e . error ) . shouldBeFalse ( ) ; Cloud . Users . logout ( loggedOut2 ) ; }
function ( e ) { valueOf ( testRun , e . success ) . shouldBeTrue ( ) ; valueOf ( testRun , e . error ) . shouldBeFalse ( ) ; Cloud . Users . logout ( loggedOut1 ) ; }
function handleDownloadSuccess ( e ) { this . startDownload ( e . invs [ 0 ] . hash , null , e . conn ) ; }
function ( ) { if ( $j . inArray ( assetURL , virtualScripts ) === - 1 ) { virtualScripts . push ( assetURL ) ; loadJS ( ++ i ) ; } }
function ( result ) { if ( result === undefined ) { result = localStorage . getItem ( "defaultZoomLevel" ) ; } chrome . browserAction . setBadgeText ( { text : result } ) ; }
function init ( ) { console . log ( "This sentence should be the first of three" ) console . error ( "This one the second of the three" ) console . info ( "And this one the last of all three" ) }
function ( volume ) { this . mute . hidden = volume ; }
function fireVolumeChangeEvent ( ) { var evt = document . createEvent ( 'CustomEvent' ) ; evt . initCustomEvent ( 'volumechange' , true , false , { currentVolume : currentVolume } ) ; window . dispatchEvent ( evt ) ; }
function ( volume ) { this . mute . hidden = volume ; }
function continuepoly ( ) { window . location = "16.php" ; }
function continuehex ( ) { window . location = "10.php" ; }
function ( v ) { var chain_tail = rechain ( v , target_type ) ; return chain_tail . map ( function ( tail_t ) { return [ [ T , val ] ] . concat ( tail_t ) ; } ) ; }
function ( err , result ) { expect ( err ) . to . eql ( { errors : { "foo" : "must not be bar" } } ) ; done ( ) ; }
function ( ) { this . _currentX = - this . _step * ( -- this . _index ) ; this . _correct ( ) ; }
function ( req , res ) { return req . headers [ 'x-forwarded-proto' ] || 'http' ; }
function ( path ) { return app . dynamicViewHelpers . scheme ( req , res ) + app . dynamicViewHelpers . url_no_scheme ( req , res ) ( path ) ; }
function ( path ) { return '://' + app . dynamicViewHelpers . host ( req , res ) + ( path || '' ) ; }
function ( context ) { if ( context == undefined ) context = null ; var module = ( $ ( '.__fuel_module_uri__' ) . length ) ? $ ( '.__fuel_module_uri__' ) . val ( ) : null ; return module ; }
function ( val , axis ) { return humanize ( val , convert_from_bytes ) ; }
function mustNotBeAdmin ( ) { return ! mustBeAdmin ( ) ; }
function updateConfig ( request , response ) { config_response = response if ( config_response [ 'user_config' ] [ "wss" ] == "yes" ) { $ ( 'table#config_table input#wss_checkbox' ) . attr ( 'checked' , 'checked' ) ; } ; }
function dashboardQuotasHTML ( ) { }
function ( ) { var option = $ ( 'option:selected' , this ) ; var uname = getValue ( option . attr ( 'elem_id' ) , 1 , 2 , dataTable_vNetworks ) ; $ ( 'input#NETWORK_UNAME' , section_networks ) . val ( uname ) ; }
function ( ) { if ( this . USER . ID == uid ) dashboardQuotasHTML ( this . USER ) ; user_list_array . push ( userElementArray ( this ) ) ; }
function ( val , axis ) { return humanize_size ( val , true ) ; }
function ( label , series ) { return label + " - " + humanize_size ( series . data [ 0 ] [ 0 ] , true ) }
function draw ( ctx ) { ctx . fillStyle = '#900' ; ctx . font = '100pt PressStart2PRegular' ; ctx . textAlign = 'center' ctx . fillText ( text , x , y ) ; }
function ( ) { var errmsg = getRequest . error && getRequest . error . name ; if ( errback ) errback ( errmsg ) ; else console . error ( 'DeviceStorageDB.getFile:' , errmsg ) ; }
function = function ( fn ) { var key , value ; for ( key in this ) { value = this [ key ] ; if ( value === fn ) { return key ; } } }
function ( ) { this . select ( ) ; }
function ( ) { this . select ( ) ; }
function suggest_foot ( label ) { label = label ? label : 'その他のハイパーバイザ' ; return $ ( '<option />' ) . val ( 'OTHER' ) . text ( label ) ; }
function suggest_ip ( dom0_ip , exclude , cb ) { var params = { 'ip' : dom0_ip , 'ex[]' : exclude } ; $ . ajax ( { url : '/ybz/ipaddress/suggest.json' , data : params , success : cb } ) ; }
function ( ) { console . log ( $ ( '#opponent-name' ) . val ( ) ) socket . emit ( 'postChallenge' , { opponentName : $ ( '#opponent-name' ) . val ( ) } ) ; }
function ( err , user ) { if ( err ) return self . error ( ) ; session . userID = user . _id ; self . redirect ( '/lobby' ) ; }
function joinWaitingPool ( userID , data ) { waitingPool . push ( userID ) ; }
function ( error , data ) { if ( ++ counter < 3 ) { command ( 'retry' , 'abort' ) ; } else { done ( ) ; } }
function ( ) { res . end ( ) ; }
function ( ) { fn ( context , function ( res ) { cur_waiter . resolve ( id , res ) ; } ) ; }
function ( ) { this . loadimg ( ) ; this . loadcanvas ( ) ; this . drawimg ( ) ; this . color = '#ff0000' ; this . pen = 0 ; }
function ( stopfx ) { switch ( stopfx ) { case 0 : { break ; } case 1 : { this . laser . pause ( ) ; this . laserPlaying = false ; break ; } } }
function ( jqXHR ) { if ( errorHandler !== null ) { errorHandler . handleError ( jqXHR . responseText , jqXHR . status ) ; } else { $ ( 'body' ) . html ( jqXHR . responseText ) ; } }
function ( jqXHR ) { if ( errorHandler !== null ) { errorHandler . handleError ( jqXHR . responseText , jqXHR . status ) ; } else { $ ( 'body' ) . html ( jqXHR . responseText ) ; } }
function ( ) { window . location = '/auth/logout' ; }
function ( ) { $ ( '#authenticated' ) . addClass ( 'hidden' ) ; $ ( '#logged-out' ) . removeClass ( 'hidden' ) ; }
function ( ) { $ ( '#wwwhisper-iframe' , window . parent . document ) . remove ( ) ; }
function ( value ) { return value . split ( ':' ) . splice ( 1 ) . join ( ':' ) ; }
function ( value ) { return value . split ( ':' ) . splice ( 1 ) . join ( ':' ) ; }
function ( payload ) { payload . event . stopPropagation ( ) ; dragStartX = view . getPosition ( ) . x - payload . x ; dragStartY = view . getPosition ( ) . y - payload . y ; }
function ( payload ) { payload . event . stopPropagation ( ) ; var newX = payload . x + dragStartX , newY = payload . y + dragStartY ; view . setPosition ( newX , newY ) ; }
function EventHandler ( view , options ) { return Bindable ( view . bus || options . bus ) ; }
function ( ) { init ( ) ; load ( ) ; resizeContent ( ) ; }
function ( event ) { init ( ) ; resizeContent ( ) ; }
function ( point ) { return point . Y * this . _world . MapWidth + point . X ; }
function ( ) { if ( options [ "success_url" ] . length > 0 ) { document . location = options [ "success_url" ] ; } if ( typeof options [ "success_callback" ] == 'function' ) { options [ "success_callback" ] . apply ( ) ; } }
function ( ) { if ( typeof options [ "error_callback" ] == 'function' ) { options [ "error_callback" ] . apply ( ) ; } }
function ( ) { $gallery . masonry ( { itemSelector : '.item' , columnWidth : 240 } ) ; }
function repaint ( ) { MessageManager . getMessages ( ThreadUI . renderMessages ) ; }
function ( prefix , className , text ) { var firstClass = className . split ( ' ' , 1 ) [ 0 ] ; return $ ( '<button id="' + prefix + firstClass + '" ' + 'type="button" class="btn edit-geometry-small geo-edit ' + className + '">' + text + '</button>' ) ; }
function ( idx ) { return idx < this . length ; }
function ( success ) { if ( success === false ) { $ . cookie ( 'userid' , '' ) ; addMessage ( 'Choose a name using "/nick nickname".' , 'notification' ) ; } addMessage ( 'After that, you can view rooms using "/rooms" and join a room using "/join roomname".' , 'notification' ) ; }
function ( ) { return self . chart . tooltip . style ( "top" , ( d3 . event . pageY - 10 ) + "px" ) . style ( "left" , ( d3 . event . pageX + 10 ) + "px" ) ; }
function ( ) { return self . chart . tooltip . style ( "top" , ( d3 . event . pageY - 10 ) + "px" ) . style ( "left" , ( d3 . event . pageX + 10 ) + "px" ) ; }
function ( ) { this . $ . categoryName . setValue ( "" ) ; this . $ . addCategory . hide ( ) ; this . reflow ( ) ; }
function ( inSender , inEvent ) { this . $ . panels . setIndex ( 1 ) ; this . $ . subactivity . onViewed ( this . activitiesArray [ inEvent . index ] ) ; }
function ( ) { this . $ . employeeName . setValue ( "" ) ; this . $ . addEmployee . hide ( ) ; this . reflow ( ) ; }
function ( ) { window . caseList = checkCases ( ) ; }
function ( ) { fn . apply ( self , args ) ; }
function contentLink ( e , link ) { content_request . load ( e , link . getAttribute ( 'href' ) ) ; }
function ( column ) { return column . source [ 0 ] . replace ( column . range + '.' , '' ) ; }
function ( dest ) { util . puts ( "building..." ) ; dest = dest || prefix + ".js" ; build . build ( dest ) ; util . puts ( "> " + dest ) ; }
function ( err , res ) { if ( err ) util . puts ( "error retreiving data from " + couchUrl + ": '" + err + "'" ) ; else { var data = _ ( res . rows ) . pluck ( "doc" ) callback ( data ) ; } }
function ( err , res ) { if ( err ) util . puts ( "error sending report to " + option . report ) ; else util . puts ( "saved report " + options . report + "/" + res . id ) ; }
function unlink ( container ) { container = $ ( container ) ; container . off ( elementChangeStr , elemChangeHandler ) ; clean ( container [ 0 ] ) ; }
function ( ) { propertyChangeHandler . apply ( { tgt : target , src : source , attr : attr || defaultAttr ( target , TRUE ) , fn : linkFn , view : view } , arguments ) ; }
function ( node ) { return $view ( this [ 0 ] ) ; }
function ( e ) { return $views . debugMode ? ( "Error: " + ( e . message || e ) ) + ". " : '""' ; }
function $templates ( name , tmpl ) { return addToStore ( this , $templates , name , tmpl , compile ) ; }
function error ( message ) { if ( $views . debugMode ) { throw new $views . Error ( message ) ; } }
function extendStore ( storeName ) { if ( parent [ storeName ] ) { tmpl [ storeName ] = $extend ( $extend ( { } , parent [ storeName ] ) , options [ storeName ] ) ; } }
function ( el ) { return friends . indexOf ( el . fb ) === - 1 ; } ) . sort ( function ( ) { return 0.5 - Math . random ( ) }
function ( ) { $ ( this ) . prop ( 'checked' , false ) ; }
function ( ) { localStorage . removeItem ( "username" ) ; Utils . setCookie ( "username" , undefined , - 365 ) ; Utils . setCookie ( "token" , undefined , - 365 ) ; window . location . replace ( "/index.html" ) }
function ( ) { groups . eq ( 0 ) . slideDown ( 'fast' ) ; }
function ( ) { groups . slice ( 1 ) . slideDown ( 'fast' ) ; }
function ( error ) { new Alert ( ) . error ( error ) ; }
function ( error ) { new Alert ( ) . error ( error ) ; }
function ( error ) { instanceServicoTable . servicos = [ ] ; new Alert ( ) . error ( error ) ; }
function rejected ( error ) { if ( typeof callback . error == 'function' ) { callback . error ( error ) ; } }
function ( resource ) { if ( arguments . length == 0 ) resource = module ; callback ( resource ) ; }
function ( absId , require , loaded , config ) { require ( [ absId ] , loaded , loaded . error ) ; }
function ( o ) { cache [ name ] = o ; callback ( o ) ; }
function ( resourceName , req , callback , config ) { fetchText ( req [ 'toUrl' ] ( resourceName ) , callback , callback [ 'error' ] || error ) ; }
function ( data ) { $ ( "#document" ) . html ( Mustache . render ( template , data ) ) ; $ ( "#document .tablesorter" ) . tablesorter ( { sortList : [ [ 1 , 1 ] ] } ) ; }
function ( ) { a = wax . attribution ( ) ; a . content ( tilejson . attribution ) ; a . element ( ) . className = 'map-attribution map-mm' ; return this ; }
function ( ) { a = wax . attribution ( ) ; a . content ( tilejson . attribution ) ; a . element ( ) . className = 'map-attribution map-g' ; return this ; }
function ( ) { container = document . createElement ( 'div' ) ; container . className = 'map-attribution' ; return this ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function ( ) { a = wax . attribution ( ) ; a . content ( tilejson . attribution ) ; a . element ( ) . className = 'map-attribution map-mm' ; return this ; }
function ( ) { container = document . createElement ( 'div' ) ; container . className = 'map-attribution' ; return this ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function ( ) { a = wax . attribution ( ) ; a . content ( tilejson . attribution ) ; a . element ( ) . className = 'map-attribution map-g' ; return this ; }
function ( ) { container = document . createElement ( 'div' ) ; container . className = 'map-attribution' ; return this ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function ( ) { container = document . createElement ( 'div' ) ; container . className = 'map-attribution' ; return this ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function ( ) { a = wax . attribution ( ) ; a . content ( tilejson . attribution ) ; a . element ( ) . className = 'map-attribution map-mm' ; return this ; }
function ( map ) { a = document . createElement ( 'a' ) ; a . className = 'map-fullscreen' ; a . href = '#fullscreen' ; a . innerHTML = 'fullscreen' ; bean . add ( a , 'click' , click ) ; return this ; }
function ( ) { container = document . createElement ( 'div' ) ; container . className = 'map-attribution' ; return this ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function getTooltip ( feature ) { var tooltip = document . createElement ( 'div' ) ; tooltip . className = 'map-tooltip map-tooltip-0' ; tooltip . innerHTML = feature ; return tooltip ; }
function ( ) { a = wax . attribution ( ) ; a . content ( tilejson . attribution ) ; a . element ( ) . className = 'map-attribution map-mm' ; return this ; }
function ( map ) { a = document . createElement ( 'a' ) ; a . className = 'map-fullscreen' ; a . href = '#fullscreen' ; a . innerHTML = 'fullscreen' ; bean . add ( a , 'click' , click ) ; return this ; }
function ( ) { error = W3S . Core . Ajax . fieldValidation ( $ ( this ) , conf . tags ) ; if ( error . length ) { $ ( this ) . addClass ( conf . errCls ) ; return error ; } }
function ( data ) { console . log ( data ) ; }
function ( ) { console . log ( 'start' ) ; }
function ( ) { socket . destroy ( ) ; }
function ( data ) { console . log ( data ) ; }
function ( socket ) { socket . send ( message1 ) ; socket . ondata ( message2 , function ( data ) { console . log ( data ) ; } ) ; }
function ( ) { var outbound = nss ( ) ; outbound . ondata ( message1 , function ( ) { outbound . send ( message2 , { "foo" : "bar" } ) ; } ) ; outbound . connect ( 6785 ) ; }
function destroy ( ) { this . removeAllListeners ( ) ; try { this . socket . end ( ) ; this . socket . destroy ( ) ; } catch ( err ) { } this . emit ( 'destroy' ) ; }
function ( ) { 'use strict' ; Debug . init ( { gridSelector : '.doc-page' , colors : { blue : '#0ff' , green : 'green' } } ) ; }
function ( pos ) { var locs = locationList ; var i ; for ( i = 0 ; i < pos ; i ++ ) { locs = locs . rest ( ) ; } return locs . first ( ) ; }
function ( ) { if ( this . isSet ( ) ) { return this . toXYZ ( ) . toRGB ( ) ; } }
function ( ) { if ( this . isSet ( ) ) { return this . toXYZ ( ) . toRGBA ( ) ; } }
function ( ) { this . _element . querySelector ( ".montage-InputNumber-plus" ) . innerText = "+" ; this . _element . querySelector ( ".montage-InputNumber-minus" ) . innerText = "-" ; }
function ( ) { this . _element . querySelector ( ".montage-Progress-bar" ) . style [ "width" ] = "50%" ; }
function ( ) { this . element . classList . add ( 'montage-Textarea' ) ; }
function ( ) { this . element . classList . add ( 'montage-Textfield' ) ; this . element . placeholder = this . _placeholder ; }
function ( ) { NativeButton . didSetElement . call ( this ) ; this [ 'class' ] = ( this [ 'class' ] || '' ) + ' montage-Button' ; }
function ( ) { this . _modalDialogMask = document . querySelector ( '.montage-Popup-modal-mask' ) ; this . _modalDialogMask = this . _modalDialogMask || this . _createModalMask ( ) ; this . _modalDialogMask . classList . remove ( 'montage-invisible' ) ; }
function ( ) { this . _element . querySelector ( ".montage-InputNumber-plus" ) . innerText = "+" ; this . _element . querySelector ( ".montage-InputNumber-minus" ) . innerText = "-" ; }
function ( ) { this . element . classList [ this . _adHoc ? 'add' : 'remove' ] ( 'montage-Token--adhoc' ) ; }
function ( ) { this . _element . querySelector ( ".montage-Progress-bar" ) . style [ "width" ] = "50%" ; }
function ( ) { this . element . classList . add ( "montage-ButtonGroup" ) ; }
function ( i , nodeAttr ) { config [ nodeAttr . name ] = nodeAttr . value ; }
function ( ) { element . addClass ( "magnified" ) . find ( ".turtle" ) . addClass ( "magnified" ) . trigger ( "resize" ) ; }
function ( key ) { delete this . observable [ key ] ; delete this . _keyDeps [ key ] ; var val = this . _rawData [ key ] ; delete this . _rawData [ key ] ; return val ; }
function getTags ( callback ) { getReadingList ( function gotReadingList ( error , model ) { if ( error ) { return callback ( error ) ; } callback ( null , extractTags ( model ) ) ; } ) ; }
function ( topLevelPage ) { return topLevelPage && topLevelPages [ topLevelPage . id ] !== null ; }
function buildIndexViewModel ( posts ) { var page = topLevelPages . index ; return new ViewModel ( page . title , page . pageTemplateName ) . extend ( { posts : posts } ) ; }
function buildReadingListViewModel ( readingListItems ) { var page = topLevelPages . reading ; return new ViewModel ( page . title , page . pageTemplateName ) . extend ( { items : readingListItems } ) ; }
function index ( req , res ) { s . getReadingListViewModel ( function ( error , viewModel ) { if ( error ) throw error ; res . render ( viewModel . pageTemplateName , viewModel ) ; } ) ; }
function ( histData ) { history = new History ( ) ; history . done = histData . done ; history . undone = histData . undone ; }
function ( from , to , lineSep ) { return getRange ( clipPos ( from ) , clipPos ( to ) , lineSep ) ; }
function ( x , y ) { if ( x != null ) scroller . scrollLeft = x ; if ( y != null ) scrollbar . scrollTop = y ; updateDisplay ( [ ] ) ; }
function ( ) { updateDisplay ( true , null , lastScrollTop ) ; if ( scrollbar . scrollHeight > lastScrollTop ) scrollbar . scrollTop = lastScrollTop ; }
function ( line ) { if ( ! line . hidden && line . text . length == maxLineLength ) { recomputeMaxLength = true ; return true ; } }
function ( line ) { var l = line . text ; if ( ! line . hidden && l . length > maxLineLength ) { maxLine = l ; maxLineLength = l . length ; maxLineChanged = true ; recomputeMaxLength = false ; } }
function getSelection ( lineSep ) { return getRange ( sel . from , sel . to , lineSep ) ; }
function _setOptions ( sel , opts ) { var data = sel . data ( 'freetrans' ) , divs = data . divs ; data = $ . extend ( data , opts ) ; data . divs = divs ; }
function ( error ) { if ( error ) { console . log ( 'Error:Couldnt connect' , error ) ; setTimeout ( function ( ) { exports . connectSet ( urls ) ; } , 2000 ) ; } else { } }
function ( ) { p = new Flex ( this , opts ) ; $ ( this ) . data ( "flex" , p ) ; }
function ( user ) { me . core . addModel ( 'users' , user ) ; me . invalidate ( ) ; me . select ( user ) }
function ( ) { item . users = null ; me . invalidate ( ) ; }
function ( ) { item . users = null ; me . invalidate ( ) ; }
function ( group ) { me . core . addModel ( 'groups' , group ) ; me . invalidate ( ) ; me . select ( group ) ; }
function ( data ) { console . log ( 'a' ) ; Game . trigger ( Events . CHARACTER_ACTION_SUCCESS , data ) ; }
function ( ) { function filterOutAnonymous ( uiSourceCode ) { return ! ! uiSourceCode . url ; } var uiSourceCodes = WebInspector . workspace . uiSourceCodes ( ) ; return uiSourceCodes . filter ( filterOutAnonymous ) ; }
function ( ) { var sections = [ ] ; var i , sectionContainer , unreviewedCount , reviewedCount ; updateMosaic ( ) ; }
function onScanError ( error ) { scanning = false ; clear ( false ) ; if ( autoscan ) window . setTimeout ( scan , scanRate ) ; }
function wifiConnect ( ) { gWifiManager . associate ( network ) ; gNetworkList . display ( network . ssid , _ ( 'shortStatus-connecting' ) ) ; }
function wifiDisconnect ( ) { gWifiManager . forget ( network ) ; gNetworkList . display ( network . ssid , _ ( 'shortStatus-disconnected' ) ) ; }
function getAddContainer ( idDiv ) { return '<div class="addContainerSpan"><a href="javascript: showAddContainerDialog(\'' + idDiv + '\');" title="' + addContainerMSG + '"><span class="plusBlueIcon"></span>' + addContainerMSG + '</a></div>' ; }
function getRemoveContainer ( idDiv , idContainer ) { return '<div class="removeDiv"><a href="javascript: removeDrawedContainer(\'' + idDiv + '\',\'' + idContainer + '\');" title="' + removeContainerMSG + '"><span class="minusIcon"></span>' + removeContainerMSG + '</a></div>' ; }
function storePinPosition ( offset ) { amplifyStore . store ( 'Aloha.FloatingMenu.pinned' , 'true' ) ; amplifyStore . store ( 'Aloha.FloatingMenu.top' , offset . top ) ; amplifyStore . store ( 'Aloha.FloatingMenu.left' , offset . left ) ; }
function unstorePinPosition ( ) { amplifyStore . store ( 'Aloha.FloatingMenu.pinned' , null ) ; amplifyStore . store ( 'Aloha.FloatingMenu.top' , null ) ; amplifyStore . store ( 'Aloha.FloatingMenu.left' , null ) ; }
function ( cb ) { cb . call ( that , data ) ; }
function ( seg ) { return seg . deleted || ! seg . track . active || seg . startTime > time || seg . endTime < time ; }
function ( ) { return this . heartBeatCount ; }
function ( ) { that . windowFocus = false ; }
function ( ) { return this . chatBoxId ; }
function ( ) { var cookie = 'cb-min' + this . chatBoxId ; var min = AJS . Cookie . read ( cookie ) ; if ( min == "true" ) { return true } else { return false ; } }
function ( ) { that . blink ( ) ; }
function ( ) { $ ( 'li' , selectedUl ) . removeClass ( 'ms-hover' ) ; $ ( this ) . toggleClass ( 'ms-hover' ) ; }
function ( ) { options = { file : 'log.log' } ; appender = new FileAppender ( 'info' , layout , options ) ; expect ( Spy . Appender ) . toHaveBeenCalledWith ( 'info' , layout ) ; }
function ( ) { var layout = new Pattern ( params ) ; expect ( layout . _placeholders . date ( event ) ) . toEqual ( '02/01/1970 01:01:01' ) ; }
function ( ) { var layout = new Pattern ( params ) ; expect ( layout . format ( event ) ) . toEqual ( '[%info%] 02/01/1970 01:01:01: Custom message' ) ; }
function ( err ) { logger . error ( 'Couldn\'t retrieve session for socket. ' + err . stack ) ; socket . disconnect ( ) ; }
function ( ) { new ConsoleAppender ( 0 , layout , options ) ; expect ( Appender ) . toHaveBeenCalled ( ) ; }
function ( ) { if ( that . getTableFromRegistry ( this ) ) { ( new Table ( this , that ) ) . deactivate ( ) ; jQuery ( this ) . attr ( 'id' , null ) ; } }
function ( event ) { that . cleanNumerations ( ) ; if ( that . showNumbers ( ) ) { that . createNumeratedHeaders ( ) ; } }
function ( obj ) { if ( ! obj || $ ( obj ) . length <= 0 ) { return false ; } return $ ( obj ) . find ( 'span[role=annotation]' ) . length > 0 ; }
function ( win ) { win . won . should . be . false ; done ( ) ; }
function ( win ) { win . won . should . be . true ; win . player . should . equal ( 'Reilly' ) ; win . slots . should . eql ( [ 'A1' , 'A2' , 'A3' ] ) ; done ( ) ; }
function ( win ) { win . won . should . be . true ; win . player . should . equal ( 'Declan' ) ; win . slots . should . eql ( [ 'B1' , 'B2' , 'B3' ] ) ; done ( ) ; }
function ( ) { $ ( '#report_list' ) . css ( 'display' , 'inline-block' ) ; $ ( '#report_list' ) . offset ( ) ; $ ( '#report_list' ) . css ( 'display' , 'block' ) ; }
function ( ) { status . empty ( ) ; var percentVal = '0%' ; bar . width ( percentVal ) ; percent . html ( percentVal ) ; }
function ( ) { style . border = '1px solid #9FD4FF' ; }
function ( ) { setup_naming ( ) ; }
function ( err , data ) { if ( data . hits . total !== 0 ) { callback ( data . hits ) ; } else { callback ( undefined ) ; console . log ( "User did not post any comments" ) ; } }
function openEditProject ( obj ) { var id = parseInt ( obj . attr ( "id" ) . substr ( 3 ) ) ; var url = 'getProject?proId=' + id ; openEditWindow ( "#editPro" , url ) ; }
function onGenerateButtonClicked ( event ) { try { var generatedData = generateAddon ( ) ; window . location . href = "data:application/zip;base64," + generatedData ; } catch ( err ) { if ( console ) console . log ( err ) ; } }
function ( player ) { if ( that . ghost ) { that . ghost . moveExact ( that , player . ExactX , player . ExactY ) ; } }
function ( ) { if ( fd [ 0 ] === "string" && /^[$_a-z0-9][a-z0-9]*$/ . test ( fd [ 1 ] ) ) { return x + "." + fd [ 1 ] ; } else { return x + "[" + tfd + "]" ; } }
function ( item ) { return item . getAttribute ( 'class' ) . split ( ' ' ) . indexOf ( "trailblock" ) > - 1 }
function ( ) { $ ( "div.info span.loaded" ) . html ( ++ loaded ) ; $ ( this ) . parents ( "div.wrap" ) . removeClass ( "hide" ) . addClass ( "loaded" ) ; }
function ( ) { var url = "http://domain.com/path/file/0-9].jpg" ; equal ( Fuskr . IsFuskable ( url ) , false ) ; var url = "http://domain.com/path/file/a-z].jpg" ; equal ( Fuskr . IsFuskable ( url ) , false ) ; }
function ( ) { var url = "http://domain.com/path/file/[0-$&].jpg" ; equal ( Fuskr . IsFuskable ( url ) , false ) ; var url = "http://domain.com/path/file/[a-$&].jpg" ; equal ( Fuskr . IsFuskable ( url ) , false ) ; }
function ( ) { var url = "http://domain.com/path/file/[0-45[.jpg" ; equal ( Fuskr . IsFuskable ( url ) , false ) ; var url = "http://domain.com/path/file/[a-z[.jpg" ; equal ( Fuskr . IsFuskable ( url ) , false ) ; }
function ( ) { var url = "http://domain.com/path[0-9]/file.jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain.com/path[a-z]/file.jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain.com/path[0-9]" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain.com/path[a-z]" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain[0-9].com/path/file.jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain[a-z].com/path/file.jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain[0-9].com/path" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain[a-z].com/path" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain.com/path/file[0-9]another[0-9].jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain.com/path/file[a-z]another[a-z].jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain.com/path[0-9]another[0-9]/" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain.com/path[a-z]another[a-z]/" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain.com/path[0-9]another[0-9]" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain.com/path[a-z]another[a-z]" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain[0-9]another[0-9].com/path/file.jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain[a-z]another[a-z].com/path/file.jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain[0-9]another[0-9].com/path" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain[a-z]another[a-z].com/path" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( ) { var url = "http://domain.com/path/file[0-9]another{0}.jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; var url = "http://domain.com/path/file[a-z]another{0}.jpg" ; equal ( Fuskr . IsFuskable ( url ) , true ) ; }
function ( to ) { $ ( 'body' ) . not ( '#logo, h1, h2, h3, h4, h5, h6, #nav, .search-submit, #navigation' ) . css ( 'font-family' , to ) ; }
function ( to ) { $ ( '#logo, h1, h2, h3, h4, h5, h6' ) . css ( 'font-family' , to ) ; }
function SafeBrowse ( ) { }
function ( key ) { return localStorage . getItem ( moduleName + "$" + key ) != null ; }
function ( ) { var value = this . main . value ; if ( this . needPlacing ( ) ) { return '' ; } return value ; }
function ( ) { var el_pos = el . getClientRects ( ) [ 0 ] ; }
function ( json ) { mod . setTimestamp ( json . timestamp ) ; mod . setShowInstances ( json . instances ) ; mod . getSelectedCursors ( ) ; fnCallback ( json ) ; }
function ( ) { cancel ( ) ; if ( currentDeezerTimeout ) { window . clearTimeout ( currentDeezerTimeout ) ; } currentDeezerTimeout = window . setTimeout ( sendTrack , 1000 ) ; }
function ( evt ) { if ( evt . target . readyState == FileReader . DONE ) { self . set ( "rawText" , evt . target . result ) ; if ( typeof callback == "function" ) { callback ( ) ; } } }
function ( content ) { this . element . removeClass ( "running" ) ; }
function ( ) { self . over = true ; }
function ( ) { self . over = false ; }
function ( ) { self . clicked = true }
function ( ) { self . clicked = false }
function ( ) { consoleLog ( 'All addons loaded' ) ; return false ; }
function ( ) { for ( var key in _animator . getQueue ( ) ) return false ; return true ; }
function ( url ) { url = url . replace ( /jamendo\.com\/(?:\w\w\/)?(album|list|track)\/([^\/]+)(\/.*)?$/ , "jamendo.com/$1/$2" ) ; url = url . replace ( /img\.jamendo\.com\/albums\/(\d+)\/covers\/\d+\.\d+\.jpg/ , "www.jamendo.com/album/$1/" ) ; url = url . replace ( /jamendo\.com\/\w\w\/artist\// , "jamendo.com/artist/" ) ; return url ; }
function ( ) { var sites = new RegExp ( "^(https?://)?([^/]+\\.)?(archive\\.org|magnatune\\.com|jamendo\\.com|cdbaby.(com|name)|mange-disque\\.tv|thastrom\\.se|universalpoplab\\.com|alpinechic\\.net|angelika-express\\.de|fixtstore\\.com|phantasma13\\.com|primordialmusic\\.com|transistorsounds\\.com|alter-x\\.net|zorchfactoryrecords\\.com)/" ) ; return sites . test ( $ ( '#id-ar\\.url' ) . val ( ) ) }
function ( Handlebars , depth0 , helpers , partials , data ) { helpers = helpers || Handlebars . helpers ; var foundHelper , self = this ; return "<div class=\"navbar\">  <div class=\"navbar-inner buttonBar\">    <div class=\"container\">    	<ul class=\"nav\">            <li style=\"width: 120px\">            	<div class=\"btn-group iconBtns newSlide\">            		<a class=\"btn btn btn-small menuBarOption\" data-option=\"createSlide\" href=\"#\"><i class=\"icon-plus\"></i>Slide</a>            	</div>            </li>            <li class=\"divider-vertical\">            </li>            <li>            	<div class=\"btn-group normalBtns\">            		<a class=\"btn btn-inverse dropdown-toggle btn-small disabled fontButton fontFamilyBtn\" data-toggle=\"dropdown\" title=\"Choose the font family\"><span class=\"text\">Lato</span><span class=\"caret\"></span></a>            		<ul class=\"dropdown-menu menuBarOption\" data-option=\"fontFamily\">            			<li>                                    <a class=\"lato\" href=\"#\" data-value=\"'Lato', sans-serif\">Lato</a>                                    <a class=\"ubuntu\" href=\"#\" data-value=\"'Ubuntu', sans-serif\">Ubuntu</a>                                    <a class=\"abril\" href=\"#\" data-value=\"'Abril Fatface', cursive\">Abril</a>                                    <a class=\"hammersmith\" href=\"#\" data-value=\"'Hammersmith One', sans-serif\">Hammersmith One</a>                                    <a class=\"fredoka\" href=\"#\" data-value=\"'Fredoka One', cursive\">Fredoka One</a>                                    <a class=\"gorditas\" href=\"#\" data-value=\"'Gorditas', cursive\">Gorditas</a>                                    <a class=\"pressstart\" href=\"#\" data-value=\"'Press Start 2P', cursive\">Press Start 2P</a>            			</li>            		</ul>            	</div>            </li>            <li>            	<div class=\"btn-group normalBtns\">            		<a class=\"btn btn-small btn-inverse dropdown-toggle disabled fontButton fontSizeBtn\" data-toggle=\"dropdown\" title=\"Choose the font size\"><span class=\"text\">72</span>            			<span class=\"caret\"></span></a>            		<ul class=\"dropdown-menu menuBarOption\" data-option=\"fontSize\">            			<li>                                    <a href=\"#\" data-value=\"144\">144</a>                                    <a href=\"#\" data-value=\"96\">96</a>                                    <a href=\"#\" data-value=\"72\">72</a>            				<a href=\"#\" data-value=\"64\">64</a>                                    <a href=\"#\" data-value=\"48\">48</a>                                    <a href=\"#\" data-value=\"36\">36</a>                                    <a href=\"#\" data-value=\"24\">24</a>                                    <a href=\"#\" data-value=\"16\">16</a>                                    <a href=\"#\" data-value=\"12\">12</a>                                    <a href=\"#\" data-value=\"8\">8</a>            			</li>            		</ul>            	</div>            </li>            <li>                  <div class=\"color-chooser normalBtns\"><div></div></div>            </li>            <li class=\"divider-vertical\">            </li>            <li>                  <div class=\"btn-group menuBarOption normalBtns\">                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"fontWeight\" data-value=\"bold\"><strong>B</strong></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"fontStyle\" data-value=\"italic\"><em>I</em></a>                        <a class=\"btn btn-small btn-inverse underline disabled fontButton\" data-option=\"fontDecoration\" data-value=\"underline\">U</a>                  </div>            </li>            <li>                  <div class=\"btn-group menuBarOption normalBtns\">                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"left\"><i class=\"icon-align-left icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"center\"><i class=\"icon-align-center icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"right\"><i class=\"icon-align-right icon-white\"></i></a>                        <a class=\"btn btn-small btn-inverse disabled fontButton\" data-option=\"textAlign\" data-value=\"justify\"><i class=\"icon-align-justify icon-white\"></i></a>                  </div>            </li>            <li class=\"divider-vertical\">            </li>            <li>                  <div class=\"btn-group iconBtns\">                        <a class=\"btn menuBarOption\" data-option=\"textBox\"><i class=\"icon-text-width\"></i>Text</a>                        <a class=\"btn btn menuBarOption\" data-option=\"picture\"><i class=\"icon-picture\"></i>Image</a>                        <!--<a class=\"btn btn menuBarOption\" data-option=\"iframe\"><i class=\"icon-globe\"></i>Website</a>-->                        <a class=\"btn btn menuBarOption\" data-option=\"video\"><i class=\"icon-facetime-video\"></i>Video</a>                        <!-- <a class=\"btn btn menuBarOption\" data-option=\"table\"><i class=\"icon-th\"></i>Table</a>                        <a class=\"btn btn menuBarOption\" data-option=\"shapes\"><i class=\"icon-star\"></i>Shapes</a> -->                  </div>            </li>            <li class=\"divider-vertical\">            </li>        </ul>        <ul class=\"nav pull-right\">            <li>                  <div class=\"btn-group iconBtns\" style=\"display: inline-block\">                        <a class=\"btn transitionEditorBtn\" data-option=\"transitionEditor\"><i class=\"icon-th-large\"></i><span>Transitions</span></a>                  </div>                  <div class=\"btn-group iconBtns\" style=\"display: inline-block\">                        <a class=\"btn btn-success transitionEditorBtn\" data-option=\"preview\"><i class=\"icon-play icon-white\"></i><span>Present</span></a>                  </div>            </li>        </ul>    </div>  </div></div><div class=\"mainContent\"></div>" ; }
function ( ) { this . options . fetch = function ( path ) { return _ . template ( $ ( path ) . html ( ) ) ; } ; this . collection . on ( "reset" , this . render , this ) ; }
function ( path ) { return _ . template ( $ ( path ) . html ( ) ) ; }
function ( ) { equal ( view . $ ( "ul" ) . children ( ) . length , 4 , "Only four elements" ) ; equal ( view . views . ul . length , 4 , "Only four Views" ) ; start ( ) ; }
function ( connection ) { this . indexCode = 96 ; this . conn = connection ; return this ; }
function ( ) { if ( ! this . _children ) this . _children = [ ] ; return this . _children ; }
function ( ) { if ( cc . s_sharedAnimationCache ) { cc . s_sharedAnimationCache . _animations = null ; cc . s_sharedAnimationCache = null ; } }
function ( value ) { self . setEnabled ( value ) ; }
function ( value ) { self . setPassCodeEnabled ( value ) ; }
function jsGet ( elem , prop , _ ) { return [ 1 , 0 , elem [ prop ] . toString ( ) ] ; }
function jsGetStyle ( elem , prop , _ ) { return [ 1 , 0 , elem . style [ prop ] . toString ( ) ] ; }
function ( ) { if ( ( req . readyState == 4 ) && ( req . status == 200 ) ) { success_callback ( req ) ; } else if ( other_callback ) other_callback ( req ) ; }
function loadRef ( arg ) { var obj = getRef ( arg ) ; if ( ! ( obj ) ) return undefined ; else if ( obj . _init ) return obj ; else obj . load ( ) ; }
function ( sourceData ) { requestedData = sourceData ; triggerRender ( ) ; }
function ( apiObjects , basePath ) { log ( "apiObjects: %o" , basePath ) ; this . apiList . createAll ( apiObjects ) ; this . apiList . each ( function ( api ) { api . setBaseUrl ( basePath ) ; } ) ; }
get gridHeaderElement ( ) { return this . _gridHeaderElement ; } ,
function ( scrollTop , dividersTop ) { this . _dividersElement . style . top = scrollTop + "px" ; }
function ( width ) { this . _overviewContainer . style . left = width + "px" ; this . _topPaneSidebarElement . style . width = width + "px" ; this . _update ( ) ; }
function ( ) { this . _closeRecordDetails ( ) ; this . _scheduleRefresh ( false ) ; this . _timelineGrid . gridHeaderElement . style . width = this . _itemsGraphsElement . offsetWidth + "px" ; }
function ( json ) { return json && json [ 'json_class' ] && json [ 'data' ] ; }
function ( ) { return gj ( this . portal ) . height ( ) - document . documentElement . clientHeight ; }
function ( mask ) { var ajaxLoading = document . getElementById ( "AjaxLoadingMask" ) ; ajaxLoading . style . display = "block" ; gj ( mask ) . css ( { opacity : 0.3 , backgroundColor : 'black' } ) ; }
function ( ) { t . equal ( data , '> ... 3\n> ' ) ; }
function ( selector , eventName ) { jasmine . JQuery . events . spyOn ( $ ( selector ) . selector , eventName ) }
function ( ) { Ext . i18n . appBundle = Ext . create ( 'Ext.i18n.Bundle' , { bundle : 'RaxaEmrChw' , lang : 'en-US' , path : 'app/view' , noCache : true } ) ; }
function ( ) { this . requires ( "2D, DOM, SpriteAnimation" ) ; return this ; }
function ( ) { this . requires ( "2D, DOM, SpriteAnimation" ) ; }
function ( ) { this . requires ( "2D, DOM, SpriteAnimation" ) ; }
function ( ) { this . requires ( "2D, DOM, Collision" ) ; this . collision ( ) ; this . _globalZ = 3 ; return this ; }
function ( ) { $ ( "#content_holder" ) . html ( "" ) . html ( data ) . fadeIn ( 'slow' ) ; }
function ( socket ) { return XHR . check ( socket , true ) ; }
function ( ) { $ ( '.snaky' ) . snaky ( { numOfCol : 14 , itemHeight : 20 } ) ; }
function ( settings , ui ) { var $el = $ ( ui ) ; if ( $el . is ( 'a' ) ) { this . href = ui . href ; } }
function ( ) { self . request ( { "since" : self . nextSince } ) ; }
function ( ) { if ( ! highlighted ) return ; $ ( "table tbody tr:not(.highlighted)" ) . hide ( ) ; focused = true ; }
function ( key ) { return types [ typeof key ] . encode ( key ) ; }
function ( ) { logger . error ( "An error in transaction" , arguments ) ; typeof me . onerror === "function" && me . onerror ( ) ; }
function ( ) { logger . log ( "Transaction completed" , arguments ) ; typeof me . oncomplete === "function" && me . oncomplete ( ) ; }
function ( ) { logger . error ( "An error in transaction" , arguments ) ; typeof me . onerror === "function" && me . onerror ( ) ; }
function ( ) { logger . log ( "Transaction completed" , arguments ) ; typeof me . oncomplete === "function" && me . oncomplete ( ) ; }
function ( event ) { if ( this_ . locationPoint != null ) { this_ . map . getMap ( ) . setCenter ( new OpenLayers . LonLat ( this_ . locationPoint . x , this_ . locationPoint . y ) ) ; } }
function ( ) { return ( $ ( this ) . offset ( ) . left === leftoffset ) ; }
function ( ) { return ( $ ( this ) . offset ( ) . left < leftoffset ) ; }
function ( ) { return ( $ ( this ) . offset ( ) . left > leftoffset ) ; }
function ( ) { return ( $ ( this ) . offset ( ) . left === leftoffset ) ; }
function ( ) { return ( $ ( this ) . offset ( ) . left > leftoffset ) ; }
function ( ) { return ( $ ( this ) . text ( ) . substring ( 1 , 2 ) . toLowerCase ( ) === keychar || $ ( this ) . text ( ) === elmtext ) ; }
function ( data ) { editor . save ( ) ; setTimeout ( function ( ) { window . location . href = 'index.html' ; } , 750 ) ; }
function ( comp , name ) { if ( ! comp . data ( ) . wluiVars ) { comp . data ( ) . wluiVars = { } ; } return comp . data ( ) . wluiVars [ name ] ; }
function ( name , alias ) { data [ alias ] = me . get ( pos , name ) ; }
function ( element , config ) { return Chord ( element , config ) ; }
function computeLeaf ( node , index ) { return { result : 0 , pos : 0 } ; }
function ( node ) { node . resultIndex = index . result ; compute ( node , index ) ; }
function ( alternative ) { alternative . resultIndex = node . resultIndex ; return compute ( alternative , index ) ; }
function ( element , i ) { element . resultIndex = index . result + i ; return compute ( element , { result : index . result + i , pos : index . pos + 1 } ) ; }
function ( ) { global . screen . get_active_workspace ( ) . get_neighbor ( Meta . MotionDirection . LEFT ) . activate ( global . get_current_time ( ) ) ; }
function ( ) { global . screen . get_active_workspace ( ) . get_neighbor ( Meta . MotionDirection . UP ) . activate ( global . get_current_time ( ) ) ; }
function ( ) { if ( -- remaining === 0 ) callback ( error , models ) ; }
function ( m , err ) { if ( ! error ) error = err ; model . error = err ; if ( -- remaining === 0 ) callback ( error , models ) ; }
function ( isp , status ) { return ; uMarker . isp = ispName = isp ; uMarker . status = status ; uMarker . time = Date . now ( ) ; drawMap ( ) ; }
function ( json ) { _this . receiveMessages ( json ) ; if ( json . messages . length > 0 ) _this . separateMessages ( 'last message was send on:&nbsp&nbsp' + getYmdHM ( _this . lastMessage . time ) ) ; }
function ( ) { try { require ( './not_found' ) . requireNonExistent ( ) ; } catch ( e ) { e . stack . should . match ( /\n *at .*not_found\.js:2\n/ ) ; } }
function ( ) { box . toFront ( ) ; wrapper . txtToFront ( ) ; }
function ( ) { console . log ( localStorage . loggedInUser ) this . sendEncounterData ( personUuid , localStorage . regUuidencountertype , localStorage . screenerUuidlocation , localStorage . loggedInUser ) }
function ( key , cb ) { var blockingMock = { hello : "world" , France : "Paris" , Germany : "Berlin" , UK : "London" } ; called = true ; cb ( null , blockingMock [ key ] ) ; }
function ( err , val ) { should . equal ( val , "world" ) ; true . should . equal ( called ) ; called = false ; done ( ) ; }
function ( err , val ) { should . equal ( val , "world" ) ; true . should . equal ( called ) ; called = false ; done ( ) ; }
function ( req , res ) { if ( req . user . isAuthenticated ) return res . redirect ( '/profile' ) var form = new forms . RegisterForm ( ) res . render ( 'register' , { form : form } ) }
function ( msg ) { console . log ( "TakePhoto cancelled because of " + msg ) ; }
function ( msg ) { console . log ( "SelectPhoto cancelled because of " + msg ) ; }
function ( file ) { file = path . join ( dest_dir , node_prefix , file ) ; queue . push ( 'rm -rf ' + file ) ; }
function ( ) { catsCallsCount ++ ; puppy . off ( 'change' , '#cats' ) ; }
function ( ) { unicornsCallsCount ++ ; puppy . off ( 'change' , '#unicorns' ) ; }
function ( ) { generalCallsCount ++ ; }
function ( ) { catsCallsCount . should . equal ( 1 ) ; unicornsCallsCount . should . equal ( 1 ) ; generalCallsCount . should . equal ( 2 ) ; puppy . off ( 'change' ) ; currentResponse = bodyResponses . base ; done ( ) ; }
function topic ( var_args ) { var args = arguments . length ? asArray ( arguments ) : [ undefined ] ; return new Topic ( args ) ; }
function ( $event , params ) { enforce ( params . editable . obj , '<ul><li><br class="aloha-end-br" /></li></ul>' ) ; }
function ( $event , params ) { enforce ( params . editable . obj , '<ul><li><br class="aloha-end-br" /></li></ul>' ) ; }
function ( ev ) { lobby . remove ( new Model . Room ( ev . message ) ) ; }
function ( ) { this . deck = document . getElementById ( "browsers" ) ; this . deck . addEventListener ( "click" , this , false , true ) ; }
function ( i , category ) { customData [ category ] = getCategoryData ( filters , category ) ; }
function ( ) { details . fadeOut ( ) ; $ ( "#wiki-url" ) . val ( "" ) ; $ ( "#freetext" ) . val ( "" ) ; }
function moveTimeLines ( ) { moveScatTimeLine ( minTime ) ; moveAltTimeLine ( minTime ) ; movePresTimeLine ( minTime ) ; moveTempTimeLine ( minTime ) ; moveRHTimeLine ( minTime ) ; movePlaneMarker ( ) ; }
function movePlaneMarker ( ) { marker . setPosition ( coords . getAt ( time ) ) ; }
function ( ) { var p = { __proto__ : en . Entity ( ) , id : 'player' , } ; p . setCoords ( 16 , 16 ) ; return p ; }
function ( ) { var e = { __proto__ : en . Entity ( ) , type : '' , id : "enemy1" } ; e . setCoords ( 16 , 17 ) ; return e ; }
function ( ) { en . player . move ( - 1 , 0 ) ; dd . processTick ( ) ; }
function ( ) { en . player . move ( 0 , - 1 ) ; dd . processTick ( ) ; }
function ( ) { en . player . move ( 1 , 0 ) ; dd . processTick ( ) ; }
function ( ) { en . player . move ( 0 , 1 ) ; dd . processTick ( ) ; }
function ( ) { sp . fireball ( en . enemy ) ; dd . processTick ( ) ; }
function ( ) { dd . levelLoad ( ) ; dd . drawTilemaps ( ) ; en . player . move ( 0 , 0 ) ; dd . processTick ( ) ; }
function ( ) { var enemy = en . enemy ; enemy . type = 'slime' ; dd . enemies [ 0 ] = enemy ; dd . levelMap = dd . levelLoadMap ( 'level1' ) ; dd . spriteGridClear ( ) ; }
function ( ) { en . player . draw ( ) ; for ( var key in dd . enemies ) { dd . enemies [ key ] . draw ( ) ; } }
function ( object ) { return object . persistence && persistencePool . getObjectName ( object ) === null ; }
function ( ) { assert . instanceOf ( error , Error ) ; }
function ( ) { var search = doc . find ( ) ; search . elem ( 'link' ) . toValue ( ) ; search . only ( ) . attr ( 'data-href' , 'file_2.css' ) ; return search ; }
function ( ) { var search = doc . find ( ) ; search . elem ( 'link' ) . toValue ( ) ; search . attr ( 'data-href' , 'file_2.css' ) . only ( ) ; return search ; }
function ( ) { assert . ok ( search . toValue ( ) . elem === result ) ; }
function ( ) { assert . lengthOf ( search . toArray ( ) , 1 ) ; assert . ok ( search . toArray ( ) [ 0 ] . elem === result ) ; }
function ( ) { this . ajax ( { url : this . arrayCssFiles [ this . counter ] } ) ; }
function ( key , x , y , e , graph ) { return '<h3>' + key + " - " + x + '</h3>' + '<p>' + y + '</p>' }
function ( ) { client . run_cmd ( command_to_send ) ; }
function ( component , prototypeName , componentType ) { if ( componentType == null ) componentType = "view" ; Luca . trigger ( "component:registered" , component , prototypeName ) ; return registry . classes [ component ] = prototypeName ; }
function ( ) { if ( this . autoCompile === true ) { return this . state . set ( this . currentMode ( ) , this . getValue ( ) ) ; } }
function ( component , prototypeName , componentType ) { if ( componentType == null ) componentType = "view" ; Luca . trigger ( "component:registered" , component , prototypeName ) ; return registry . classes [ component ] = prototypeName ; }
function ( ) { return app . render ( ) ; }
function ( component , prototypeName , componentType ) { if ( componentType == null ) componentType = "view" ; Luca . trigger ( "component:registered" , component , prototypeName ) ; return registry . classes [ component ] = prototypeName ; }
function ( ) { return app . render ( ) ; }
function getCsrfToken ( nextCallback , errorHandlerArg ) { ajaxCommon ( 'POST' , '/auth/api/csrftoken/' , null , null , function ( result ) { csrfToken = result . csrfToken ; nextCallback ( ) ; } , errorHandlerArg ) ; }
function ( ) { window . location . reload ( true ) ; }
function ( ) { window . location = '/auth/logout' ; }
function ( message , status ) { that . lastError = message ; }
function MockUI ( controller ) { var that = this ; this . lastError = null ; this . refresh = function ( ) { } ; this . handleError = function ( message , status ) { that . lastError = message ; } ; }
function ( ) { mock_stub = new MockStub ( ) ; mock_ui = new MockUI ( ) ; controller = new Controller ( mock_ui , mock_stub ) ; }
function ( ) { controller . adminPath = '/admin' ; controller . addLocation ( '/admin/api' ) ; deepEqual ( controller . locations , [ ] ) ; ok ( utils . startsWith ( mock_ui . lastError , 'Adding sublocations to admin is not supported' ) ) mock_stub . verify ( ) ; }
function ( exists ) { if ( exists === false ) { console . log ( "Employees store doesn't exist, creating it." ) ; store . save ( { key : "employees" , options : [ ] } ) ; } }
function ( exists ) { if ( exists === false ) { console . log ( "Activities store doesn't exist, creating it." ) ; store . save ( { key : "activities" , options : { } } ) ; } }
function ( exists ) { if ( exists === false ) { console . log ( "Studies store doesn't exist, creating it." ) ; store . save ( { key : "studies" , options : { } } ) ; } }
function ( exists ) { if ( exists === false ) { console . log ( "Records store doesn't exist, creating it." ) ; store . save ( { key : "records" , options : [ ] } ) ; } }
function ( ) { this . store . nuke ( ) ; return ; }
function ( match , context ) { if ( typeof context . getElementsByTagName !== "undefined" ) { return context . getElementsByTagName ( match [ 1 ] ) ; } }
function ( value , default_value ) { return ENME . params [ value ] == undefined ? ( default_value == null ? "" : default_value ) : ENME . params [ value ] ; }
function ( error ) { this . loading_show ( ) ; dojo . publish ( "/encuestame/tweetpoll/dialog/error" , [ error ] ) ; }
function ( error ) { var modal = this . _createModalBox ( "alert" , null ) ; if ( modal != null ) { modal . show ( error == null ? encuestame . constants . errorCodes [ "023" ] : error ) ; } }
function ( ) { delete app . resources [ common . capitalize ( file ) ] ; return app . resources [ common . capitalize ( file ) ] = require ( path . resolve ( app . _resourceDir , file ) ) ; }
function ( ) { if ( tipsy . hoverState === 'in' ) tipsy . show ( ) ; }
function ( ) { if ( tipsy . hoverState === 'out' ) tipsy . hide ( ) ; }
function ( ) { return this . hoverState === 'in' || ( this . hoverState !== 'out' && ! ! ( this . $tip && this . $tip [ 0 ] . parentNode ) ) ; }
function CookieClass ( ) { }
function ( e , choice , autocomplete ) { choice . addClass ( autocomplete . hilightClass ) ; }
function ( ) { success ( "Обновление успешно выполнено" ) ; }
function ( e , b ) { fail ( "Ошибка при обновлении" ) ; }
function ( data ) { console . log ( data ) ; main . data . allPosts . push ( post ) ; $ ( '.levelWrapper[level="0"]' ) . html ( '' ) ; main . SingleDiscussion ( currentDisc ) ; }
function ( val , i ) { tocContent += '<li><a href="#' + val . id + '">' + val . title + '</a></li>\n' ; }
function ( ) { this . transport && this . transport . abort ( ) ; if ( this . liveUpdates ) { this . _stopLiveUpdates ( ) ; delete this . liveUpdates ; } }
function ( entry ) { return prepareActivity ( entry ) ; }
function ( data ) { QUnit . ok ( data && data . result === "error" , "Checking if the \"onError\" callback was executed when the search query was defined incorrectly." ) ; callback ( ) ; }
function defaultReportRepairs ( reports ) { reports . forEach ( function ( report ) { if ( report && report . status !== "All fine" ) { console . log ( report . description ) ; console . log ( report . status ) ; } } ) ; }
function updateDocumentId ( editor , documentId ) { editor . ckc . documentId = documentId ; }
function getSavedRevision ( editor ) { return editor . ckc . savedRevision ; }
function updateSavedRevision ( editor , savedRevision ) { editor . ckc . savedRevision = savedRevision ; }
function getSavedContent ( editor ) { return editor . ckc . savedContent ; }
function updateSavedContent ( editor , savedContent ) { editor . ckc . savedContent = savedContent ; }
function ( ) { setPollingPaused ( editor , false ) ; }
function revert ( editor ) { setPollingPaused ( editor , true ) ; CKCConnector . loadDocument ( editor , function ( ) { setPollingPaused ( editor , false ) ; } ) ; }
function ( ) { if ( isExistingInstance ( editor ) ) { if ( ! getDocumentId ( editor ) ) { displayMessage ( 'WARNING' , lang . unsavedDocumentWarning ) ; checkUnsaved ( editor ) ; } } }
function ( doc , dt , dn ) { var callback = function ( r , rt ) { cur_frm . mylist . run ( ) ; } $c_obj ( make_doclist ( doc . doctype , doc . name ) , 'add_update' , '' , callback ) ; }
function initialCleanUp ( ) { $ ( '#hugrid' ) . remove ( ) ; $ ( '#hugridRows' ) . remove ( ) ; $ ( '#hugridUX' ) . remove ( ) ; }
function ( ) { playSound ( sound ) ; makeDiv ( i , sound ) ; }
function ( ) { $ ( '#addListValueModal' ) . modal ( 'hide' ) ; $ ( 'a.jstree-clicked' ) . click ( ) ; }
function ( ) { path = $ ( this ) . attr ( 'src' ) ; virtualScripts . push ( $ . tapestry . utils . rebuildURL ( path ) ) ; }
function ( resource ) { return askbot [ 'settings' ] [ 'static_url' ] + 'default' + '/' + resource ; }
function ( data , index ) { parsedData [ index ] = data ; }
function ( ) { req . session . migrationFile = migration . id ; res . redirect ( '/migration/' + migration . id ) ; }
function ( ) { var params = ModelBase . prototype . getPreset . call ( this ) ; params . params . sunYears = this . getSunYears ( ) ; return params ; }
function ( uri ) { $ ( '#text-right' ) . empty ( ) ; $ ( '#text-right' ) . load ( config . textPath + uri , function ( ) { $ ( ".selectBox" ) . selectReading ( ) ; } ) ; }
function ( ) { io . sockets . in ( room . id ) . emit ( 'update-players' , { players : room . players , showResult : room . done ( ) } ) ; }
function ( data ) { $ ( 'body' ) . removeClass ( 'results' ) ; $ ( '.selected' ) . removeClass ( 'selected' ) ; updatePlayersHandler ( data ) ; }
function ( req , res ) { res . render ( 'index' , { title : 'Gambit' } ) ; }
function ( url ) { if ( ! this . _hasSameOrigin ( url ) ) { return false ; } url = this . removeQuery ( this . removeRoot ( url ) ) ; return ! ! this . match ( url ) . length ; }
function ( ) { var path = ( ! this . _html5 && this . _getHashPath ( ) ) || Y . getLocation ( ) . pathname ; return this . removeQuery ( this . removeRoot ( path ) ) ; }
function ( match , operator , key ) { if ( ! key ) { return operator === '*' ? '.*' : match ; } keys . push ( key ) ; return operator === '*' ? '(.*?)' : '([^/#?]*)' ; }
function ( url ) { if ( ! this . _hasSameOrigin ( url ) ) { return false ; } url = this . removeQuery ( this . removeRoot ( url ) ) ; return ! ! this . match ( url ) . length ; }
function ( ) { var path = ( ! this . _html5 && this . _getHashPath ( ) ) || Y . getLocation ( ) . pathname ; return this . removeQuery ( this . removeRoot ( path ) ) ; }
function ( match , operator , key ) { if ( ! key ) { return operator === '*' ? '.*' : match ; } keys . push ( key ) ; return operator === '*' ? '(.*?)' : '([^/#?]*)' ; }
function ( data ) { return encodeURIComponent ( data || "" ) . replace ( /\!/g , "%21" ) . replace ( /\'/g , "%27" ) . replace ( /\(/g , "%28" ) . replace ( /\)/g , "%29" ) . replace ( /\*/g , "%2A" ) ; }
function ( tokenSecret ) { return encode ( consumerSecret ) + "&" + encode ( tokenSecret ) ; }
function ( ) { return ( Math . floor ( ( new Date ( ) ) . getTime ( ) / 1000 ) ) . toString ( ) ; }
function ( timestamp ) { return timestamp + Math . floor ( Math . random ( ) * 100000000 ) ; }
function ( kv ) { var kv = kv . split ( "=" ) ; obj [ kv [ 0 ] ] = kv [ 1 ] ; }
function ( kv ) { var kv = kv . split ( "=" ) ; obj [ kv [ 0 ] ] = kv [ 1 ] ; }
function ( e , r , b ) { cb ( r . status , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( r . status , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( e ? null : r . status , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( r . status , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( e ? null : r . statusCode , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( e ? null : r . statusCode , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( e ? null : r . statusCode , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( e ? null : r . statusCode , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( e ? null : r . statusCode , JSON . parse ( b ) ) ; }
function ( e , r , b ) { cb ( e ? null : r . statusCode , JSON . parse ( b ) ) ; }
function ( params ) { var trials = new Array ( 1 ) ; trials [ 0 ] = { "type" : "call_function" , "func" : params [ "func" ] , "args" : params [ "args" ] || [ ] } return trials ; }
function set_suggests ( hvlist ) { $ ( 'div.hidden.suggested_items' ) . empty ( ) ; $ . each ( hvlist , function ( i , hv ) { $ ( 'div.hidden.suggested_items' ) . append ( hv ) ; } ) ; }
function ( err , data ) { if ( data . hits . total !== 0 ) { callback ( data . hits . hits ) ; } else { callback ( undefined ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { callback ( data . hits . hits ) ; } else { callback ( undefined ) ; } }
function ( err , data ) { if ( data && data . hits . total !== 0 ) { callback ( data . hits ) ; } else { callback ( undefined ) ; } }
function ( err , req , data ) { if ( data ) { callback ( data ) ; } else { callback ( undefined ) ; } }
function ( err , req , data ) { if ( data ) { callback ( data ) ; } else { callback ( undefined ) ; } }
function ( err , req , data ) { if ( data ) { callback ( data ) ; } else { callback ( undefined ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { callback ( data . hits ) ; } else { callback ( undefined ) ; } }
function ( err , data ) { if ( data . hits . total !== 0 ) { callback ( data . hits . hits ) ; } else { callback ( undefined ) ; } }
function ( ) { if ( callback ) { callback ( 1 ) ; } }
function ( ) { UserNotification . sync ( ) . success ( function ( ) { if ( callback ) { callback ( 1 ) ; } } ) ; }
function ( ) { var center = this . GetCenter ( ) ; center . x = Math . floor ( center . x + 0.5 ) ; center . y = Math . floor ( center . y + 0.5 ) ; return center ; }
function ( x , y ) { var tileX = ( x / this . _world . TileSize ) - 0.5 ; var tileY = ( y / this . _world . TileSize ) - 0.5 ; return { x : tileX , y : tileY } ; }
function ( entity , current , dest ) { throw ( "Not implemented!" ) ; }
function ( entity , current , dest ) { throw ( "Not implemented!" ) ; }
function ( entity , current , dest ) { return current . x == dest . x && current . y == dest . y ; }
function ( entity , current , dest ) { var goal = dest . _goal ; return current . x == goal . x && current . y == goal . y ; }
function ( entity , current , dest ) { return current === dest ; }
function lineDraw ( ADx , ADy ) { lineDrawPrimitive ( ADx , ADy , this . X , this . Y , this . EndX , this . EndY , this . Selected , this . Color , this . Thicknes ) ; }
function ( fn ) { if ( ! fn ) { return null ; } var wrapped = function ( ) { fn . apply ( this , arguments ) ; } ; wrapped . includeError = true ; return wrapped ; }
function ( fn ) { if ( ! fn ) { return null ; } var wrapped = function ( err ) { err && fn . apply ( this , arguments ) ; } ; wrapped . includeError = true ; return wrapped ; }
function ( fn ) { if ( ! fn ) { return null ; } var wrapped = function ( err ) { ! err && fn . apply ( this , arguments ) ; } ; wrapped . includeError = true ; return wrapped ; }
function ( ) { $ ( '#page-inner' ) . css ( 'left' , 0 ) ; window . location . hash = '#' + next + '/1' ; }
function ( data ) { currentPage . captions [ slug ] = data ; callback ( ) ; $ ( '#page-inner,#footer' ) . anim ( { opacity : 1 } , .6 , 'ease-in' ) ; }
function ( ) { if ( this . options . path ) { return { url : NANO . api . routes ( this . options . path ) , dataType : "json" } ; } else { return this . options . ajax_params ; } }
function ( node ) { return HTMLArea . isIEBeforeIE9 ? node . innerText : node . textContent ; ; }
function ( ) { Y . log ( 'rpc failure!' , 'warn' , NAME ) ; adapter . error ( resp . html ) ; }
function ( child ) { child . updateModels ( ) ; }
function ( ) { this [ this . transition ] ( ) ; }
function ( ) { it ( 'should pass something to the callback (cannot be null)' , function ( done ) { dog . on ( 'change' , function ( obj ) { obj . should . not . be . empty ; done ( ) ; } ) ; } ) ; }
function ( ) { expect ( 1 ) ; stop ( ) ; ua . importsrc ( "baidu.dom.append,baidu.dom.each,baidu.dom.trigger,baidu.dom.find,baidu.dom.appendTo,baidu.dom.removeAttr,baidu.dom.insertAfter,baidu.dom.html,baidu.dom.eq,baidu.dom.remove,baidu.dom.contents" , function ( ) { start ( ) ; prepareTest ( ) ; ok ( true , 'ok' ) ; } , "baidu.dom.contents" , "baidu.dom.attr" ) ; }
function ( ) { expect ( 1 ) ; stop ( ) ; ua . importsrc ( "baidu.dom.append,baidu.dom.each,baidu.dom.trigger,baidu.dom.find,baidu.dom.appendTo,baidu.dom.removeAttr,baidu.dom.insertAfter,baidu.dom.html,baidu.dom.eq,baidu.dom.remove,baidu.dom.removePorp,baidu.dom.contents" , function ( ) { start ( ) ; prepareTest ( ) ; ok ( true , 'ok' ) ; } , "baidu.dom.contents" , "baidu.dom.prop" ) ; }
function ( val , key ) { equal ( div . attr ( key ) , val , "Attribute `" + key + "` exists, and has a value of `" + val + "`" ) ; }
function ( val , key ) { equal ( div . attr ( key ) , undefined , "Attribute `" + key + "` was removed" ) ; }
function getInjectionSrc ( ) { return 'var rewire = require("rewire"); ' + 'rewire.register(__filename, module, ' + setterSrc + ', ' + getterSrc + ');' + 'require = rewire.getProxy(require, __dirname);' + 'rewire = undefined;' ; }
function ( e ) { Utils . debug ( "Session fetched successfully" + e ) ; window . appView . renderReadonlySessionViews ( ) ; }
function ( ) { Utils . debug ( "USER init: " + this . el ) ; if ( this . model . _previousAttributes == undefined ) { this . model . set ( ( new User ( ) ) . parse ( this . model ) ) ; } }
function ( ) { window . app . storeCurrentDashboardIdsToLocalStorage ( ) ; $ ( '#user-welcome-modal' ) . modal ( "hide" ) ; }
function ( ) { invoke ( this . endpoint , this . port , '__release__' , [ this . id ] ) ; }
function ( string ) { newstring = string . replace ( /</g , "</" ) return newstring }
function ( ) { console . log ( 'secureConnection' ) self . socket . cleartext . on ( 'data' , self . _onData . bind ( self ) ) ; }
function _onData ( chunk ) { ~ this . _messageLength ? this . _fetchBody ( chunk ) : this . _fetchHeader ( chunk ) ; }
function ( ) { var files = wrench . readdirSyncRecursive ( this . options . root ) ; this . _filePaths = files . filter ( this . _filterFile , this ) ; }
function ( ) { if ( 'device' in window ) { mulberry . Device . osVersion = window . device . version ; } dojo . unsubscribe ( deviceFill ) ; }
function ( ) { return this . dateUploaded ; }
function ( error , success ) { if ( error ) { throw error ; } }
function ( error , thumbName ) { if ( error ) { throw error ; } else { socket . emit ( 'done' , { 'image' : 'files/' + thumbName } ) ; delete files [ machineName ] ; } }
function ( ) { _mainView . initiate ( ) ; _mainView . update ( ) ; debugger ; var match1 = new SoccerEvent ( ) ; alert ( match1 . date + "  " + match1 . id + "  " + match1 . description ) ; }
function ( doc ) { var tid = this . get ( '_id' ) ; var docid = doc . get ( '_id' ) ; return tid . equals ? tid . equals ( docid ) : tid === docid ; }
function ( ) { this . callSuper ( 'init' ) ; this . createEventListener ( 'horizontalAlignPropertyChanged' , this . selfRefreshLayout , this ) ; this . createEventListener ( 'verticalAlignPropertyChanged' , this . selfRefreshLayout , this ) ; }
function ( ) { this . callSuper ( 'createAttributes' ) ; this . declareSkinPart ( 'label' , false , 'core.Label' ) ; }
function ( ) { this . callSuper ( 'init' ) ; this . formItemInit ( ) ; }
function applyFilter ( e , _filter ) { filter = _filter ; buildDates ( ) ; }
function applyFilter ( e , _filter ) { filter = _filter ; buildDates ( ) ; }
function ( x , y ) { c . _queue . push ( [ x , y ] ) ; }
function ( item ) { users_data [ item . username ] = item ; insert_user_into_list ( item , '#users-list' ) ; }
function user_data_cached ( username ) { if ( users_data [ username ] ) { return users_data [ username ] . privileges ; } return null ; }
function ( cartesian ) { return Math . sqrt ( Cartesian2 . magnitudeSquared ( cartesian ) ) ; }
function ( ) { return ( projectedRTC ) ? Cartesian2 . fromCartesian3 ( projectedRTC ) : Cartesian2 . ZERO ; }
function ( ) { var cartesian = new Cartesian2 ( ) ; expect ( cartesian . x ) . toEqual ( 0 ) ; expect ( cartesian . y ) . toEqual ( 0 ) ; }
function ( ) { var cartesian = new Cartesian2 ( 1 ) ; expect ( cartesian . x ) . toEqual ( 1 ) ; expect ( cartesian . y ) . toEqual ( 0 ) ; }
function ( ) { var cartesian = new Cartesian2 ( 1 , 2 ) ; expect ( cartesian . x ) . toEqual ( 1 ) ; expect ( cartesian . y ) . toEqual ( 2 ) ; }
function ( ) { var cartesian = new Cartesian2 ( 1 , 2 ) ; var result = cartesian . clone ( ) ; expect ( cartesian === result ) . toEqual ( false ) ; expect ( cartesian ) . toEqual ( result ) ; }
function ( ) { var cartesian = new Cartesian2 ( 2 , 3 ) ; expect ( cartesian . magnitudeSquared ( ) ) . toEqual ( 13 ) ; }
function ( ) { var cartesian = new Cartesian2 ( 2 , 3 ) ; expect ( cartesian . magnitude ( ) ) . toEqual ( Math . sqrt ( 13 ) ) ; }
function ( ) { var cartesian = new Cartesian2 ( 2 , 0 ) . normalize ( ) ; expect ( cartesian . x ) . toEqual ( 1 ) ; expect ( cartesian . y ) . toEqual ( 0 ) ; }
function ( ) { var value = gpii . windows . readRegistryKey ( "HKEY_CURRENT_USER" , "Software\\Texthelp\\Read&Write10" , "InstallPath" , "REG_SZ" ) . value ; value += "\\ReadAndWrite.exe" ; gpii . launch . exec ( "\"" + value + "\"" ) ; }
function ( ) { for ( var i = this . pool . length - 1 ; i >= 0 ; i -- ) { this . pool [ i ] . close ( ) ; } }
function ( e ) { butter . ui . visible = ! butter . ui . visible ; _toggler . state = butter . ui . visible ; }
function ( input ) { if ( input === null || input === "" ) { return null ; } if ( typeof input !== "number" ) { input = parseFloat ( input ) ; } return new Money ( input ) ; }
function ( emitter ) { if ( Array . isArray ( emitter ) ) { self . add . apply ( self , emitter ) } else { self . add ( emitter ) } }
function ( event ) { var instance = this ; var paginatorData = event . paginator ; if ( paginatorData ) { instance . _pageNavigation . _setPaginatorData ( paginatorData ) ; } }
function ( ) { app . set ( 'port' , 80 ) ; app . use ( express . errorHandler ( ) ) ; }
function ( ) { return { $ : { config : { get : function ( name , def ) { var _ref1 ; return ( _ref1 = process . env [ name ] ) != null ? _ref1 : def ; } } } } ; }
function ( o ) { try { return o && o instanceof window . Range ; } catch ( ex ) { return false ; } }
function ( property , value ) { this [ property ] = value ; return this ; }
function ( property ) { return this [ property ] == undefined ; }
function ( ) { this . fire ( 'load' ) ; }
function ( placement ) { var square = ui . board . squares [ placement . x ] [ placement . y ] ; tilesTakenBack . unshift ( square . tile ) ; square . placeTile ( null ) ; }
function ( event ) { if ( event . settingValue ) { gBluetoothPowerStatus . textContent = 'Enabled' ; } else { gBluetoothPowerStatus . textContent = 'Disabled' ; } gBluetoothCheckBox . checked = event . settingValue ; }
function bt_EnabledSuccess ( ) { var enabled = req . result [ 'bluetooth.enabled' ] ; if ( enabled ) { gBluetoothPowerStatus . textContent = 'Enabled' ; } else { gBluetoothPowerStatus . textContent = 'Disabled' ; } gBluetoothCheckBox . checked = enabled ; }
function ( req , res , next ) { res . send ( "Not here" , 404 ) ; }
function ( _ , img ) { jQuery ( document . createElement ( 'IMG' ) ) . attr ( 'src' , DOKU_BASE + 'lib/images/' + img [ 0 ] + '.gif' ) . click ( img [ 1 ] ) . appendTo ( $ctl ) ; }
function d3_collapse ( s ) { return s . replace ( /^\s+|\s+$/g , "" ) . replace ( /\s+/g , " " ) ; }
function ( ) { if ( req . readyState === 4 ) { var s = req . status ; callback ( ! s && req . response || s >= 200 && s < 300 || s === 304 ? req : null ) ; } }
function ( s , n ) { return Sizzle ( s , n ) [ 0 ] || null ; }
function ( d ) { return d / pow ( f ( log ( d ) + e ) ) <= k ? format ( d ) : "" ; }
function ( d ) { if ( typeof origin === "function" ) arc . source ( origin . apply ( this , arguments ) ) ; return clipType ( d ) || null ; }
function ( x ) { if ( ! arguments . length ) return origin ; origin = x ; if ( typeof origin !== "function" ) arc . source ( origin ) ; return circle ; }
function ( _ ) { if ( ! arguments . length ) return precision / d3_geo_radians ; precision = _ * d3_geo_radians ; return greatArc ; }
function ( string ) { var date = new Date ( string ) ; return isNaN ( date ) ? null : date ; }
function ( res ) { res . should . have . status ( 404 ) ; res . body . should . equal ( 'sorry!' ) ; done ( ) ; }
function ( ) { return ( _popcorn && ( _popcorn . media . readyState >= 1 && _popcorn . duration ( ) > 0 ) ) ; }
function ( butter ) { butterLifeCycle . rememberButter ( butter ) ; butter . preparePopcornScriptsAndCallbacks ( function ( ) { succeeded = true ; ok ( true , "Ready called without any scripts/callbacks." ) ; start ( ) ; } ) ; }
function ( keyboard ) { _draw ( keyboard , _currentInputType , _layoutMode , _isUpperCase ) ; }
function ( suffixes ) { var i , result = [ ] ; for ( i = 0 ; i < suffixes . length ; i += 1 ) { result . push ( cls ( suffixes [ i ] ) ) ; } return result ; }
function ( cmds ) { assert . ok ( cmds . length == 1 ) ; assert . equal ( 'purge obj.http.X-Cache-Channel ~ \"^test_db:(.*test_cache.*)|(table)$\"\n' , cmds [ 0 ] . toString ( 'utf8' ) ) ; }
function ( v ) { db . tags . update ( { n : v . _id } , { $set : { c : v . value } } , true ) ; }
function ( socket ) { console . log ( 'connected' ) ; this . writable = true ; }
function ( data ) { if ( ! this . writable ) { } log ( data ) ; this . io . sockets . emit ( 'msg push' , data ) ; return true ; }
function ( dest ) { this . piped = true ; this . dest = dest ; this . on ( 'data' , function ( data ) { this . dest . write ( data ) ; } ) ; }
function ( index , value ) { $ ( value ) . find ( 'a[redirect-link=true] div' ) . addClass ( 'hover' ) ; }
function ( index , value ) { $ ( value ) . find ( 'a[redirect-link=true] div' ) . removeClass ( 'hover' ) ; }
function ( ) { return this . transform . getRotation ( ) ; }
function ( s , n ) { return Sizzle ( s , n ) [ 0 ] || null ; }
function ( ) { eq ( re . bisect . toY ( 1 , 160 , 60 , 60 ) , 0 ) }
function ( bi , width , sizeX , sizeY ) { return this . toTileY ( bi , width , sizeX ) * sizeY ; }
function ( bi ) { return re . bisect . toY ( bi , this . bisect , this . sizeX , this . sizeY ) ; }
function ( error , response ) { if ( error ) { response = null ; } else { response = ( value !== undefined ) ? true : response ; } callback ( error , response ) ; }
function ( auth ) { return auth . config ( { id : 'clientid' , secret : 'secret' } ) ; }
function ( e , data ) { $ ( "li[rel=test_case],li[rel=test_suite]" , this ) . data ( "jstree" , PLAN_CASE_MENU ) ; $ ( "li[rel=test_project]" , this ) . data ( "jstree" , { contextmenu : { } } ) ; }
function ( e , data ) { $ ( "li[rel^=test_]" ) . data ( "jstree" , USER_ASSIGN_MENU ) ; }
function ( osName ) { var client = new Client ; client . osName = osName || gazel . osName ; if ( osName ) { client . needsOsVerification = true ; } return client ; }
function ( data ) { message = JSON . stringify ( { user : userId , name : name , hash : location . hash , data : data } ) ws . send ( message ) }
function ( ) { try { runIt ( [ Migration . exec , Zoom . init , KeyEvent . init , Frame . register , CustomCode . runJS , CustomCode . loadCSS ] ) ; } catch ( err ) { logError ( err ) } }
function ( status ) { if ( status === 0 ) { info ( green ( "Your bundle is complete." ) ) ; } else { error ( red ( "An error occured during the installation!" ) ) ; } return typeof cb === "function" ? cb ( ) : void 0 ; }
function ( status ) { return typeof callback === "function" ? callback ( status ) : void 0 ; }
function FirebugConsole ( ) { }
function ( ) { return [ { } ] }
function ( ) { bt_create_load_balancer . disabledButton ( 1 , false ) ; }
function ( chunk ) { responseBody += chunk ; }
function worker ( task , callback ) { if ( dead ) return ; fn ( task , callback ) ; }
function ( query ) { return { options : { email : email , services : { foobook : { id : 1 } } } } ; }
function addElementButtonCallback ( ) { var data = $ ( this ) . data ( 'mods' ) ; createElement ( data . element , data . parentXPath , data . parentId ) ; }
function ( feedItemCollection ) { this . feedItemCollection = feedItemCollection ; alert ( this . feedItemCollection . size ( ) + " feed items 1" ) ; $ ( '#rss' ) . html ( "" ) ; this . render ( ) ; }
function ( data ) { launchSmallPopup ( i18n ( "smallpopup.group.rename.title" ) , data , i18n ( "action.rename" ) , 'validate' ) ; }
function ( data ) { hideThinking ( ) ; launchSmallPopup ( i18n ( "smallpopup.fmessage.rename.title" , messageSection ) , data , i18n ( "action.rename" ) , 'validate' ) ; }
function ( ) { window . open ( "http://itunes.apple.com/app/pushpop/id531782897?mt=8&uo=4" ) ; }
function ( ev ) { console . log ( ev ) ; }
function ( config ) { if ( 'myVar' in config ) { this . myVar = config . myVar ; } this . addEvents ( 'connect' , 'disconnect' ) ; }
function ( myArg1 , myArg2 , myArg3 ) { }
function ( ) { return this . myVar + this . myVar2 ; }
function ( name ) { return _ ( name_to_model [ name . toLowerCase ( ) ] || [ ] ) . clone ( ) ; }
function ( err , data ) { if ( err !== null ) { $ ( 'section[role="main"]' ) . html ( data ) ; } else { console . log ( "Error:" + err . toString ( ) ) ; } }
function ( ) { console . log ( "Saving path" ) ; savePolygon ( path ) ; showArticles ( path , function ( err , data ) { $ ( 'section[role="main"]' ) . html ( data ) ; } ) ; }
function savePolygon ( path ) { if ( typeof ( Storage ) !== "undefined" ) { var encodedPath = google . maps . geometry . encoding . encodePath ( path ) ; localStorage . polygon = encodedPath ; } }
function ( ) { console . log ( 'successfully closed the clip' ) ; setTimeout ( "editor.destroy(false); editor = null; $('#cke').attr('id', ''); $(jq(edited)).addClass('content'); edited=''; noUpdate = false;" , 1000 ) ; }
function ( result , query , markup ) { markMatch ( result . text , query . term , markup ) ; }
function ( new_default_locale ) { if ( exists ( new_default_locale ) ) { new_default_locale = new_default_locale . toLowerCase ( ) } self . _default_locale = new_default_locale ; }
function ( ) { return ( typeof self . _locale === "undefined" || self . _locale === null ) ? [ self . _default_locale ] : self . _locale ; }
function ( ) { strong . back . putAtPath ( 'de.everything' , 'I am a translated string for locale: de' ) ; strong . default_locale = 'DE' ; expect ( strong . translate ( 'everything' ) ) . toEqual ( 'I am a translated string for locale: de' ) ; }
function ( ) { strong . back . putAtPath ( 'en.everything' , 'I am a translated string for locale: en' ) ; strong . default_locale = 'de' ; strong . locale = [ 'es' , 'en' ] ; expect ( strong . translate ( 'everything' ) ) . toEqual ( 'I am a translated string for locale: en' ) ; }
function ( ) { formatter . format ( { text : 'Foo' , done : true } , 0 ) . should . eql ( '      #1  \u001b[32m√\u001b[39m  Foo' ) ; }
function ( ) { formatter . format ( { text : 'Foo' , done : false } , 0 ) . should . eql ( '      #1  \u001b[31m✖\u001b[39m  Foo' ) ; }
function ( ) { if ( tipsy . hoverState === 'in' ) tipsy . show ( ) ; }
function ( ) { if ( tipsy . hoverState === 'out' ) tipsy . hide ( ) ; }
function ( ) { return this . hoverState === 'in' || ( this . hoverState !== 'out' && ! ! ( this . $tip && this . $tip [ 0 ] . parentNode ) ) ; }
function ( ) { if ( this . value == true ) this . collapsed = false if ( ! this . name ) this . name = this . checkboxName this . callParent ( arguments ) ; }
function ( incident ) { setCurrentIncident ( incident ) ; g_curSubject = null ; $ . mobile . changePage ( "incidentForm.html" ) ; }
function ( result ) { callback ( { 'message' : 'Failed to fetch catalog' , 'result' : result } ) ; }
function ( ) { var name = navigator . platform . match ( /(Linux|FreeBSD|Mac|Win|SunOS)/i ) ; return ( name && name [ 1 ] ) ? name [ 1 ] : ( window . orientation != undefined ) ? "iPod" : "Other" ; }
function ( ) { return { snap : this . _snap . checked , showPossibleParents : this . _showPossibleParents . checked , cssOverrideWarn : this . _cssOverrideWarn . checked , absoluteWidgetsZindex : this . _absoluteWidgetsZindex . value , zazl : this . _zazl . checked } ; }
function ( ) { expect ( phantom . version . patch ) . toEqual ( 1 ) ; }
function ( ) { return changePage ( "#lobby" , { transition : 'slide' , reverse : true } ) ; }
function ( ) { var regexp ; regexp = /(http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/g ; return this . match ( regexp ) !== null || this . length === 0 ; }
function ( ) { var lis = $ ( listView . el ) . find ( ".torrentInfo" ) ; expect ( lis . length ) . toEqual ( sampleData . length ) ; }
function ( error , response , body ) { if ( error ) { callback ( error , undefined ) ; } else { var body_parsed = JSON . parse ( body ) ; callback ( false , body_parsed ) ; } }
function ( error , response , body ) { if ( error ) { callback ( error , undefined ) ; } else { var body_parsed = JSON . parse ( body ) ; callback ( false , body_parsed ) ; } }
function ( room ) { talksList . locations [ room ] = true ; }
function fn_ready ( ) { delete currentPage . onReArranged ; draggableIcon . onDragStop ( finishDrag ) ; }
function ( name ) { me [ name ] = fs . readFileSync ( resolve ( path , name ) ) }
function ( location ) { $ . post ( '/bump' , Geo . extract ( location ) ) ; }
function ( ) { $ . getJSON ( '/hump' , Dashboard . loadResults ) }
function ( success , error ) { navigator . geolocation . getCurrentPosition ( success , error , { enableHighAccuracy : true , timeout : 10000 , maximumAge : 6 * ( 10 ^ 4 ) } ) ; return ; }
function ( data ) { _this . sidebar . player . playStreamData ( data ) ; _this . comments . updateCommentsFor ( stream_id ) ; current_stream_id = stream_id ; }
function ( data ) { Log ( 'info' , 'Comment posted!' ) ; $ ( "#comment-form" ) . val ( '' ) ; Async . later ( 250 , function ( ) { _this . comments . updateCommentsFor ( current_stream_id ) ; } ) ; }
function ( callback ) { this . on ( C . S_ERROR , callback ) ; return this ; }
function ( ltime ) { return this . __callModifiers ( Element . ALL_MODIFIERS , ltime ) ; }
function ( feature ) { feature_icon = feature . attributes . icon ; return ( feature_icon !== "" ) ? feature_icon : "" ; }
function ( ) { ghost = new Ghost ( "http://www.google.com/webhp?complete=1&hl=en" , { browser : config . browser , host : config . host , logLevel : config . logLevel } ) ; }
function ( ) { ghost = new Ghost ( "http://github.com/" , { browser : config . browser , host : config . host , logLevel : config . logLevel } ) ; }
function ( done ) { ghost . getTitle ( function ( title ) { title . should . be . equal ( 'GitHub · Social Coding' ) ; } ) . done ( done ) ; }
function ( ) { this . _currentX = - this . _step * ( -- this . _index ) ; this . _correct ( ) ; }
function ( require ) { var ListViewPanelHandler = require ( './listViewPanel/handler' ) ; var DetailViewPanelHandler = require ( './detailViewPanel/handler' ) ; return { 'salespersons/' : new ListViewPanelHandler ( ) , 'salespersons/{id}' : new DetailViewPanelHandler ( ) } ; }
function ( ) { $ ( '#nudgenudge_' + i ) . hide ( ) ; base . closed = true ; }
function ( ) { menu . show ( ) . position ( { my : 'left top' , at : 'left bottom' , of : this , collision : 'fit fit' } ) . hide ( ) . slideDown ( ) . focus ( ) ; return false ; }
function getGister ( config ) { var config = require ( './utils' ) . getConfig ( ) , Gister = require ( 'gister' ) ; return new Gister ( { token : config . github . token } ) ; }
function getMiloPath ( ) { var path = require ( 'path' ) ; return __filename . replace ( path . basename ( __filename ) , '' ) ; }
function ( e ) { t . _editImage ( ) ; }
function ( index ) { delete_button ( index , code ) ; down_button ( index , code ) ; up_button ( index , code ) ; upload_button ( index , code ) ; }
function ( point ) { throw "Abstract method rawProject not implemented by subclass." ; }
function ( point ) { throw "Abstract method rawUnproject not implemented by subclass." ; }
function ( coordinate ) { throw "Abstract method getTileUrl not implemented by subclass." ; }
function ( coordinate ) { throw "Abstract method getTile not implemented by subclass." ; }
function ( ) { window . location = "/read/" + article . ID ; }
function ( req , res ) { console . log ( "app path : %s" , global . APP_PATH ) ; var app = new Framework ( req , res ) . createApp ( config ) ; app . run ( ) ; }
function ( req , res ) { console . log ( "app path : %s" , global . APP_PATH ) ; var app = new Framework ( req , res ) . createApp ( config ) ; app . run ( ) ; }
function ( config ) { return new Application ( this . req , this . res , config ) ; }
function RequestWrapper ( req ) { return req ; }
function Router ( req ) { this . controller = "index" ; this . action = "show" ; this . routerParser = defaultRouterParser ; this . req = req ; }
function ( errorResponse ) { errorResponse = self . _wrapErrorResponse ( errorResponse ) ; self . config . get ( "onError" ) ( errorResponse ) ; }
function ( ) { return this . config . get ( "apiBaseURL" ) + this . config . get ( "endpoint" ) ; }
function ( responseError , config ) { this . _handleErrorResponse ( responseError , { "callback" : config . onError } ) ; }
function ( el , dir ) { Roo . log ( 'scroll startproc' ) ; clearProc ( ) ; proc . el = el ; proc . dir = dir ; proc . id = setInterval ( doScroll , Roo . dd . ScrollManager . frequency ) ; }
function ( aError ) { console . log ( aError ) ; }
function ( doc ) { var website_fields_list = [ 'page_name' , 'website_image' , 'web_short_description' , 'web_long_description' ] if ( cint ( doc . show_in_website ) ) { unhide_field ( website_fields_list ) ; } else { hide_field ( website_fields_list ) ; } }
function trimWhitespace ( cmd ) { var trimmer = /^\s*(.+)\s*$/m , matches = trimmer . exec ( cmd ) ; if ( matches && matches . length === 2 ) { return matches [ 1 ] ; } return '' ; }
function ( ) { this . snake = new Game . Snake ; this . makeWorld ( ) ; return this . startGame ( ) ; }
function ( ) { var $curation = $ ( '#collaborative-curation' ) , view = new app . View . TopicsView ( { el : $curation } ) ; }
function ( item ) { var view = new app . View . ItemView ( { model : item } ) ; self . $items . append ( view . $el ) ; }
function ( topic ) { var view = new app . View . TopicView ( { model : topic } ) ; self . $topics . append ( view . $el ) ; }
function ( topic ) { var self = this ; view = new app . View . TopicView ( { model : topic } ) ; self . $topics . append ( view . $el ) ; return view ; }
function handleText ( ) { if ( hasSelection ( ) ) return ; popText ( textCallback ) ; }
function handlePaste ( ) { popText ( pasteCallback ) ; }
function onPaste ( e ) { flush ( ) ; defer ( handlePaste ) ; }
function browser_goBack ( ) { this . currentTab . dom . goBack ( ) ; this . refreshButtons ( ) ; }
function browser_goForward ( ) { this . currentTab . dom . goForward ( ) ; this . refreshButtons ( ) ; }
function ( e ) { this . backButton . disabled = ! e . target . result ; }
function ( res ) { var json = MochiKit . Base . evalJSON ( res . responseText ) ; if ( json && json . status && ( json . status === 'fail' ) ) { throw new Error ( json . message ) ; } }
function ( tween ) { Element . __addTweenModifier ( this , tween ) ; }
function ( gtime ) { return this . __checkJump ( gtime - this . xdata . gband [ 0 ] ) ; }
function showRegistrationInfo ( info ) { dom . setInner ( "#email" , info . email ) ; if ( info . returnTo ) { dom . setInner ( ".website" , info . returnTo ) ; updateRedirectTimeout ( ) ; dom . show ( ".siteinfo" ) ; } }
function testCannotConfirm ( ) { testHelpers . testErrorVisible ( ) ; }
function ( selector , className , msg ) { ok ( $ ( selector ) . hasClass ( className ) , msg || selector + " has className: " + className ) ; }
function ( ) { this . selectTab ( this . createTab ( this . START_PAGE_URL ) ) ; this . showPageScreen ( ) ; }
function browser_urlFocus ( ) { if ( this . currentScreen === this . PAGE_SCREEN ) { this . setUrlBar ( this . currentTab . url ) ; this . urlInput . select ( ) ; this . showAwesomeScreen ( ) ; } }
function places_getTopSites ( maximum , callback ) { this . db . getPlacesByFrecency ( maximum , callback ) ; }
function ( ) { assert . ok ( subject . connection ) ; assert . ok ( subject . isOpen ) ; assert . equal ( subject . connection . name , name ) ; finishedOpen = true ; }
function ( ) { var db = new Calendar . Db ( 'b2g-test-calendar' ) ; this . _lastDb = db ; return this . _lastDb ; }
function ( ) { testSupport . calendar . requireProvider ( ) ; requireLib ( 'db.js' ) ; requireLib ( 'models/account.js' ) ; requireLib ( 'models/calendar.js' ) ; requireLib ( 'store/abstract.js' ) ; requireLib ( 'store/account.js' ) ; }
function ( done ) { testSupport . calendar . clearStore ( 'calendars' , done ) ; }
function ( ) { assert . instanceOf ( subject , Calendar . Store . Abstract ) ; assert . equal ( subject . db , db ) ; assert . deepEqual ( subject . _cached , { } ) ; }
function ( done ) { calendars = { } ; calStore = subject . db . getStore ( 'Calendar' ) ; model = subject . _createModel ( { providerType : 'Local' } ) ; subject . persist ( model , done ) ; }
function ( done ) { calendars [ 2 ] = new Calendar . Models . Calendar ( { accountId : 'some-other' , remote : { id : 666 } } ) ; calStore . persist ( calendars [ 2 ] , done ) ; }
function ( ) { var result = subject . _createModel ( { providerType : 'Local' } ) ; assert . equal ( result . providerType , 'Local' ) ; assert . isFalse ( ( '_id' in result ) ) ; }
function ( cb ) { cb ( null , remote ) ; }
function ( done ) { var store = subject . db . getStore ( 'Calendar' ) ; store . load ( function ( err , data ) { results = data ; done ( ) ; } ) ; }
function ( ) { var store = app . store ( 'Account' ) ; list = subject . accountList ; store . _cached = fixtures ; subject . render ( ) ; result = subject . element . innerHTML ; }
function ( ) { requireLib ( 'templates/calendar.js' ) ; requireLib ( 'views/settings.js' ) ; }
function al_putAlarmList ( alarm ) { AlarmManager . setEnabled ( alarm , alarm . enabled ) ; self . refresh ( ) ; }
function am_unset ( alarm ) { if ( alarm . alarmId ) { navigator . mozAlarms . remove ( alarm . alarmId ) ; } }
function am_gotAlarm ( alarm ) { self . _onFireAlarm = alarm ; var protocol = window . location . protocol ; var host = window . location . host ; window . open ( protocol + '//' + host + '/onring.html' , 'ring_screen' , 'attention' ) ; }
function am_snoozeHandler ( ) { this . set ( this . _onFireAlarm , true ) ; }
function aev_getDefaultAlarm ( ) { return { id : '' , alarmId : '' , label : 'Alarm' , hour : '10' , minute : '00' , enabled : true , repeat : '0000000' , sound : 'classic.wav' , snooze : 5 , color : 'Darkorange' } ; }
function al_putAlarmList ( alarm ) { AlarmManager . setEnabled ( alarm , alarm . enabled ) ; AlarmList . refresh ( ) ; }
function ( event ) { item . id = event . target . result ; if ( callback ) callback ( item ) ; }
function _getKeyCoordinateY ( y ) { var candidatePanel = document . getElementById ( 'keyboard-candidate-panel' ) ; var yBias = 0 ; if ( candidatePanel ) yBias = candidatePanel . clientHeight ; return y - yBias ; }
function kc_onResize ( nWidth , nHeight , fWidth , fHeihgt ) { if ( IMERender . ime . dataset . hidden ) return ; IMERender . resizeUI ( _currentLayout ) ; _updateTargetWindowHeight ( ) ; this . updateLayoutParams ( ) ; }
function calculator_backSpace ( ) { this . clearBackspaceTimeout ( ) ; this . startBackspaceTimeout ( ) ; this . stack . splice ( this . stack . length - 1 , 1 ) ; this . updateDisplay ( ) ; }
function calc_errorTimeout ( self ) { self . display . parentNode . classList . remove ( 'error' ) ; self . errorTimeout = null ; }
function clear ( addScanningItem ) { while ( list . hasChildNodes ( ) ) list . removeChild ( list . lastChild ) ; if ( addScanningItem ) list . appendChild ( newScanItem ( ) ) ; index = [ ] ; }
function onScanError ( error ) { scanning = false ; console . warn ( '====== wifi error: ' + req . error . name ) ; clear ( false ) ; if ( autoscan ) window . setTimeout ( scan , scanRate ) ; }
function wifiConnect ( ) { gWifiManager . associate ( network ) ; gNetworkList . display ( network . ssid , _ ( 'shortStatus-connecting' ) ) ; }
function close ( ) { if ( key ) { identity . value = '' ; password . value = '' ; showPassword . checked = false ; } dialog . removeAttribute ( 'class' ) ; return false ; }
function createElementRef ( name ) { this . icons [ toCamelCase ( name ) ] = document . getElementById ( 'statusbar-' + name ) ; }
function ( event ) { self . isOpen = true ; self . connection = req . result ; callback ( null , self ) ; self . emit ( 'open' , self ) ; }
function Abstract ( db ) { this . db = db ; this . _cached = Object . create ( null ) ; Calendar . Responder . call ( this ) ; }
function Account ( ) { var self = this ; Calendar . Store . Abstract . apply ( this , arguments ) ; }
function ( value , onTrue ) { if ( value ) { return onTrue ; } else { return '' ; } }
function ( e ) { $ ( e ) . addClass ( this . selector ) ; $ ( e ) . find ( '.dropdown-menu li' ) . addClass ( 'do-not-move' ) ; }
function ( ) { var instance = this ; $ ( '.' + this . selector ) . each ( function ( ) { instance . resize ( this ) } ) ; }
function ( error , foo ) { assert . equal ( error , undefined , "Should have stored foo" ) ; assert . equal ( foo . ok , true , "Response should be ok" ) ; assert . ok ( foo . rev , "Response should have rev" ) ; }
function ( error , foo ) { assert . equal ( error , undefined , "Should have stored foo" ) ; assert . equal ( foo . ok , true , "Response should be ok" ) ; assert . ok ( foo . rev , "Response should have rev" ) ; }
function ( assert ) { db . copy ( "foo_src" , "foo_dest" , function ( error , response , headers ) { assert . equal ( error . error , "conflict" , "Should have a document conflict." ) ; } ) ; }
function ( error , response , headers ) { assert . equal ( error , undefined , "Should have copied foo_src to new baz_dest document" ) ; assert . equal ( headers [ "status-code" ] , 201 , "Status code should be 201" ) ; }
function ( ) { clearInterval ( refreshInterval ) ; chatList . empty ( ) ; }
function ( ) { window . plugins . nativeUI . setTitle ( { title : "Лепрочятик" , organize : false , refresh : false , menu : true } ) ; refreshInterval = window . setInterval ( requestNewChatData , 10000 ) ; }
function ( ) { requestNewChatData ( true ) ; $ . mobile . showPageLoadingMsg ( ) ; }
function ( ) { window . plugins . nativeUI . setTitle ( { title : "Подлепры" , organize : false , refresh : false , menu : true } ) ; lastPages = [ "#subsPage" ] ; }
function ( ) { clearOld ( ) ; $ . mobile . changePage ( "#postsPage" ) ; }
function ( ) { clearOld ( ) ; iLepra . sub . fetch = true ; $ . mobile . changePage ( "#subsPage" , { allowSamePageTransition : true } ) ; }
function ( ) { clearOld ( ) ; $ . mobile . changePage ( "#chatPage" ) ; }
function ( ) { clearOld ( ) ; $ . mobile . changePage ( "#profilePage" ) ; }
function ( ) { this . _error_alert . html ( '' ) ; this . _error_alert . show ( ) ; }
function ( ) { if ( ( $ ( this ) . val ( ) ) . length > 0 ) { text_camp_email = $ ( this ) . val ( ) ; $ ( this ) . val ( "" ) ; } }
function ( ) { if ( $ ( this ) . val ( ) == "" ) { $ ( this ) . val ( text_camp_email ) } }
function ( module1 , module2 , module3 , module4 ) { console . log ( 'Executing main.js' ) ; echo ( 'Executing main.js' ) ; return { } ; }
function ( ) { console . log ( 'Executing module1.js' ) ; echo ( 'Executing module1.js' ) ; }
function ( module1 ) { console . log ( 'Executing  module1/submodule1.js' ) ; echo ( 'Executing  module1/submodule1.js' ) ; return { } ; }
function ( module1 ) { console . log ( 'Executing  module1/submodule1/part1.js' ) ; echo ( 'Executing  module1/submodule1/part1.js' ) ; return { } ; }
function ( module1 ) { console . log ( 'Executing  module1/submodule1/part2.js' ) ; echo ( 'Executing  module1/submodule1/part2.js' ) ; return { } ; }
function ( module1 ) { console . log ( 'Executing  module1/submodule2.js' ) ; echo ( 'Executing  module1/submodule2.js' ) ; return { } ; }
function ( module1 ) { console . log ( 'Executing module3.js' ) ; echo ( 'Executing module3.js' ) ; return { } ; }
function ( message ) { console . log ( 'module4.js: ' + message ) ; echo ( 'module4.js: ' + message ) ; return 'ok' ; }
function ( ) { Blade . Assert . Fail ( 'This is a custom error, written on: {0}' , [ ( new Date ( ) ) . toDateString ( ) ] ) ; }
function ( err , me ) { cb ( me ) ; }
function ( ) { $ ( '.CodeMirror' ) . hide ( ) ; }
function ( textarea ) { if ( this . inited ) { textarea . val ( this . editor . getValue ( ) ) ; } }
function ( data ) { this . current_category_id = params [ 0 ] ; this . setBlock ( 'contacts-list' , null , data && data . system_category ? [ ] : [ 'category-actions' ] ) ; }
function ( text ) { if ( text . match ( /^[a-z\']/i ) ) { return makeWord ( text ) ; } return makeTaggedString ( text , [ analyzeSpace ( text ) ] ) ; }
function ( ) { return this . getPath ( 'entries.remaining' ) === 1 ; }
function ( ) { if ( ! that . $menu . is ( ':hover' ) ) { that . hide ( ) ; } }
function ( ) { var elem = document . createElement ( "div" ) ; assert ( H . test . cssProp ( elem , "textShadow" , true ) , "textShadow supported" ) ; }
function ( ) { var elem = document . createElement ( "div" ) ; assert ( H . test . cssProp ( elem , "wordWrap" , true ) , "wordWrap supported" ) ; }
function ( ) { var elem = document . createElement ( "div" ) ; assert ( H . test . cssProp ( elem , "wordBreak" , true ) , "wordBreak supported" ) ; }
function ( ) { var elem = document . createElement ( "div" ) ; assert ( H . test . cssProp ( elem , "wordSpacing" , true ) , "wordSpacing supported" ) ; }
function addImageRows ( ) { $ . single ( this ) . find ( 'a' ) . filter ( '[resource^="[mbz:release/"]' ) . each ( INNERCONTEXT . UI . addImageRow ) ; }
function writeOriginalSentences ( ) { for ( var s = 0 ; s < sentences . length ; s ++ ) { $ ( "#sent" + s ) . text ( sentences [ s ] ) ; } }
function ( status , url ) { if ( status != 200 && ! cls . ScopeHTTPInterface . is_enabled ) { opera . postError ( "Usertracker could not send heartbeat to tracker server at " + url + ". Got status " + status ) ; } }
function ( node_id ) { var msg = [ ( last_spotlight_command || [ ] ) . concat ( [ get_command ( node_id , 0 , "hover" ) ] ) ] ; services [ 'ecmascript-debugger' ] . requestSpotlightObjects ( 0 , msg ) ; last_spotlight_commands = '' ; }
function ( services ) { return [ 'dom_mode' , { view : 'js_mode' , tab_class : JavaScriptTab } , 'network_mode' , 'resource_panel' , 'storage' , 'profiler_mode' , { view : 'console_mode' , tab_class : ErrorConsoleTab } , 'utils' , 'console_panel' ] ; }
function ( ) { this . _prev_url = this . _urlfield ? this . _urlfield . get_value ( ) : "" ; this . _prev_request = this . _input ? this . _input . get_value ( ) : "" ; }
function ( container ) { container . clearAndRender ( [ "div" , [ "span" , "class" , "ui-button reload-window" , "handler" , "reload-window" , "tabindex" , "1" ] , [ "p" , ui_strings . S_RESOURCE_CLICK_BUTTON_TO_FETCH_RESOURCES ] , "class" , "info-box" ] ) ; }
function ( ) { services [ "ecmascript-debugger" ] . addListener ( "window-filter-change" , this . _on_window_filter_change . bind ( this ) ) ; window . messages . addListener ( "profile-enabled" , this . _on_profile_enabled . bind ( this ) ) ; this . init ( ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( ) { if ( this . _textarea ) this . _textarea . focus ( ) ; }
function ( ) { if ( this . _textarea ) this . _textarea . blur ( ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( ) { this . _selected_element = null ; this . _set_props = [ ] ; this . _search_term = '' ; this . _has_data = false ; }
function ( msg ) { if ( msg . profile == window . app . profiles . DEFAULT ) { this . _sheets = { } ; this . _new_runtimes = null ; } }
function ( template ) { if ( this . info_element ) this . info_element . clearAndRender ( template ) ; }
function ( id ) { if ( ! this . container_ids . contains ( id ) ) this . container_ids . push ( id ) ; }
function ( handler , title ) { var buttons = this . getButtonsByHandler ( handler ) ; for ( var i = 0 ; button = buttons [ i ] ; i ++ ) { button . title = title ; } this . updateButtons ( ) ; }
function ( ) { if ( ! this . _debug_context ) window_manager . requestListWindows ( ) ; }
function ( msg ) { if ( msg . profile == window . app . profiles . DEFAULT ) this . _on_reset_state ( ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( ) { if ( callback ) { callback . call ( self ) ; } }
function ( ) { this . nick_try ( this . nickname ) ; if ( this . password ) this . pass ( this . password ) ; this . user ( this . username , this . realname ) ; }
function ( nick ) { this . nick ( nick ) ; this . once ( "432" , this . nick_alt ) ; this . once ( "433" , this . nick_alt ) ; this . once ( "436" , this . nick_alt ) ; }
function JSONP ( req ) { Polling . call ( this , req ) ; this . head = '___eio[' + ( req . query . j || '' ) . replace ( /[^0-9]/g , '' ) + '](' ; this . foot = ');' ; }
function ( err , objectFromDB ) { if ( ! objectFromDB || objectFromDB == '' ) { instance . save ( object , callback , options ) ; } else { callback ( { id : "A  record with id -" + object . id + " is already exists in our database. Please enter new values." } ) ; } }
function ( item , i ) { if ( item . getId ( ) === itemToRemove . getId ( ) ) { self . remove ( itemToRemove ) ; } }
function ( ) { var vars = { title : this . settings ( 'title' ) + this . getId ( ) , id : this . getId ( ) , entity : this . getEntityName ( ) } ; return vars ; }
function ( ) { this . collection ( ) . removeItem ( this ) ; this . getElement ( ) . remove ( ) ; }
function TabCollection ( ) { util . extend ( this , new vegas . _ObjectCollection ( ) ) ; this . _pluralizeMethods ( '_Tab' ) ; }
function ( err , result ) { cb ( err ) ; }
function ( err , rows , fields ) { cb ( err ) ; }
function ( ) { if ( event . shiftKey ) { if ( event . ctrlKey ) { createRibbon ( 'prev' ) } shiftImageUp ( ) } else { focusAboveRibbon ( ) } }
function ( ) { $ ( '.current.image' ) . click ( ) return true }
function ( json ) { self . nosAjaxError ( json ) ; if ( $ . isFunction ( old_error ) ) { old_error . call ( this , params ) ; } }
function ( file , row ) { this . img . css ( { top : top ( row ) , left : left ( file ) , width : blockSize } ) . fadeIn ( anim ) ; }
function done ( e ) { previousPhotoState . reset ( ) ; this . removeEventListener ( 'transitionend' , done ) ; }
function done ( e ) { nextPhotoState . reset ( ) ; this . removeEventListener ( 'transitionend' , done ) ; }
function ( face ) { face = face . map ( project ) ; face . push ( face [ 0 ] ) ; return [ face ] ; }
function ( err , data ) { if ( err ) return callback ( err ) ; addUsersToData ( data , callback ) ; }
function ( ) { body = JSON . parse ( body ) ; test . ok ( body . errorcode === 0 ) ; test . done ( ) ; }
function ( ) { return ( Aloha . activeEditable && this . isNumeratingOn ( ) && ( Aloha . activeEditable . obj . attr ( 'aloha-numerated-headers' ) === 'true' ) ) ; }
function ( item ) { if ( item . active ) { console . log ( "ring! ring!" ) ; ring . play ( ) ; } }
function ( XMLHttpRequest , textStatus , errorThrown ) { $ ( '#validateResultsFolder_Error' ) . show ( ) ; var validationInfo = '' ; validationInfo = '<br/> <b>Reason: </b>' + XMLHttpRequest . message + '<br/> </br>' ; $ ( 'div#midas_challenge_competitor_validatedResultsFolder_Info' ) . html ( validationInfo ) ; }
function ( ) { expect ( function ( ) { BaseModel . extendModule ( "__NON_EXISTENT_MODULE__" , { } ) ; } ) . toThrowError ( ) ; }
function ( _ ) { if ( ! arguments . length ) return width ; width = _ ; return chart ; }
function ( time ) { var url = "bus_tracker/time_until_arrival/" + time ; var timeUntilArrival = $ . ajax ( { type : 'GET' , url : url , async : false } ) . responseText ; return timeUntilArrival ; }
function ( ) { $ ( self . options . target ) . removeClass ( "selected" ) ; self . $el . hide ( ) ; done && done ( ) ; }
function ( ) { this . table = this . get ( 'table' ) ; if ( ! this . table ) { throw "you should specify a table model" ; } this . unset ( 'table' , { silent : true } ) ; }
function ( ) { spyOn ( tablestats . model , 'fetch' ) ; tables . reset ( [ { name : 'test' } ] ) ; expect ( tablestats . model . fetch ) . toHaveBeenCalled ( ) ; }
function ( ) { spyOn ( tablestats . model , 'fetch' ) ; tables . add ( { name : 'test' } ) ; expect ( tablestats . model . fetch ) . toHaveBeenCalled ( ) ; }
function ( t , s ) { return cc . TransitionJumpZoom . create ( t , s ) ; }
function ( t , s ) { return cc . TransitionFade . create ( t , s ) ; }
function ( e ) { detailView . fireEvent ( 'itemSelected' , e ) ; self . parentTab . open ( detailContainerWindow ) ; }
function ( e ) { scrollableView . scrollToView ( resourceIcons ) ; }
function ( ) { var win = worker . _iframeEl . contentWindow , onmessage = win . onmessage ; onmessage . call ( win , { data : obj } ) ; }
function ( doc ) { this . document = doc ; if ( this . document . strand ) { this . drawShape = this . drawOrientedShape ; } else { this . drawShape = this . drawShape ; } }
function ( req , res ) { res . render ( 'migration' ) ; }
function ( error , mediaFile ) { tuid = mediaFile . target ; console . log ( "t_uid = " + tuid ) ; test . ok ( mediaFile . should . have . property ( 'target' ) ) ; test . done ( ) ; }
function ( e ) { t . _editImage ( ) ; }
function ( ) { wrapper . setStyle ( 'display' , '' ) ; this . fireEvent ( 'show' ) ; }
function ( ) { this . fireEvent ( 'hide' ) ; wrapper . setStyle ( 'display' , 'none' ) ; }
function ( ) { return _ . extend ( { } , this . base_options ) ; }
function ( ) { return $ ( 'ul.slot-list li.active' ) . data ( 'itemslot' ) ; }
function ( ) { set ( this , 'location' , get ( this , 'location' ) || window . location ) ; }
function ( ) { var guid = Ember . guidFor ( this ) ; Ember . $ ( window ) . unbind ( 'hashchange.ember-location-' + guid ) ; }
function ( ) { var guid = Ember . guidFor ( this ) ; Ember . $ ( window ) . unbind ( 'popstate.ember-location-' + guid ) ; }
function ( ) { self = this ; $ . post ( "/logoff" , function ( ) { location . reload ( ) ; } ) ; }
function ( name ) { var url = "/views/" + name + ".handlebars" ; var template = $ . ajax ( { url : url , async : false } ) . responseText ; return Handlebars . compile ( template ) ; }
function ( members ) { return members === null ? { } : members ; }
function ( evt ) { return this . _mouseDownOrTouchStart ( evt ) ; }
function Db ( name ) { this . name = name ; this . _stores = Object . create ( null ) ; Calendar . Responder . call ( this ) ; }
function Account ( ) { Calendar . Store . Abstract . apply ( this , arguments ) ; this . _accounts = Object . create ( null ) ; }
function Busytime ( ) { Calendar . Store . Abstract . apply ( this , arguments ) ; this . ids = Object . create ( null ) ; this . times = Object . create ( null ) ; }
function Month ( options ) { Calendar . View . apply ( this , arguments ) ; this . controller = this . app . timeController ; this . children = Object . create ( null ) ; this . _initEvents ( ) ; }
function ( ret ) { ret . set_float ( this . _cmd_move_to . target . x ) ; }
function ( ret ) { ret . set_float ( this . _cmd_move_to . target . y ) ; }
function ( ) { window . location = base_url + "logout" ; }
function ( ) { window . location = base_url + "login" ; }
function ( req , status , err ) { metric . find ( ".g_metricname" ) . removeClass ( "ajaxworking" ) ; metric . find ( ".g_metricname" ) . addClass ( "ajaxerror" ) ; render ( ) ; }
function ( ) { delete graph_lines [ metric . find ( '.g_metricname' ) . text ( ) ] ; metric . remove ( ) ; render ( ) ; }
function ( e ) { if ( e . which === 13 ) { edit . blur ( ) ; get_events ( edit , id ( 'eventcount' , graph ) ) ; } }
function ( colpkr ) { $ ( editedobject ) . css ( "z-index" , 0 ) $ ( "#deleteBtn" ) . css ( "z-index" , 0 ) if ( ! isdisabled ) { $ ( colpkr ) . fadeIn ( 500 ) ; } return false ; }
function ( colpkr ) { $ ( editedobject ) . css ( "z-index" , 20 ) $ ( "#deleteBtn" ) . css ( "z-index" , 40 ) $ ( colpkr ) . fadeOut ( 500 ) ; return false ; }
function showOrchestrationView ( ) { $ ( "#contextbar" ) . css ( "visibility" , "hidden" ) togglePaginator ( true ) ; hidePresentationView ( ) ; findAndArrangeSlides ( ) ; }
function ( matrix ) { Style . setTransform ( this . play , matrix ) ; var css = Style . toCSS ( matrix , FIXED ) ; if ( targetobject != undefined ) { } }
function ( matrix ) { var css = Style . toCSS ( matrix , FIXED ) ; }
function ( node , property , value ) { console . log ( "NODE: " + node ) ; node . style . setProperty ( property , value , PRIORITY ) ; }
function Cluster ( ) { EventEmitter . call ( this ) ; }
function ( f ) { f . apply ( base , args ) ; }
function ( note ) { $ ( "input[name='notename']" ) . val ( note . title ) ; $ ( "textarea#id_note_message" ) . val ( note . message ) ; $ ( "#last-edited-note" ) . html ( noteID ) ; }
function ( req , res ) { res . send ( 404 ) ; }
function ( path , file ) { var trackerLocation = path + '/' + _filename ; if ( _fs . existsSync ( trackerLocation ) ) { _fs . unlinkSync ( trackerLocation ) ; } _createTrackerFile ( path , file ) ; }
function ( ) { return this . id + "/select" ; }
function ( ) { return this . id + "/show" ; }
function ( index ) { var thumbNotifier = dojo . byId ( "loadingDiv_" + this . id + "_" + index ) ; if ( thumbNotifier ) { this . _setThumbClass ( thumbNotifier , "thumbLoaded" ) ; } this . _loadedImages [ index ] = true ; }
function ( ) { return gf . CLIENT ? ( this . clientState_ || this . state_ ) : this . state_ ; }
function ( ) { this . dirtyFlags = 0 ; this . state_ . resetDirtyState ( ) ; if ( gf . CLIENT && this . clientState_ ) { this . clientState_ . resetDirtyState ( ) ; } }
function ( entities ) { for ( var n = 0 ; n < entities . length ; n ++ ) { this . updateEntity ( entities [ n ] ) ; } }
function fireCallback ( callback , $el , event , touched ) { if ( typeof callback == 'function' ) return callback . call ( $el [ 0 ] , event , touched ) ; }
function ( event ) { if ( opts . onlyIf ( this ) ) { return fireCallback ( opts . callback , $ ( this ) , event , false ) ; } }
function setLoadingStatus ( ) { }
function clearLoadingStatus ( ) { }
function createFriendListError ( data ) { id = data [ 'cluster_id' ] ; clearSavingFriendList ( id ) ; displayError ( "Could not create friend list" ) ; }
function ( ) { var location = document . location . protocol + "//" + document . location . hostname return "javascript:void(function(){ if(window.location.host.match(/makr/)){alert('Drag the \"Remix\" button to your bookmarks bar to easily remix any photo while you browse the web!');return};\     if(document.getElementsByTagName('head').length ==0){document.getElementsByTagName('html')[0].appendChild(document.createElement('head'))} \     var head= document.getElementsByTagName('head')[0]; \     var script= document.createElement('script'); \     script.type= 'text/javascript'; \     script.src= '" + location + "/bookmarklet.js'; \     script.id= 'makrio-bm-script'; \     script.setAttribute('data-origin','" + location + "'); \     head.appendChild(script);}());" ; }
function endListener ( ) { logIf ( 1 , "Client connection ended" , socket ) ; }
function ( e ) { showAddNodeDialog ( ) ; e . preventDefault ( ) ; }
function ( e ) { CSLEDIT . controller . exec ( "deleteNode" , [ CSLEDIT . viewController . selectedNode ( ) ] ) ; e . preventDefault ( ) ; }
function ( ) { return this . name + ": " + this . message ; }
function ( item ) { var message = item . sourceURL + ":" + item . line ; if ( item . function ) message += " in " + item . function ; console . log ( "  " + message ) ; }
function ( ) { console . log ( '' ) ; console . log ( 'Example of how to use redis_mon to set a key/value pair' ) ; console . log ( 'node redis_mon -h 127.0.0.1 -p 6379 -k testKey -d testData -s"' ) ; }
function ( ) { console . log ( '' ) ; for ( s in helpText ) { console . log ( s + ' : ' + helpText [ s ] ) ; } }
function ( body ) { callback . call ( that , body ) ; }
function ( value ) { if ( value !== 'undefined' ) { debugging = value ; } spaLog ( 'debug mode enabled' ) ; }
function ( ) { this . removeAllFields ( ) ; this . resetLocalStorage ( ) ; this . addCommand ( "" ) ; }
function do_trial ( block , trial ) { opts . on_trial_start ( ) ; jsPsych [ trial . type ] [ "trial" ] . call ( this , DOM_target , block , trial , 1 ) ; opts . on_trial_finish ( ) ; }
function getTypesClass ( sel , isClass ) { debug ( '_getTypesClass: %s, isClass: %s' , sel , isClass ) var method = this [ 'get' + ( isClass ? 'Class' : 'Instance' ) + 'Method' ] ( sel ) return method ? method . getTypes ( ) : null }
function ( ) { smileyParser = new SmileyParser ( ) ; replaceSmileys ( document ) ; window . document . addEventListener ( 'DOMNodeInserted' , function ( event ) { replaceSmileys ( event . target ) ; } , false ) ; }
function hasPopped ( ) { return ! ! window . history . state || popped }
function getWatchRowIndex ( row ) { var index = - 1 ; for ( ; row ; row = row . previousSibling ) { if ( Css . hasClass ( row , "watchRow" ) ) ++ index ; } return index ; }
function ( ) { DocumentJS ( 'risk/risk.html' , { markdown : [ 'risk' ] } ) ; }
function ( ) { module ( "risk" ) ; test ( "risk testing works" , function ( ) { ok ( true , "an assert is run" ) ; } ) ; }
function ( ) { view . init ( this ) ; if ( navigator . network && navigator . network . connection == "NONE" ) { view . showError ( "networkNone" , "#error" , "There is no network connection" ) ; } }
function ( className , element , msg ) { var el = document . querySelector ( element ) ; if ( el ) el . innerText = msg ; document . body . className = className ; }
function ( opt_config ) { opt_config = opt_config || { } ; this . _readOnlyVar = 'read only' ; this . readAndWrite = 'read and write' ; return this ; }
function ( opt_config ) { opt_config = opt_config || { } ; this . _readOnlyVar = 'read only' ; this . readAndWrite = 'read and write' ; return this ; }
function idFromString ( id ) { return BSON . ObjectID . createFromHexString ( id ) ; }
function ( node , callback ) { if ( node . self ) { node . id = node . self . replace ( this . removeCredentials ( this . url ) + '/db/data/node/' , '' ) ; } callback ( null , node ) ; }
function cm_handleEvent ( evt ) { ListMenu . request ( evt . detail . contextmenu . items , function sm_clickHandler ( action ) { evt . detail . contextMenuItemSelected ( action ) ; } ) ; }
function onload ( ) { this . onload = empty ; this . onerror = empty ; self . onData ( this . responseText ) ; self . get ( ) ; }
function ( ) { collector = echollage . collector ( 'AR6XZ861187FB4CECD' , update ) ; echollage . display . init ( ) ; }
function ( ) { var cache = get_cache_service ( ) ; var session = cache . createSession ( sessionName , storagePolicy , Components . interfaces . nsICache . STREAM_BASED ) ; session . asyncOpenCacheEntry ( key , access , this ) ; }
function Boiler ( ) { this . debugging = false ; this . filenameIdMap = { } ; this . id = 0 ; this . everything = '' ; }
function ( ) { return "(function(everything){\n  window.boiler={main:{}};\n  var idModuleMap={};\n  function emulateRequire(pathIdMap){\n    function require(path, opt){\n      var exports = idModuleMap[pathIdMap[path]];\n      return exports;\n    }\n    return require;\n  }\n  function register(id,pathIdMap,factory){\n    var module={exports:{}};\n    factory.call(this,emulateRequire(pathIdMap),module.exports,module);\n    window.boiler.main=idModuleMap[id]=module.exports;\n  }\n  everything.call(this,register);\n}).call(this,function(register){\n" + this . everything + "\n});" ; }
function ( content , filename ) { code = content ; return cmp . call ( this , "require = function(req) {\n  var require = function(path, opt) {\n    var res;\n    module.__boiler_hook_in(req.resolve, path, opt);\n    try {\n      res = req.call(this, path);\n    } catch (err) {\n      module.__boiler_hook_error(err);\n    } finally {\n      module.__boiler_hook_out();\n    }\n    return res;\n  };\n  for (var i in req) {\n    require[i] = req[i];\n  }\n  return require;\n}(require);\n" + content , filename ) ; }
function ( project ) { callback ( project ? project . children : [ ] ) ; }
function ( projects ) { if ( projects && projects . length > 0 ) { callback ( projects . slice ( 0 ) ) ; } else { callback ( [ ] ) ; } }
function ( ) { var mediator = Cc [ '@mozilla.org/appshell/window-mediator;1' ] . getService ( Ci . nsIWindowMediator ) ; var document = mediator . getMostRecentWindow ( 'navigator:browser' ) . document ; var navBar = document . getElementById ( 'toolbar-button' ) ; popupPanel . show ( navBar ) ; }
function ( success , data ) { sakai . api . Util . startup ( data ) ; sakai . api . i18n . init ( data ) ; }
function ( err , cleaned ) { assert . deepEqual ( err . message , 'String is not in range' , 'len test (negative case)' ) ; }
function ( err , cleaned ) { assert . deepEqual ( err . message , 'String is not in range' , 'len test (negative case 2)' ) ; }
function ( err , cleaned ) { assert . deepEqual ( err . message , 'String is not in range' , 'notContains test (negative case)' ) ; }
function ( ) { this . deferred = new $ . Deferred ( ) ; console . log ( this . deferred ) ; }
function ( error , result ) { readyFn ( client ) ; }
function ( err , collection ) { if ( err ) { self . conn . emit ( 'error' , err ) ; } else { self . collection = collection ; Collection . prototype . onOpen . call ( self ) ; } }
function ( ) { cc . Assert ( false , "cc.IntervalAction: reverse not implemented." ) ; return null ; }
function ( ) { if ( this . _last != - 1 ) { this . _actions [ this . _last ] . stop ( ) ; } this . _super ( ) ; }
function ( target ) { this . _total = 0 ; this . _nextDt = this . _innerAction . getDuration ( ) / this . _duration ; this . _super ( target ) ; this . _innerAction . startWithTarget ( target ) ; }
function ( target ) { this . _super ( target ) ; if ( this . _animation . getRestoreOriginalFrame ( ) ) { this . _origFrame = target . displayFrame ( ) ; } this . _nextFrame = 0 ; this . _executedLoops = 0 ; }
function ( sizeInPoints ) { return new cc . Size ( sizeInPoints . width * cc . CONTENT_SCALE_FACTOR ( ) , sizeInPoints . height * cc . CONTENT_SCALE_FACTOR ( ) ) ; }
function ( sizeInPixels ) { return new cc . Size ( sizeInPixels . width / cc . CONTENT_SCALE_FACTOR ( ) , sizeInPixels . height / cc . CONTENT_SCALE_FACTOR ( ) ) ; }
function ( frame ) { var animFrame = new cc . AnimationFrame ( ) ; animFrame . initWithSpriteFrame ( frame , 1 , null ) ; this . _frames . push ( animFrame ) ; this . _totalDelayUnits ++ ; }
function ( arrayOfSpriteFrameNames , delay ) { var animation = new cc . Animation ( ) ; animation . initWithSpriteFrames ( arrayOfSpriteFrameNames , delay ) ; return animation ; }
function ( seconds ) { if ( ! seconds ) return 'n/a' var d = new Date ( seconds * 1000 ) return d . getDate ( ) + '/' + d . getMonth ( ) + '/' + d . getFullYear ( ) }
function ( seconds ) { var d = new Date ( ) seconds = d . getTime ( ) / 1000 - seconds return Helpers . secondsToString ( seconds ) }
function ( ) { debugger ; console . warn ( 'hey' ) ; this . remove ( ) }
function ( value , index ) { if ( Math . pow ( 2 , index ) & status ) statuses . push ( value ) }
function ( torrent , torrent_list ) { var view = new TorrentRow ( { model : torrent } ) this . $el . append ( view . render ( ) . el ) }
function ( ) { App = new AppView ( { el : $ ( 'body' ) } ) }
function ( k , v ) { $ ( '#documentsTableID' ) . dataTable ( ) . fnAddData ( [ '<button class="enabled" id="deleteDoc"><img src="/_admin/html/media/icons/doc_delete_icon16.png" width="16" height="16"></button><button class="enabled" id="editDoc"><img src="/_admin/html/media/icons/doc_edit_icon16.png" width="16" height="16"></button>' , v . _id , v . _rev , '<pre class="prettify">' + cutByResolution ( JSON . stringify ( v ) ) + '</pre>' ] ) ; }
function ( options ) { return this . map ( function ( model ) { return model . toJSON ( options ) ; } ) ; }
function ( route ) { route = route . replace ( escapeRegExp , '\\$&' ) . replace ( namedParam , '([^\/]+)' ) . replace ( splatParam , '(.*?)' ) ; return new RegExp ( '^' + route + '$' ) ; }
function ( ) { parent . apply ( this , arguments ) ; }
function ( object , prop ) { if ( ! ( object && object [ prop ] ) ) return null ; return _ . isFunction ( object [ prop ] ) ? object [ prop ] ( ) : object [ prop ] ; }
function ( value , index , list ) { if ( result || ( result = iterator . call ( context , value , index , list ) ) ) return breaker ; }
function ( value ) { return value === target ; }
function ( value ) { return ( _ . isFunction ( method ) ? method || value : value [ method ] ) . apply ( value , args ) ; }
function ( obj ) { return obj [ val ] ; }
function ( obj ) { return _ . isArray ( obj ) ? obj . length : _ . keys ( obj ) . length ; }
function ( memo , value ) { if ( _ . isArray ( value ) ) return memo . concat ( shallow ? value : _ . flatten ( value ) ) ; memo [ memo . length ] = value ; return memo ; }
function ( ) { var key = hasher . apply ( this , arguments ) ; return _ . has ( memo , key ) ? memo [ key ] : ( memo [ key ] = func . apply ( this , arguments ) ) ; }
function ( ) { return func . apply ( null , args ) ; }
function ( ) { var args = [ func ] . concat ( slice . call ( arguments , 0 ) ) ; return wrapper . apply ( this , args ) ; }
function ( times , func ) { if ( times <= 0 ) return func ( ) ; return function ( ) { if ( -- times < 1 ) { return func . apply ( this , arguments ) ; } } ; }
function ( source ) { for ( var prop in source ) { obj [ prop ] = source [ prop ] ; } }
function ( obj ) { if ( ! _ . isObject ( obj ) ) return obj ; return _ . isArray ( obj ) ? obj . slice ( ) : _ . extend ( { } , obj ) ; }
function ( obj ) { return toString . call ( obj ) == '[object Array]' ; }
function ( obj ) { return toString . call ( obj ) == '[object Arguments]' ; }
function ( obj ) { return toString . call ( obj ) == '[object Function]' ; }
function ( obj ) { return toString . call ( obj ) == '[object String]' ; }
function ( obj ) { return toString . call ( obj ) == '[object Number]' ; }
function ( obj ) { return obj !== obj ; }
function ( obj ) { return toString . call ( obj ) == '[object RegExp]' ; }
function ( date , allDay , jsEvent , view ) { KYT . vent . trigger ( "calendar:" + calendarDefinition . id + ":dayClick" , date , allDay , jsEvent , view ) ; }
function ( url , data , callback ) { KYT . showThrob = true ; $ . post ( url , data , function ( result ) { repositoryCallback ( result , callback ) } ) ; }
function ( url , data , callback ) { KYT . showThrob = true ; $ . get ( url , data , function ( result ) { repositoryCallback ( result , callback ) ; } ) ; }
function ( e ) { this . app . stopTransition = true ; var index = getIndexFromId ( e . target , "editList" ) ; this . deleteList = index ; deleteConfItem ( index ) ; }
function ( ) { isComplete = true ; isDelete = false ; dom . byId ( "dlg_title" ) . innerHTML = "Mark As Complete" ; dom . byId ( "dlg_text" ) . innerHTML = "Are you sure you want to mark this item as complete?" ; show ( ) ; }
function ( ) { isComplete = false ; isDelete = true ; dom . byId ( "dlg_title" ) . innerHTML = "Delete" ; dom . byId ( "dlg_text" ) . innerHTML = "Are you sure you want to delete this item?" ; show ( ) ; }
function ( data ) { this . _data = data ; if ( ! data ) return ; if ( data . value ) this . setValue ( data . value ) ; this . draw ( ) ; }
function SignalTree ( listeners ) { Object . defineProperties ( this , { _listeners : { value : listeners && Object . prototype . toString . call ( listeners ) === '[object Array]' ? listeners : [ ] , writable : true } } ) }
function ( topic ) { removeListener ( topic , this ) }
function ( directions ) { var topicObject = this . get ( directions , true ) listenerData . _topics . push ( topicObject ) insertListener ( topicObject , listenerData ) }
function ( topic ) { topic = this . get ( topic , false ) if ( topic ) removeListener ( topic , callback ) }
function Topic ( listeners ) { Object . defineProperties ( this , { _listeners : { value : listeners && Object . prototype . toString . call ( listeners ) === '[object Array]' ? listeners : [ ] , writable : true } } ) }
function ( ) { var prototype = Object . create ( this ) ; if ( this . value && baseNode . isPrototypeOf ( this . value ) ) { prototype . value = this . value . create ( ) ; } return prototype ; }
function ( ) { this . showpad ( this . hidectx . getImageData ( 0 , 0 , this . hidepad . width , this . hidepad . height ) ) ; }
function init_pic_size ( dom ) { var img = $ ( "img.foto" , dom ) img . width ( 105 ) ; img . height ( 105 ) ; }
function ( data ) { if ( data !== "" ) { self . xmppHandler . connect ( data . XmppUser , data . XmppPassword ) ; } }
function view_notFound ( template ) { this . root . _response . statusCode = 404 ; this . root . _child_views = { } ; this . root . render ( template ) ; }
function ( ) { this . callSuper ( 'createAttributes' ) ; this . declareSkinPart ( 'controlBar' , false , 'core.Group' ) ; }
function adminPanel_extension_onload ( ) { adminPanel_extension_resize ( ) ; subactivelink = "#adminPanel_extension_sub1" ; $ ( "#loader" ) . hide ( ) ; }
function adminPanel_extension_subtab_autoexpand ( ) { adminPanel_extension_activePanel = $ . cookie ( 'adminPanel_extension_activePanel_' + userID ) ; if ( adminPanel_extension_activePanel ) { adminPanel_extension_subtab_expand ( adminPanel_extension_activePanel ) ; } else { adminPanel_extension_subtab_expand ( 1 ) ; } }
function adminPanel_extension_triggerCHK ( ) { if ( $ ( '.adminPanel_extension' ) . css ( 'display' ) == "block" ) { adminPanel_extension_refreshSubtab ( 'customers' ) ; adminPanel_extension_refreshSubtab ( 'projects' ) ; } else { ap_chk_hook_flag ++ ; } }
function adminPanel_extension_triggerCHP ( ) { if ( $ ( '.adminPanel_extension' ) . css ( 'display' ) == "block" ) { adminPanel_extension_refreshSubtab ( 'projects' ) ; } else { ap_chp_hook_flag ++ ; } }
function adminPanel_extension_triggerCHE ( ) { if ( $ ( '.adminPanel_extension' ) . css ( 'display' ) == "block" ) { adminPanel_extension_refreshSubtab ( 'activities' ) ; } else { ap_che_hook_flag ++ ; } }
function adminPanel_extension_triggerUSR ( ) { if ( $ ( '.adminPanel_extension' ) . css ( 'display' ) == "block" ) { adminPanel_extension_refreshSubtab ( 'users' ) ; } else { ap_usr_hook_flag ++ ; } }
function ( data ) { adminPanel_extension_refreshSubtab ( 'users' ) ; adminPanel_extension_editUser ( data ) ; }
function ( data ) { adminPanel_extension_refreshSubtab ( 'users' ) ; }
function adminPanel_extension_showDeletedUsers ( ) { $ . post ( adminPanel_extension_path + "processor.php" , { axAction : "toggleDeletedUsers" , axValue : 1 , id : 0 } , function ( data ) { adminPanel_extension_refreshSubtab ( 'users' ) ; } ) ; }
function ( data ) { adminPanel_extension_refreshSubtab ( 'users' ) ; }
function adminPanel_extension_hideDeletedUsers ( ) { $ . post ( adminPanel_extension_path + "processor.php" , { axAction : "toggleDeletedUsers" , axValue : 0 , id : 0 } , function ( data ) { adminPanel_extension_refreshSubtab ( 'users' ) ; } ) ; }
function ( data ) { adminPanel_extension_refreshSubtab ( 'groups' ) ; }
function ( data ) { adminPanel_extension_refreshSubtab ( 'status' ) ; }
function adminPanel_extension_editUser ( id ) { floaterShow ( adminPanel_extension_path + "floaters.php" , "editUser" , 0 , id , 400 , 230 ) ; }
function adminPanel_extension_editGroup ( id ) { floaterShow ( adminPanel_extension_path + "floaters.php" , "editGroup" , 0 , id , 450 , 100 ) ; }
function adminPanel_extension_editStatus ( id ) { floaterShow ( adminPanel_extension_path + "floaters.php" , "editStatus" , 0 , id , 450 , 100 ) ; }
function ( ) { adminPanel_extension_refreshSubtab ( 'users' ) ; adminPanel_extension_refreshSubtab ( 'groups' ) ; hook_users_changed ( ) ; }
function ( data ) { if ( confirm ( data ) ) { $ . post ( adminPanel_extension_path + "processor.php" , { axAction : "deleteGroup" , axValue : 1 , id : id } , function ( ) { adminPanel_extension_refreshSubtab ( 'groups' ) ; } ) ; } }
function ( data ) { if ( confirm ( data ) ) { $ . post ( adminPanel_extension_path + "processor.php" , { axAction : "deleteStatus" , axValue : 1 , id : id } , function ( ) { adminPanel_extension_refreshSubtab ( 'status' ) ; } ) ; } }
function ( data ) { $ ( "#ban" + id ) . html ( data ) ; $ ( "#ban" + id ) . attr ( { "ONCLICK" : "adminPanel_extension_banUser('" + id + "'); return false;" } ) ; }
function ( data ) { $ ( "#ban" + id ) . html ( data ) ; $ ( "#ban" + id ) . attr ( { "ONCLICK" : "adminPanel_extension_unbanUser('" + id + "'); return false;" } ) ; }
function ( data ) { $ ( '#adminPanel_extension_checkupdate' ) . html ( data ) ; }
function adminPanel_extension_checkupdate ( ) { $ . post ( "checkupdate.php" , function ( data ) { $ ( '#adminPanel_extension_checkupdate' ) . html ( data ) ; } ) ; }
function ( ) { if ( adminPanel_extension_resizeTimer ) clearTimeout ( adminPanel_extension_resizeTimer ) ; adminPanel_extension_resizeTimer = setTimeout ( adminPanel_extension_resize , 500 ) ; }
function ( ) { var adminPanel_extension_resizeTimer = null ; $ ( window ) . bind ( 'resize' , function ( ) { if ( adminPanel_extension_resizeTimer ) clearTimeout ( adminPanel_extension_resizeTimer ) ; adminPanel_extension_resizeTimer = setTimeout ( adminPanel_extension_resize , 500 ) ; } ) ; }
function expense_extension_onload ( ) { expense_extension_applyHoverIntent ( ) ; expense_extension_resize ( ) ; $ ( "#loader" ) . hide ( ) ; lists_visible ( true ) ; }
function ( ) { $ ( '#expenses tr' ) . removeClass ( 'hover' ) ; $ ( this ) . addClass ( 'hover' ) ; }
function expense_extension_resize ( ) { expense_extension_set_tableWrapperWidths ( ) ; expense_extension_set_heightTop ( ) ; }
function expense_extension_set_tableWrapperWidths ( ) { expense_extension_get_dimensions ( ) ; $ ( "#expenses_head,#expenses" ) . css ( "width" , expenses_width ) ; expense_extension_set_TableWidths ( ) ; }
function expense_extension_set_heightTop ( ) { expense_extension_get_dimensions ( ) ; if ( ! extShrinkMode ) { $ ( "#expenses" ) . css ( "height" , expenses_height ) ; } else { $ ( "#expenses" ) . css ( "height" , "70px" ) ; } expense_extension_set_TableWidths ( ) ; }
function expense_extension_triggerTSS ( ) { if ( $ ( '.ki_expenses' ) . css ( 'display' ) == "block" ) { expense_extension_reload ( ) ; } else { expense_tss_hook_flag ++ ; } }
function expense_extension_triggerCHK ( ) { if ( $ ( '.ki_expenses' ) . css ( 'display' ) == "block" ) { expense_extension_reload ( ) ; } else { expense_chk_hook_flag ++ ; } }
function expense_extension_triggerCHP ( ) { if ( $ ( '.ki_expenses' ) . css ( 'display' ) == "block" ) { expense_extension_reload ( ) ; } else { expense_chp_hook_flag ++ ; } }
function expense_extension_triggerCHE ( ) { if ( $ ( '.ki_expenses' ) . css ( 'display' ) == "block" ) { expense_extension_reload ( ) ; } else { expense_che_hook_flag ++ ; } }
function ( data ) { if ( data == 1 ) { expense_extension_reload ( ) ; } else { alert ( "~~an error occured!~~" ) } }
function expense_editRecord ( id ) { floaterShow ( expense_extension_path + "floaters.php" , "add_edit_record" , 0 , id , 600 , 300 ) ; }
function comment ( id ) { $ ( '#expenses_c' + id ) . toggle ( ) ; return false ; }
function expense_add_edit_validate ( ) { if ( $ ( '#add_edit_expense_project_ID' ) . val ( ) == undefined ) $ ( '#expenses_ext_form_add_edit_record .btn_ok' ) . hide ( ) ; else $ ( '#expenses_ext_form_add_edit_record .btn_ok' ) . show ( ) ; }
function ( ) { if ( expense_resizeTimer ) clearTimeout ( expense_resizeTimer ) ; expense_resizeTimer = setTimeout ( expense_extension_resize , 500 ) ; }
function ( ) { var expense_resizeTimer = null ; $ ( window ) . bind ( 'resize' , function ( ) { if ( expense_resizeTimer ) clearTimeout ( expense_resizeTimer ) ; expense_resizeTimer = setTimeout ( expense_extension_resize , 500 ) ; } ) ; }
function ( ) { export_extension_select_filter ( ) ; }
function ( ) { export_extension_select_location ( ) ; }
function ( ) { export_extension_select_timeformat ( ) ; }
function export_extension_resize ( ) { export_extension_set_tableWrapperWidths ( ) ; export_extension_set_heightTop ( ) ; }
function export_extension_set_tableWrapperWidths ( ) { export_extension_get_dimensions ( ) ; $ ( "#export_head,#xp" ) . css ( "width" , export_width ) ; export_extension_set_TableWidths ( ) ; }
function export_extension_triggerTSS ( ) { if ( $ ( '.ki_export' ) . css ( 'display' ) == "block" ) { export_extension_reload ( ) ; } else { xp_tss_hook_flag ++ ; } }
function export_extension_triggerCHK ( ) { if ( $ ( '.ki_export' ) . css ( 'display' ) == "block" ) { export_extension_reload ( ) ; } else { xp_chk_hook_flag ++ ; } }
function export_extension_triggerCHP ( ) { if ( $ ( '.ki_export' ) . css ( 'display' ) == "block" ) { export_extension_reload ( ) ; } else { xp_chp_hook_flag ++ ; } }
function export_extension_triggerCHE ( ) { if ( $ ( '.ki_export' ) . css ( 'display' ) == "block" ) { export_extension_reload ( ) ; } else { xp_che_hook_flag ++ ; } }
function ( ) { if ( ! $ ( '#export_head .' + this ) . hasClass ( 'disabled' ) ) { columnsString += ( firstColumn ? '' : '|' ) + this ; firstColumn = false ; } }
function ( ) { if ( export_resizeTimer ) clearTimeout ( export_resizeTimer ) ; export_resizeTimer = setTimeout ( export_extension_resize , 500 ) ; }
function ( ) { var export_resizeTimer = null ; $ ( window ) . bind ( 'resize' , function ( ) { if ( export_resizeTimer ) clearTimeout ( export_resizeTimer ) ; export_resizeTimer = setTimeout ( export_extension_resize , 500 ) ; } ) ; }
function ts_ext_onload ( ) { ts_ext_applyHoverIntent ( ) ; ts_ext_resize ( ) ; $ ( "#loader" ) . hide ( ) ; lists_visible ( true ) ; }
function ( ) { $ ( '#timeSheet tr' ) . removeClass ( 'hover' ) ; $ ( this ) . addClass ( 'hover' ) ; }
function ts_ext_set_tableWrapperWidths ( ) { ts_ext_get_dimensions ( ) ; $ ( "#timeSheet_head,#timeSheet" ) . css ( "width" , timeSheet_width ) ; ts_ext_set_TableWidths ( ) ; }
function ts_ext_set_heightTop ( ) { ts_ext_get_dimensions ( ) ; if ( ! extShrinkMode ) { $ ( "#timeSheet" ) . css ( "height" , timeSheet_height ) ; } else { $ ( "#timeSheet" ) . css ( "height" , "70px" ) ; } ts_ext_set_TableWidths ( ) ; }
function ( data ) { $ ( "#timeSheet" ) . html ( data ) ; ts_ext_set_TableWidths ( ) ts_ext_applyHoverIntent ( ) ; }
function editRecord ( id ) { floaterShow ( ts_ext_path + "floaters.php" , "add_edit_timeSheetEntry" , 0 , id , 650 , 500 ) ; }
function ts_add_edit_validate ( ) { if ( $ ( '#add_edit_timeSheetEntry_projectID' ) . val ( ) == undefined || $ ( '#add_edit_timeSheetEntry_activityID' ) . val ( ) == undefined ) $ ( '#ts_ext_form_add_edit_timeSheetEntry .btn_ok' ) . hide ( ) ; else $ ( '#ts_ext_form_add_edit_timeSheetEntry .btn_ok' ) . show ( ) ; }
function ( response ) { hook_timeframe_changed ( ) ; }
function lists_customerShrinkShow ( ) { $ ( '#customerShrink' ) . css ( "background-color" , "red" ) ; }
function lists_customerShrinkHide ( ) { $ ( '#customerShrink' ) . css ( "background-color" , "transparent" ) ; }
function lists_userShrinkShow ( ) { $ ( '#userShrink' ) . css ( "background-color" , "red" ) ; }
function lists_userShrinkHide ( ) { $ ( '#userShrink' ) . css ( "background-color" , "transparent" ) ; }
function lists_change_color ( tableRow , highLight ) { if ( highLight ) { $ ( tableRow ) . parents ( "tr" ) . addClass ( "highlightProjectForPreselection" ) ; } else { $ ( tableRow ) . parents ( "tr" ) . removeClass ( "highlightProjectForPreselection" ) ; } }
function ( event1 , event2 ) { return new Date ( event2 . time ) - new Date ( event1 . time ) ; }
function sendSms ( ) { SmsIntegration . sendSms ( currentContact . tel [ 0 ] . number ) ; }
function ( e ) { cc . keypadDispatcher . dispatchKeypadMSG ( e , true ) ; cc . IMEDispatcher . sharedDispatcher ( ) . processKeycode ( e . keyCode ) ; }
function ( ) { tinyMCE . execCommand ( 'mceRemoveControl' , false , this . id ) ; }
function ( ) { if ( checkbox . checked ) { tinyMCE . execCommand ( "mceAddControl" , false , textareaId ) ; } else { tinyMCE . execCommand ( "mceRemoveControl" , false , textareaId ) ; } }
function ( data ) { alert ( data . msg ) ; window . location . href = "res_list.jsp" ; }
function ( data ) { alert ( data . msg ) ; $ ( the ) . parent ( ) . parent ( ) . remove ( ) ; }
function ( data ) { alert ( data . msg ) ; window . location . href = window . location . href ; }
function ( data ) { alert ( data . msg ) ; window . location . href = "fix_public_item_list.jsp" ; }
function ( data ) { alert ( data . msg ) ; window . location . href = window . location . href ; }
function ( data ) { alert ( data . msg ) ; obj . hide ( ) ; }
function ( data ) { alert ( data . msg ) ; window . location . href = "cmpy_list.jsp" ; }
function ( data ) { alert ( data . msg ) ; window . location . href = window . location . href ; }
function ( data ) { alert ( data . msg ) ; obj . hide ( ) ; }
function ( data ) { alert ( data . msg ) ; window . location . href = "smsc_list.jsp" ; }
function ( data ) { alert ( data . msg ) ; window . location . href = window . location . href ; }
function ( data ) { alert ( data . msg ) ; window . parent . location . href = 'cf_item_list.jsp' ; }
function ( data ) { alert ( data . msg ) ; window . parent . location . href = 'ef_item_list.jsp' ; }
function SlotLite ( listener , target ) { this . next = null ; this . prev = null ; this . listener = listener ; this . target = target ; }
function ( e ) { t . _editImage ( ) ; }
function ( t , s ) { return cc . TransitionJumpZoom . create ( t , s ) ; }
function ( t , s ) { return cc . TransitionFade . create ( t , s ) ; }
function ( subscriber , channel ) { if ( ! rules [ channel ] ) { throw new Error ( "No permissions defined for " + channel ) ; } var test = rules [ channel ] [ subscriber ] ; return test === undefined ? false : test ; }
function ( ) { return helper . resolveAPromise ( longLink ) ; }
function ( ) { expect ( logging . error ) . not . toHaveBeenCalled ( ) ; }
function ( ) { expect ( transform . uriToLinkID ) . toHaveBeenCalledWith ( url ) ; }
function ( ) { expect ( logging . log ) . toHaveLogged ( { message : 'Link hit' , linkID : transformLinkID } ) ; }
function ( ) { return helper . resolveAPromise ( longLink ) ; }
function ( ) { spyOn ( transform , 'uriToLinkID' ) . andCallThrough ( ) ; spyOn ( db , 'addNewLinkHit' ) . andCallFake ( function ( ) { return helper . resolveAPromise ( longLink ) ; } ) ; }
function ( ) { return helper . resolveAPromise ( longLink ) ; }
function ( ) { spyOn ( db , 'addNewLinkHit' ) . andCallFake ( function ( ) { return helper . resolveAPromise ( longLink ) ; } ) ; }
function ( ) { return helper . rejectAPromise ( { message : message , error : error , code : 404 } ) ; }
function ( ) { expect ( logging . error ) . toHaveLogged ( { message : message , error : error , code : code } ) ; expect ( logging . log ) . not . toHaveBeenCalled ( ) ; }
function ( ) { return helper . rejectAPromise ( { message : message , error : error , code : code } ) ; }
function ( status ) { status = status || 500 ; options . logger . error ( "errorFinish(" + status + ") " + originalUrl ) ; var newbuf = new Buffer ( 0 ) ; callback ( originalUrl , newbuf , status ) ; }
function ( ) { expect ( 1 ) ; stop ( ) ; ua . importsrc ( "baidu.dom.append,baidu.dom.each,baidu.dom.trigger,baidu.dom.find,baidu.dom.appendTo,baidu.dom.removeAttr,baidu.dom.insertAfter,baidu.dom.html,baidu.dom.eq,baidu.dom.remove,baidu.dom.contents" , function ( ) { start ( ) ; prepareTest ( ) ; ok ( true , 'ok' ) ; } , "baidu.dom.contents" , "baidu.dom.attr" ) ; }
function ( ) { expect ( 1 ) ; stop ( ) ; ua . importsrc ( "baidu.dom.append,baidu.dom.each,baidu.dom.trigger,baidu.dom.find,baidu.dom.appendTo,baidu.dom.removeAttr,baidu.dom.insertAfter,baidu.dom.html,baidu.dom.eq,baidu.dom.remove,baidu.dom.removePorp,baidu.dom.contents" , function ( ) { start ( ) ; prepareTest ( ) ; ok ( true , 'ok' ) ; } , "baidu.dom.contents" , "baidu.dom.prop" ) ; }
function ( val , key ) { equal ( div . attr ( key ) , val , "Attribute `" + key + "` exists, and has a value of `" + val + "`" ) ; }
function ( val , key ) { equal ( div . attr ( key ) , undefined , "Attribute `" + key + "` was removed" ) ; }
function ( ) { this . options . page_title = this . model . get ( 'title' ) [ 0 ] . value ; }
function ( inlineWidget ) { editor . addInlineWidget ( pos , inlineWidget ) ; PerfUtils . addMeasurement ( PerfUtils . OPEN_INLINE_EDITOR ) ; result . resolve ( ) ; }
function ( error ) { result . reject ( error ) ; }
function getNativeBracketsDirectoryPath ( ) { var pathname = decodeURI ( window . location . pathname ) ; var directory = pathname . substr ( 0 , pathname . lastIndexOf ( "/" ) ) ; return convertToNativePath ( directory ) ; }
function ( ) { return "[DirectoryEntry " + this . fullPath + "]" ; }
function _getDefaultProjectPath ( ) { var loadedPath = decodeURI ( window . location . pathname ) ; var bracketsSrc = loadedPath . substr ( 0 , loadedPath . lastIndexOf ( "/" ) ) ; bracketsSrc = FileUtils . convertToNativePath ( bracketsSrc ) ; return bracketsSrc ; }
function ( ) { if ( isFirstProjectOpen ) { $ ( exports ) . triggerHandler ( "initializeComplete" , _projectRoot ) ; } if ( projectRootChanged ) { $ ( exports ) . triggerHandler ( "projectRootChanged" , _projectRoot ) ; } result . resolve ( ) ; }
function ( ) { WorkingSetView . create ( $openFilesContainer ) ; $ ( ProjectManager ) . on ( "projectRootChanged" , _updateProjectTitle ) ; CommandManager . register ( Strings . CMD_HIDE_SIDEBAR , Commands . VIEW_HIDE_SIDEBAR , toggleSidebar ) ; _initSidebarResizer ( ) ; }
function regexEscape ( str ) { return str . replace ( /([.?*+\^$\[\]\\(){}|\-])/g , "\\$1" ) ; }
function ( ) { if ( myEditor ) { myEditor . destroy ( ) ; myEditor = null ; $ ( "#editor" ) . remove ( ) ; myDocument = null ; } }
function ( ) { createTestEditor ( defaultContent , "" ) ; }
function handleShowDeveloperTools ( commandData ) { brackets . app . showDeveloperTools ( ) ; }
function ( ) { PerfUtils . addMeasurement ( PerfUtils . OPEN_FILE ) ; }
function ( ) { if ( confirm ( "Remove this function?" ) ) q . functions . remove ( this ) ; }
function ( ) { var script = this . pretty_script ( ) ; var retval = 'var global = new Global();console.log(global);(function($){var local = new Local();try{local.canvas = $("<canvas width=\\"" + global.stage_width + "\\" height=\\"" + global.stage_height + "\\"></canvas>").appendTo(".stage");local.ctx = local.canvas[0].getContext("2d");local.ctx.fillStyle="white";local.ctx.fillRect(0,0,global.stage_width,global.stage_height);' + script + '}catch(e){alert(e);}})(jQuery);' ; return retval ; }
function ( form ) { $ ( form ) . ajaxSubmit ( options ) ; return false ; }
function ( val ) { return /^[а-яіїєА-ЯІЇЄa-zA-Z\d\s\_\+\\\-\/\(\)\{\}\'\"\!\&\=\*\%\#\<\>\,\.]{1,}$/ . test ( val ) ; }
function ( ) { el . removeClass ( 'clicked' ) ; el . removeClass ( 'loading' ) . removeClass ( 'small' ) ; }
function showReservationsDialog ( testbedId ) { var existingDialog = $ ( "#WisebedReservationDialog-" + testbedId ) ; if ( existingDialog . length != 0 ) { existingDialog . show ( ) ; } else { new WiseGuiReservationDialog ( testbedId ) ; } }
function ( ) { var $container = $ ( '.grid-container' ) ; $container . imagesLoaded ( function ( ) { $container . masonry ( { itemSelector : '.grid-item' , gutterWidth : 20 } ) ; } ) ; }
function ( err ) { if ( err ) { errors . push ( file ) ; } stream . destroy ( ) ; next ( ) ; }
function ( data ) { if ( typeof console == "object" ) { console . log ( data ) ; } }
function ( elem ) { elem . callback . call ( elem . subscriber , payload ) ; }
function ( ) { if ( this . _interfaces !== null ) { this . _interfaces . siteId . setActive ( this . isPending ( ) ) ; } }
function constructor ( ) { _socket = io . connect ( '/**HOST**/' ) ; return that ; }
function ( require ) { var Calendar = require ( '../src/calendar' ) ; describe ( 'Calendar' , function ( ) { test ( 'initialize Calendar' , function ( ) { var cal = new Calendar ( ) ; } ) ; } ) ; }
function ( i ) { var node = commandKeys . getBookmark ( i ) ; if ( node ) { PlacesUIUtils . _openNodeIn ( node , "current" , window ) ; } }
function ( data ) { wikis = JSON . parse ( data ) ; d . resolve ( wikis ) ; }
function ( err , results ) { if ( err ) { return callback ( err ) ; } cfg . publicKey . id = results . publicKey ; cfg . publicKey . owner = results . owner ; callback ( ) ; }
function ( ) { var cartographic = new Cartographic3 ( 1.0 , 2.0 , 3.0 ) ; var returnedResult = cartographic . clone ( cartographic ) ; expect ( cartographic ) . toBe ( returnedResult ) ; }
function _renderFrame ( ) { _activeUpdateFrame ( ) ; _animFrameId = window . requestAnimFrame ( _renderFrame ) ; }
function ( ) { if ( me . sys . pauseOnBlur && ( _state != obj . LOADING ) ) { obj . pause ( true ) ; } if ( obj . onPause ) obj . onPause ( ) ; }
function ( func , self ) { eventHandlerList . push ( function ( time ) { func . call ( self , time ) ; } ) ; }
function ( ) { onPause = jasmine . createSpy ( ) ; blackberry . event . addEventListener ( "pause" , onPause ) ; }
function ( ) { expect ( blackberry . invoke . BrowserArguments ) . toBeDefined ( ) ; }
function ( ) { expect ( mockedWebworks . execSync . callCount ) . toEqual ( fields . length ) ; }
function ( ) { expect ( mockedWebworks . execSync . argsForCall ) . toContain ( execSyncArgs [ fields . indexOf ( "uuid" ) ] ) ; expect ( mockedWebworks . defineReadOnlyField ) . toHaveBeenCalledWith ( client , "uuid" , null ) ; }
function ( i , elem ) { elem . image = "/media_resources/" + elem . id + "/image?size=small_125" ; }
function ( ) { s = jasmine . createSpy ( "success" ) ; e = jasmine . createSpy ( "error" ) ; exec . reset ( ) ; geo . lastPosition = null ; }
function ( ) { geo . getCurrentPosition ( s , e ) ; expect ( exec ) . toHaveBeenCalledWith ( jasmine . any ( Function ) , jasmine . any ( Function ) , "Geolocation" , "getLocation" , [ false , Infinity , 0 ] ) ; }
function ( ) { node . socket . close ( ) ; }
function ( err , doc ) { if ( err ) res . send ( 500 , 'Error #304: ' + err ) ; else if ( doc == null ) res . send ( 404 , "The requested event has not been found" ) ; else res . send ( doc ) ; }
function ( ) { Todos . each ( this . addOne , this ) ; }
function ( ) { app . setCamera ( this . value ) ; app . resize ( ) ; }
function ( ) { app . canvas . render ( app . currentScene , app . model . getCamera ( ) ) ; downloadDataURI ( { filename : "screenshot.jpeg" , data : app . canvas . domElement . toDataURL ( "image/jpeg" ) } ) ; }
function ( ) { that . model . getCamera ( ) . mouseY ( 0.1 ) ; }
function ( ) { that . model . getCamera ( ) . mouseY ( - 0.10 ) ; }
function ( scene ) { var cam = this . model . getCamera ( ) ; this . currentScene = scene ; this . model . setCamera ( cam ) ; }
function ( time ) { this . canvas . render ( this . currentScene , this . model . getCamera ( ) ) ; this . updateInfoBox ( ) ; this . updateLabels ( ) ; }
function ( val ) { this . model . getCamera ( ) . setFov ( val ) ; }
function ( ) { return this . model . getCamera ( ) . getFov ( ) ; }
function ( val ) { this . model . getCamera ( ) . setZ ( val ) ; }
function ( ) { if ( ! this . model . getCamera ( ) ) return 0 ; return this . model . getCamera ( ) . getZ ( ) ; }
function ( ) { if ( xmlhttp . readyState == 4 && xmlhttp . status == 200 ) { document . getElementById ( "balance" ) . innerHTML = xmlhttp . responseText ; updateReconcile ( document . getElementById ( "accbal" ) ) ; } }
function createDb ( ) { resetDb ( ) ; writeJSONFile ( "db.json" , stream ) ; }
function Animation ( ) { this . uid = ++ uid ; this . clips = [ ] ; this . timePoint = 0 ; this . status = START_POINT ; this . duration = 0 ; }
function ( clip ) { clip . call ( animation , 0 , 0 ) ; clip . status = BEFORE_START_POINT ; }
function log ( ) { shell . Run ( "%comspec% /c adb logcat" ) ; }
function ( response ) { noty ( response . formated_message ) ; }
function ( ) { console . log ( "Check me" ) ; }
function ( callback ) { if ( _deployment === undefined ) { callback ( new Error ( "Please provide the URL of the S3DB deployment via setDeployment." ) ) ; } else { callback ( null ) ; } }
function toString ( ) { return "Cons[" + ( this . elementString ( ) ) + "]" ; }
function ( env , cont ) { values [ name ( ) ] = value ( ) ; return cont ( _false ( ) ) ; }
function ( env , cont ) { state ( ) . value = value ( ) ; return cont ( _false ( ) ) ; }
function err ( elem ) { elem . html ( errorTpl ( ) ) . css ( 'display' , 'block' ) ; }
function err ( elem ) { elem . html ( errorTpl ( ) ) . css ( 'display' , 'block' ) ; }
function ( ) { totalHeight = totalHeight + $ ( this ) . outerHeight ( true ) ; }
function ( actor , prevX ) { actor . x = prevX ; }
function ( jQuerySelection , codeObject , parent , child ) { setChildInProgram ( parent , child , codeObject ) ; var html = createBlock ( codeObject ) ; $ ( jQuerySelection ) . css ( 'border' , 'none' ) ; jQuerySelection . html ( html ) ; }
function ( changed , previous , events , callback ) { if ( changed . a > changed . b ) { callback ( 'b must be bigger than a!' ) ; } else { callback ( null ) ; } }
function ( changed , previous , events , callback ) { if ( changed . d > changed . c ) { callback ( 'c must be bigger than d!' ) ; } else { callback ( null ) ; } }
function ( changed , previous , events , callback ) { if ( changed . a < previous . a ) { callback ( 'a must be bigger than a before!' ) ; } else { callback ( null ) ; } }
function ( activeLink ) { this . $el . html ( this . template ( { activeLink : activeLink , navItems : this . navItems } ) ) ; return this ; }
function set ( t , r , s ) { transform . compound ( t , r , s , this . buffer ) ; this . modified = true ; }
function clearPhase ( ) { $rootScope . $$phase = null ; }
function ( ) { support . interactive = false ; each ( arguments , function ( i , arg ) { var stel = Resource . make ( arg ) ; stel . loading = stel . executing = true ; } ) ; }
function ( ) { if ( lastInserted && lastInserted . readyState == "interactive" ) { return lastInserted ; } return null ; }
function ( ) { console . log ( that . timestamp ( ) + ' Stream Server ended' ) ; }
function ( err ) { console . log ( that . timestamp ( ) + ' Error sending picture: ' ) ; console . log ( err ) ; }
function ( ) { postReq . end ( ) ; console . log ( that . timestamp ( ) + " Image sent" ) ; }
function ( error ) { console . log ( that . timestamp ( ) + " " + error ) ; }
function ( valid , model , attr ) { refute ( valid ) ; assert . same ( this . model , model ) ; assert . equals ( [ 'age' , 'name' ] , attr ) ; done ( ) ; }
function ( model , attr ) { assert . same ( this . model , model ) ; assert . equals ( [ 'age' , 'name' ] , attr ) ; done ( ) ; }
function ( model , error ) { assert . same ( this . model , model ) ; assert . equals ( [ 'age' , 'name' ] , error ) ; done ( ) ; }
function ( valid , model , attrs ) { refute ( valid ) ; assert . same ( this . model , model ) ; assert . equals ( [ 'name' ] , attrs ) ; done ( ) ; }
function ( model , attrs ) { assert . same ( this . model , model ) ; assert . equals ( [ 'name' ] , attrs ) ; done ( ) ; }
function ( res ) { if ( ! res . calipsoEndCalled ) next ( ) ; }
function ( req , res ) { res . local ( 'util' , util ) ; renderCachableView ( req , res , 'forgot.ejs' , { title : 'Forgot Password' , fullpage : false , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( req , res ) { res . local ( 'util' , util ) ; renderCachableView ( req , res , 'verify_email_address.ejs' , { title : 'Complete Registration' , fullpage : true , enable_development_menu : config . get ( 'enable_development_menu' ) } ) ; }
function ( assertion ) { if ( callback ) { callback ( assertion ) ; callback = null ; } }
function ( ) { include ( "framework/utils.js" ) ; include ( "framework/cmd_frame.js" ) ; include ( "framework/cmd_inlinepub.js" ) ; include ( "framework/cmd_restore.js" ) ; include ( "framework/cmd_event.js" ) ; include ( "framework/hook_connect.js" ) ; include ( "framework/hook_events.js" ) ; }
function ( pipe , $event , data , callback ) { this . sendCmd ( "Event" , { event : $event , data : data } , pipe , callback ) ; }
function ( direction ) { console . log ( "rotated" ) ; if ( direction === "rRotate" ) { var popped = this . playPiece . pop ( ) ; this . playPiece . unshift ( popped ) ; } this . render ( ) ; }
function ( ) { $ ( '#groupAdded' ) . append ( 'Group Added' ) ; }
function ( value ) { $ ( '#value' ) . html ( 'The value is ' + value + ' after 5 seconds' ) ; }
function ( element ) { var $element = jQuery ( element ) ; $element . addClass ( WAI_LANG_CLASS ) ; $element . attr ( 'data-gentics-aloha-repository' , 'wai-languages' ) ; $element . attr ( 'data-gentics-aloha-object-id' , $element . attr ( 'lang' ) ) ; }
function ( event ) { self . _add ( event ) ; return false ; }
function ( event ) { self . _remove ( event ) ; return false ; }
function ( event ) { self . _remove ( event ) ; return false ; }
function ( ) { self . _edit ( ) ; return false ; }
function ( ) { self . _cancel ( ) ; return false ; }
function ( ) { self . _save ( ) ; return false ; }
function ( ) { self . _edit ( ) ; return false ; }
function ( ) { self . _edit ( ) ; return false ; }
function ( ) { self . _edit ( ) ; return false ; }
function ( ) { $ ( ".jq_coins" ) . hide ( ) . remove ( ) settings . expire_callback ( score ) }
function ( ) { $ ( ".jq_coins" ) . hide ( ) . remove ( ) settings . expire_callback ( score ) }
function ( ) { $ ( ".jq_coins" ) . hide ( ) . remove ( ) settings . expire_callback ( score ) }
function ( ) { this . _outstandingPaintOperations -- ; if ( this . _outstandingPaintOperations <= 0 && ! this . _adjustWidthsTimer && this . _started ) { this . _adjustWidthsTimer = this . defer ( "_adjustWidths" ) ; } }
function ( ) { if ( $ ( '.sharemsg' ) . val ( ) === window . locale . fileupload . sharemsg ) { $ ( '.sharemsg' ) . val ( '' ) ; } ; }
function ( data ) { _this . comments . updateCommentsFor ( stream_id ) ; _this . sidebar . player . playStreamData ( data ) ; current_stream_id = stream_id ; }
function ( ) { return this . parentNode . parentNode . parentNode . getAttribute ( 'data-item-id' ) }
function ( evt ) { var pointView = this . getPointViewUnderMouse ( this . parentView . dataHolder , evt ) || null ; if ( ! pointView || pointView === undefined ) { return ; } pointView . mouseEntered ( ) ; }
function ( evt ) { if ( this . _pointView ) { this . _pointView . mouseExited ( ) ; this . _pointView . mouseUp ( evt ) ; } this . _pointView = null ; }
function ( evt ) { if ( ! ( this . _pointView ) || this . _pointView === undefined ) { return ; } this . _pointView . mouseDragged ( evt ) ; }
function ( left , right ) { return left && left . match ( new RegExp ( right ) ) ; }
function ( candidates ) { IMERender . showCandidates ( candidates ) ; _updateTargetWindowHeight ( ) ; }
function DVB_destroy ( ) { let breakpoints = this . _breakpoints ; breakpoints . removeEventListener ( "click" , this . _onBreakpointClick , false ) ; this . empty ( ) ; this . _breakpoints = null ; }
function DVP_destroy ( ) { this . empty ( ) ; this . _currHierarchy = null ; this . _prevHierarchy = null ; this . _vars = null ; }
function ( ) { finalCheck ( ) ; closeDebuggerAndFinish ( ) ; }
function ( ) { contextMenu . hidePopup ( ) ; closeDebuggerAndFinish ( ) ; }
function ( ) { page ++ ; getRelatedContent ( ) ; }
function ( e , data ) { page = 0 ; addBinding ( ) ; contentData = data ; getRelatedContent ( ) ; }
function ( data ) { socket . emit ( 'init' , { fbid : lambdaracer . current . fbid } ) ; }
function ( data ) { }
function remove_fields ( link ) { $ ( link ) . prev ( "input[type=hidden]" ) . val ( "1" ) ; $ ( link ) . closest ( ".fields" ) . hide ( ) ; mark_params_override ( ) ; }
function ( request ) { $ ( '#puppet_klasses' ) . html ( request ) ; reload_params ( ) ; }
function ( ) { $ ( '#hostgroup_indicator' ) . hide ( ) ; $ ( '[rel="twipsy"]' ) . tooltip ( ) ; update_provisioning_image ( ) ; reload_params ( ) ; }
function ( request ) { $ ( '#subnet_select' ) . html ( request ) ; reload_params ( ) ; }
function ( request ) { $ ( '#media_select' ) . html ( request ) ; reload_params ( ) ; }
function ( ) { topic . publish ( '/app/toolbar/invoke' , this . options . singleSelectAction ) ; if ( this . autoClearSelection ) this . _selectionModel . clear ( ) ; }
function ( view ) { var deferred = new Deferred ( ) ; setTimeout ( lang . hitch ( this , this . _transitionTo , view , view . options , deferred ) ) ; return deferred ; }
function ( ) { this . inherited ( arguments ) ; domAttr . set ( this . domNode , 'data-action' , 'scroll' ) ; }
function ( ) { this . inherited ( arguments ) ; this . subscribe ( '/app/toolbar/invoke' , this . _invokeByName ) ; this . onPositionChange ( this . position , null ) ; }
function ( json ) { _this . receiveMessages ( json ) ; if ( json . messages . length > 0 ) _this . separateMessages ( 'last message was send on:&nbsp&nbsp' + getYmdHM ( _this . lastMessage . time ) ) ; }
function ( priority , pokemon ) { if ( pokemon . ability !== 'stall' ) { return priority - 0.1 ; } }
function ( priority , pokemon ) { if ( pokemon . ability !== 'stall' ) { return priority - 0.1 ; } }
function ( err , message ) { if ( err ) { console . log ( "Can't send email: " + JSON . stringify ( err ) ) ; callback ( err , null ) ; } else { callback ( null , message ) ; } }
function ( parentId ) { return parentId + "_avatar" ; }
function ( ) { if ( this . torrent . isError ( ) ) { this . $ . status . setContent ( "Error" ) ; } else { this . $ . status . setContent ( this . torrent . getStatusString ( ) ) ; } }
function ( ) { return this . _error }
function ( ) { Ext . getCmp ( 'mainView' ) . setMasked ( false ) ; Ext . Msg . alert ( Ext . i18n . appBundle . getMsg ( 'RaxaEmr.controller.session.alert' ) ) ; }
function ( ) { return [ 'login' , 'screener' , 'registration' , 'registrationextjs4' , 'pharmacy' , 'chw' , 'outpatient' ] ; }
function ( ) { form_num ++ ; var endOfForm = 5 ; this . getPharmacyForm ( ) . insert ( endOfForm , { xtype : 'drugStore' , id : 'form' + form_num , width : '350px' , height : '320px' , scrollable : false } ) ; }
function ( ) { this . sortBy ( 'urgency' ) ; }
function screenTimeoutChanged ( value ) { self . _idleTimeout = value ; }
function ( s , n ) { var indent ; indent = Math . max ( 1 , n - s . length ) ; return repeat ( indent ) + s ; }
function ( ) { -- preloading ; while ( ! preloading && preloadWaitQueue . length ) { load . apply ( null , preloadWaitQueue . shift ( ) ) ; } }
function ( ) { var ret = { } ; ret . test = { } ; ret . test . temp = { myanem : "Ryan" } ; return self . flatten ( self . attributes ) ; }
function ( ) { cameraLoader . empty ( ) . append ( $ ( ".camera_list_container .offscreen > li" ) ) ; cameraLoader . listview ( 'refresh' ) ; }
function ( obj , next ) { next ( obj ) }
function ( obj , next ) { delete obj . id delete obj . uuid delete obj . created_at delete obj . updated_at delete obj . hash next ( obj ) }
function ( obj , next ) { delete obj . hash if ( obj . login_count ) obj . login_count = parseInt ( obj . login_count ) if ( obj . role ) obj . role = parseInt ( obj . role ) next ( obj ) }
function ( obj , next ) { if ( ! obj . uuid ) { obj . uuid = uuid . v4 ( ) } next ( obj ) }
function ( obj , next ) { if ( obj . password && obj . password . length > 0 ) { obj . hash = hash . create ( obj . password ) } next ( obj ) }
function ( done ) { rolodex . account . set ( null , { "email" : "brock@sintaxi.com" } , function ( errors , account ) { global . account_id = account . id global . uuid = account . uuid done ( ) } ) }
function ( sections ) { fetchSucceeded = true ; expect ( sections . url ( ) ) . toEqual ( '/api/0.1/stories/' + story . id + '/sections/' ) ; expect ( sections . length ) . toEqual ( that . fixture . objects . length ) ; }
function ( ) { var value = this . card % 13 ; if ( value > 10 || value == 0 ) { return 10 ; } else if ( value == 1 ) { return 11 ; } return value ; }
function ( card ) { this . cards . push ( card ) ; }
function onsuccess ( ) { myContact . id = contact . id ; myContact . photo = contact . photo ; contactsList . refresh ( myContact ) ; reloadContactDetails ( myContact ) ; navigation . back ( ) ; }
function ( type , block ) { return prepareResult ( 'querySingleton(' + type + ', ' + block + ')' ) ; }
function ( type , uid , block ) { return prepareResult ( 'queryByUid(' + type + ',' + uid + ', ' + block + ')' ) ; }
function ( type , block ) { return prepareResult ( 'query(' + type + ', ' + block + ')' ) ; }
function ( type , block ) { return prepareResult ( 'queryUids(' + type + ', ' + block + ')' ) ; }
function ( type , block ) { return prepareResult ( 'queryCount(' + type + ', ' + block + ')' ) ; }
function ( type , fieldName , fieldValue , block ) { return prepareResult ( 'updateSingletonField(' + type + ',' + fieldName + ',' + fieldValue + ', ' + block + ')' ) ; }
function ( type , uid , fieldName , fieldValue , block ) { return prepareResult ( 'updateField(' + type + ',' + uid + ',' + fieldName + ',' + fieldValue + ', ' + block + ')' ) ; }
function ( type , entity , block ) { return prepareResult ( 'updateSingleton(' + type + ',' + entity + ', ' + block + ')' ) ; }
function ( type , uid , entity , block ) { return prepareResult ( 'update(' + type + ',' + uid + ',' + entity + ', ' + block + ')' ) ; }
function ( type , uid , entity , block ) { return prepareResult ( 'insert(' + type + ',' + uid + ',' + entity + ', ' + block + ')' ) ; }
function ( type , uid , block ) { return prepareResult ( 'remove(' + type + ',' + uid + ', ' + block + ')' ) ; }
function ( type , operationName , data , block ) { return prepareResult ( 'runSingleton(' + type + ',' + operationName + ',' + data + ', ' + block + ')' ) ; }
function ( type , operationName , data , block ) { return prepareResult ( 'run(' + type + ',' + operationName + ',' + data + ', ' + block + ')' ) ; }
function ( type , block ) { }
function ( message ) { console . log ( message ) ; }
function am_snoozeHandler ( ) { }
function ( event ) { var index = event . target . dataset . index ; selectTag ( event . target , tagList ) ; }
function ( ) { if ( request . onsuccess ) { request . onsuccess ( ) ; } if ( bool ) { self . onenabled ( ) ; } else { self . ondisabled ( ) ; } }
function ( ) { self . connection . status = 'connecting' ; self . onstatuschange ( networkEvent ) ; }
function ( ) { self . connection . status = 'associated' ; self . onstatuschange ( networkEvent ) ; }
function ( ) { network . connected = true ; self . connected = network ; self . connection . network = network ; self . connection . status = 'connected' ; self . onstatuschange ( networkEvent ) ; }
function closeWindow ( ) { openWindow ( newApp , callback ) ; }
function ( res ) { _res = res ; res . setEncoding ( 'utf8' ) ; res . on ( 'data' , function ( chunk ) { parser . parse ( chunk ) } ) }
function ( ) { self . request = keepAlive ( ) ; }
function ( label , data ) { return Echo . Labels . get ( label , "Plugins." + plugin . name , data ) ; }
function ( err ) { self . emit ( 'error' , err ) ; }
function ( value ) { if ( value == null ) { return '' ; } return value . __gcliQuery || 'Error' ; }
function ( callback ) { db . collection ( 'ext' ) . find ( ) . sort ( { pass : 1 } ) . toArray ( function ( err , result ) { callback ( err , result ) ; } ) }
function ( username , psw , callback ) { db . collection ( 'user' ) . find ( { username : username } ) . toArray ( function ( err , result ) { callback ( err , result ) ; } ) }
function ( data ) { if ( data . Stations [ 0 ] != undefined ) thatmivb . options . station = thatmivb . capitalizeWords ( data . Stations [ 0 ] . name ) ; }
function ( req , res , next ) { if ( req . isAuthenticated ( ) ) { return next ( ) ; } res . redirect ( '/auth/login' ) ; }
function ( model ) { return this . filterType === false ? true : model . get ( 'completed' ) == this . filterType ; }
function ( ) { this . render ( ) ; console . log ( 'change' ) ; }
function onRequestError ( err ) { req . isComplete = true ; req . emit ( 'error' , err ) ; socket . destroy ( ) ; }
function onConnect ( ) { req . emit ( 'progress' , { } ) ; socket . end ( options . encodedBody ) ; socket . on ( 'drain' , onRequestDrain ) ; }
function ( ) { res . status = 200 ; if ( ! res . isComplete ) { res . isComplete = true ; res . emit ( 'load' , { } ) ; } }
function Confirmbox ( template ) { Confirmbox . __super__ . constructor . apply ( this , arguments ) ; this . modal . addClass ( 'confirm-box' ) ; this . template = template ; this . overlay . unbind ( 'click' ) ; }
function onTimeout ( ) { reset ( ) ; var err = new Error ( "ETIMEDOUT: Timeout while waiting for Agent agent to connect." ) ; err . code = "ETIMEDOUT" ; self . emit ( "error" , err ) ; }
function reset ( ) { self . removeListener ( "connect" , onConnect ) ; self . removeListener ( "disconnect" , onError ) ; self . removeListener ( "error" , onError ) ; clearTimeout ( timeout ) ; }
function ( e ) { var index = $ . inArray ( e . target . parentNode , base . options . pager . children ( ) ) ; base . showSlideNr ( index ) ; return false ; }
function doneStop ( ) { self . signal ( "finalize" , dfdFinalize ) ; }
function deferredStop ( dfdStop ) { dfdStop . then ( function doneStop ( ) { self . signal ( "finalize" , dfdFinalize ) ; } , dfdFinalize . reject , dfdFinalize . notify ) ; self . signal ( "stop" , dfdStop ) ; }
function ( ) { if ( console && console . log ) { console . log . apply ( console , arguments ) ; } }
function ( id ) { for ( var i = 0 ; i < this . steps . length ; i ++ ) { if ( this . steps [ i ] . id == id ) { return i ; } } return - 1 ; }
function ( id ) { var index = this . getStepIndexForID ( id ) ; return index == - 1 ? null : this . steps [ index ] ; }
function ( ) { return this . steps . length == 0 ? null : this . steps [ this . steps . length - 1 ] ; }
function ( particle ) { if ( deltaEver > particle . diesafter ) particle . alive = false ; attractTowardsEmitter ( particle ) ; particle . x += particle . vx ; particle . y += particle . vy ; }
function ( key , value ) { form . append ( $ ( "<input>" , { type : "hidden" , name : key , value : value , class : "ocupload-" + id } ) ) ; }
function ( ) { var myFrame = document . getElementById ( iframe . attr ( 'name' ) ) ; var response = $ ( myFrame . contentWindow . document . body ) . html ( ) ; self . onComplete ( response ) ; }
function ( req , res , next ) { res . sendfile ( __dirname + "/image.png" ) ; }
function ( conv ) { selfConversationsView . addConversationBasicEffect ( conv ) ; }
function ( model ) { selfConversationsView . updateConversation ( model ) ; }
function ( ) { elem . remove ( ) ; conversation . off ( "change" ) ; selfConversationsView . addConversationWithEffect ( conversation , true , thisElementWasSelected ) ; }
function selectedWPsChanged ( convView , msgView ) { console . log ( 'selectedWPsChanged triggered' ) ; convView . getConversations ( ) ; msgView . messagesView . resetViewToDefault ( ) ; }
function refreshConversationList ( convView , msgView ) { convView . getConversations ( ) ; msgView . messagesView . resetViewToDefault ( ) ; }
function ( ev , data ) { selectedWPsChanged ( self . convView , self . msgView ) ; }
function ( wp ) { if ( wp . get ( 'CheckedStatus' ) === true ) { self . checkedPhoneNumbersArray . push ( wp . get ( 'TelNumber' ) ) ; } }
function ( wp ) { selfWpPoolView . appendWorkingPoint ( wp ) ; }
function ( ) { var selfWpPoolView = this ; this . phoneNumbersPool . each ( function ( wp ) { selfWpPoolView . appendWorkingPoint ( wp ) ; } ) ; }
function ( wp ) { var wpView = new WorkingPointView ( { model : wp } ) ; $ ( this . el ) . append ( wpView . render ( ) . el ) ; }
function ( ) { return this . _datatype !== 'ADT' ? arguments [ 0 ] : construct . apply ( null , [ this . _tag ] . concat ( [ ] . slice . call ( arguments , 0 ) ) ) ; }
function ( ) { return this . _datatype !== 'ADT' ? arguments [ 0 ] : construct . apply ( null , [ this . _tag ] . concat ( [ ] . slice . call ( arguments , 0 ) ) ) ; }
function ( ) { modal . trigger ( 'modalClose' ) }
function ( ) { modal . trigger ( 'modalClose' ) }
function ( e ) { if ( e . which === 27 ) { modal . trigger ( 'modalClose' ) ; } }
function ( name , tagName , declaration ) { this . name = name ; this . extendsTagName = tagName ; this . lifecycle = this . lifecycle . bind ( declaration ) ; }
function ( declaration ) { [ ] . forEach . call ( document . querySelectorAll ( declaration . element . extendsTagName + '[is=' + declaration . element . name + ']' ) , declaration . morph ) ; }
function promptToLogin ( options , callback , skipConnection ) { FBWorld . beingPromptedToLogin = true ; FBWorld . beingPromptedToLoginOptions = options ; FBWorld . beingPromptedToLoginCallback = callback ; FBWorld . beingPromptedToLoginSkipConnection = skipConnection ; }
function promptToLogin ( options , callback , skipConnection ) { FBWorld . beingPromptedToLogin = true ; FBWorld . beingPromptedToLoginOptions = options ; FBWorld . beingPromptedToLoginCallback = callback ; FBWorld . beingPromptedToLoginSkipConnection = skipConnection ; }
function onInputBoxKeyPress ( e ) { if ( e . keyCode !== KEY . BACKSPACE ) { var typedValue = String . fromCharCode ( e . which || e . keyCode ) ; inputBuffer . push ( typedValue ) ; } }
function setPreloadAttributesAndNavigate ( ) { window . preloads . post = post . attributes app . router . navigate ( post . url ( ) , { trigger : true , replace : true } ) }
function ( ) { var e = angular . element ( ".gridsmodule" ) ; console . log ( "app" , e ) var settings = { Name : e . data ( "application-name" ) , Id : e . data ( "application-id" ) } ; return settings ; }
function ( ) { console . log ( appSettings ) ; return GridApi . grids ( { applicationId : appSettings . Id } , function ( data ) { console . log ( data ) ; return $scope . grids = data ; } ) ; }
function ( grid ) { $scope . destination = grid ; $scope . gridelement . Content . Id = grid . Id ; $scope . $parent . Edit = 0 ; return $scope . $parent . save ( $scope . gridelement ) ; }
function ( ) { console . log ( appSettings ) ; return GridApi . grids ( { applicationId : appSettings . Id } , function ( data ) { console . log ( data ) ; return $scope . grids = data ; } ) ; }
function ( grid ) { $scope . destination = grid ; $scope . gridelement . Content . Id = grid . Id ; $scope . $parent . Edit = 0 ; return $scope . $parent . save ( $scope . gridelement ) ; }
function ( $scope , $http , appSettings ) { text . $inject = [ "$scope" , "$http" , "appSettings" ] ; $scope . xxx = "xxxx" ; return 1 ; }
function ( $scope , $http , appSettings ) { text . $inject = [ "$scope" , "$http" , "appSettings" ] ; $scope . xxx = "xxxx" ; return 1 ; }
function ( ) { var setings ; return setings = { applicationId : "7683508e-0941-4561-b9a3-c7df85791d23" , serverUrl : "http://localhost\\:62728" } ; }
function ( $scope , $routeParams , clientApi ) { var p ; p = $routeParams ; return clientApi . gridpageJson ( { link : p . link } , function ( data ) { return $scope . data = data ; } ) ; }
function ( ) { var setings ; return setings = { applicationId : "7683508e-0941-4561-b9a3-c7df85791d23" , serverUrl : "http://localhost\\:62728" } ; }
function ( lines ) { return $scope . thumbs = lines ; }
function ( $scope , $routeParams , clientApi ) { var p ; p = $routeParams ; return clientApi . gridpageJson ( { link : p . link } , function ( data ) { return $scope . data = data ; } ) ; }
function ( data ) { $scope . $parent . refresh ( data . Lines ) ; return $scope . data = data ; }
function ( isp ) { console . log ( 'showisp' ) console . log ( 'isp=' + isp ) ispName = isp ; drawMap ( ) ; win . hide ( ) ; }
function ( ) { onSuccess ( resultStream , context ) ; }
function ( ) { select . append ( $ ( '<option>' , { value : this . id } ) . text ( this . displayedName ) ) ; }
function ( ) { $ ( "#expense-type-select" ) . append ( $ ( '<option>' , { value : this . id } ) . text ( this . displayedName ) ) ; parent . descriptions [ this . id ] = this . description ; }
function ( ) { clearSelectMode ( ) ; }
function ( event ) { req . onsuccess = req . onerror = null ; var undef ; self . lambda ( callback ) . call ( self , event . target . result !== null && event . target . result !== undef ) ; }
function ( pos ) { if ( pos < 0 || this . items . length <= pos ) return ; this . parallax . commit ( pos * this . itemWidth ( ) ) ; this . position = pos ; this . afterMoveTo ( ) ; }
function ( ) { var t = $ ( this ) ; t . hide ( ) ; t . click ( function ( ) { self . timeline . previous ( ) ; self . scene . previous ( ) ; } ) ; }
function ( err , data ) { callback ( null , data ) ; }
function ( err , data ) { args . attribute = 2 ; self . addNotifier ( args , function ( err , data ) { callback ( null , data ) ; } ) ; }
function _onGlobalObjectCleared ( ) { $exports . triggerHandler ( "reload" ) ; }
function ( ) { var script = this . script ( ) ; if ( ! script ) return undefined ; return script . url . replace ( /^.*\// , '' ) + ":" + ( this . location . lineNumber + 1 ) ; }
get statusBarItems ( ) { return [ this . _refreshButton . element ] ; } ,
function ( ) { if ( cell . hasClass ( 'fc-xdate' ) ) { renderEntries ( entries ) ; } }
function ( ) { return new cc . Point ( this . _offsetInPixels . x , this . _offsetInPixels . y ) ; }
function ( offsetInPixels ) { this . _offsetInPixels = offsetInPixels ; this . _offset = cc . POINT_PIXELS_TO_POINTS ( this . _offsetInPixels ) ; }
function ( ) { if ( this . _texture ) { return this . _texture ; } if ( this . _textureFilename != "" ) { return cc . TextureCache . sharedTextureCache ( ) . addImage ( this . _textureFilename ) ; } return null ; }
function ( target ) { this . _super ( target ) ; if ( this . _restoreOriginalFrame ) { this . _origFrame = target . displayFrame ( ) ; } }
function ( ) { if ( ! this . _actionManager ) this . _actionManager = cc . Director . sharedDirector ( ) . getActionManager ( ) ; return this . _actionManager ; }
function ( ) { if ( ! this . _scheduler ) this . _scheduler = cc . Director . sharedDirector ( ) . getScheduler ( ) ; return this . _scheduler ; }
function ( action ) { cc . Assert ( action != null , "Argument must be non-nil" ) ; this . getActionManager ( ) . addAction ( action , this , ! this . _isRunning ) ; return action ; }
function ( ) { this . getActionManager ( ) . removeAllActionsFromTarget ( this ) ; }
function ( action ) { this . getActionManager ( ) . removeAction ( action ) ; }
function ( tag ) { cc . Assert ( tag != cc . CCACTION_TAG_INVALID , "Invalid tag" ) ; this . getActionManager ( ) . removeActionByTag ( tag , this ) ; }
function ( tag ) { cc . Assert ( tag != cc . CCACTION_TAG_INVALID , "Invalid tag" ) ; return this . getActionManager ( ) . getActionByTag ( tag , this ) ; }
function ( ) { return this . getActionManager ( ) . numberOfRunningActionsInTarget ( this ) ; }
function ( priority ) { this . getScheduler ( ) . scheduleUpdateForTarget ( this , priority , ! this . _isRunning ) ; }
function ( ) { this . getScheduler ( ) . unscheduleUpdateForTarget ( this ) ; }
function ( selector ) { if ( ! selector ) return ; this . getScheduler ( ) . unscheduleSelector ( selector , this ) ; }
function ( ) { this . getScheduler ( ) . unscheduleAllSelectorsForTarget ( this ) ; }
function ( ) { this . getScheduler ( ) . resumeTarget ( this ) ; this . getActionManager ( ) . resumeTarget ( this ) ; }
function ( ) { this . getScheduler ( ) . pauseTarget ( this ) ; this . getActionManager ( ) . pauseTarget ( this ) ; }
function ( ) { return new cc . Scene ( ) ; }
function ( ) { return this . _frames ; }
function ( frames ) { this . _frames = frames ; }
function ( frame ) { var animFrame = new cc . AnimationFrame ( ) ; animFrame . initWithSpriteFrame ( frame , 1 , null ) ; this . _frames . push ( frame ) ; this . _totalDelayUnits ++ ; }
function ( name ) { if ( ! name ) { return ; } if ( this . _animations . hasOwnProperty ( name ) ) { delete this . _animations [ name ] ; } }
function ( ) { cc . s_sharedAnimationCache . _animations = null ; cc . s_sharedAnimationCache = null ; }
function ( ) { if ( cc . s_sharedAnimationCache == null ) { cc . s_sharedAnimationCache = new cc . AnimationCache ( ) ; cc . s_sharedAnimationCache . init ( ) ; } return cc . s_sharedAnimationCache ; }
function ( child , cleanup ) { if ( this . _batchNode ) { this . _batchNode . removeSpriteFromAtlas ( child ) ; } this . _super ( child , cleanup ) ; }
function ( ) { if ( this . _batchNode && ! this . _recursiveDirty ) { this . _recursiveDirty = true ; this . setDirty ( true ) ; if ( this . _hasChildren ) this . setDirtyRecursively ( true ) ; } }
function ( relative ) { cc . Assert ( ! this . _batchNode , "ignoreAnchorPointForPosition is invalid in cc.Sprite" ) ; this . _super ( relative ) ; }
function ( flipX ) { if ( this . _flipX != flipX ) { this . _flipX = flipX ; this . setTextureRect ( this . _rect , this . _rectRotated , this . _contentSize ) ; this . setNodeDirty ( ) ; } }
function ( child , zOrder , tag ) { cc . Assert ( ( child instanceof cc . MenuItem ) , "Menu only supports MenuItem objects as children" ) ; this . _super ( child , zOrder , tag ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_HANDLER_PRIORITY , true ) ; }
function ( fontSize ) { cc . _fontSize = fontSize ; }
function ( value , target , selector ) { var ret = new cc . MenuItemFont ( ) ; ret . initWithString ( value , target , selector ) ; return ret ; }
function ( item ) { this . initWithTarget ( null , null ) ; this . _subItems = [ ] ; this . _subItems . push ( item ) ; this . _selectedIndex = cc . UINT_MAX ; this . setSelectedIndex ( 0 ) ; return true ; }
function get ( str ) { var c = db [ str ] return c [ Math . floor ( Math . random ( ) * c . length ) ] }
function ( value , key ) { key = PLUGIN_NAME + '_' + key ; if ( settings [ key ] === undefined ) settings [ key ] = value ; }
function preinit ( ) { var url ; if ( url = tinyMCEPopup . getParam ( "external_link_list_url" ) ) document . write ( '<script language="javascript" type="text/javascript" src="' + tinyMCEPopup . editor . documentBaseURI . toAbsolute ( url ) + '"></script>' ) ; }
function ( callback , element ) { window . setTimeout ( callback , 16 , Date . now ( ) ) ; }
function abandon ( ) { this . _binding . _abandon ( ) ; this . _binding = null ; }
function ( ) { return $ ( this ) . html ( c1_str ) ; }
function ( hsl_list ) { return 'hsl(' + hsl_list [ 0 ] + "," + hsl_list [ 1 ] + "%," + hsl_list [ 2 ] + '%)' ; }
function isEqual ( subject , object ) { return subject === object || isEmpty ( edit ( 'deep all absolute immutable delta' , subject , object || { } ) ) ; }
function ( headers ) { var self = this ; _ . each ( headers , function ( val , key ) { self . addHeader ( key , val ) ; } ) ; return this ; }
function ( ) { return presenter . winControl . post ( "show" , arguments ) ; }
function ( data ) { console . log ( 'ajax success' ) ; var count = data [ 0 ] . channel_count ; self . inputViewers . val ( count ) ; }
function ( a , b ) { return a . screen . width > b . screen . width ; }
function ( key , defaultValue ) { if ( this [ key ] ) { return this [ key ] ; } else if ( defaultValue ) { return defaultValue ; } else { return key ; } }
function raw ( mode ) { var setRawMode = stdin . setRawMode || process . stdin . setRawMode ; setRawMode . call ( stdin , mode ) ; }
function ( field ) { return { field : field . id , value : self . _cellRenderer ( doc . get ( field . id ) , field , doc ) } }
function ( callback , filter , invert , cllbckArgs ) { GetMessagesHack ( callback , filter , invert , cllbckArgs ) ; return ; }
function FalseNamedArgument ( ) { this . text = '' ; this . prefix = '' ; this . suffix = '' ; this . type = 'false' ; }
function ArrayArgument ( ) { this . args = [ ] ; this . type = 'array' ; }
function ( ) { expect ( applauncher . appInstalled ) . toEqual ( jasmine . any ( Function ) ) ; }
function ( ) { waitsFor ( function ( ) { return ! ! applauncher . browserExecPath ; } ) ; runs ( function ( ) { expect ( applauncher . browserExecPath ) . toBeDefined ( ) ; } ) }
function ( ) { expect ( applauncher . browserExecPath ) . toBeDefined ( ) ; }
function closeThisWindow ( ) { Ti . App . fireEvent ( 'closeSignUpTabGroup' ) ; }
function PluginAutocomplete ( ) { }
function PluginTags ( ) { }
function ( path , base ) { if ( path . indexOf ( '/base' ) == 0 ) path = path . slice ( 1 ) ; return Path . resolve ( base , path ) ; }
function ( el ) { self . setupDashlets ( el ) ; el . swap ( ) ; }
function ( ) { var d = this . __data__ ; return getNodeTooltip ( d ) ; }
function ( ) { return Boolean ( this . _current_response && this . _current_response . saw_responsefinished ) ; }
function ( event ) { this . saw_responsefinished = true ; if ( event . data && event . data . content ) { this . responsebody = event . data ; } }
function ( el ) { $ ( 'time.timeago' , el ) . timeago ( ) ; }
function ( e ) { return jsv . debugMode ? ( "Error: " + ( e . message || e ) ) + ". " : '""' ; }
f var tmplConverter = tmpl . converters ; tmplConverter = tmplConverter && tmplConverter [ converter ] || converters [ converter ] ; return tmplConverter ? tmplConverter . call ( view , text ) : ( error ( "Unknown converter: {{" + converter + ":" ) , text ) ; }
function error ( message ) { if ( jsv . debugMode ) { throw new jsv . Error ( message ) ; } }
function compileTmpl ( template ) { try { return typeof jsviews . templates ( template ) . fn === "function" ? "compiled" : "failed compile" ; } catch ( e ) { return e . message ; } }
function ( ) { expect ( 3 ) ; equal ( compileTmpl ( "A_{{if true}}{{/if}}_B" ) , "compiled" , "Empty if block: {{if}}{{/if}}" ) ; equal ( compileTmpl ( "A_{{if true}}yes{{/if}}_B" ) , "compiled" , "{{if}}...{{/if}}" ) ; equal ( compileTmpl ( "A_{{if true/}}yes{{/if}}_B" ) , "Syntax error\nUnmatched or missing tag: \"{{/if}}\" in template:\nA_{{if true/}}yes{{/if}}_B" ) ; }
function clearHistory ( ) { this . _clearRevisionHistory ( ) ; this . history = [ ] ; callback ( ) ; }
function ( ) { var potentiometerGauge = $ ( '#potentiometer-gauge' ) ; metaArduino . on ( '/potentiometer-gauge' , function ( value ) { console . log ( 'new potentiometer value: ' + value ) ; potentiometerGauge . val ( value ) ; } ) ; }
function setup ( options , imports , register ) { ProcessManager = imports [ "process-manager" ] ; EventBus = imports . eventbus ; Fs = imports [ "sandbox.fs" ] ; imports . ide . register ( name , NpmRuntimePlugin , register ) ; }
function setup ( options , imports , register ) { assert ( options . settingsPath , "option 'settingsPath' is required" ) ; SETTINGS_PATH = options . settingsPath ; fs = imports [ "sandbox.fs" ] ; imports . ide . register ( name , SettingsPlugin , register ) ; }
function ( err , exists ) { if ( exists ) { fs . readFile ( _self . settingsPath , "utf8" , callback ) ; } else { callback ( "settings file does not exist" , "" ) ; } }
function ( v ) { if ( v instanceof Error ) { callback ( v ) ; } else { callback ( null , v ) ; } }
function ( error , value ) { test . equal ( error , null ) ; test . deepEqual ( value , jsonObject ) ; test . done ( ) ; }
function ( error , value ) { test . equal ( error , null ) ; test . deepEqual ( value , jsonObject ) ; test . done ( ) ; }
function ( error , value ) { test . equal ( error , null ) ; test . deepEqual ( value , jsObject ) ; test . done ( ) ; }
function ( ) { test . equal ( valuesReceived , jsonArray . length ) ; test . done ( ) ; }
function ( error , value ) { test . equal ( error , null ) ; test . equal ( value , jsonObject ) ; test . done ( ) ; }
function ( entry ) { return entry . long_name + " " + entry . short_version + " on " + entry . os ; }
function ( field ) { fields [ field ] = arg [ field ] ; }
function ( field ) { var include = '-' == field [ 0 ] ? 0 : 1 ; if ( include === 0 ) field = field . substring ( 1 ) ; fields [ field ] = include ; }
function ( ) { var query = new Query ( ) ; query . select ( "a b -c" ) ; query . _fields . should . eql ( { a : 1 , b : 1 , c : 0 } ) ; }
function ( ) { assert . throws ( function ( ) { var query = new Query ( ) ; query . select ( [ 'a' , 'b' , 'c' ] ) ; } , /Invalid select/ ) ; }
function ( ) { var f ; return function _up ( ) { return f || ( f = ( function ( _e ) { return _false ( ) ; } ) ) ; } }
function setUnmemoized ( u ) { return this . copyWith ( null , null , null , null , null , null , u ) ; }
function ( ) { var f ; return function _id ( ) { return f || ( f = ( function ( _x ) { return _x ( ) ; } ) ) ; } }
function ( ) { var f ; return function _or ( ) { return f || ( f = ( function ( _a ) { return _a ( ) ( _true ) ; } ) ) ; } }
function ( ) { var f ; return function _not ( ) { return f || ( f = ( function ( _a ) { return _a ( ) ( _false ) ( _true ) ; } ) ) ; } }
function ( ) { var f ; return function _pairFunc ( ) { return f || ( f = ( function ( _l ) { return _false ( ) ; } ) ) ; } }
function ( ) { try { return cont ( ) ; } catch ( err ) { return console . log ( "ERROR PRINTING VALUE: " + err . stack ) ; } }
function ( env , cont ) { values [ name ( ) ] = value ( ) ; return cont ( _false ) ; }
function ( ) { this . _listeners = [ ] ; this . _scopes = [ ] ; }
function ( a , b ) { if ( typeof a !== 'undefined' ) { return a ; } return b ; }
function ( ) { "use strict" ; var defaultValue = function ( a , b ) { if ( typeof a !== 'undefined' ) { return a ; } return b ; } ; return defaultValue ; }
function ( elem ) { $ ( '.twitter-anywhere-tweet-box-editor, .tweet-box' ) . val ( ' ' ) ; }
function bufferTwitter ( ) { insertButtons ( ) ; removeExtras ( ) ; setTimeout ( bufferTwitter , 500 ) ; }
function ( ) { jQuery ( '#acl__info' ) . html ( '<img src="' + DOKU_BASE + 'lib/images/throbber.gif" alt="..." />' ) . load ( DOKU_BASE + 'lib/plugins/acl/ajax.php' , jQuery ( '#acl__detail form' ) . serialize ( ) + '&ajax=info' ) ; return false ; }
function ( buffer ) { track . buffer = buffer ; track . revBuffer = track . reverseBuffer ( buffer ) ; track . trackElement . classList . remove ( "loading" ) ; }
function attrOnFocus ( AThis ) { console . log ( 'attrOnFocus(' + AThis . id + ')' ) ; document . getElementById ( 'attributes' ) . setAttribute ( 'class' , 'focus' ) ; attributes_focused = true ; }
function attrOnKeyDown ( AThis , AEvent ) { if ( AEvent . keyCode == 27 ) { console . log ( 'ESC' ) ; document . getElementById ( tool ) . focus ( ) ; } }
function ( ) { this . showView ( labsView ) ; }
function ( ) { this . showView ( labsAboutView ) ; }
function ( ) { window . appView . renderReadonlyCorpusViews ( corpusid ) ; }
function ( ) { window . appView . renderReadonlyDataListViews ( datalistid ) ; }
function ( e ) { if ( ! me . isDisabled ( ) ) { if ( false === me . onclick ( ) ) { baidu . event . stop ( e || window . event ) ; } } }
function ( ) { $ ( '#button' ) . attr ( 'value' , Gen . button_text [ Gen . random ( Gen . button_text . length ) ] ) ; }
function ( ) { emitter = new EventsEmitter ( ) ; stack = [ ] ; args = [ ] ; }
function ( ) { var instance = this ; instance . evtDateStack = { } ; instance . evtRenderedStack = { } ; instance . rowDataTableStack = { } ; }
function ( e , data ) { data . formData = { 'tags' : $ ( '#tags' ) . val ( ) } ; }
function ( ) { if ( ! this . manifest . css ) return ; Echo . Utils . addCSS ( this . manifest . css . replace ( /{prefix}/g , "." + this . _cssClassFromControlName ( ) ) , this . manifest . name ) ; }
function ( aSubject , aTopic , aData ) { switch ( aTopic ) { case "profile-after-change" : updateFilter ( ) ; checkIECompatMode ( ) ; conflictAddons ( ) ; break ; } ; }
function ( ) { opponent . emit ( 'swap' ) ; }
function ( callback ) { this . server . close ( ) ; callback ( ) ; }
function ( item ) { return "" + item . text ; }
function ( p ) { image_data . angle += Math . PI / 50 ; image_data . angle %= 2 * Math . PI ; return image_data ; }
function ( p ) { text_data . angle += Math . PI / 50 ; text_data . angle %= 2 * Math . PI ; return text_data ; }
function ( f ) { image_data . angle += Math . PI / 360 ; image_data . angle %= 2 * Math . PI ; image_data . frame += 1 ; return image_data ; }
function ( ) { $ ( "body" ) . evalSexp ( ) ; }
function ( ) { $ ( "body" ) . evalSexp ( ) ; }
function ( ) { mobileDevice = true ; $ ( '#sidebar' ) . removeClass ( 'sidebarfixed' ) ; }
function ( ) { var latest_circles = Circles . find ( { graph_id : Session . get ( 'selected_graph' ) } , { } ) ; for ( var circle in latest_circles ) { draw_circle ( circle . cx , circle . cy ) ; } }
function ( ) { $ ( '#connectBtn' ) . click ( CDOT . connect ) . removeClass ( 'disabled' ) ; }
function ( water ) { if ( ! water ) { water = w . profile ; } return ( water . HCO * 0.819672131 ) - ( water . Ca / 3.5 ) - ( water . Mg / 7 ) ; }
function ( ra ) { return 5.8 + 0.00168 * ra ; }
function ( err , data ) { if ( err ) { watcher . close ( ) ; fs . unlink ( logFile ) ; throw err ; } }
function ( ) { fs . unlink ( logFile ) ; if ( ! changesObservedThroughDefaultListener ) { assert . ok ( changesObservedThroughDefaultListener , "this test should have triggered the default change handler numerous times" ) ; } }
function ( err , data ) { if ( err ) throw err ; assert . ok ( data [ 3 ] . fd , 'must have fd with change events' ) ; done ( ) ; }
function ( err , bytesWritten ) { assert . ifError ( err , 'can write to file' ) ; }
function ( err ) { assert . ifError ( err , 'got an error cleaning up files' ) ; }
function ( err , bytesWritten ) { assert . ifError ( err , 'should have written byte to the test file' ) ; }
function ( err , bytesWritten ) { assert . ifError ( err , 'should not hav error writing test log file' ) ; }
function ( err , data ) { if ( err ) throw err ; assert . equal ( Object . keys ( watcher . fds ) . length , 1 , 'should only have one fd if fd1 timed out' ) ; done ( ) ; }
function ( ) { watcher . close ( ) ; cleanup ( ) ; t . end ( ) ; }
function ( require ) { var abstractView = require ( 'abstractView' ) ; var homePageView = abstractView . extend ( { el : '#homePage' , render : function ( ) { this . $el . html ( 'test' ) ; } } ) ; return homePageView ; }
function ( v , k ) { if ( key . test ( k ) && typeof my . cache [ k ] . value !== 'undefined' ) { delete my . cache [ k ] ; } }
function ( v , k ) { if ( typeof my . cache [ k ] . value !== 'undefined' ) { delete my . cache [ k ] ; } }
function createTokenId ( ) { var key = createKey ( ) , offset = parseInt ( Math . random ( ) * ( key . length - 5 ) ) ; return key . substring ( offset , offset + 5 ) ; }
function ( event ) { $ ( target ) . css ( 'background-color' , 'hsl(' + event . rotation + ', 100%, 50%)' ) ; }
function ( event ) { if ( event . target . result ) { result = event . target . result . shortcuts ; } }
function ( ) { return LZ . astEval ( LZ . gen ( LZ . parseFull ( "cons 1 2" ) ) ) ; }
function ( ) { return LZ . astEval ( LZ . gen ( LZ . parseFull ( "head (cons 1 2)" ) ) ) ; }
function ( ) { return assertParse ( "identMacro 1" , "lit 1" ) ; }
function ( ) { return assertParse ( "macroCons 1 nil" , "apply (apply (ref cons) (lit 1)) (ref nil)" ) ; }
function ( ) { return assertParse ( "do 1" , "lit 1" ) ; }
function presentValue ( value ) { switch ( ReplCore . getType ( value ) ) { case 'html' : case 'svg' : return getHtml ( value ) ; default : return escapeHtml ( Parse . print ( value ) ) ; } }
function processResult ( result ) { writeOutput ( "" + ( ReplCore . getType ( result ) ) + ": " + ( escape ( Parse . print ( result ) ) ) + "\n" ) ; return ReplCore . processResult ( result ) ; }
function ( ast ) { return evalCompiledAst ( dgen ( ast ( ) ) ) ; }
function processResult ( result , ast ) { return passed = showResult ( bx , Repl . escapeHtml ( Parse . print ( result ) ) , Repl . escapeHtml ( test . result ) ) ; }
function find ( func ) { return func ( this . head ( ) ) || this . tail ( ) . find ( func ) ; }
function map ( func ) { return cons ( func ( this . head ( ) ) , this . tail ( ) . map ( func ) ) ; }
function foldl1 ( func ) { return this . tail ( ) . foldl ( func , this . head ( ) ) ; }
function map ( func ) { return Nil ; }
function map ( func ) { return lexCons ( func ( this . head ( ) ) , this . start ( ) , this . tail ( ) . map ( func ) , this . end ( ) ) ; }
function ( ) { return function ( l ) { return l ( ) . head ( ) ; } ; }
function ( ) { return primToken ; }
function defineMacro ( name , func ) { return global . leisureMacros [ name ] = func ( ) ; }
function right ( value ) { return function ( a ) { return function ( b ) { return a ( ) ( function ( ) { return value ; } ) ; } ; } ; }
function ( v ) { return JSON . stringify ( v ( ) ) ; }
function ( v ) { return JSON . stringify ( v ( ) ) ; }
function tmpFalse ( a ) { return function ( b ) { return b ( ) ; } ; }
function ( env , cont ) { Parse . defGroup ( open ( ) , close ( ) ) ; return cont ( tmpFalse ) ; }
function ( env , cont ) { Parse . defToken ( token ( ) ) ; return cont ( tmpFalse ) ; }
function ( rawAnnotation ) { return new Zipkin . Annotation ( { value : rawAnnotation . value , timestamp : rawAnnotation . timestamp , host : rawAnnotation . host , hostName : rawAnnotation . hostname } ) ; }
function ( rawKvAnnotation ) { return new Zipkin . KvAnnotation ( { key : rawKvAnnotation . key , value : rawKvAnnotation . value , annotationType : rawKvAnnotation . annotationType } ) ; }
function ( d ) { return x ( d . getTimestamp ( ) - min ) ; }
function ( ) { parent . emit ( "fullsetup" , null , parent ) ; replSetSelf . emit ( "fullsetup" , null , parent ) ; }
function ( ) { parent . emit ( "fullsetup" , null , parent ) ; replSetSelf . emit ( "fullsetup" , null , parent ) ; }
function ( ) { parent . emit ( "fullsetup" , null , parent ) ; replSetSelf . emit ( "fullsetup" , null , parent ) }
function ( ) { parent . emit ( "fullsetup" , null , parent ) ; replSetSelf . emit ( "fullsetup" , null , parent ) ; }
function ( _err , _db ) { test . equal ( true , openCalled ) ; _db . close ( ) ; test . done ( ) ; }
function d3_collapse ( s ) { return s . replace ( /^\s+|\s+$/g , "" ) . replace ( /\s+/g , " " ) ; }
function processPianoQueue ( ) { }
function ( index , element ) { if ( index === 0 ) { tags_str = $ ( element ) . attr ( 'data-tag-name' ) ; } else { tags_str += ' ' + $ ( element ) . attr ( 'data-tag-name' ) ; } }
function ( ) { TwoStateToggle . call ( this ) ; }
function ( ) { var element = this . makeElement ( 'tr' ) ; element . html ( this . _content ) ; this . _element = element ; this . decorate ( element ) ; }
function ( html ) { if ( html ) { $ ( "body" ) . addClass ( 'user-messages' ) ; $ ( ".notify span" ) . html ( html ) ; } $ ( ".notify" ) . fadeIn ( "slow" ) ; visible = true ; }
function ( item ) { return { label : item . name + " from " + item . location , id : item . gymId , match : item . gymName } ; }
function ( ) { feedings . pager ( ) ; }
function ( ) { app . feedingView . close ( ) ; app . navigate ( '#' , true ) ; }
function ( k ) { if ( k == '\n' ) { A ( cb , [ [ 1 , k . keyCode ] , 0 ] ) ; } }
function onDeviceReady ( ) { cordova . exec ( null , null , "SplashScreen" , "hide" , [ ] ) ; Parse . initialize ( "DeE1IIk6SSWxDVAiywycW78jUBA4ZXXT1nZrFfoV" , "QsKQMMV9tQLMiO9GfSh305qP6cy3gqfqCTSQyFEP" ) ; $ . mobile . jqmNavigator . pushView ( new LoginView ( ) ) ; }
function setRaw ( mode ) { process . stdin . setRawMode ? process . stdin . setRawMode ( mode ) : tty . setRawMode ( mode ) ; }
function ( ) { if ( input . parentNode ) input . setSelectionRange ( caret + text . length , caret + text . length ) ; }
function $_addScript ( scriptSource ) { var script = document . createElement ( 'script' ) ; script . type = 'text/javascript' ; script . textContent = localStorage . getItem ( scriptSource ) ; document . head . appendChild ( script ) ; }
function $_addRule ( selector , rule , props ) { var $rule = $ ( '<style type="text/css">' ) . text ( selector + rule ) ; void 0 !== props && $rule . prop ( props ) ; $rule . appendTo ( 'head' ) ; }
function $_l ( str ) { return ( THIRDCONTEXT . CONSTANTS . TEXT [ localStorage . getItem ( 'Caabie_language' ) || 'en' ] [ str ] ) ; }
function $_prototype_append ( ) { return this . domManip ( arguments , true , function ( a ) { this . nodeType % 10 === 1 && this . appendChild ( a ) ; } ) ; }
function $_prototype_vis ( i ) { return this . css ( 'visibility' , i ? 'visible' : 'hidden' ) ; }
function $_prototype_quickClone ( deep ) { return this . map ( function quickClone_internal ( elem , deep ) { return this . cloneNode ( deep || false ) ; } ) ; }
function $_prototype_hasProp ( property ) { property = this . prop ( property ) ; return ( void 0 !== property && property . length ) ; }
function $_prototype_quickWidth ( which ) { return parseInt ( $ . css ( this [ which || 0 ] , 'width' ) , 10 ) ; }
function $_prototype_quickHeight ( which ) { return parseInt ( $ . css ( this [ which || 0 ] , 'height' ) , 10 ) ; }
function $_single ( o ) { var collection = $ ( [ 1 ] ) ; return function single_internal ( element ) { collection [ 0 ] = element ; return collection ; } ; }
function $_prototype_detach ( async , fn ) { return this . each ( function detach_internal ( ) { detach ( this , async , fn ) ; } ) ; }
function ( ) { return this . filename && this . filename [ 0 ] === ':' ; }
function ( catName ) { var tmpl = $ ( '#category-item' ) . html ( ) , params = { category_name : catName } , cat = Mustache . to_html ( tmpl , params ) ; this . element . append ( cat ) ; }
function ( ) { return ! ( Main . overview . visible || this . _animationBlockCount > 0 ) ; }
function ( response ) { read ( response ) ; $ ( '#dictionary-add-view' ) . toggleClass ( 'slide' ) ; $ ( '#add-dict' ) . show ( ) ; }
function ( parentName ) { var singularName = parentName . substring ( 0 , parentName . length - 1 ) ; return parentName + ':' + req . params [ singularName + 'Id' ] ; }
function ( parentName ) { var singularName = parentName . substring ( 0 , parentName . length - 1 ) ; return parentName + '/:' + singularName + 'Id' ; }
function ( ) { this . $el . html ( this . template ( this . options . component . toJSON ( ) ) ) ; return this ; }
function ( event ) { event . preventDefault ( ) ; this . layoutView . trigger ( 'applyComponentConfig' , $ ( event . currentTarget ) ) ; }
function ( key ) { examineItem ( key , obj [ key ] , pxi [ key ] , errors , valid , config [ key ] ) ; }
function ( ) { that . $input . parents ( '.control-group' ) . attr ( 'class' , 'control-group' ) . end ( ) . val ( '' ) ; that . $input . next ( ) . text ( '' ) ; clearTimeout ( time ) ; }
function ( el ) { return this . getFieldValue ( el ) . length > 0 || el . val ( ) . length > 0 ; }
function ( instance , mode ) { if ( ! _CodeMirror . modes . hasOwnProperty ( mode ) ) _CodeMirror . requireMode ( mode , function ( ) { instance . setOption ( "mode" , instance . getOption ( "mode" ) ) ; } ) ; }
function analyseChapter ( sourceCode ) { chapterText = '' ; chapterText += sourceCode . match ( /<div class='notes'>([\s\S]*?)<\/div>\s*<div id="story">/im ) [ 1 ] ; if ( chapterText != '' ) chapterText += '<hr />' ; chapterText += sourceCode . match ( /<div id="story">([\s\S]*?)<\/div>\s*<div id="prev">/im ) [ 1 ] ; return true ; }
function formatAbsolute ( args ) { return this . name + " $" + formatHex ( args [ 1 ] , 2 ) + formatHex ( args [ 0 ] , 2 ) ; }
function ( header ) { return [ [ "th" , header . name + ":" , "data-spec" , "http#" + header . name ] , [ "td" , header . value ] ] ; }
function ( entry ) { this . method = null ; this . request_headers = null ; this . request_headers_raw = null ; this . request_type = null ; this . firstline = null ; this . requestbody = null ; this . boundary = "" ; }
function ( ) { window . physics . start_game ( ) ; load_level ( window . viewModel . level ( ) ) ; }
function ( ) { window . viewModel . state ( "BUILD" ) ; $menus . fadeOut ( ) ; load_level ( window . viewModel . level ( ) ) ; return window . backwards_to ( $main_menu ) ; }
function ( ) { var state ; state = { "entities" : [ ] } ; return state ; }
function ( meters ) { return meters * 30 ; }
function ( e ) { return tinymce . isMac ? e . metaKey : e . ctrlKey && ! e . altKey ; }
function ( _ , prop ) { if ( isCache [ prop . idx ] != null ) { same = ( isCache [ prop . idx ] === localCache [ prop . idx ] ) ; return same ; } }
function ( v , i ) { v = ( v || 0 ) . toString ( 16 ) ; return v . length === 1 ? "0" + v : v ; }
function ( ) { infobox = new Infobox ( { 'text' : "Level " + model . get ( 'currentLevel' ) . get ( 'name' ) + " Push Space" , "actionToTrigger" : "LevelStart" } ) ; }
function ( ) { var elements = [ "src/entities/wall.js" , "src/entities/floor.js" , "src/entities/fruit.js" , "src/entities/body.js" , "src/entities/snake.js" , "src/entities/world.js" , "src/levels/level.js" , "src/levels/maps.js" , "src/interfaces/scorebox.js" , "src/interfaces/infobox.js" , ] ; require ( elements , function ( ) { theWorld = new World ( ) ; } ) ; }
function ( ) { var graphView = this . graphViewForPane ( this . get ( 'graphPane' ) ) ; graphView . get ( 'titleView' ) . set ( 'isVisible' , false ) ; }
function ( ) { var graphView = this . graphViewForPane ( this . get ( 'graphPane' ) ) ; graphView . get ( 'titleView' ) . set ( 'isVisible' , true ) ; }
function ( ) { var graphView = this . graphViewForPane ( this . get ( 'graphPane' ) ) ; this . set ( 'graphLogicalBounds' , graphView . graphCanvasView . _getLogicalBounds ( ) ) ; }
function ( x , y ) { var graphView = this . graphViewForPane ( this . get ( 'graphPane' ) ) ; return graphView . graphCanvasView . _checkInputAreaScreenBounds ( x , y ) ; }
function ( error , thread ) { if ( error ) { res . render ( 'index' , { thread : null } ) ; } else { res . render ( 'index' , { thread : thread } ) ; } }
function ( parentThread , callback ) { var thread = new t . Thread ( req . body . msgText , req . body . author , parentThread ) ; repository . insertThread ( thread , callback ) ; }
function ( docs , callback ) { thread . setFromDoc ( docs [ 0 ] ) ; callback ( null , thread ) ; }
function ( threadFound , callback ) { console . log ( threadFound ) ; test . equals ( threadFound . msgText , thread . msgText ) ; test . equals ( threadFound . parents . length , 0 ) ; callback ( ) ; }
function ( threadTree , callback ) { console . log ( threadTree ) ; test . equals ( threadTree . getChild ( 0 ) . parentID . toString ( ) , threadChild . parentID . toString ( ) ) ; callback ( ) ; }
function ( threadInDB , callback ) { thread = threadInDB ; console . log ( threadInDB ) ; var threadChild = new t . Thread ( 'reMsg' , 'new author' , threadInDB ) ; self . repository . insertThread ( threadChild , callback ) ; }
function ( threadChildInDB , callback ) { console . log ( threadChildInDB ) ; var subThreadChild = new t . Thread ( 'reReMsg' , 'new new author' , threadChildInDB ) ; self . repository . insertThread ( subThreadChild , callback ) ; }
function ( threadSubChildInDB , callback ) { console . log ( threadSubChildInDB ) ; self . repository . findThreadByID ( thread . id , callback ) ; }
function ( res ) { if ( typeof success == "function" ) { success ( __self . db , _version , result . systemPath ) ; } }
function ( res ) { if ( typeof success == "function" ) { success ( __self . db , _version , result . systemPath ) ; } }
function fillHomeCategoryFavorites ( ) { fillLocal ( 'favorites' ) ; }
function fillHomeCategoryLookLater ( ) { fillLocal ( 'lookLater' ) ; }
function fillHomeCategorySeen ( ) { fillLocal ( 'seen' ) ; }
function ( oldRange , newRange ) { WebInspector . SourceFrame . prototype . afterTextChanged . call ( this , oldRange , newRange ) ; this . _javaScriptSource . setWorkingCopy ( this . textModel . text ) ; this . _restoreBreakpointsAfterEditing ( ) ; }
function ( callback ) { this . _scriptSnippetModel . _setScriptSnippetContent ( this , this . workingCopy ( ) ) ; callback ( null ) ; }
function ( uiSourceCode , event ) { if ( ! uiSourceCode . isSnippet ) return ; var snippetJavaScriptSource = uiSourceCode ; snippetJavaScriptSource . evaluate ( ) ; }
function Bag ( contents ) { this . contents = contents ? contents . slice ( ) : [ ] ; }
function ( letter ) { if ( rackLetters . contains ( letter ) ) { rackLetters . remove ( letter ) ; } else { throw 'cannot swap, rack does not contain letter "' + letter + '"' ; } }
function ( ) { this . disabled = true ; }
function ( ) { return self . amount ( ) == 0 ; }
function ( ) { return function ( ) { this . getName = function ( ) { return "Example" } } }
function ( transform ) { var style = this . map . layerContainerDiv . style ; var transformProperty = OpenLayers . Util . getVendorPrefixedDom ( "transform" ) ; if ( transformProperty ) { style [ transformProperty ] = transform ; } }
function ( gremlinjs ) { 'use strict' ; gremlinjs . getLoader ( "./gremlins/" ) . load ( ) ; }
function ( ) { self . remove ( ) ; }
function ( dir ) { var stat ; return fs . existsSync ( dir ) && ( stat = fs . statSync ( dir ) ) && stat . isDirectory ( ) ; }
function ( ) { return this . startX ; }
function ( ) { $ ( '.add-remove-slide-slider' ) . iosSlider ( 'addSlide' , "<div class = 'item item1'>new slide</div>" , 2 ) ; }
function addSlide ( ) { $ ( '.add-remove-slide-slider .slider' ) . append ( "<div class = 'item item1'>new slide</div>" ) ; }
function ( ) { return toHtml ( $scope . item . Content . header ) ; }
function ( ) { return toHtml ( $scope . item . Content . text ) ; }
function ( ) { return $scope . item . thumb ; }
function text ( $scope , $http , appSettings ) { $scope . item = $scope . $parent . data }
function ( ) { try { require ( './not_found' ) . requireNonExistent ( ) ; } catch ( e ) { e . stack . should . match ( /\n *at .*not_found\.js:2\n/ ) ; } }
function ( handle ) { dojo . disconnect ( handle ) }
function ( success , fail ) { return this . exec ( "pause" , [ ] , success , fail ) ; }
function getAllProperties ( obj , func ) { for ( ; obj ; obj = obj . __proto__ ) { if ( obj instanceof Object ) Object . getOwnPropertyNames ( obj ) . forEach ( func ) ; } }
function ( selector , callback ) { SC . RunLoop . begin ( ) ; this . set ( 'selector' , selector ) ; SC . RunLoop . end ( ) ; var page = this ; callback . apply ( page , [ page ] ) ; }
function ( socket , Peer ) { rtc . addPeer ( Peer ) ; if ( rtc . getPeers ( ) ) { socket . emit ( 'addPeers' , { peers : rtc . getPeers ( ) } ) ; } }
function ( e ) { console . log ( 'Pitch.onClick()' ) ; console . log ( e ) ; console . log ( this ) ; console . log ( this . parent ) ; }
function ( ) { this . removeAllChildren ( ) ; this . addChild ( baseZone ) ; this . addChild ( pathSquares ) ; }
f var confirmationFieldValue = jQuery ( '#' + element . attr ( 'id' ) + '_confirmation' ) . val ( ) ; if ( confirmationFieldValue && element . val ( ) !== confirmationFieldValue ) { return options . message ; } }
function ( err , data ) { if ( data ) { addUsersToData ( data , callback ) ; } else { callback ( err ) ; } }
function ( ) { return chart . select ( "svg" ) ; }
function ( d ) { return chart . keyFunction ( ) ( d . data ) ; }
function ( d ) { return chart . filter ( ) == chart . keyFunction ( ) ( d . data ) ; }
function ( d ) { return chart . valueFunction ( ) ( d ) ; }
function ( d ) { var data = d . data ; if ( chart . valueFunction ( ) ( data ) == 0 ) return "" ; return labelFunction ( d ) ; }
function onClick ( d ) { chart . filter ( chart . keyFunction ( ) ( d . data ) ) ; dc . redrawAll ( ) ; }
function finalBarY ( d ) { return chart . margins ( ) . top + chart . y ( ) ( chart . valueFunction ( ) ( d ) ) ; }
function finalBarHeight ( d ) { return chart . yAxisHeight ( ) - chart . y ( ) ( chart . valueFunction ( ) ( d ) ) - BAR_PADDING_BOTTOM ; }
function ( g ) { chart . _redrawBrush ( g ) ; fadeDeselectedBars ( ) ; }
function fadeDeselectedArea ( ) { }
function ( d ) { return chart . keyFunction ( ) ( d ) ; }
function ( d ) { return chart . keyFunction ( ) ( d ) ; }
function ( ) { redrawBars ( ) ; chart . redrawBrush ( chart . g ( ) ) ; if ( chart . yElasticity ( ) ) chart . renderYAxis ( chart . g ( ) ) ; return chart ; }
function finalBarX ( d ) { return chart . x ( ) ( chart . keyFunction ( ) ( d ) ) + chart . margins ( ) . left ; }
function finalBarY ( d ) { return chart . margins ( ) . top + chart . y ( ) ( chart . valueFunction ( ) ( d ) ) ; }
function finalBarHeight ( d ) { return chart . yAxisHeight ( ) - chart . y ( ) ( chart . valueFunction ( ) ( d ) ) - BAR_PADDING_BOTTOM ; }
function ( d ) { var xValue = chart . keyFunction ( ) ( d ) ; return xValue < start || xValue >= end ; }
function ( _ ) { if ( ! arguments . length ) return _keyFunction ; _keyFunction = _ ; return chart ; }
function ( _ ) { if ( ! arguments . length ) return _valueFunction ; _valueFunction = _ ; return chart ; }
function ( _ ) { if ( ! arguments . length ) return _xAxis ; _xAxis = _ ; return chart ; }
function ( y ) { if ( ! arguments . length ) return _yAxis ; _yAxis = y ; return chart ; }
function ( _ ) { if ( ! arguments . length ) return _yElasticity ; _yElasticity = _ ; return chart ; }
function ( ) { return d3 . max ( chart . group ( ) . all ( ) , function ( e ) { return chart . valueFunction ( ) ( e ) ; } ) ; }
function ( d ) { return chart . keyFunction ( ) ( d ) ; }
function ( d ) { return chart . keyFunction ( ) ( d ) ; }
function ( ) { redrawLine ( ) ; chart . redrawBrush ( chart . g ( ) ) ; if ( chart . yElasticity ( ) ) chart . renderYAxis ( chart . g ( ) ) ; return chart ; }
function ( d ) { return chart . x ( ) ( chart . keyFunction ( ) ( d ) ) ; }
function ( d ) { return chart . y ( ) ( chart . valueFunction ( ) ( d ) ) ; }
function ( d ) { return chart . keyFunction ( ) ( d . data ) ; }
function ( d ) { return chart . filter ( ) == chart . keyFunction ( ) ( d . data ) ; }
function ( d ) { return chart . valueFunction ( ) ( d ) ; }
function ( d ) { var data = d . data ; if ( chart . valueFunction ( ) ( data ) == 0 ) return "" ; return labelFunction ( d ) ; }
function onClick ( d ) { chart . filter ( chart . keyFunction ( ) ( d . data ) ) ; dc . redrawAll ( ) ; }
function ( chart ) { assert . isNotNull ( chart . xAxis ( ) ) ; }
function ( chart ) { assert . isNotNull ( chart . yAxis ( ) ) ; }
function ( chart ) { assert . isNotNull ( chart . xAxis ( ) ) ; }
function ( chart ) { assert . isNotNull ( chart . yAxis ( ) ) ; }
function ( chart ) { assert . isNotNull ( chart . keyFunction ( ) ) ; }
function ( chart ) { assert . isNotNull ( chart . valueFunction ( ) ) ; }
function ( guest ) { $ . post ( '/admin/endpoints/markcoming' , { InvitationId : guest . InvitationId } , function ( data ) { self . refresh ( ) ; } ) ; }
function ( callback ) { this . model . get ( "corpus" ) . replicateCorpus ( callback ) ; }
function ( ) { return ( this . hostname == location . hostname && ! ( /^mailto:/ ) . test ( this . href ) ) ; }
function ( ) { return ( this . hostname != location . hostname || ( /^mailto:/ ) . test ( this . href ) ) ; }
function ( response ) { $ ( '#issues-table' ) . html ( response ) ; }
function ( response ) { $fill_graph_container . empty ( ) ; plot_fill_graph ( response . graph_info , $fill_graph_container ) ; draw_overflow_visualization ( response . overflow ) ; $ ( '#demand-value' ) . html ( Math . round ( response . demand24h ) + ' m<sup>3</sup>' ) ; }
function formatAbsolute ( args ) { return this . name + " $" + formatHex ( args [ 1 ] , 2 ) + formatHex ( args [ 0 ] , 2 ) ; }
function ( evt ) { if ( ! self . tapToTop ) return ; var activeView = viewStack . getActiveView ( ) ; var scrollView = activeView . element . scrollView ; if ( scrollView && ! scrollView . isScrolling ) scrollView . scrollToTop ( ) ; }
function ( ) { CCR . initSlider ( ) ; CCR . initValidate ( ) ; CCR . initStep1Events ( ) ; CCR . initStep2Events ( ) ; }
function headerOpen ( ) { $ ( '#occheaderbg, .headernav' ) . animate ( { height : openHeight + 'px' } , 150 ) ; visible = true ; }
function headerClose ( ) { $ ( '#occheaderbg, .headernav' ) . animate ( { height : closedHeight + 'px' } , 150 ) ; visible = false ; }
function ( err ) { console . log ( "Got to error" ) ; callback ( err , null ) ; }
function ( response ) { if ( response . propertySet !== undefined ) { response . propertySet = new TapAPI . collections . PropertySet ( objectToArray ( response . propertySet . property ) , this . id ) ; } return response ; }
function ( err , js ) { if ( err ) { throw err ; } return result = js ; }
function ( err , tree ) { if ( err ) { throw err ; } return result = tree . toCSS ( { compress : compress } ) ; }
function ( err ) { if ( err && err . errno !== process . EEXIST ) { return callback ( err ) ; } fs . mkdirSync ( dir , mode ) ; return callback ( ) ; }
function ( data ) { $ ( "#add-comment-" + achievementId ) . html ( "<p>" + markdown . Transform ( comment ) + "</p>" ) ; }
function ( ) { var goalId = $ ( this ) . attr ( "id" ) . replace ( "add-astray-link-" , "" ) ; postAchievement ( goalId , "" , "astray" , "" ) ; return false ; }
function ( ) { var goalId = $ ( this ) . attr ( "id" ) . replace ( "add-on-course-link-" , "" ) ; postAchievement ( goalId , "" , "oncourse" , "" ) ; return false ; }
function ( err , docs ) { }
function ( ) { WDN . jQuery ( 'span.embed' ) . colorbox ( { inline : true , href : '#sharing' , width : '650px' , height : '390px' } ) ; }
function ( msg ) { console . log ( "Parse error at token " + i + ": " + token + ".\n" + msg ) ; return true ; }
function ( ) { resources [ e ] . Author . create ( { id : 'han' , age : 30 , hair : 'red' } , this . callback ) ; }
function ( ) { resources [ e ] . Creature . create ( { id : 'han' } , this . callback ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'han' ) ; assert . equal ( obj . resource , 'Creature' ) ; }
function ( ) { return resources [ e ] . Author . new ( { id : 'han' , age : 30 , hair : 'red' } ) ; }
function ( ) { return resources [ e ] . Author . new ( { id : 'han' , age : 30 , hair : 'red' } ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'pavan' ) ; assert . equal ( obj . name , 'pavan' ) ; assert . equal ( obj . resource , 'User' ) ; }
function ( obj ) { obj . createRepository ( { id : 'issues' , name : 'issues' } , this . callback ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'user/christian/issues' ) ; assert . equal ( obj . name , 'issues' ) ; assert . equal ( obj . resource , 'Repository' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'christian' ) ; assert . equal ( obj . name , 'christian' ) ; assert . equal ( obj . resource , 'User' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'user/christian/issues' ) ; assert . equal ( obj . name , 'issues' ) ; assert . equal ( obj . user_id , 'christian' ) ; }
function ( obj ) { resources [ e ] . User . createRepository ( 'marak' , { id : 'haibu' , name : 'haibu' } , this . callback ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'user/marak/haibu' ) ; assert . equal ( obj . name , 'haibu' ) ; assert . equal ( obj . resource , 'Repository' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'marak' ) ; assert . equal ( obj . name , 'marak' ) ; assert . equal ( obj . resource , 'User' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'user/marak/haibu' ) ; assert . equal ( obj . name , 'haibu' ) ; assert . equal ( obj . user_id , 'marak' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'user/pavan/bullet' ) ; assert . equal ( obj . name , 'bullet' ) ; assert . equal ( obj . resource , 'Repository' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'pavan' ) ; assert . equal ( obj . name , 'pavan' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'pavan' ) ; assert . equal ( obj . name , 'pavan' ) ; assert . equal ( obj . resource , 'User' ) ; }
function ( err , obj ) { assert . isNull ( err ) ; assert . equal ( obj . id , 'user/christian/issues' ) ; assert . equal ( obj . name , 'issues' ) ; assert . equal ( obj . resource , 'Repository' ) ; }
function ( p ) { p . createForum ( { id : 'haibu' , name : 'haibu' } , this . callback ) ; }
function ( jqXHR , textStatus , errorThrown ) { $ ( ".loading" ) . remove ( ) ; $ ( "#nightly_crash_trends_graph" ) . empty ( ) . append ( errorThrown ) ; }
function sendCommand ( message ) { if ( theport && message ) { try { theport . postMessage ( encodeMessage ( message ) ) ; } catch ( e ) { } } window . close ( ) ; }
function ( html , args ) { if ( ! args || args === sliding_tree . get_current_crumb ( ) ) { parent . children ( '.will_have_content' ) . html ( html ) ; } }
function ( ) { errors = null ; }
function ( ) { modelClass = null ; model = null ; }
function ( ) { validator = null ; }
function ( ) { model = null ; validator = null ; }
function ( ) { Ember . Validators . getValidator ( 'inexistent' ) ; }
function ( ) { Ember . Validators . getValidator ( 'inexistent' , { validator : null } ) ; }
function ( err , app ) { cb ( app ) ; }
function ( row , col ) { if ( row < this . matrix . length && row >= 0 ) { return this . matrix [ row ] [ col ] ; } else { return undefined ; } }
function ( ) { var col = this . col + 1 ; return this . matrix . get_cell ( this . row , col ) ; }
function ( ) { var col = this . col - 1 ; return this . matrix . get_cell ( this . row , col ) ; }
function ( ) { var row = this . row + 1 ; return this . matrix . get_cell ( row , this . col ) ; }
function ( ) { var modules = status . data . sort ( ) ; Assert . isTrue ( Y . SKIN_TEST , 'Failed to load external module' ) ; ArrayAssert . itemsAreEqual ( [ "skin-green-skin-test" , "skin-test" ] , modules , 'Failed to load all modules' ) ; }
function ( inputOrSelector ) { var input = ErrorUtils . getInput ( inputOrSelector ) ; input . closest ( 'div.control-group' ) . addClass ( 'error' ) ; }
function ( inputOrSelector ) { var input = ErrorUtils . getInput ( inputOrSelector ) input . closest ( 'div.control-group' ) . removeClass ( 'error' ) ; }
function ( method , model , options ) { options . timeout = 3000 ; options . dataType = "jsonp" ; return Backbone . sync ( method , model , options ) ; }
function ( resp ) { if ( resp . data && resp . data . message && resp . data . message === 'Not Found' ) { return [ ] ; } return resp . data ; }
function ( model , callback ) { callback ( { "status" : "success" , data : model } ) ; }
function ( err ) { err . message . should . include ( 'ENOENT' ) ; err . path . should . equal ( 'foo' ) ; done ( ) ; }
function ( e ) { translateMode = ! translateMode ; DWRCustomMessageService . toggleTranslateMode ( { async : false } ) ; jQuery ( this ) . val ( "Translate: " + ( translateMode ? "ON" : "OFF" ) ) ; location . reload ( ) ; }
function ( ) { var ctx = prop . uiContext ; var w = prop . uiCanvas . width ; var h = prop . uiCanvas . height ; ctx . clearRect ( 0 , 0 , w , h ) ; prop . strokeCount = 0 ; }
function onMouseUp ( e ) { if ( ! prop . enabled ) return true ; prop . strokeCount ++ ; prop . mouseDown = false ; prop . started = false ; prop . uiContext . closePath ( ) ; }
function ( ) { var paginator = this , host = paginator . _host , optimizeMemory = paginator . optimizeMemory , currentIndex = paginator . _cIndex , pageNodes ; if ( ! optimizeMemory ) { return false ; } }
function ( ) { var paginator = this , index = paginator . _cIndex , target = index + 1 ; paginator . set ( INDEX , target ) ; }
function ( ) { var paginator = this , index = paginator . _cIndex , target = index - 1 ; if ( target < 0 ) { target = 0 ; } paginator . set ( INDEX , target ) ; }
function ( ) { this . _scrollTo . apply ( this , arguments ) ; }
function setWaterHeight ( h ) { g_Environment . Water . WaterBody . Height = h ; WATER_LEVEL_CHANGED = true ; }
function ( ) { if ( state === $jsilcore . PropertyNotInitialized ) { state = getValue . call ( this ) ; JSIL . Host . runLater ( cleanup ) ; } return state ; }
function getCode ( id , success_fn , error_fn ) { $ . ajax ( '/do/code' , { data : { id : id } , dataType : 'json' , error : error_fn , success : success_fn } ) ; }
function getComments ( id , success_fn , error_fn ) { $ . ajax ( '/do/comments' , { data : { code_id : id } , dataType : 'json' , error : error_fn , success : success_fn } ) ; }
function getLanguage ( id , success_fn , error_fn ) { $ . ajax ( '/do/language' , { data : { id : id } , dataType : 'json' , error : error_fn , success : success_fn } ) ; }
function ( event ) { grade = getStuGrade ( ) ; }
function ( err ) { options . body = 'Cannot communicate with netbug server' ; options . cssClass = 'css-streamError' ; injectMessage ( options ) ; }
function close ( port ) { if ( socketOpen [ port ] ) { try { serverHttp [ port ] . close ( ) ; } catch ( e ) { console . log ( 'critical error: ' , e ) ; } } }
function router ( rest ) { rest . post ( '/listentcp/:portNum' , listenTcp ) ; rest . post ( '/listenhttp/:portNum' , listenHttp ) ; rest . post ( '/listenudp/:portNum' , listenUdp ) ; rest . get ( '/onPageLoad' , onPageLoad ) ; }
function ( ) { var address = serverUdp . address ( ) ; socketOpen = true ; response . json ( { "error" : false } ) ; }
function ( ) { element . addClass ( self . cssPrefix + "-more-hover" ) ; }
function ( ) { element . removeClass ( self . cssPrefix + "-more-hover" ) ; }
function ( element ) { return element . append ( this . data . actor . title || this . labels . get ( "guest" ) ) ; }
function ( element , dom ) { return this . render ( "extraField" , element , dom , { "type" : "markers" } ) ; }
function ( element , dom ) { return this . render ( "extraField" , element , dom , { "type" : "tags" } ) ; }
function ( ) { if ( self . user . is ( "admin" ) ) { dom . get ( "modeSwitch" ) . show ( ) ; } switchClasses ( "add" ) ; }
function ( ) { if ( self . user . is ( "admin" ) ) { dom . get ( "modeSwitch" ) . hide ( ) ; } switchClasses ( "remove" ) ; }
function ( ) { mode = ( mode === "default" ? "metadata" : "default" ) ; setTitle ( ) ; self . dom . get ( "data" ) . toggle ( ) ; self . dom . get ( "metadata" ) . toggle ( ) ; }
function ( element ) { return element . addClass ( this . cssPrefix + "-wrapper" + ( this . depth ? "-child" : "-root" ) ) ; }
function ( i , c ) { if ( c . uri === pageHref ) { mustSkipContext = true ; return false ; } }
function ( i , c ) { if ( getDomain ( c . uri ) === pageDomain ) { primaryContext = c ; return false ; } }
function ( element , dom ) { return this . render ( "viaText" , element , dom , { "label" : "from" , "field" : "source" } ) ; }
function ( i , v ) { content . text = content . text . replace ( " %%HTML_TAG%% " , v ) ; }
function ( element ) { var container = element || this . dom && this . dom . get ( "date" ) ; this . calcAge ( ) ; if ( container ) { container . html ( this . age ) ; } return element ; }
function ( smiley ) { return '<img class="' + this . cssPrefix + '-smiley-icon" src="//cdn.echoenabled.com/images/smileys/emoticon_' + smiley . file + '" title="' + smiley . title + '" alt="' + smiley . title + '" />' ; }
function ( ev ) { var page = $ ( this ) . val ( ) ; showPage ( page , null , true ) ; ev . preventDefault ( ) ; }
function ( ) { newdir = fs . add ( cwd . join ( '/' ) , prompt ( "New folder name" ) , 'dir' ) ; newdir && addIcon ( newdir ) ; }
function ( ) { this . un ( "failedDataBatch" , guid ) ; if ( reindex ) self . reindex ( ) ; self . loaded = true ; this . fire ( "afterDataSync" , self . get ( ) ) ; }
function ( functions ) { functions = functions || this . functions ; return toSymbols ( functions ) ; }
function ( ) { if ( selectedElement != null || multiselected ) { if ( window . event . type === "keydown" ) flash ( $ ( '#edit_menu' ) ) ; svgCanvas . cutSelectedElements ( ) ; } }
function ( ) { if ( selectedElement != null || multiselected ) { if ( window . event . type === "keydown" ) flash ( $ ( '#edit_menu' ) ) ; svgCanvas . copySelectedElements ( ) ; } }
function ( ) { if ( selectedElement != null ) { if ( window . event . type === "keydown" ) flash ( $ ( '#object_menu' ) ) ; svgCanvas . moveToTopSelectedElement ( ) ; } }
function ( ) { if ( selectedElement != null ) { if ( window . event . type === "keydown" ) flash ( $ ( '#object_menu' ) ) ; svgCanvas . moveUpDownSelected ( "Up" ) ; } }
function ( ) { if ( selectedElement != null ) { if ( window . event . type === "keydown" ) flash ( $ ( '#object_menu' ) ) ; svgCanvas . moveUpDownSelected ( "Down" ) ; } }
function ( ) { svgCanvas . clearSelection ( ) ; $ ( '#tool_canvas' ) . trigger ( "click" ) }
function ( views ) { if ( ! Util . basicAuthHeader ) { Ext . getCmp ( 'mainView' ) . setMasked ( false ) ; } }
function ( ) { hostSubscribe ( ) ; }
function ( err , tmpl ) { if ( err ) throw err ; if ( ++ done == dependencies . length ) callCallbacks ( tmp . cb ) ; }
function ( ) { this . undelegateEvents ( ) ; return new WeekOrderView ( ) ; }
function ( er , m ) { var locals = { content : "index.ejs" , index : m . index , profile : m . myprofile } res . template ( "layout.ejs" , locals ) }
function ( er , m ) { var locals = { content : 'login.ejs' , profile : m && m . myprofile } res . template ( 'layout.ejs' , locals ) }
function ( er , done ) { res . redirect ( done || '/' ) }
function extractOrigin ( url ) { if ( ! /^https?:\/\// . test ( url ) ) url = window . location . href ; var m = /^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/ . exec ( url ) ; if ( m ) return m [ 1 ] ; return url ; }
function extractOrigin ( url ) { if ( ! /^https?:\/\// . test ( url ) ) url = window . location . href ; var m = /^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/ . exec ( url ) ; if ( m ) return m [ 1 ] ; return url ; }
function ( tab ) { mediaRequestsMap [ tab . id ] = { requestNum : 0 } ; listUpdater ( tab ) ; console . log ( "Created!" ) ; }
function lm_init ( ) { window . addEventListener ( 'click' , this , true ) ; window . addEventListener ( 'screenchange' , this , true ) ; window . addEventListener ( 'home' , this ) ; }
function pm_backHandling ( evt ) { if ( ! this . _currentPopup ) return ; this . close ( ) ; evt . stopImmediatePropagation ( ) ; }
function ( e ) { setDisplayedApp ( null ) ; if ( CardsView . cardSwitcherIsShown ( ) ) CardsView . hideCardSwitcher ( ) ; }
function ( err , result ) { if ( err ) { console . warn ( "Failed connecting to FitBit. Clearing session." , err ) ; fitbit . logout ( req ) ; } else { res . send ( "OK" ) } }
function ( err , data ) { if ( err ) { callback ( err , null ) } else { callback ( null , data ) ; } }
function ( ) { this . _rootAABB . compute ( this . _rect , this . concatedMatrix ) ; return this . _rootAABB ; }
function ( ) { return this . _localAABB ; }
function ( isDirty ) { this . _rootAABB . dirty = isDirty ; this . _localAABB . dirty = isDirty ; if ( isDirty && this . parent != null ) this . parent . dirtyAABB = true ; }
function ( ) { if ( this . translateOptimized && this . scrollNode ) { this . scrollNode . scrollTop = 1 ; this . scrollNode . scrollTop = 0 ; } }
function ( err , activity ) { callback ( err , activity ) ; }
function ( photoId ) { var photo ; photo = CSPhotoSelector . getPhotoById ( photoId ) ; logActivity ( '<br><strong>Submitted</strong><br> Photo ID: ' + photo . id + '<br>Photo URL: ' + photo . source + '<br>' ) ; }
function ( start , end , value ) { start = moment ( start ) ; end = moment ( end ) ; start . utc ( ) ; end . utc ( ) ; return end . diff ( start , value ) ; }
function ( r ) { if ( message . match ( r . route ) ) { console . log ( 'Match' , r . route ) ; handleRoute ( r ) ; } ; }
function ( info , cb ) { title . handler ( info . message . match ( new RegExp ( regexp ) ) , cb ) ; }
function formatter ( i ) { return format ( '%s %s (%s): %s' , c ( 'yellow' , '└→' ) , i . name , c ( 'light_green' , '@' + i . user ) , i . text ) ; }
function onNotFound ( ) { next ( ) ; return ; }
function ( st ) { if ( ! st ) { onError ( "Cat returned null stream" ) ; return ; } params . resultStream = st ; next ( ) ; }
function ( err , contents ) { try { done ( _ . template ( contents . toString ( ) ) ) ; } catch ( ex ) { console . log ( "Unable to locate file: " + path ) ; } }
function ( ) { try { $ ( instance ) . trigger ( "onReceived" , [ this ] ) ; } catch ( e ) { log ( 'Error raising received ' + e ) ; } }
function ( ) { try { $ ( instance ) . trigger ( "onReceived" , [ this ] ) ; } catch ( e ) { log ( 'Error raising received ' + e ) ; } }
function ( ) { return PB . overwrite ( { } , this . data ) ; }
function ( key ) { this . data [ key ] = void 0 ; return this ; }
function ( ) { return PB . overwrite ( { } , this . data ) ; }
function ( key ) { this . data [ key ] = void 0 ; return this ; }
function ( bucket , callback ) { return this . queryS3 ( "GET" , bucket , "" , "?policy" , { } , content , this , callback ? false : true , "onCompleteGetS3BucketPoilicy" , callback ) ; }
function ( data ) { $ ( "#sqlqueryresults" ) . html ( data . sql_query ? data . sql_query : data ) . trigger ( 'makegrid' ) ; PMA_init_slider ( ) ; PMA_ajaxRemoveMessage ( $msgbox ) ; }
function ( ) { var now = new Date ( ) . getTime ( ) ; App . programController . stepForward ( now , App . programStatus , App . player . canStepThroughPlaylist ( ) ) ; App . playProgram ( now ) ; }
function ( $injector , database , options , collection_name ) { this . $injector = $injector ; this . collection_ = database . getCollection ( collection_name ) ; this . collection_name_ = collection_name ; }
function ( options , collection_name ) { darkside . base ( EntityRepository , this , options , collection_name ) ; }
function ( ) { this . visual . $el . attr ( 'id' , 'layer-visual-' + this . id ) if ( this . controls ) this . controls . $el . attr ( 'id' , 'layer-' + this . id ) }
function ( ) { svgCanvas . setStrokeAttr ( 'stroke-dasharray' , $ ( this ) . val ( ) ) ; $ ( "#stroke_style_label" ) . html ( this . options [ this . selectedIndex ] . text ) operaRepaint ( ) ; }
function ( error , response , body ) { if ( ! error && response . statusCode == 200 ) { res . render ( 'index.jade' , { content : md ( body ) } ) ; } else { res . send ( 'Error generating page, please try later on...' ) ; } }
function ( d ) { this . _super ( d ) ; this . fields = this . fields . concat ( [ "`tabPurchase Receipt`.supplier_name" , "group_concat(`tabPurchase Receipt Item`.prevdoc_docname) as purchase_order_no" , ] ) ; this . group_by = "`tabPurchase Receipt`.name" ; }
function ( req , res ) { res . send ( '<a href="https://github.com/login/oauth/authorize?client_id=' + Github . loadConfig ( ) . oauth_client_id + '&redirect_uri=http://instaedit-server.herokuapp.com/oauth-redirect">Authenticate</a>' ) ; res . end ( ) ; }
function ( ) { setTimeout ( slideUp , 3400 ) }
function ( button ) { _settings . set_boolean ( setting , button . active ) ; }
function ( ) { makeRequest ( $ ( this ) . attr ( 'data-protocol' ) , $ ( this ) . attr ( 'data-port' ) ) ; }
function ( ) { scrollLock ( { protocol : $ ( this ) . attr ( 'data-protocol' ) } , $ ( this ) . closest ( '.js-ui-tab-view' ) . attr ( 'data-name' ) ) ; }
function ( msg , port ) { injectCode ( 'http' , msg , port ) ; }
function ( protocol , port ) { if ( $ ( '.js-' + protocol + '-multifile' ) . attr ( 'checked' ) ) { socket . emit ( 'writeFile' , protocol , port ) ; } }
function ( ) { browserSocket . emit ( 'closedConnection' , request . params . portNum , 'http' ) ; socketOpen [ request . params . portNum ] = false ; }
function writeFile ( logpath , port ) { file . writeFile ( 'http' , httpBuffer , port , logpath , function ( ) { httpBuffer = '' ; } ) ; }
function close ( port ) { if ( socketOpen [ port ] ) { serverHttp [ port ] . close ( ) ; } }
function currentStatus ( ) { return socketOpen ; }
function ( port ) { tcpServer . closeAllSockets ( ) ; }
function ( port ) { httpServer . close ( port ) ; }
function ( port ) { udpServer . close ( ) ; }
function ( port ) { tcpServer . toggleLog ( logpath ) ; }
function ( port ) { httpServer . toggleLog ( logpath , port ) ; }
function ( port ) { udpServer . toggleLog ( logpath ) ; }
function $toString ( a ) { switch ( $$runtime . $typeof ( a ) ) { case 'string' : return a ; case 'number' : return String ( a ) ; case 'boolean' : return String ( a ) ; default : return '' ; } }
function ( ) { console . log ( "blort" ) ; raises ( function ( ) { regula . unbind ( { elementId : "myText" } ) ; } , new RegExp ( "Element with id myText does not have any constraints bound to it. Function received: {elementId: myText, elements: \\[null\\]}" ) , "regula.unbind() must fail if provided an unbound element's id" ) ; }
function ( ) { raises ( function ( ) { regula . unbind ( { elementId : "myText" , constraints : [ regula . Constraint . NotBlank ] } ) ; } , /Element with id myText does not have any constraints bound to it. Function received: {elementId: myText, constraints: \[5\], elements: \[null\]}/ , "regula.unbind() must fail if provided an unbound element's id" ) ; }
function ( err ) { $ ( '#al_dialog' ) . html ( err . responseText ) ; $ ( '#al_dialog' ) . dialog ( 'open' ) ; }
function ( evt , node ) { var name = typeof evt === 'string' ? evt : node && domAttr . get ( node , 'data-command' ) , command = this . _commandsByName [ name ] ; if ( command ) this . _invokeCommand ( command ) ; }
function ( e ) { self . fireEvent ( 'itemSelected' , { data : e . rowData } ) ; }
function ( e ) { var MapsWindow = require ( 'ui/common/maps/campusMap/MapsWindow' ) ; var mapsWindow = new MapsWindow ( ) ; navGroup . open ( mapsWindow , { animated : true } ) ; }
function ( e ) { var MapsWindow = require ( 'ui/common/maps/campusMap/MapsWindow' ) ; var mapsWindow = new MapsWindow ( ) ; navGroup . open ( mapsWindow , { animated : true } ) ; }
function ( e ) { lbl . text = e . data . title + '\n' + e . data . details ; }
function ( name , testEnvironment ) { config . currentModule = name ; config . currentModuleTestEnviroment = testEnvironment ; }
function literal ( o ) { return o + "" ; }
function ( a ) { this . _depth_ += a || 1 ; }
function startTask ( id ) { console . log ( id ) tomatoidTimer . taskId = id ; tomatoidTimer . totalSeconds = pomodoroLenght * 60 ; tomatoidTimer . running = true ; inPomodoro = true ; inBreak = false ; }
function fmt_string ( str , unknown ) { if ( unknown == undefined ) unkown = UNKNOWN_REPR ; if ( str == undefined ) return unknown ; return fmt_escape_html ( "" + str ) ; }
function link_policy ( name ) { return _link_to ( fmt_escape_html ( name ) , '#/policies/' + esc ( name ) ) }
function ( ) { $ ( this ) . datepicker ( { dateFormat : "yy-mm-dd" } ) ; }
function ( ) { debug . log ( "Initialize Twitter Search View" ) ; this . fetchActivityData ( ) ; }
function ( ) { var temp = Mustache . render ( twitterTemplate , this . twitterData ) ; this . $el . html ( temp ) ; window . App . twitterView = this ; console . log ( this ) ; }
function ( title , message , style , callback ) { return Dialog . showMessage ( title , message , style , callback ) ; }
function ( newStatus ) { this . _status = newStatus ; topic . publish ( "/app/status" , newStatus ) ; }
function ( e ) { if ( ! e ) { configuration . value ( null ) ; } configuration . value ( this . selectedIndex == - 1 ? null : accessDataItemValue ( this . dataItem ( this . selectedIndex ) ) ) ; }
function ( e ) { if ( ! e ) { configuration . value ( null ) ; } configuration . value ( this . selectedIndex == - 1 ? null : accessDataItemValue ( this . dataItem ( this . selectedIndex ) ) ) ; }
function ( err , doc ) { if ( err ) { throw err ; } else { var token = generateAuthToken ( manufacturerId ) ; doc . authToken = token ; res . send ( { 'status' : ok , 'data' : doc } ) ; } }
function ( ) { $ ( this ) . ColorPickerSetColor ( getCorrectHex ( this . value ) ) ; }
function ( task ) { console . log ( task ) ; var view = new Greenmine . TaskView ( { model : task } ) ; this . $ ( ".list-body" ) . append ( view . render ( ) . el ) ; }
function ( ) { if ( this . view ) { this . view . remove ( ) ; this . view = null ; } this . whiteboard = null ; window . app . eventDispatcher . trigger ( 'whiteboard:closed' ) ; }
function ( ) { return ( [ "div" , ui_strings . M_VIEW_LABEL_NO_RETURN_VALUES , "class" , "not-content inspection" ] ) ; }
function ( i , v ) { var pair = v . split ( '=' ) ; result [ pair [ 0 ] ] = unescape ( pair [ 1 ] ) ; }
function ( fileName , binary ) { if ( binary ) { return q . ncall ( fs . readFile , fs , fileName ) ; } else { return q . ncall ( fs . readFile , fs , fileName , 'utf8' ) ; } }
function ( fileName , contents ) { return q . ncall ( fs . writeFile , fs , fileName , contents ) ; }
function ( params ) { var action_obj = { "disk_template" : params . data . extra_param } ; OpenNebula . Action . simple_action ( params , OpenNebula . VM . resource , "attachdisk" , action_obj ) ; }
function _setEnabled ( enabled ) { _enabled = enabled ; CommandManager . get ( Commands . TOGGLE_JSLINT ) . setChecked ( _enabled ) ; _updateListeners ( ) ; _prefs . setValue ( "enabled" , _enabled ) ; run ( ) ; }
function ( ) { switch ( keyType ) { case 'metaphone' : return this . metaphonize ( ) ; case 'stem' : return this . stemize ( ) ; case 'plain' : return this . keywordize ( ) ; } }
function ( stem ) { if ( stem ) { if ( upper ) keywords . addToSet ( stem ) ; else keywords . addToSet ( stem . toLowerCase ( ) ) ; } }
function ( str ) { return exports . metaphoneArray ( exports . stemString ( str ) ) ; }
function ( str ) { return exports . stem ( exports . keywordString ( str ) ) ; }
function ( message ) { return message && ( message . indexOf ( this . getNick ( ) ) >= 0 ) ; }
function filemgr_view_file ( e ) { e . preventDefault ( ) ; filemgr_get_file_details ( $ ( this ) . parent ( 'li' ) . attr ( 'title' ) ) ; }
function ( jqXHR , textStatus ) { interface_update_content ( 'current_upload_filename' , 'No Uploads in Progress' ) ; interface_hide ( 'current_upload_filename' ) ; queue_process ( ) ; }
function ( ) { console . log ( "on" ) ; playButton . classList . remove ( "controls-paused" ) ; playButton . classList . add ( "controls-playing" ) ; }
function ( test ) { test . expect ( 1 ) ; var expectA = false ; var resultA = grunt . file . exists ( "fixtures/output" ) ; test . equal ( resultA , expectA , "should rm -rf a directory" ) ; test . done ( ) ; }
function ( value ) { return control . cssPrefix + "-" + value ; }
function ( ) { iteration ++ ; return renderer . functions . length > iteration ? renderer . functions [ iteration ] . apply ( this , arguments ) : element ; }
function ( name , args ) { var renderer = this . extension . renderers [ name ] ; if ( ! renderer || ! renderer . next ) return args [ 0 ] ; return renderer . next . apply ( this , args ) ; }
function ( name , renderer ) { this . component . extendRenderer . call ( this . component , name , $ . proxy ( renderer , this ) ) ; }
function ( key ) { return ( [ "plugins" , plugin . manifest . name ] . concat ( key ? key : [ ] ) ) . join ( "." ) ; }
function ( val , prefix ) { var matcher = new RegExp ( '^' + prefix + '(.*)' ) ; return ! matcher . test ( val ) ? prefix + val : val ; }
function ( event ) { $ ( document ) . unbind ( event ) ; showLoader = false ; $ . mobile . hidePageLoadingMsg ( ) ; morePostsBtn . show ( ) ; renderNewPosts ( ) ; }
function ( ) { window . plugins . nativeUI . disableInteractions ( ) ; interactionDisabled = true ; oldShow ( ) ; }
function ( doc , cb ) { cb ( ) ; }
function ( doc , cb ) { cb ( ) ; }
function ( port ) { port = port || this . options . port ; this . app . listen ( port ) ; }
function ( ) { log . info ( "Master REPL connection closed for " + r_host + ":" + r_port ) ; }
function ( data ) { var ref = "/hosts?search=facts." + data . name + "~~VAL1~" $ ( "#" + div + "-body" ) . attr ( 'chart-href' , ref ) ; stat_pie ( div + '-body' , data . name , data . values , 0 ) ; }
function calculator_backSpace ( ) { this . clearBackspaceTimeout ( ) ; this . startBackspaceTimeout ( ) ; this . stack . splice ( this . stack . length - 1 , 1 ) ; this . updateDisplay ( ) ; }
function calc_errorTimeout ( self ) { self . display . parentNode . classList . remove ( 'error' ) ; self . errorTimeout = null ; }
function ( ) { var markdownHereCss = " \ \ /* NOTE: \  * - Do not use multi-word fonts. Gmail will strip them and kill following \  *   styles. Sometimes. \  */ \ \ /* This is the overall wrapper, it should be treated as the `body` section. */ \ .markdown-here-wrapper { /* adam-p: changed from body */ \   font: 14px Helvetica,arial,freesans,clean,sans-serif; \   color: #333; \   background-color: #fff; \   border: none; \   line-height: 1.2; \   text-align:left; \ } \ pre, code { \   font-size: 12px; \   font-family: Consolas, Inconsolata, Courier, monospace; \ } \ code { \   margin: 0 2px; \   padding: 0 5px; \   white-space: nowrap; \   border: 1px solid #EAEAEA; \   background-color: #F8F8F8; \   border-radius: 3px; \   display: inline; /* adam-p: added to fix Yahoo block display */ \ } \ pre { \   font-size: 13px; \   line-height: 19px; \   overflow: auto; \ } \ pre code { \   white-space: pre; \   border-radius: 3px; \   border: 1px solid #CCC; \   padding: 6px 10px; \ } \ ul, ol { \   padding-left: 30px; \ } \ p, blockquote:not(.markdown-here-exclude), ul, ol, dl, li, table, pre { \   margin: 15px 0; \ } \ dl { \   padding: 0; \ } \ dl dt { \   font-size: 14px; \   font-weight: bold; \   font-style: italic; \   padding: 0; \   margin: 15px 0 5px; \ } \ dl dd { \   margin: 0 0 15px; \   padding: 0 15px; \ } \ blockquote:not(.markdown-here-exclude) { \   border-left: 4px solid #DDD; \   padding: 0 15px; \   color: #777; \ } \ blockquote:not(.markdown-here-exclude), q { \   quotes: none; \ } \ blockquote:not(.markdown-here-exclude)::before, blockquote:not(.markdown-here-exclude)::after, q::before, q::after { \   content: none; \ } \ a:link, a:visited { \   color: #33e; \   text-decoration: none; \ } \ a:hover { \   color: #00f; \   text-shadow:1px 1px 2px #ccf; \   text-decoration:underline; \ } \ h1, h2, h3, h4, h5, h6 { \   margin: 20px 0 10px; \   padding: 0; \   font-weight: bold; \   color: black; \   cursor: text; \   position: relative; \ } \ h1 { \   font-size: 28px; \ } \ h2 { \   font-size: 24px; \   border-bottom: 1px solid #CCC; \ } \ h3 { \   font-size: 18px; \ } \ h4 { \   font-size: 16px; \ } \ h5 { \   font-size: 14px; \ } \ h6 { \   font-size: 14px; \   color: #777; \ } \ .shadow { \   box-shadow:0 5px 15px #000; \ } \ table { \   padding: 0; \   border-collapse: collapse; \   border-spacing: 0; \   font-size: 100%; \   font: inherit; \   border: 0; \ } \ tbody { \   margin: 0; \   padding: 0; \   border: 0; \ } \ table tr { \   border: 0; \   border-top: 1px solid #CCC; \   background-color: white; \   margin: 0; \   padding: 0; \ } \ table tr:nth-child(2n) { \   background-color: #F8F8F8; \ } \ table tr th, table tr td { \   border: 1px solid #CCC; \   text-align: left; \   margin: 0; \   padding: 6px 13px; \ } \ table tr th { \  font-weight: bold; \ } \ \ /* \  \ github.com style (c) Vasily Polovnyov <vast@whiteants.net> \  \ */ \  \ pre code { \   display: block; padding: 0.5em; \   color: #000; \   background: #f8f8ff \ } \  \ pre .comment, \ pre .template_comment, \ pre .diff .header, \ pre .javadoc { \   color: #998; \   font-style: italic \ } \  \ pre .keyword, \ pre .css .rule .keyword, \ pre .winutils, \ pre .javascript .title, \ pre .lisp .title, \ pre .nginx .title, \ pre .subst, \ pre .request, \ pre .status { \   color: #000; \   font-weight: bold \ } \  \ pre .number, \ pre .hexcolor { \   color: #40a070 \ } \  \ pre .string, \ pre .tag .value, \ pre .phpdoc, \ pre .tex .formula { \   color: #d14 \ } \  \ pre .title, \ pre .id { \   color: #900; \   font-weight: bold \ } \  \ pre .javascript .title, \ pre .lisp .title, \ pre .subst { \   font-weight: normal \ } \  \ pre .class .title, \ pre .haskell .type, \ pre .vhdl .literal, \ pre .tex .command { \   color: #458; \   font-weight: bold \ } \  \ pre .tag, \ pre .tag .title, \ pre .rules .property, \ pre .django .tag .keyword { \   color: #000080; \   font-weight: normal \ } \  \ pre .attribute, \ pre .variable, \ pre .instancevar, \ pre .lisp .body { \   color: #008080 \ } \  \ pre .regexp { \   color: #009926 \ } \  \ pre .class { \   color: #458; \   font-weight: bold \ } \  \ pre .symbol, \ pre .ruby .symbol .string, \ pre .ruby .symbol .keyword, \ pre .ruby .symbol .keymethods, \ pre .lisp .keyword, \ pre .tex .special, \ pre .input_number { \   color: #990073 \ } \  \ pre .builtin, \ pre .built_in, \ pre .lisp .title { \   color: #0086b3 \ } \  \ pre .preprocessor, \ pre .pi, \ pre .doctype, \ pre .shebang, \ pre .cdata { \   color: #999; \   font-weight: bold \ } \  \ pre .deletion { \   background: #fdd \ } \  \ pre .addition { \   background: #dfd \ } \  \ pre .diff .change { \   background: #0086b3 \ } \  \ pre .chunk { \   color: #aaa \ } \  \ pre .tex .formula { \   opacity: 0.5; \ } \ " ; var EXPORTED_SYMBOLS = [ 'markdownHereCss' ] ; if ( typeof module !== 'undefined' ) { module . exports = markdownHereCss ; } else { this . markdownHereCss = markdownHereCss ; this . EXPORTED_SYMBOLS = EXPORTED_SYMBOLS ; } }
function ( ) { equals ( iframe . contentDocument . getElementById ( "test_img" ) . src , "" , "图片链接被替换为空" ) ; iframe . contentWindow . scroll ( 0 , 20 ) ; }
function ( ) { scope = { } , ctrl = new bootstrap ( scope ) ; }
function ( ) { console . log ( scope . colorsrefonly ) ; }
function ( affixList ) { }
function ( ) { smtp_client . call_next ( OK , smtp_client . response + ' (' + connection . transaction . uuid + ')' ) ; smtp_client . release ( ) ; delete connection . notes . smtp_client ; }
function ( callback ) { var smtp_client = new SMTPClient ( port , host , timeout ) ; logger . logdebug ( '[smtp_client_pool] ' + smtp_client . uuid + ' created' ) ; callback ( null , smtp_client ) ; }
function ( server , callback , port , host , timeout , max ) { var pool = exports . get_pool ( server , port , host , timeout , max ) ; pool . acquire ( callback ) ; }
function ( msg ) { connection . logwarn ( plugin , msg ) ; smtp_client . call_next ( ) ; }
function ( ) { var listeners = self . listeners || [ self ] ; for ( var i = 0 ; i < listeners . length ; i ++ ) { listeners [ i ] . onAfterPreloadImages ( { background : background } ) ; } }
function ( ) { this . attachjPlayer ( $ ( "#jPlayer" ) , $ ( "div.toolbar ul.player" ) , $ ( "#Playlist" ) ) ; this . attachDomEvents ( ) ; this . fadeInContent ( ) ; this . attachBubble ( ) ; }
function ( ) { if ( useAbility ( abilities , 'swap' , leftButtons . find ( '.swap' ) ) ) { socket . emit ( 'swap' ) ; } }
function ( ) { if ( useAbility ( abilities , 'remove' , leftButtons . find ( '.remove' ) ) ) { socket . emit ( 'remove' ) ; } }
function ( ) { useAbility ( opponentAbilities , 'peek' , rightButtons . find ( '.peek' ) ) ; }
function ( ) { $ds ( this . cell ) ; }
function ( value , key ) { self . filters [ key ] . setValue ( value ) ; }
function ( ) { return this . element . val ( ) ; }
function ( ) { return this . _ranges [ 0 ] . min ; }
function ( ) { return this . _ranges [ this . _ranges . length - 1 ] . max ; }
function ( r ) { return new Range ( r . min , r . max ) ; }
function ( ) { if ( typeof self . current . response . body !== "undefined" ) { expect ( self . current . response . body ) . toContain ( content ) ; } else { throw new Error ( "No HTTP response body was present or HTTP response was empty" ) ; } }
function ( response ) { $ . interaction . logerror ( 'interaction error' , response ) ; element . trigger ( 'ajaxform-error' , response ) ; }
function ( ex , type , message ) { result = { ex : ex , type : type , message : message } ; context . onError ( ! ! ex ? ex . responseText : message ) ; }
function showReservationsDialog ( testbedId ) { var existingDialog = $ ( "#WisebedReservationDialog-" + testbedId ) ; if ( existingDialog . length != 0 ) { existingDialog . show ( ) ; } else { new WiseGuiReservationDialog ( testbedId ) ; } }
function parseError ( stream , expected ) { if ( ! stream ) stream = 'EOF' ; else stream = '"' + stream + '"' ; throw 'Parse Error: expected ' + expected + ', got ' + stream ; }
function success ( stream , result ) { if ( stream ) parseError ( stream , 'EOF' ) ; return result ; }
function ( x , limit ) { x = ~ ~ ( Math . min ( limit . right , Math . max ( limit . left , x ) ) ) ; return x ; }
function ( e , dd ) { positionInLimit ( dd . offsetX - $sliderControl . offset ( ) . left , dd . limit ) ; }
function ( options ) { this . stream = new app . models . Stream ( [ ] , { collectionOptions : { } } ) this . stream . preloadOrFetch ( ) this . title = options && options . title this . initSubviews ( ) }
function ( name ) { this . renderPage ( function ( ) { return new app . pages . ConversationsIndex ( { title : name } ) } ) }
function ( ) { this . conversation = new app . models . Conversation ( this . model . get ( "conversation" ) ) this . latestPost = this . conversation . latest }
function setFileViewFocus ( fileSelectionFocus ) { if ( fileSelectionFocus !== PROJECT_MANAGER && fileSelectionFocus !== WORKING_SET_VIEW ) { throw new Error ( "Bad parameter passed to FileViewController.setFileViewFocus" ) ; } _fileSelectionFocus = fileSelectionFocus ; $ ( exports ) . triggerHandler ( "fileViewFocusChange" ) ; }
function _handleDocumentSelectionChange ( ) { _updateListSelection ( ) ; _fireSelectionChanged ( ) ; }
function ( ) { var n = this . get ( 'node' ) ; _bridge . request ( n ) ; return this ; }
function ( ) { restoreLayers ( $ ( this ) . attr ( 'data-suffix' ) ) ; return false ; }
function ( node ) { node . selectChildren ( state ) ; if ( params . selected ) { params . selected ( node , ! indirect ) ; } }
function ( node ) { node . selectChildren ( state ) ; if ( params . selected ) { params . selected ( node , ! indirect ) ; } }
function ( ) { self . closedOverlay = true ; self . hide ( ) ; }
function ( ) { self . emit ( 'close' ) ; self . hide ( ) ; }
function ( ) { removeCaretContainer ( ) ; unmarkBogusCaretParents ( ) ; }
function ( ed , e ) { var keyCode = e . keyCode ; if ( keyCode == 8 || keyCode == 37 || keyCode == 39 ) { removeCaretContainer ( getParentCaretContainer ( selection . getStart ( ) ) ) ; } unmarkBogusCaretParents ( ) ; }
function ( ) { var element = options . render == "canvas" ? createCanvas ( true ) : createTable ( ) ; $ ( element ) . appendTo ( this ) ; }
function ( key , building ) { if ( building != null && building . id == buildingID ) icon = 'img/markers/' + category . toLowerCase ( ) + '[fav].png' ; }
function ( key , building ) { if ( building . id == buildingID ) icon = 'img/markers/' + category . toLowerCase ( ) + '[seen].png' ; }
function tickLoop ( ) { if ( cocos2dNaclBlock == true ) { cc . log ( "Thread was blocked for nacl." ) ; setTimeout ( tickLoop , 10 ) ; } else { cc . log ( "Thread was unblock." ) } }
function ( ) { if ( this . _openGLView . canSetContentScaleFactor ( ) ) { this . _openGLView . setContentScaleFactor ( this . _contentScaleFactor ) ; this . _isContentScaleSupported = true ; } else { cc . log ( "cocos2d: setContentScaleFactor:'is not supported on this device" ) ; } }
function ( point ) { cc . log ( "DrawingPrimitive.drawPoint() not implement!" ) ; }
function ( points , numberOfPoints ) { cc . log ( "DrawingPrimitive.drawPoints() not implement!" ) ; }
function ( origin , destination ) { cc . log ( "DrawingPrimitive.drawLine() not implement!" ) ; }
function ( vertices , numOfVertices , closePolygon , fill ) { cc . log ( "DrawingPrimitive.drawPoly() not implement!" ) ; }
function ( origin , control , destination , segments ) { cc . log ( "DrawingPrimitive.drawQuadBezier() not implement!" ) ; }
function ( origin , control1 , control2 , destination , segments ) { cc . log ( "DrawingPrimitive.drawCubicBezier() not implement!" ) ; }
function ( points , segments ) { cc . log ( "DrawingPrimitive.drawCardinalSpline() not implement!" ) ; }
function ( config , tension , segments ) { cc . log ( "DrawingPrimitive.drawCardinalSpline() not implement!" ) ; }
function ( ) { cc . log ( "Pausing" ) ; this . _pausedTargets = cc . Director . getInstance ( ) . getActionManager ( ) . pauseAllRunningActions ( ) ; }
function ( ) { cc . log ( "Resuming" ) ; cc . Director . getInstance ( ) . getActionManager ( ) . resumeTargets ( this . _pausedTargets ) ; }
function ( pSender ) { cc . log ( "This message SHALL ONLY appear when the sprite is added to the scene, NOT BEFORE" ) ; }
function ( ) { cc . log ( "1st block" ) ; }
function ( ) { cc . log ( "2nd block" ) ; }
function ( ) { cc . log ( "3rd block" ) ; }
function ( ) { cc . log ( "4th block" ) ; }
function ( pSender ) { cc . log ( pSender . getRotation ( ) ) ; }
function ( ) { cc . log ( "play background music" ) ; cc . AudioEngine . getInstance ( ) . playBackgroundMusic ( MUSIC_FILE , false ) ; }
function ( ) { cc . log ( "stop background music" ) ; cc . AudioEngine . getInstance ( ) . stopBackgroundMusic ( ) ; }
function ( ) { cc . log ( "pause background music" ) ; cc . AudioEngine . getInstance ( ) . pauseBackgroundMusic ( ) ; }
function ( ) { cc . log ( "resume background music" ) ; cc . AudioEngine . getInstance ( ) . resumeBackgroundMusic ( ) ; }
function ( ) { cc . log ( "rewind background music" ) ; cc . AudioEngine . getInstance ( ) . rewindBackgroundMusic ( ) ; }
function ( ) { if ( cc . AudioEngine . getInstance ( ) . isBackgroundMusicPlaying ( ) ) { cc . log ( "background music is playing" ) ; } else { cc . log ( "background music is not playing" ) ; } }
function ( ) { cc . log ( "play effect" ) ; soundId = cc . AudioEngine . getInstance ( ) . playEffect ( EFFECT_FILE ) ; }
function ( ) { cc . log ( "play effect repeatly" ) ; soundId = cc . AudioEngine . getInstance ( ) . playEffect ( EFFECT_FILE , true ) ; }
function ( ) { cc . log ( "stop effect" ) ; cc . AudioEngine . getInstance ( ) . stopEffect ( soundId ) ; }
function ( ) { cc . log ( "unload effect" ) ; cc . AudioEngine . getInstance ( ) . unloadEffect ( EFFECT_FILE ) ; }
function ( ) { cc . log ( "add bakcground music volume" ) ; cc . AudioEngine . getInstance ( ) . setBackgroundMusicVolume ( cc . AudioEngine . getInstance ( ) . getBackgroundMusicVolume ( ) + 0.1 ) ; }
function ( ) { cc . log ( "sub backgroud music volume" ) ; cc . AudioEngine . getInstance ( ) . setBackgroundMusicVolume ( cc . AudioEngine . getInstance ( ) . getBackgroundMusicVolume ( ) - 0.1 ) ; }
function ( ) { cc . log ( "add effects volume" ) ; cc . AudioEngine . getInstance ( ) . setEffectsVolume ( cc . AudioEngine . getInstance ( ) . getEffectsVolume ( ) + 0.1 ) ; }
function ( ) { cc . log ( "sub effects volume" ) ; cc . AudioEngine . getInstance ( ) . setEffectsVolume ( cc . AudioEngine . getInstance ( ) . getEffectsVolume ( ) - 0.1 ) ; }
function ( ) { cc . log ( "pause effect" ) ; cc . AudioEngine . getInstance ( ) . pauseEffect ( soundId ) ; }
function ( ) { cc . log ( "resume effect" ) ; cc . AudioEngine . getInstance ( ) . resumeEffect ( soundId ) ; }
function ( ) { cc . log ( "pause all effects" ) ; cc . AudioEngine . getInstance ( ) . pauseAllEffects ( ) ; }
function ( ) { cc . log ( "resume all effects" ) ; cc . AudioEngine . getInstance ( ) . resumeAllEffects ( ) ; }
function ( ) { cc . log ( "stop all effects" ) ; cc . AudioEngine . getInstance ( ) . stopAllEffects ( ) ; }
function ( dt ) { cc . Director . getInstance ( ) . getTouchDispatcher ( ) . setPriority ( cc . MENU_HANDLER_PRIORITY + 1 , this ) ; this . unscheduleAllSelectors ( ) ; cc . log ( "Touches allowed again!" ) ; }
function ( sender ) { cc . Director . getInstance ( ) . getTouchDispatcher ( ) . setPriority ( cc . MENU_HANDLER_PRIORITY - 1 , this ) ; this . schedule ( this . allowTouches , 5.0 ) ; cc . log ( "TOUCHES DISABLED FOR 5 SECONDS" ) ; }
function ( ) { cc . log ( "do something" ) }
function ( ) { cc . log ( "SceneTestLayer1#onEnter" ) ; this . _super ( ) ; }
function ( ) { cc . log ( "SceneTestLayer1#onEnterTransitionDidFinish" ) ; this . _super ( ) ; }
function ( dt ) { this . _accum += dt ; cc . log ( "Time: " + this . _accum ) ; if ( this . _accum > 3 ) { this . unschedule ( this . autoremove ) ; cc . log ( "scheduler removed" ) ; } }
function ( dt ) { cc . log ( "This scheduler should not be removed" ) ; }
function ( dt ) { cc . log ( "tick1" ) ; }
function ( dt ) { cc . log ( "tick2" ) ; }
function ( dt ) { cc . log ( "tick1" ) ; }
function ( dt ) { cc . log ( "tick2" ) ; }
function ( dt ) { cc . log ( "tick3" ) ; }
function ( dt ) { cc . log ( "tick4" ) ; }
function ( dt ) { cc . log ( "tick1" ) ; }
function ( dt ) { cc . log ( "tick2" ) ; }
function ( dt ) { cc . log ( "tick3" ) ; }
function ( dt ) { cc . log ( "tick4" ) ; }
function ( dt ) { cc . log ( "tick1" ) ; }
function ( dt ) { cc . log ( "tick2" ) ; }
function ( dt ) { cc . log ( "tick3" ) ; }
function ( dt ) { cc . log ( "tick4" ) ; }
function ( dt ) { cc . log ( "update called:" + dt ) ; }
function ( dt ) { cc . log ( "custom selector called:" + dt ) ; }
function ( dt ) { cc . log ( "update called:" + dt ) ; }
function ( name ) { cc . log ( "cocos2d:Failed loading resource: " + name ) ; }
function ( touch , event ) { cc . log ( "++++++++++++++++++++++++++++++++++++++++++++" ) ; this . _beginPos = touch . getLocation ( ) ; this . _beginPos = cc . Director . getInstance ( ) . convertToGL ( this . _beginPos ) ; return true ; }
function ( clicked ) { var textField = this . _pTrackNode ; if ( clicked ) { cc . log ( "TextFieldTTFDefaultTest:CCTextFieldTTF attachWithIME" ) ; textField . attachWithIME ( ) ; } else { cc . log ( "TextFieldTTFDefaultTest:CCTextFieldTTF detachWithIME" ) ; textField . detachWithIME ( ) ; } }
function ( clicked ) { var textField = this . _pTrackNode ; if ( clicked ) { cc . log ( "TextFieldTTFActionTest:CCTextFieldTTF attachWithIME" ) ; textField . attachWithIME ( ) ; } else { cc . log ( "TextFieldTTFActionTest:CCTextFieldTTF detachWithIME" ) ; textField . detachWithIME ( ) ; } }
function ( ) { this . _super ( ) ; cc . log ( "Scene 1 onEnter" ) ; }
function ( ) { this . _super ( ) ; cc . log ( "Scene 1 onEnterTransitionDidFinish" ) ; }
function ( ) { this . _super ( ) ; cc . log ( "Scene 1 onExitTransitionDidStart" ) ; }
function ( ) { this . _super ( ) ; cc . log ( "Scene 1 onExit" ) ; }
function ( ) { this . _super ( ) ; cc . log ( "Scene 2 onEnter" ) ; }
function ( ) { this . _super ( ) ; cc . log ( "Scene 2 onEnterTransitionDidFinish" ) ; }
function ( ) { this . _super ( ) ; cc . log ( "Scene 2 onExitTransitionDidStart" ) ; }
function ( ) { this . _super ( ) ; cc . log ( "Scene 2 onExit" ) ; }
function ( dt ) { cc . log ( "[Action step]. override me" ) ; }
function ( time ) { cc . log ( "[Action update]. override me" ) ; }
function ( ) { cc . log ( "cocos2d: FiniteTimeAction#reverse: Implement me" ) ; return null ; }
function showRegistrationInfo ( info ) { dom . setInner ( "#email" , info . email ) ; if ( info . returnTo ) { dom . setInner ( ".website" , info . returnTo ) ; updateRedirectTimeout ( ) ; dom . show ( ".siteinfo" ) ; } }
function testCannotConfirm ( ) { testHelpers . testErrorVisible ( ) ; }
function ( selector , className , msg ) { ok ( $ ( selector ) . hasClass ( className ) , msg || selector + " has className: " + className ) ; }
function ( ) { getPastedContent ( ) ; Aloha . activeEditable . smartContentChange ( event ) ; }
function ( returned ) { if ( returned != 1 ) { console . log ( 'An error while saving message into database occured.' ) ; } }
function ( ) { this . contract = new ExprContract ( ) ; this . argumentNames = undefined ; this . expr = undefined ; this . id = makeID ( ) ; this . funcIDList = makeIDList ( 1 ) ; }
function ( funcName , args ) { this . funcName = funcName ; this . id = makeID ( ) ; this . funcIDList = makeIDList ( args . length ) ; this . args = args ; this . outputType = getOutput ( funcName ) ; }
function ( event , ui ) { if ( $ ( this ) === undefined ) { throw new Error ( "addDraggingFeature start: $(this) is undefined" ) ; } else { carrying = getHTML ( $ ( this ) ) ; } }
get base_domain ( ) { if ( typeof ( localStorage [ 'base_domain' ] ) == "undefined" ) { return "findings.com" ; } else { return localStorage [ 'base_domain' ] ; } } ,
set base_domain ( val ) { localStorage [ 'base_domain' ] = val ; } ,
get logging_enabled ( ) { if ( typeof ( localStorage [ 'logging_enabled' ] ) == "undefined" ) { return true ; } else { return toBool ( localStorage [ 'logging_enabled' ] ) ; } } ,
set logging_enabled ( val ) { localStorage [ 'logging_enabled' ] = val ; } ,
get disable_caching ( ) { if ( typeof ( localStorage [ 'disable_caching' ] ) == "undefined" ) { return false ; } else { return toBool ( localStorage [ 'disable_caching' ] ) ; } } ,
set disable_caching ( val ) { localStorage [ 'disable_caching' ] = val ; } ,
function ( ) { console . log ( '------Patient Created successfully------' ) ; this . sendEncounterData ( personUuid ) ; }
function ( req , res ) { 'use strict' ; res . send ( { 'hello' : 'world' } ) ; }
function ( test ) { 'use strict' ; test . expect ( 1 ) ; test . ok ( 1 , "this assertion should FAIL!!" ) ; test . done ( ) ; }
function ( ) { assertParsesLatex ( parseRoot , 'x^{n}' , 'x^n' ) ; assertParsesLatex ( parseRoot , 'x^{nm}' ) ; assertParsesLatex ( parseRoot , 'x^{}' , 'x^{ }' ) ; }
function ( previous , source , target ) { var path ; path = [ ] ; while ( previous [ target ] ) { path . unshift ( this . _idMap [ target ] ) ; target = previous [ target ] ; } return path ; }
function ( dict ) { var key , newDict ; newDict = { } ; for ( key in dict ) { newDict [ this . _idMap [ key ] ] = key ; } return newDict ; }
function ( ) { console . log ( "processing FriendRelatedTweets" ) ; this . nrFollowingListener ( ) ; Tweets . fetch ( ) ; }
function ( data , dataType ) { if ( ! data ) { console . error ( "error." ) ; return ; } var newview = _createTplView ( data ) ; if ( callback ) { callback ( newview ) ; } }
function ( err , textStatus ) { displayError ( ms . msg ( 'login-failed' ) , textStatus ) ; $ ( "#login-status-message" ) . html ( '' ) ; fail ( textStatus ) ; }
function ( ) { this . moveOffStage ( ) ; this . onStage = false ; this . onExit ( ) ; this . model . inFocus = false ; }
function ( data ) { var toDelete = this . domTree_map [ data . value . oldParent ] . children [ data . position ] ; EditorTree . applyDel ( toDelete , data . position ) ; delete this . domTree_map [ toDelete . id ] ; }
function ( data ) { var node = this . domTree_map [ data . value . pid ] . children [ data . position ] ; EditorTree . applyUpd ( node , data . value . val ) ; }
function ( at ) { console . log ( at ) ; }
function ( ) { return testPropsAll ( 'flexWrap' ) ; }
function ( job ) { console . log ( 'Example action executed' , job ) ; throw 'Trying exceptions' ; }
function ( ) { try { actions [ self . action ] . run ( self ) ; } catch ( e ) { console . error ( util . format ( 'Error in action "%s": %s' , self . action , e . message || e ) ) ; } }
function ( ) { console . info ( 'Connection interupted.' ) ; }
function ( ) { console . info ( 'Connection from ' + socket . remoteAddress + '.' ) ; }
function ( direction ) { var classes = [ "animationChild" , this . __animation , direction ] ; if ( this . __reverse ) { classes . push ( "reverse" ) ; } return classes ; }
function ( record , data ) { if ( record . id ) { return exports . replace ( record , data ) ; } else { return exports . insert ( record , data ) ; } }
function topLoad ( URL ) { pURL = URL ; $ ( "#move" ) . animate ( { "margin-top" : "150%" } , { duration : aTime } ) setTimeout ( "pageLoad()" , aTime ) ; }
function ( line ) { this . _clearLineToReveal ( ) ; this . _clearLineToScrollTo ( ) ; this . _lineToHighlight = line ; this . _innerHighlightLineIfNeeded ( ) ; this . _textEditor . setSelection ( WebInspector . TextRange . createFromLocation ( line , 0 ) ) ; }
function handleAfterFeatureEvent ( event , callback ) { self . addFeature ( self . currentFeature ) ; var feature = event . getPayloadItem ( 'feature' ) ; console . log ( 'ending:' , feature . getName ( ) ) ; callback ( ) ; }
function handleBeforeScenarioEvent ( event , callback ) { var scenario = event . getPayloadItem ( 'scenario' ) ; console . log ( 'ending:' , scenario . getName ( ) ) ; callback ( ) ; }
function ( v ) { if ( ! v ) return this . length ? this [ 0 ] . value : '' ; return this . each ( function ( item ) { item . value = v ; } ) }
function ( v ) { if ( ! v ) return this . length ? this [ 0 ] . innerHTML : '' ; return this . each ( function ( item ) { item . innerHTML = v ; } ) }
function ( ) { if ( ! this . length ) return ; fn . reach ( this , function ( item ) { item . parentNode . removeChild ( item ) ; } ) }
function ( ) { console . log ( 'calling resolve ' ) ; d . resolve ( c ) ; }
function ( datum ) { things_view . collection . add ( datum ) ; }
function ( ) { return parseInt ( $ ( this ) . css ( 'width' ) , 10 ) / 2 ; }
function ( i , opts ) { if ( opts . label === item ) { opts [ key ] = value ; return false ; } }
function ( item ) { return { label : item . series . label , percent : Math . round ( item . series . percent * 100 ) / 100 , rawnum : item . series . datapoints . points [ 1 ] } ; }
function ( ) { params = { "verb" : "sms" , "demo" : "true" } ; Twilio . Device . connect ( params ) }
function ( ) { window . location . reload ( ) ; }
function ( err , data ) { var filepath = path . join ( __dirname , data . filename ) ; assert . isTrue ( fs . existsSync ( filepath ) ) ; fs . unlinkSync ( filepath ) ; }
function ( ) { return new cc . Action ( ) ; }
function ( action , speed ) { cc . Assert ( action != null , "" ) ; this . _innerAction = action ; this . _speed = speed ; return true ; }
function ( action , speed ) { var ret = new cc . Speed ( ) ; if ( ret && ret . initWithAction ( action , speed ) ) { return ret ; } return null ; }
function ( target ) { this . _target . setVisible ( true ) ; }
function ( time ) { this . _target . setVisible ( false ) ; }
function ( time ) { this . _target . setVisible ( ! target . isVisible ( ) ) ; }
function ( time ) { this . _target . setFlipX ( this . _flipX ) ; }
function ( ) { return cc . FlipX . create ( ! this . _flipX ) ; }
function ( x ) { var ret = new cc . FlipX ( ) ; if ( ret . initWithFlipX ( x ) ) return ret ; return null ; }
function ( time ) { this . _target . setFlipY ( this . _flipY ) ; }
function ( ) { return cc . FlipY . create ( ! this . _flipY ) ; }
function ( y ) { var ret = new cc . FlipY ( ) ; if ( ret . initWithFlipY ( y ) ) return ret ; return null ; }
function ( time ) { this . _target . setPosition ( this . _position ) ; }
function ( time ) { this . execute ( ) ; }
function ( e ) { util . log ( 'problem with request: ' + e . message ) ; }
function ( data ) { if ( valid_admin ( data . pass ) ) { clearTimeout ( dospotify . timeoutId ) ; dospotify . emit ( 'play_done' ) ; } }
function ( ) { EventEmitter . call ( this ) ; this . io = null ; this . socket = null ; this . country = 'US' ; this . pass = 'tryo' ; this . current_track = { } ; return this ; }
function ( ) { $ ( '#BBTagsHolder' ) . toggle ( ) ; }
function ( data ) { $ ( "#" + pre_id ) . text ( "Content: \n" + data ) ; }
function Parser ( ) { this . __defineGetter__ ( 'read' , function ( ) { return this . _bytesRead } ) ; Packet . call ( this ) }
function Serializer ( context ) { Packet . call ( this ) ; this . readable = true ; this . _buffer = new Buffer ( 1024 ) ; this . _streaming = false ; }
function ( ) { return ( _popcorn && ( _popcorn . media . readyState >= 1 && _popcorn . duration ( ) > 0 ) ) ; }
function ( butter ) { butterLifeCycle . rememberButter ( butter ) ; butter . preparePopcornScriptsAndCallbacks ( function ( ) { succeeded = true ; ok ( true , "Ready called without any scripts/callbacks." ) ; start ( ) ; } ) ; }
function ( layerID ) { var layer = _this . layers . get ( layerID ) ; if ( layer . status != 'loading' && layer . status != 'ready' ) { _this . preloadLayer ( layer ) } }
function ( e ) { cc . keypadDispatcher . dispatchKeypadMSG ( e , true ) ; cc . IMEDispatcher . sharedDispatcher ( ) . processKeycode ( e . keyCode ) ; }
function ( idx , elem ) { var $elem = $ ( elem ) ; var v = $elem . val ( ) ; v = slashRemove ( v ) ; options [ $elem . attr ( 'id' ) ] = v ; }
function ( ) { var id = this . body . _id ; if ( ! id ) { id = this . body . _id = Document . generateId ( ) ; } return id ; }
function ( ) { return this . body . _rev ; }
function ( ) { return this . body . hasOwnProperty ( '_deleted' ) ; }
function ( ) { return this . body . _deleted === true ; }
function ( ) { if ( this . body . _meta ) { return this . body . _meta . conflicts ; } }
function ( ) { this . id ; var merge = new Merge ( ) ; merge . addDocument ( this . body ) ; this . body = merge . finalize ( ) ; }
function numberOfConflicts ( doc ) { var doc = doc || this . body ; if ( doc . _meta && doc . _meta . conflicts ) { return doc . _meta . conflicts . length ; } else { return 0 ; } }
function finish ( err , buffer ) { console . log ( err , buffer ) if ( err ) { callback ( err ) ; return ; } postProcess ( { "Cache-Control" : "public, max-age=3600" } , buffer , version , name , this ) ; }
function ( ) { Services . obs . notifyObservers ( observerSubject , CSP_VIOLATION_TOPIC , violatedDirective ) ; reportSender . sendReports ( blockedContentSource , originalUri , violatedDirective , aSourceFile , aScriptSample , aLineNum ) ; }
function ( response ) { $ ( '#issues-table' ) . html ( response ) ; }
function ( index , row ) { $table . children ( 'tbody' ) . append ( row ) row . sortText = null }
function handleWolfpacks ( data , textStatus , postData ) { $ . each ( data . wolfpacksList , function ( i , pack ) { obj . addWolfpack ( pack ) ; } ) ; eWolf . trigger ( "select" , [ "__pack__wall-readers" ] ) ; }
function ( event ) { var box = new NewMessageBox ( id , applicationFrame , id , name ) ; box . select ( ) ; }
function handleProfileData ( data , textStatus , postData ) { document . title = "eWolf - " + data . name ; eWolf . data ( 'userID' , data . id ) ; eWolf . data ( 'userName' , data . name ) ; createMainApps ( ) ; }
function ( ) { CB . Launch ( null , null , 'left' ) ; }
function ( next ) { if ( next < 40 ) { jim . castSpell ( "heal" , jim ) ; } }
function ( ) { nate . attack ( ) ; }
function ( ) { nate . castSpell ( "heal" , nate ) ; }
function ( ) { var size = this . get ( 'size' ) ; this . canvas . width = floorTo ( window . innerWidth , size ) ; this . canvas . height = floorTo ( window . innerHeight , size ) ; return this ; }
function ( ) { this . halt ( ) ; this . set ( "animation" , "attack" ) ; Tilekit . emit ( "damage" , this . getPositionFront ( ) , this ) ; }
function ( ) { var size = this . get ( 'size' ) ; this . canvas . width = floorTo ( window . innerWidth , size ) ; this . canvas . height = floorTo ( window . innerHeight , size ) ; return this ; }
function ( ) { this . halt ( ) ; this . set ( "animation" , "attack" ) ; Tilekit . emit ( "damage" , this . getPositionFront ( ) , this ) ; }
function ( ) { return { getHeadStyleString : function ( ) { } , preThemeConfig : function ( context ) { } , onContentChange : function ( context , theme ) { } } ; }
function ( data , textStatus , jqXHR ) { get_status ( ) ; }
function ( e ) { _this . updatePropertiesFromManifest ( e . target ) ; setErrorState ( false ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_HANDLER_PRIORITY + 1 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_HANDLER_PRIORITY + 1 , true ) ; }
function ( dt ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . setPriority ( cc . CCMENU_HANDLER_PRIORITY + 1 , this ) ; this . unscheduleAllSelectors ( ) ; cc . Log ( "Touches allowed again!" ) ; }
function ( sender ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . setPriority ( cc . CCMENU_HANDLER_PRIORITY - 1 , this ) ; this . schedule ( this . allowTouches , 5.0 ) ; cc . Log ( "TOUCHES DISABLED FOR 5 SECONDS" ) ; }
function ( sender ) { this . _disabledItem . setEnabled ( ! this . _disabledItem . isEnabled ( ) ) ; }
function ( sender ) { this . _disabledItem . setEnabled ( ! this . _disabledItem . isEnabled ( ) ) ; this . _disabledItem . stopAllActions ( ) ; }
function ( url ) { if ( url . indexOf ( 'px!=' < 0 ) && url . match ( /\/search?.*q=.*/ ) ) { url = url + '&px!=https:www.google.com' } else { url = url . replace ( /(.*)\?px!=(.*?\.(?:com|net|org))(.*)\?(.*)/ , '$1$3?$4&px!=$2' ) } return url ; }
function ( ) { var win = worker . _iframeEl . contentWindow , onmessage = win . onmessage ; onmessage . call ( win , { data : obj } ) ; }
function ( ) { $ ( '#calendar' ) . fullCalendar ( 'render' ) ; }
function ( file ) { if ( file . match ( '.js' ) ) { files . push ( path + "/" + file ) ; } }
function ( file ) { var filepath = path + "/" + file ; if ( ! fs . statSync ( filepath ) . isDirectory ( ) ) { data [ file ] = fs . readFileSync ( filepath , 'utf-8' ) ; } }
function ( ) { return this . isValid ( ) ? this . start . full ( ) + '..' + this . end . full ( ) : 'Invalid DateRange' ; }
function cleanDateInput ( str ) { str = str . trim ( ) . replace ( /^(just )?now|\.+$/i , '' ) ; return convertAsianDigits ( str ) ; }
function ( ) { return this . isValid ( ) ? this . start . full ( ) + '..' + this . end . full ( ) : 'Invalid DateRange' ; }
function ( a ) { if ( a && a . callee ) a = multiArgs ( a ) ; result = result . concat ( a ) ; }
function getTrimmableCharacters ( ) { return '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u2028\u2029\u3000\uFEFF' ; }
function ( ) { return fn . apply ( fn . prototype && this instanceof fn ? this : scope , args . concat ( multiArgs ( arguments ) ) ) ; }
function ( ms ) { var fn = this ; var args = multiArgs ( arguments ) . slice ( 1 ) ; setDelay ( fn , ms , fn , fn , args ) ; return fn ; }
function ( uncountable ) { return new regexp ( '\\b' + uncountable + '$' , 'i' ) . test ( word ) ; }
function ( first ) { var add = array . isArray ( first ) ? first : multiArgs ( arguments ) ; uncountables = uncountables . concat ( add ) ; }
function ( ) { return object [ name ] . apply ( null , [ this ] . concat ( multiArgs ( arguments ) ) ) ; }
function ( ) { doc . head . appendChild ( brokenCssLink ) ; setUpAjaxSpyToLoadFixturesThroughTestSetup ( ) ; rasterizeHTML . loadAndInlineCSS ( doc , "some_base_url/" , callback ) ; expect ( callback ) . toHaveBeenCalledWith ( [ { resourceType : "stylesheet" , url : "some_base_url/a_document_that_doesnt_exist.css" } ] ) ; }
function ( ) { doc . head . appendChild ( cssLink ) ; setUpAjaxSpyToLoadFixturesThroughTestSetup ( ) ; rasterizeHTML . loadAndInlineCSS ( doc , callback ) ; expect ( callback ) . toHaveBeenCalledWith ( [ ] ) ; }
function ( request , response , next ) { if ( request . method . toLowerCase ( ) === method && request . pathname === route ) { callback ( request , response , next ) ; } else { next ( ) ; } }
function post ( index ) { return this . data [ index ] ; }
function get ( key ) { return this . headers [ key ] ; }
function Releases ( ) { this . post_release = __bind ( this . post_release , this ) ; this . get_release = __bind ( this . get_release , this ) ; this . get_releases = __bind ( this . get_releases , this ) ; }
function Stacks ( ) { this . put_stack = __bind ( this . put_stack , this ) ; this . get_stack = __bind ( this . get_stack , this ) ; }
function Collaborators ( ) { this . post_collaborator = __bind ( this . post_collaborator , this ) ; this . get_collaborators = __bind ( this . get_collaborators , this ) ; this . delete_collaborator = __bind ( this . delete_collaborator , this ) ; }
function ConfigVars ( ) { this . put_config_vars = __bind ( this . put_config_vars , this ) ; this . get_config_vars = __bind ( this . get_config_vars , this ) ; this . delete_config_var = __bind ( this . delete_config_var , this ) ; }
function Domains ( ) { this . post_domain = __bind ( this . post_domain , this ) ; this . get_domains = __bind ( this . get_domains , this ) ; this . delete_domain = __bind ( this . delete_domain , this ) ; }
function checkEmail ( email ) { if ( email == "" ) return false ; var regex = /^[a-zA-Z]([a-zA-Z0-9]|[\._\-][a-zA-Z0-9])*\@([a-zA-Z0-9]+|[a-zA-Z0-9]+[\-\.][a-zA-Z0-9]+)\.[a-zA-Z0-9]{2,255}$/ ; return ( regex . test ( email ) ) ; }
function ( arg ) { return array . add ( this , arg ) ; }
function ( flag ) { return parallel . indexOf ( flag ) > - 1 ? FOREIGN : NAITIVE ; }
function ( span ) { return span . className == "xforms-items" ; }
function ( resp ) { Y . log ( 'rpc failure!' , 'warn' , NAME ) ; adapter . error ( resp . html ) ; }
function checkEmail ( email ) { if ( email == "" ) return false ; var regex = /^[a-zA-Z]([a-zA-Z0-9]|[\.\_\-][a-zA-Z0-9])*\@(([a-zA-Z0-9])+((-|.)[a-zA-Z0-9])?\.)+[a-zA-Z0-9]{2,255}$/ ; return ( regex . test ( email ) ) ; }
function ( data ) { Snipt . message . flash ( 'success' , 'Successfully posted! <a href="https://snipt.net' + data . absolute_url + '">View snipt</a>' ) ; document . getElementById ( 'post-snipt' ) . reset ( ) ; }
function ( obj , msg ) { }
function ( name ) { var coffee ; coffee = fs . readFileSync ( "./pages" + name + ".coffee" ) . toString ( ) ; return cc . render ( coffee ) ; }
function ( magWidth , magHeight ) { $ ( '#wrapper' ) . css ( { 'width' : magWidth + 'px' , 'height' : magHeight + 'px' } ) ; }
function ( ) { var delayFunc = jQuery . proxy ( this , "setPosition" ) ; clearTimeout ( window . TurnDelay ) ; window . TurnDelay = setTimeout ( delayFunc , 1000 ) ; }
function ( ) { var turn = new Turn ; turn . initialize ( ) ; turn . setPosition ( ) ; $ ( window ) . resize ( function ( ) { turn . delaySetPosition ( ) ; } ) ; }
function ( node ) { if ( callback ) { callback ( results , true ) ; } }
function ( node ) { if ( callback ) { callback ( results , true ) ; } }
function closePrimaryUser ( callback ) { this . close ( "primary_user" , _ . extend ( primaryInfo , { email : email , requiredEmail : true , add : ! ! auth_level } ) ) ; callback && callback ( ) ; }
function ( path , loop ) { var soundCache = this . _getEffectList ( path ) ; if ( soundCache ) { soundCache . loop = loop || false ; soundCache . play ( ) ; } return path ; }
function ( req , res ) { res . header ( 'Cache-Control' , 'public max-age=2592000' ) res . header ( 'Expires' , 'Sat, 28 Apr 2100 10:00:00 GMT' ) res . head ( 'Content-Type' , mimeType ) res . send ( buffer ) }
function ( ) { $ ( Edgar . map ) . trigger ( 'changemode' , 'vetting' ) ; }
function handleOk ( fraseElement , autorElement ) { console . log ( "ok" ) }
function handleWrong ( fraseElement , autorElement ) { console . log ( "mal" ) }
function ( value , metaData , record , rowIndex , colIndex , store , view ) { if ( record . targetuser ) return '********' ; else return '' ; }
function ( value , metaData , record , rowIndex , colIndex , store , view ) { if ( record . initiatoruser ) return '********' ; else return '' ; }
function ( x , y ) { this . _point = new cc . Point ( x || 0 , y || 0 ) ; }
function ( error , db ) { console . log ( 'connected to db ' + mongostr ) ; db . addListener ( "error" , function ( error ) { console . log ( "Error connecting to MongoLab" ) ; } ) ; db_defer . resolve ( db ) ; }
function ( response ) { console . log ( turtles [ index ] . module ) ; $ ( '#listel-' + index + ' img' ) . attr ( 'src' , getImage ( index ) ) ; }
function ( ) { for ( var name in goog . net . xpc . channels_ ) { goog . dispose ( goog . net . xpc . channels_ [ name ] ) ; } }
function ( object ) { alert ( "Done" ) ; }
function ( ) { localStorage [ "base_uri" ] = this . base_uri ; }
function ( data ) { if ( data ) { this . nameEl . text ( data . name ) ; this . fire ( "reconnect" , this . base_uri ) ; } }
function ( e ) { window . App . navigate ( '' , { trigger : true } ) ; }
function ( e ) { window . App . navigate ( 'explore' , { trigger : true } ) ; }
function ( e ) { if ( this . timeout ) { clearTimeout ( this . timeout ) ; } if ( ! this . haderr ) { cb ( e . message , 1 , null ) ; } this . haderr = true ; }
function ( ) { setTimeout ( function ( ) { referenceError } , 0 ) }
function ( ) { referenceError }
function ( ) { caughtError = false ; try { referenceError } catch ( e ) { caughtError = true ; } }
function ( selector , eventName ) { return jasmine . JQuery . events . spyOn ( $ ( selector ) . selector , eventName ) }
function ( ) { setFixtures ( sandbox ( ) . html ( '<a id="clickme">Click Me</a> <a id="otherlink">Other Link</a>' ) ) spyOnEvent ( $ ( '#clickme' ) , 'click' ) spyOnEvent ( $ ( '#otherlink' ) , 'click' ) }
function ( ) { $ ( '#clickme' ) . click ( ) expect ( 'click' ) . toHaveBeenTriggeredOn ( $ ( '#clickme' ) ) expect ( 'click' ) . toHaveBeenTriggeredOn ( '#clickme' ) }
function ( ) { expect ( 'click' ) . not . toHaveBeenTriggeredOn ( $ ( '#clickme' ) ) expect ( 'click' ) . not . toHaveBeenTriggeredOn ( '#clickme' ) }
function ( ) { $ ( '#otherlink' ) . click ( ) expect ( 'click' ) . not . toHaveBeenTriggeredOn ( $ ( '#clickme' ) ) expect ( 'click' ) . not . toHaveBeenTriggeredOn ( '#clickme' ) }
function ( ) { this . cursor . bg . red ( ) . black ( ) . bold ( ) ; this . _write ( 'ERROR' ) ; this . cursor . reset ( ) ; this . _write ( ' ' ) ; }
function ( err ) { debug ( 'socket-error' , err ) s . destroy ( ) self . sockets . splice ( self . sockets . indexOf ( s ) , 1 ) }
function ( ) { var note = modeNext ( ) ; if ( typeof note != 'undefined' ) midiOutput . sendMessage ( note ) ; }
function ( comp_src , comp_dest , alpha_src , alpha_dest , alpha_merged ) { return ( comp_src * alpha_src + comp_dest * alpha_dest * ( 1 - alpha_src ) ) / alpha_merged ; }
function ( comp_src , comp_dest , alpha_src , alpha_dest , alpha_merged ) { return composite ( comp_src , comp_dest , alpha_src , alpha_dest , alpha_merged ) ; }
function ( comp_src , comp_dest , alpha_src , alpha_dest , alpha_merged ) { return composite ( comp_src , comp_src + comp_dest , alpha_src , alpha_dest , alpha_merged ) ; }
function ( comp_src , comp_dest , alpha_src , alpha_dest , alpha_merged ) { return composite ( comp_src , Math . max ( 0 , comp_src - comp_dest ) , alpha_src , alpha_dest , alpha_merged ) ; }
f setTimeout ( function ( ) { retryFunction ( _self , _numberOfRetriesDone , _retryInMilliseconds , _numberOfTimes , _command , _db_command , _options , _callback ) ; } , _retryInMilliseconds ) ; } ) ;
function ( _replerr , _replresult ) { if ( self . _state == 'disconnected' ) { self . close ( true ) ; return ; } if ( _replerr == null ) { self . serverConfig . validateReplicaset ( _replresult , self . auths ) ; } }
function ( dg , pointer , evt ) { var c = dg . control . $n ( 'c' ) , ignore = zk . mobile ? true : jq ( c ) . hasClass ( 'z-errbox-close-over' ) ; return evt . domTarget == c && ignore ; }
function ( XMLHttpRequest , textStatus , errorThrown ) { $ ( '#validateResultsFolder_Error' ) . show ( ) ; var validationInfo = '' ; validationInfo = '<br/> <b>Reason: </b>' + XMLHttpRequest . message + '<br/> </br>' ; $ ( 'div#midas_challenge_competitor_validatedResultsFolder_Info' ) . html ( validationInfo ) ; }
function ( ) { var events = this . element . retrieve ( 'attachedEvents' ) ; events && this . element . removeEvents ( events ) . eliminate ( 'attachedEvents' ) ; return this ; }
function ( data , template ) { template = template || this . options . template ; return Epitome . Template . compile ( template , data ) }
function ( menu ) { if ( menu . data ( 'swipePanel' ) ) { menu . swipePanel ( 'remove' ) ; } }
function ( f ) { log ( "Accounts stored, result: " + JSON . stringify ( f . result ) ) ; this . popScene ( ) ; }
function ( socket ) { console . log ( 'connected' ) ; this . writable = true ; }
function ( data ) { if ( ! this . writable ) { } log ( data ) ; this . io . sockets . emit ( 'msg push' , data ) ; return true ; }
function ( dest ) { this . piped = true ; this . dest = dest ; this . on ( 'data' , function ( data ) { this . dest . write ( data ) ; } ) ; }
function ( mapModel ) { this . mapModel = mapModel ; return this ; }
function ( guideModel ) { this . guideModel = guideModel ; return this ; }
function ( ) { return true ; }
function onTouchPause ( ) { $ ( this ) . data ( 'touchPauseFlag' , true ) ; this . cyclePause ++ ; triggerPause ( this , true ) ; }
function OnExitGameOverState ( ) { hideSuccessUI ( ) ; hideOrderFailUI ( ) ; }
function ( ) { SM . SetStateByName ( "ingame" ) ; }
function ( ) { SM . SetStateByName ( "gameIntro" ) ; }
function offersLoaded ( result ) { if ( ! result . error ) populateOffers ( $ ( result . xmlDocument ) ) ; else itemsRequestError ( ) ; }
function ( ) { var timeoutCorrect = ( timeout / 1000 ) ; logAction ( 'No Activity for ' + timeoutCorrect + ' seconds' ) ; checktime ( ) ; }
function ( ) { return Players . find ( { name : 'Lucas Mills' } , { sort : { score : - 1 , name : 1 } } ) ; }
function ( event , options ) { }
function ( ) { console . log ( "disconnection occured" ) ; game . removeClient ( socket ) ; }
function ( trackEvent ) { if ( ! trackEvent || ! ( trackEvent instanceof TrackEvent ) ) { throw new Error ( "trackEvent must be valid to start an editor." ) ; } return openEditor ( trackEvent ) ; }
function ( ) { $ ( '.add-remove-slide-slider' ) . iosSlider ( 'removeSlide' , 1 ) ; }
function ( ) { var dir = appDir + '/modules' return existsSync ( dir ) ? fs . readdirSync ( dir ) : [ ] }
function ( dg , pointer , evt ) { return zul . inp . InputCtrl . isIgnoredDragForErrorbox ( dg , pointer , evt ) ; }
function ( error , mediaFile ) { tuid = mediaFile . target_uuid ; console . log ( "t_uid = " + tuid ) ; test . ok ( mediaFile . should . have . property ( 'target_uuid' ) ) ; test . done ( ) ; }
function ( err ) { assert . deepEqual ( err . message , "Migration error : Missing migration for 1" ) ; next ( ) ; }
function ( err ) { assert . deepEqual ( err . message , "Migration error : Duplicate migration number 0" ) ; next ( ) ; }
function ( ) { this . model . on ( 'change:path' , this . render , this ) ; this . focusOnSearchBox ( ) ; this . render ( ) ; }
function ( ) { var text = this . $ ( '.config-input' ) . val ( ) ; this . model . setCondition ( text ) ; }
function ( req , res ) { 'use strict' ; res . writeHead ( 200 , { 'Content-Type' : 'text/plain' } ) ; res . end ( 'Hello, World!' ) ; }
function ( test ) { 'use strict' ; test . expect ( 1 ) ; test . ok ( 1 , "this assertion should FAIL!!" ) ; test . done ( ) ; }
function ( entry ) { console . log ( "download complete: " + entry . fullPath ) ; console . log ( "+ info: " + entry ) ; uncompressFileEntry ( fileEntry ) ; }
function ( retainNode ) { var children = this . getChildren ( ) , child ; for ( child in children ) { if ( children . hasOwnProperty ( child ) ) { this . destroyChild ( child , retainNode ) ; } } }
function ( status , url ) { if ( status != 200 && ! cls . ScopeHTTPInterface . is_enabled ) { opera . postError ( "Usertracker could not send heartbeat to tracker server at " + url + ". Got status " + status ) ; } }
function ( node_id ) { var msg = [ ( last_spotlight_command || [ ] ) . concat ( [ get_command ( node_id , 0 , "hover" ) ] ) ] ; services [ 'ecmascript-debugger' ] . requestSpotlightObjects ( 0 , msg ) ; last_spotlight_commands = '' ; }
function ( services ) { return [ 'dom_mode' , { view : 'js_mode' , tab_class : JavaScriptTab } , 'network_mode' , 'resource_panel' , 'storage' , 'profiler_mode' , { view : 'console_mode' , tab_class : ErrorConsoleTab } , 'utils' , 'console_panel' ] ; }
function ( ) { this . _prev_url = this . _urlfield ? this . _urlfield . get_value ( ) : "" ; this . _prev_request = this . _input ? this . _input . get_value ( ) : "" ; }
function ( container ) { container . clearAndRender ( [ "div" , [ "span" , "class" , "ui-button reload-window" , "handler" , "reload-window" , "tabindex" , "1" ] , [ "p" , ui_strings . S_RESOURCE_CLICK_BUTTON_TO_FETCH_RESOURCES ] , "class" , "info-box" ] ) ; }
function ( ) { services [ "ecmascript-debugger" ] . addListener ( "window-filter-change" , this . _on_window_filter_change . bind ( this ) ) ; window . messages . addListener ( "profile-enabled" , this . _on_profile_enabled . bind ( this ) ) ; this . init ( ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( ) { if ( this . _textarea ) this . _textarea . focus ( ) ; }
function ( ) { if ( this . _textarea ) this . _textarea . blur ( ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( ) { this . _selected_element = null ; this . _set_props = [ ] ; this . _search_term = '' ; this . _has_data = false ; }
function ( msg ) { if ( msg . profile == window . app . profiles . DEFAULT ) { this . _sheets = { } ; this . _new_runtimes = null ; } }
function ( id ) { if ( ! this . container_ids . contains ( id ) ) this . container_ids . push ( id ) ; }
function ( handler , title ) { var buttons = this . getButtonsByHandler ( handler ) ; for ( var i = 0 ; button = buttons [ i ] ; i ++ ) { button . title = title ; } this . updateButtons ( ) ; }
function ( ) { if ( ! this . _debug_context ) window_manager . requestListWindows ( ) ; }
function ( msg ) { if ( msg . profile == window . app . profiles . DEFAULT ) this . _on_reset_state ( ) ; }
function ( container ) { container . clearAndRender ( window . templates . disabled_view ( ) ) ; }
function ( ) { buf . signalInfo ( "File saved" ) ; }
function ( ) { delete xdust . templates [ this . name ] ; Template . prototype . dispose . call ( this ) ; }
function ( ) { var args = arguments ; $rootScope . $apply ( function ( ) { callback . apply ( socket , args ) ; } ) ; }
function ( ) { var args = arguments ; $rootScope . $apply ( function ( ) { if ( callback ) { callback . apply ( socket , args ) ; } } ) ; }
function form2json ( req , res , next ) { if ( ! req . json ) { var flat = req . body || req . query req . json = flat ? exports . transform ( flat ) : { } } next ( ) }
function ( obj ) { this . _objects [ obj . object_id ] = obj ; var id = obj . id || obj . name ; if ( id ) this [ id ] = obj ; else throw "The object must have and id or a name" ; }
function ( ) { $ . stage . current = - 1 ; }
function ( e ) { console . log ( this . readyState ) ; console . log ( this . status ) ; }
function ( ) { delete seraph . _request ; }
function ( opts , callback ) { assert . equal ( opts . uri , testDatabase + '/db/data/' ) ; done ( ) ; }
function ( ) { var self = this ; self . model . hiddenPairs . fetch ( { success : function ( collection , response ) { self . update ( ) ; self . model . sync ( ) ; } } ) ; }
function ( pair ) { try { self . model . hiddenPairs . hidePair ( pair ) ; } catch ( e ) { } }
function ( model , opts ) { this . id = model . id ; this . user = opts . collection . user ; this . domain = opts . collection . domain . id ; }
function ( ident ) { return { id : ident } ; }
function ( pair ) { return pair . get ( "id" ) ; }
function ( pairKey ) { var model = this . get ( { id : pairKey } ) ; if ( model ) { this . remove ( [ model ] ) ; } }
function getShortTimeString ( theDate ) { return theDate . toString ( "HH:mm" ) ; }
function ( ) { events . fire ( new Event ( EventCode . GRAPH . UPDATED , { uris : [ graph ] } ) ) ; updated = true ; } , function ( ) { alert ( "could not set language" ) }
function ( ) { return options . bus ; }
function ( ) { return options . name ; }
function ( ) { return options ; }
function ( elem ) { data = elem . call ( data ) ; }
function ( data ) { data = data || { } ; console . log ( data ) ; }
function done ( value ) { var expected = ( 24 + 1000 ) * 200 ; if ( value == expected ) testPassed ( "done() called with " + expected ) ; else testFailed ( "done() called with " + value + ", but expected " + expected ) ; testRunner . notifyDone ( ) ; }
function done ( value ) { var expected = 24 * 200 ; if ( value == expected ) testPassed ( "done() called with " + expected ) ; else testFailed ( "done() called with " + value + ", but expected " + expected ) ; testRunner . notifyDone ( ) ; }
function dumpListItemAsHTML ( listItemElement , depth ) { var marker = testRunner . markerTextForListItem ( listItemElement ) ; return marker ? indent ( depth ) + ' ' + marker + ' ' + listItemElement . innerText . trim ( ) + '<br/>' : '' ; }
function testListItemMarkerEqualsListItemText ( listItemElement , depth ) { return testListItemMarkerEquals ( testRunner . markerTextForListItem ( listItemElement ) , listItemElement . innerText . trim ( ) ) ; }
function finishJSTest ( ) { wasFinishJSTestCalled = true ; if ( ! window . wasPostTestScriptParsed ) return ; shouldBeTrue ( "successfullyParsed" ) ; debug ( '<br /><span class="pass">TEST COMPLETE</span>' ) ; if ( window . jsTestIsAsync && window . testRunner ) testRunner . notifyDone ( ) ; }
function finishJSTest ( ) { wasFinishJSTestCalled = true ; if ( ! self . wasPostTestScriptParsed ) return ; isSuccessfullyParsed ( ) ; if ( self . jsTestIsAsync && self . testRunner ) testRunner . notifyDone ( ) ; }
function done ( value ) { var expected = 5770500 ; if ( value == expected ) testPassed ( "done() called with " + expected ) ; else testFailed ( "done() called with " + value + ", but expected " + expected ) ; testRunner . notifyDone ( ) ; }
function ( e ) { if ( e . success ) user = e . users [ 0 ] ; }
function ( ) { var results = this . inherited ( arguments ) ; this . discoverControlParent ( ) ; return results ; }
function ( model ) { that . dispatcher . trigger ( 'error' , 'error saving the asset' ) ; }
function ( ) { controller . show ( settings ) ; expect ( $ ( document . activeElement ) ) . toHaveClass ( 'url-input' ) ; }
function ( ) { controller . show ( settings ) ; expect ( $ ( document . activeElement ) ) . toHaveClass ( 'url-input' ) ; }
function ( e ) { info = new WscPacket ( 'user ' + e . user + '\n' + e [ '*info' ] ) ; channel . registerUser ( info ) ; channel . setUserList ( ) ; }
function ( e ) { info = new WscPacket ( 'user ' + e . user + '\n' + e [ '*info' ] ) ; channel . registerUser ( info ) ; channel . setUserList ( ) ; }
function ( ) { loadFixtures ( 'fragment.html' ) ; return this . $element = $ ( '.tip' ) ; }
function ( req , res ) { return "Howdy, " + req . session . currentUser + "!" ; }
function ( opt_data , opt_sb ) { var output = opt_sb || new soy . StringBuilder ( ) ; output . append ( '\t\t\t<div><h3>Security</h3></div><div><br><div><button class="btn" id="manageGroups-btn">Manage groups</button></button></div><br><h3>>Profile permissions></h3><p>Remember, the profile inherits the main album permissions. Here are only shown the explicit permissions of the profile</p><table class="table table-striped table-bordered table-condensed"><thead><tr><th></th><th>Entity</th><th>Read Granted</th><th>Read Denied</th><th>Write Granted</th><th>Write Denied</th><th></th><th></th></tr></thead><tbody id="permissionsBody"><tr><td></td><td>New permission for<br><input placeholder="Group or person name" id="newPermissionEntity" type="text" class="span"></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3>All permissions list</h3><table  align="center" class="table table-striped table-bordered table-condensed"><thead><tr><th>Identity type</th><th>Identity name</th><th>Protected object type</th><th>Protected object id</th><th>Read Granted</th><th>Read Denied</th><th>Write Granted</th><th>Write Denied</th></tr></thead><tbody id="permissionTable"></tbody></table></div>' ) ; return opt_sb ? '' : output . toString ( ) ; }
function ( opt_data , opt_sb ) { var output = opt_sb || new soy . StringBuilder ( ) ; output . append ( '<div class="row-fluid"><div class="span3"><div class="well"><div align="center" class="media-grid"><a href="#"><img alt="" src="photo/public/' , soy . $$escapeHtml ( opt_data . id ) , '" class="thumbnail"></a></div><div id="notifications"></div><h5>Agenda</h5><ul class="agenda-short-list" id="agendaTask-list"></ul></div></div><div class="span6"><div class="content" id="multimenu"></div></div><div class="span3"><div class="well"><h5>Suggestions</h5><div id="contact-suggestion"></div><br><h5>Meetings</h5><div>Start a new meeting to organize an event</div><br><div id="meetings"><div><button class="btn btn-success" id="doMeeting-but">Create meeting</button></div><br><ul id="meeting-list"></ul><div><button id="allMeetings-but" class="btn btn-info small">All</button></div></div><br><h5>Find friends</h5><div>Send invitations to your friends or search them in other social networks</div><br><div><button class="btn btn-danger">Send invitations</button></div><br><div><button class="btn btn-primary">Search in other networks</button></div><br></div></div>' ) ; return opt_sb ? '' : output . toString ( ) ; }
function ( ) { alert ( "Album cannot be removed because is not empty" ) ; }
function ( ) { alert ( "Folder cannot be remove because is not empty or is your main folder" ) }
function ( ) { this . collection . bind ( 'add' , this . addOne , this ) ; this . collection . bind ( 'reset' , this . addAll , this ) ; this . profileId = this . options . profileId ; }
function ( ) { this . collection . fetch ( { data : { page : this . page , id : this . profileId } } ) ; this . page = this . page + 1 ; }
function ( ) { $ ( this . el ) . html ( template . notificationView . notification ( this . model . toJSON ( ) ) ) ; return this ; }
function ( sid ) { if ( translations [ locale ] [ sid ] && translations [ locale ] [ sid ] [ 1 ] . length ) { sid = translations [ locale ] [ sid ] [ 1 ] ; } return sid ; }
function ( ) { filled_data_count ++ ; console . log ( filled_data_count ) ; if ( filled_data_count == target_length ) { toPlot = display ; makePlotWindow ( ) ; } ; }
function ( uri ) { for ( var subscription in subscriptions ) { if ( subscription === uri ) return true ; } return false ; }
function ( feed ) { _streamFeeds ( JSON . stringify ( feed ) ) ; }
function ( feed ) { console . log ( feed ) ; _streamFeeds ( feed ) ; }
function ( ) { navigator . notification . alert ( "Your position cannot be determined, the korenmarkt is used as your location now." , null , "No geolocation" , "OK" ) ; }
function ( ) { expect ( function ( ) { commands . register ( 'mockCommand' , { } ) } ) . toThrow ( ) ; }
function to a command
function floatListParser ( ) { atok . float ( ) . ignore ( true ) . addRule ( 1 , 'space' ) . on ( 'data' , console . log ) }
function ( ) { return this . returnLength || this . width / this . fontSize ; }
function ( y ) { return pad_t + ( y_max - y ) * ( hei - pad_t - pad_b ) / ( y_max - y_min == 0 ? 1 : y_max - y_min ) ; }
function ( request , response ) { users += 1 ; response . write ( 'Hello\n' ) ; setTimeout ( function ( ) { debugger ; response . end ( 'world\n' ) ; } , 5000 ) ; }
function ( ) { var services = Template . loginButtons . services ( ) ; return ( _ . contains ( services , 'password' ) && services . length > 1 ) || services . length > 2 ; }
function browser_openInNewTab ( url ) { this . createTab ( url ) ; this . updateTabsCount ( ) ; }
function ( prop ) { if ( ! bindings . hasOwnProperty ( prop ) ) { return debug ( 'skipping exporting of non-existant property' , prop ) } var desc = Object . getOwnPropertyDescriptor ( bindings , prop ) Object . defineProperty ( exports , prop , desc ) }
function ( node ) { return node . data . time <= $ ( '#time' ) . val ( ) ; }
function ( node ) { return node . data . time <= $ ( '#time' ) . val ( ) ; }
function ( ) { $ ( this . ajaxPopupFormModule . el ) . find ( "#EntityId" ) . val ( 0 ) ; KYT . vent . unbind ( "form:editModule:pageLoaded" ) ; }
function ( ) { KYT . vent . bind ( this . id + ":Redirect" , this . showDashboard , this ) ; }
function ( ) { this . options = $ . extend ( { } , KYT . opupDefaults , this . options ) ; }
function ( nodeName , node , sonString ) { if ( nodeName === 'a' ) { return '[url href=' + node . attr ( 'href' ) + ']' + sonString + '[/url]' ; } }
function ( nodeName , node , sonString ) { if ( nodeName === 'blockquote' ) { return '[blockquote]' + sonString + '[/blockquote]' ; } }
function ( nodeName , node , sonString ) { if ( nodeName === 'div' && node [ 0 ] . className === 'gui-ubb-ref' ) { return '[ref]' + sonString + '[/ref]' ; } }
function ( fontStyle ) { return ( /^(italic|oblique)$/ ) . test ( fontStyle ) ; }
function ( error , weatherdata ) { if ( error || ! weatherdata ) { console . log ( 'No weather data found for sound with id ' + soundId ) ; } else { result . Weather = weatherdata ; } callback ( null , result ) ; }
function ( error , data ) { if ( error || ! data ) { console . log ( 'No weather data found for video with name "' + result . Name + '"' ) ; } else { result . Weather = data ; } callback ( null , result ) ; }
function ( condition ) { if ( condition == undefined ) { return true ; } return expr_evaluator . evaluate ( condition ) ; }
function ( manager ) { Interpreter . call ( this , manager ) ; this . xml_manager = null ; this . effect_manager = null ; this . objs = null ; this . pieces = null ; }
function ( pieces ) { this . pieces = pieces ; }
function ( pieces , frame , time_to_start_affecting ) { Effect . call ( this , time_to_start_affecting + 1 , time_to_start_affecting ) ; this . targets = pieces ; this . frame = parseInt ( frame , 10 ) ; }
function langContext ( req ) { return { lang : req . lang , locale : req . locale , gettext : req . gettext , ngettext : req . ngettext , format : req . format } ; }
function ( ) { if ( this . addEventListener ) this . addEventListener ( 'keydown' , tabKeyHandler , false ) ; else if ( this . attachEvent ) this . attachEvent ( 'onkeydown' , tabKeyHandler ) ; }
function shouldShow ( entry ) { return [ ".git" , ".svn" , ".DS_Store" , "Thumbs.db" ] . indexOf ( entry . name ) === - 1 ; }
function ( n , i ) { var e = utils . labelInput ( 'color ' + methods [ n ] , n , c , inputLen ) ; e . input . onkeyup = update ; return { name : n , e : e } ; }
function ( o ) { o . e . input . value = ( col [ methods [ o . name ] ] ( ) * fac ) . toFixed ( fix ) ; }
function ( n , i ) { var e = utils . labelInput ( 'color ' + methods [ n ] , n , c , inputLen ) ; e . input . onkeyup = update ; return { name : n , e : e } ; }
function ( o ) { o . e . input . value = ( col [ methods [ o . name ] ] ( ) * fac ) . toFixed ( fix ) ; }
function ( pos , start , end ) { var startIndex = this . indexFromPos ( start ) , endIndex = this . indexFromPos ( end ) , posIndex = this . indexFromPos ( pos ) ; return posIndex >= startIndex && posIndex <= endIndex ; }
function isArray ( arrlike ) { if ( Array . isArray ) { return Array . isArray ( arrlike ) ; } return Object . prototype . toString . call ( arrlike ) === '[object Array]' ; }
function ( arrlike ) { if ( arrlike . length ) { return arrlike [ arrlike . length - 1 ] ; } else { return arrlike ; } }
function ( val ) { return /^[а-яіїєА-ЯІЇЄa-zA-Z\d\s\_\+\\\-\/\(\)\{\}\'\"\!\&\=\*\%\#\<\>\,\.\?\@]{1,}$/ . test ( val ) ; }
function ( e ) { if ( e . orientation === 'portrait' ) { $ ( '.toc-mobile' ) . show ( ) ; $ ( '.toc-container .toc' ) . hide ( ) ; } }
function ( ) { orgCallback . apply ( this ) ; $ ( this ) . dialog ( 'destroy' ) ; }
function ( ) { dialog . dialog ( 'destroy' ) ; }
function ( ) { dialog . dialog ( 'destroy' ) ; }
function ( value ) { if ( null != value ) { progressbar . progressbar ( { value : value } ) ; } else { dialog . dialog ( 'destroy' ) ; } }
function ( value ) { if ( value == null ) { return '' ; } return '' + value ; }
function ( values ) { if ( values == null ) { return '' ; } return values . join ( ' ' ) ; }
function isChild ( parent , child ) { return parent === child || $ ( parent ) . find ( child ) . length ; }
function ( i ) { $ ( this ) . data ( "ui-slider-handle-index" , i ) ; }
function ReadableStream ( ) { this . readable = true ; this . encoding = 'utf8' ; }
function ( writable ) { stream . Stream . prototype . pipe . apply ( this , arguments ) ; }
function OnEnterGameIntroState ( ) { level . generateNextLevel ( ) ; setIntroUI ( ) ; showIntroUI ( ) ; }
function OnEnterMenuState ( ) { initMenu ( ) ; backgroundMusic = SoundJS . play ( "backgroundmusic" , SoundJS . INTERRUPT_ANY , 0 , 0 , - 1 , 0.5 ) ; initLevel ( ) ; orderSummary = new OrderSummary ( ) ; }
function ( ) { return new cc . Point ( this . _offsetInPixels . x , this . _offsetInPixels . y ) ; }
function ( offsetInPixels ) { this . _offsetInPixels = offsetInPixels ; this . _offset = cc . POINT_PIXELS_TO_POINTS ( this . _offsetInPixels ) ; }
function ( ) { if ( this . _texture ) { return this . _texture ; } if ( this . _textureFilename != "" ) { return cc . TextureCache . sharedTextureCache ( ) . addImage ( this . _textureFilename ) ; } return null ; }
function ( toolboxState ) { PM . load_templates ( toolboxState ) ; PM . add_address_listener ( ) ; $ ( 'head' ) . append ( '<link rel="stylesheet" href="' + toolboxState . pmt . path + + '/toolbox/css/policymodelling/style.css" type="text/css" />' ) ; $ . address . update ( ) ; }
function ( jStat ) { assert . deepEqual ( jStat ( [ [ 1 , 2 ] , [ 1 , 4 ] ] ) . mode ( ) , [ 1 , [ 2 , 4 ] ] ) ; }
function ( val , stat ) { assert . deepEqual ( val , [ 1 , [ 2 , 4 ] ] ) ; }
function ( event ) { $ ( this ) . prev ( 'input[type=hidden]' ) . val ( '1' ) ; $ ( this ) . closest ( '.well' ) . hide ( ) ; return event . preventDefault ( ) ; }
function ( findResult ) { expect ( findResult ) . toBe ( null ) ; }
function ( ) { testDB ( Mongo . findTargetById ( '12345678901234567890abcd' ) , function ( findResult ) { expect ( findResult ) . toBe ( null ) ; } ) ; }
function name ( node ) { return node . localName + ( node . namespaceURI ? '(' + node . namespaceURI + ')' : '' ) ; }
function ( feature ) { attribs = feature [ "@" ] ; if ( attribs ) { attribs . required = packagerUtils . toBoolean ( attribs . required , true ) ; } accessObj . features . push ( attribs ) ; }
function ( found , currElem ) { if ( currElem ) { return found || currElem . id === feature . id ; } }
function ( start , end ) { return $ . visualize . getRangeLabels ( start , end , this . options . ticks ) ; }
function ( event ) { self . postMessage ( "Worker received message: " + event . data ) ; }
function ( ) { var lastRow = this . doc . getLength ( ) - 1 ; this . setSelectionAnchor ( 0 , 0 ) ; this . moveCursorTo ( lastRow , this . doc . getLine ( lastRow ) . length ) ; }
function ( key ) { if ( ! options . hasOwnProperty ( key ) ) throw new Error ( "Unknown config key: " + key ) ; return options [ key ] ; }
function ( key , value ) { if ( ! options . hasOwnProperty ( key ) ) throw new Error ( "Unknown config key: " + key ) ; options [ key ] = value ; }
function ( force ) { this . renderer . onResize ( force ) ; }
function ( ) { this . renderer . updateBreakpoints ( ) ; }
function ( editor , range , count , param ) { }
function ( row , className ) { this . $decorations [ row ] = ( this . $decorations [ row ] || "" ) . replace ( " " + className , "" ) ; }
function ( path ) { path = _verifyAndResolveDirectory ( path ) ; var fileList = [ ] , modules = [ ] ; var files = _fs . readdirSync ( path ) ; return _importFiles ( path , files ) ; }
function ( ) { var pathToTest = "../LICENSE" ; ( function ( ) { requiredir ( pathToTest ) ; } ) . should . throw ( "The path provided is not a directory. [" + _path . resolve ( __dirname , pathToTest ) + "]" ) ; }
function ( path , count ) { for ( var i = 0 ; i < count ; i ++ ) { _fs . writeFileSync ( _path . join ( path , '/mod' + i + '.js' ) , index ) ; } }
function ( path ) { path = _path . resolve ( _path . dirname ( module . parent . filename ) , path ) ; _fs . writeFileSync ( _path . join ( path , '/.hiddenFile.js' ) , index ) ; }
function ( path , count ) { path = _path . resolve ( _path . dirname ( module . parent . filename ) , path ) ; _fs . mkdirSync ( path ) ; createTestFiles ( path , count ) ; }
function ( ) { self . connected = true ; self . connection . setTimeout ( self . socketOptions . socketTimeoutMS != null ? self . socketOptions . socketTimeoutMS : self . socketOptions . timeout ) ; self . emit ( "connect" , null , self ) ; }
function ( e ) { Utils . debug ( 'Corpus save error' ) ; Utils . debug ( e ) ; hub . publish ( "saveFailedToPouch" , "corpus" ) ; }
function ( e ) { Utils . debug ( 'Datalist save error' ) ; Utils . debug ( e ) ; hub . publish ( "saveFailedToPouch" , "datalist" ) ; }
function ( e ) { Utils . debug ( 'Session save error' ) ; Utils . debug ( e ) ; hub . publish ( "saveFailedToPouch" , "session" ) ; }
function ( ) { return '' ; }
function ( ) { assert . ok ( /^\d+\.\d+\.\d+$/ . test ( knox . version ) ) ; }
function ( ) { var client = knox . createClient ( { key : 'foobar' , secret : 'baz' , bucket : 'misc' , endpoint : 's3-eu-west-1.amazonaws.com' } ) ; assert . equal ( 's3-eu-west-1.amazonaws.com' , client . endpoint ) ; }
function ( done ) { client . del ( '/test/user.json' ) . on ( 'response' , function ( res ) { assert . equal ( 204 , res . statusCode ) ; done ( ) ; } ) . end ( ) ; }
function ( done ) { client . deleteFile ( '/test/user2.json' , function ( err , res ) { assert . ok ( ! err ) ; assert . equal ( 204 , res . statusCode ) ; done ( ) ; } ) ; }
function ( done ) { client . get ( '/test/user.json' ) . on ( 'response' , function ( res ) { assert . equal ( 404 , res . statusCode ) ; done ( ) ; } ) . end ( ) ; }
function ( done ) { client . head ( '/test/user.json' ) . on ( 'response' , function ( res ) { assert . equal ( 404 , res . statusCode ) ; done ( ) ; } ) . end ( ) ; }
function ( ) { assert . equal ( 'aGV5' , utils . base64 . encode ( 'hey' ) ) ; }
function ( ) { assert . equal ( 'hey' , utils . base64 . decode ( 'aGV5' ) ) ; }
function ( ) { jQuery ( Khan ) . trigger ( "answerSaved" ) ; maybeEnqueueReviewProblems ( ) ; }
function ( event , ui ) { $ ( '#vcolor' ) . css ( { color : stateColors [ ui . value ] } ) ; $ ( '#newstatus' ) . text ( ui . value ) ; }
function ( ) { $ ( '.after-tour' ) . fadeIn ( 2000 ) ; notifier . destroyAll ( 'section' , 'tour' ) ; themeNotifier . destroyAll ( true ) ; }
function ( ) { notifier . notify ( { modal : true , screenOpacity : .7 , message : 'Features useful event mechanism with great API' , type : 'error' , section : 'tour' , hideOnClick : true , position : 'center' , ms : 3500 } ) ; }
function ( ) { view [ handler ] . apply ( view , arguments ) ; }
function ( ) { return v . apply ( { scope : this , supr : orig , module : m } , arguments ) ; }
function ( ) { this . scope . _loggerNotifierId = ++ this . module . _notifiers ; this . module . _log ( 'initializing notifier #' + this . scope . _loggerNotifierId ) ; return this . supr . apply ( this . scope , arguments ) ; }
function ( ) { if ( this . opened ( ) ) return ; this . parent . open . apply ( this , arguments ) ; this . clearPlaceholder ( ) ; this . resizeSearch ( ) ; this . focusSearch ( ) ; }
function ( opt , params ) { opt . headers [ 'Authorization' ] = 'QBox ' + conf . ACCESS_KEY + ':' + checksum ( opt , params ) ; }
function ( ) { prompt ( "" , "gap_init:" ) ; }
function ( ) { return this . data = fs . existsSync ( this . dataPath ) ? JSON . parse ( fs . readFileSync ( this . dataPath ) ) : { } ; }
function ( e ) { e . cancelBubble = true ; if ( e . stopPropagation ) { console . log ( e . type ) ; return e . stopPropagation ( ) ; } }
function ( ) { if ( ! this . picker . loaded ) { Ext . defer ( this . expand , 100 , this ) ; return ; } else { this . callParent ( ) ; } }
function ( ) { testGenerator . close ( ) ; }
function ( _ , Backbone ) { var Message = Backbone . Model . extend ( { url : 'http://localhost:3000/messages' , } ) ; return Message ; }
function ( ) { e . dispatch . close ( callback ) ; }
function ( urlstr ) { var path = url . parse ( urlstr ) . pathname ; return urlJoin ( url . parse ( urlstr ) . pathname ) ; }
function ( ) { return new cc . Action ( ) ; }
function ( action , speed ) { cc . Assert ( action != null , "" ) ; this . _innerAction = action ; this . _speed = speed ; return true ; }
function ( action , speed ) { var ret = new cc . Speed ( ) ; if ( ret && ret . initWithAction ( action , speed ) ) { return ret ; } return null ; }
function ( target ) { this . _target . setVisible ( true ) ; }
function ( time ) { this . _target . setVisible ( false ) ; }
function ( time ) { this . _target . setVisible ( ! target . isVisible ( ) ) ; }
function ( time ) { this . _target . setFlipX ( this . _flipX ) ; }
function ( ) { return cc . FlipX . create ( ! this . _flipX ) ; }
function ( x ) { var ret = new cc . FlipX ( ) ; if ( ret . initWithFlipX ( x ) ) return ret ; return null ; }
function ( time ) { this . _target . setFlipY ( this . _flipY ) ; }
function ( ) { return cc . FlipY . create ( ! this . _flipY ) ; }
function ( y ) { var ret = new cc . FlipY ( ) ; if ( ret . initWithFlipY ( y ) ) return ret ; return null ; }
function ( time ) { this . _target . setPosition ( this . _position ) ; }
function ( time ) { this . execute ( ) ; }
function ( response ) { userImage = response [ 0 ] . pic_square ; }
function ( resp ) { callback ( null , resp ) ; }
function ( e ) { Utils . debug ( "It thinks there was an error fetching the session. But chances are there wasnt...." + JSON . stringify ( e ) ) ; var se = new Session ( e ) ; se . restructure ; s . set ( se . toJSON ( ) ) ; }
function ( e ) { Utils . debug ( "There was an error restructuring the session. Restructuring..." + JSON . stringify ( e ) ) ; var se = new Session ( e ) ; se . restructure ; s . set ( se . toJSON ( ) ) ; }
function ( ) { var body = Ext . getBody ( ) ; this . height = body . getHeight ( ) / 1.2 ; this . width = body . getWidth ( ) / 1.2 ; this . callParent ( arguments ) ; }
function ( ) { this . previewMode = false ; $ ( 'body' ) . css ( { 'background' : '#333' } ) ; this . renderFrame ( this . currentFrame ) ; }
function ( ) { NEWSBLUR . assets = new NEWSBLUR . SocialPageAssets ( ) ; this . initialize_stories ( ) ; }
function ( unexpected ) { var args = this . parameter ; this . current_callback = function ( sbj ) { return sbj . when_apply . apply ( sbj , args ) . not_to_be ( unexpected ) ; } return this ; }
function ( e , ui ) { if ( $ ( self ) . data ( 'previous' ) ) { self . selectItem ( $ ( self ) . data ( 'previous' ) , { blurring : true } ) } }
function ( str , terminal , stack ) { try { var words = forth . parse ( str ) ; forth . execute ( words ) ; } catch ( err ) { terminal . error ( err ) ; } forth . redrawStack ( ) ; }
function fin ( ) { if ( follow ) { oraSock . removeListener ( 'data' , accept_oracle_data ) ; oraSock . halfWayTime = Date . now ( ) ; } else { DBInMgr . pushBackToFreelist ( oraSock ) ; } }
function SwankParser ( onMessage ) { this . onMessage = onMessage ; this . resetBuffer ( ) ; }
function handleMessage ( str ) { this . onMessage ( readFromString ( this . stash . toString ( ) ) ) ; this . resetBuffer ( ) ; }
function ( response ) { var responseBuf = swp . buildMessage ( response ) ; console . log ( "response: %s" , responseBuf . toString ( ) ) ; stream . write ( responseBuf ) ; }
function ( ) { preload = core . createResourceDef ( '*preload' , cfg , true , '' ) ; core . getDeps ( preload , preloads ) ; }
function ( ) { return fn . apply ( obj , args || arguments ) ; }
function ( fn , obj ) { var args = Array . prototype . slice . call ( arguments , 2 ) ; return function ( ) { return fn . apply ( obj , args || arguments ) ; } ; }
function ( obj , options ) { obj . options = L . Util . extend ( { } , obj . options , options ) ; return obj . options ; }
function ( latlng , zoom ) { var projectedPoint = this . projection . project ( latlng ) , scale = this . scale ( zoom ) ; return this . transformation . _transform ( projectedPoint , scale ) ; }
function ( point , zoom , unbounded ) { var scale = this . scale ( zoom ) , untransformedPoint = this . transformation . untransform ( point , scale ) ; return this . projection . unproject ( untransformedPoint , unbounded ) ; }
function ( latlng , zoom ) { zoom = typeof zoom === 'undefined' ? this . _zoom : zoom ; return this . options . crs . latLngToPoint ( latlng , zoom ) ; }
function ( point , zoom , unbounded ) { zoom = typeof zoom === 'undefined' ? this . _zoom : zoom ; return this . options . crs . pointToLatLng ( point , zoom , unbounded ) ; }
function ( ) { var map = this . _map ; if ( map ) { map . _popup = null ; map . removeLayer ( this ) . fire ( 'popupclose' , { popup : this } ) ; } }
function ( ) { if ( this . _popup ) { this . _popup . _close ( ) ; } return this ; }
function ( ) { L . Path . prototype . _initEvents . call ( this ) ; }
function ( ) { if ( this . _poly . _map ) { this . _poly . _map . removeLayer ( this . _markerGroup ) ; delete this . _markerGroup ; delete this . _markers ; } }
function ( ) { marker . off ( 'dragstart' , onDragStart , this ) ; marker . off ( 'dragend' , onDragEnd , this ) ; this . _createMiddleMarker ( marker1 , marker ) ; this . _createMiddleMarker ( marker , marker2 ) ; }
function ( ) { onDragStart . call ( this ) ; onDragEnd . call ( this ) ; this . _poly . fire ( 'edit' ) ; }
function ( map ) { map . off ( 'layeradd' , this . _onLayerAdd ) . off ( 'layerremove' , this . _onLayerRemove ) ; }
function ( response ) { $ ( '.calendar' ) . html ( response . data ) ; $ ( '.week_pagination' ) . html ( response . week_pagination ) ; set_week_pagination_triggers ( ) ; }
function ( ) { $ ( this ) . toggle ( 'fast' ) ; $ ( this ) . toggleClass ( "expand" ) ; }
function ( ) { this . chatForm . addEventListener ( "submit" , this , false ) ; this . gameState . addEventListener ( "startRound" , this , false ) ; }
function Document ( document ) { this . tree = document ; this . elemCache = [ ] ; this . nodeCache = [ ] ; }
function ( ) { return new Search ( this , this . tree ) ; }
function ( resp , status , xhr ) { if ( ! model . set ( model . parse ( resp , xhr ) , options ) ) return false ; if ( success ) success ( model , resp , options ) ; }
function ( resp , status , xhr ) { collection [ options . add ? 'add' : 'reset' ] ( collection . parse ( resp , xhr ) , options ) ; if ( success ) success ( collection , resp , options ) ; }
function css ( el , prop ) { for ( var n in prop ) { el . style [ vendor ( el , n ) || n ] = prop [ n ] ; } return el ; }
function ( name ) { return name == 'scala.Any' || name == 'scala.AnyRef' || name == 'scala.Predef.any2stringfmt' || name == 'scala.Predef.any2stringadd' || name == 'scala.Predef.any2ArrowAssoc' || name == 'scala.Predef.any2Ensuring' }
function show_tags ( ) { var notice_tags_css = ".tumblr_savior a.tag {" ; notice_tags_css += "font-weight: normal !important;" ; notice_tags_css += "}" ; addGlobalStyle ( "notice_tags_css" , notice_tags_css ) ; }
function ( ) { this . _super ( ) ; this [ 0 ] . reset ( ) ; }
function ( ) { return this . find ( '.treedropdownfield-panel' ) ; }
function ( title ) { if ( ! title && title !== '' ) title = strings . fieldTitle ; this . find ( '.treedropdownfield-title' ) . val ( title ) ; }
function ( ) { this . bind ( 'change.TreeDropdownField' , function ( ) { $ ( this ) . getField ( ) . updateTitle ( ) ; } ) ; }
function ( value , options ) { return ! ! value ? value . toString ( ) : "" ; }
function http_error_handler ( ex ) { if ( ! bep . emit ( 'error' , ex ) ) { throw new Error ( sprintf ( 'ERROR (%s) on listener at endpoint: http://%s:%s%s' , String ( ex ) , options . host , options . port , options . path ) ) ; } }
function ( ) { var c = this . c , $canvas = this . $canvas c . clearRect ( 0 , 0 , $canvas . width ( ) , $canvas . height ( ) ) this . points = [ ] this . updateRecording ( ) }
function ( ) { $ ( '[data-draw=canvas]' ) . draw ( ) ; }
function Query ( ) { Backbone . Model . prototype . constructor . apply ( this , arguments ) ; }
function Facet ( ) { Backbone . Model . prototype . constructor . apply ( this , arguments ) ; }
function ( key , step ) { var zi = baidu . global . get ( "zIndex" ) ; if ( key ) { zi [ key ] = zi [ key ] + ( step || 1 ) ; } return zi [ key ] ; }
function Context ( ) { }
function ( ) { console . log ( "displaying the beginning" ) $ ( "#startGame" ) . css ( "display" , "none" ) ; displaySourceImage ( ) ; webcam . capture ( 10 ) ; }
function ( ) { setTimeout ( sync , 3500 , true ) ; delaySyncHandler = null ; }
function ( i , e ) { if ( i == index ) { $ ( e ) . attr ( "checked" , "checked" ) ; } else $ ( e ) . removeAttr ( "checked" ) ; }
function isChanged ( ) { return this . hasDraft ( "value" ) ; }
function publishChange ( ) { ASSERT ( this . isChanged ( ) , "expected a change to publish" ) ; this . publish ( "value" ) ; }
function maybeTouch ( vv ) { if ( ! evaluator . isUpdating ( ) ) { touch ( vv ) ; } }
function ( response ) { if ( response . status === 401 ) { callback ( [ ] ) ; } else { window . console . log ( 'An error was encountered in fetching the feed:' , response ) ; } }
function ( rule ) { if ( match ( checks , rule [ 'conds' ] ) ) { messages . append ( '<li>' + rule [ 'msg' ] + '</li>' ) ; } }
function ( e ) { e . preventDefault ( ) ; window . location = $ ( this ) . attr ( 'href' ) + '&query=' + $ ( '#searchExerciseInput' ) . val ( ) ; }
function ( ) { $ ( '.item1' ) . removeClass ( 'topForSubMenu' ) ; hovered = true ; hide_submenu ( "#submenuProgramList" ) ; }
function ( opt_precision ) { this . values = [ ] ; this . precision = 1 ; this . enable3d_ = true ; if ( this . opt_precision ) { this . setPrecision ( ( opt_precision ) ) ; } }
function ( index , message ) { $ ( '#' + error . element ) . parent ( ) . append ( "<span class='errors sp-errors'>" + message + "</span>" ) ; }
function ( index , message ) { $ ( '#' + error . element ) . parent ( ) . append ( "<span class='errors sp-errors'>" + message + "</span>" ) ; }
function ( text , render ) { return util . sparkline ( render ( text ) ) ; }
function ( err , req , data ) { if ( err ) return callback ( err ) ; callback ( null , data ) ; }
function ( err , data ) { if ( err ) return callback ( err ) ; console . log ( data . hits . total ) ; addUsersToData ( data , callback ) ; }
function ( err , req , data ) { if ( err ) return callback ( err ) ; addUserToData ( data , callback ) ; }
function ( err , data ) { if ( err ) callback ( err ) ; addUsersToData ( data , callback ) ; }
function ( err , req , data ) { if ( err ) return callback ( err ) ; callback ( null , data ) ; }
function ( err , data ) { if ( err ) return callback ( err ) ; addUsersToData ( data , callback ) ; }
function ( data ) { data . query . bool . must . push ( { "term" : { "isInstructor" : true } } ) ; return data ; }
function ( err , result ) { if ( err ) return callback ( err ) ; callback ( null , result ) ; }
function ( err , result ) { console . log ( err ) ; request . session . user = user ; response . send ( request . session ) ; }
function ( request , response ) { routesCommon . searchQuestionsRoute ( 0 , request , response ) ; }
function ( disabled ) { tau . ui . Button . $super . setDisabled . apply ( this , arguments ) ; this . _state = disabled ? 'disabled' : 'normal' ; this . render ( true ) ; }
function ( ) { if ( ! options . inputstream ) { return callback ( code , stderr ) ; } fs . close ( options . inputstream . fd , function ( ) { callback ( code , stderr ) ; } ) ; }
function die ( ) { console . log ( "Removing: " + SHAPE . name ) ; LAYER . remove ( SHAPE ) ; Team . setScore ( Team . getScore ( ) - 1 ) ; Tanks . remove ( This ) ; }
function ( json ) { var weapons = [ ] ; for ( var key in json . weapons ) { weapons . push ( key ) ; } ; return weapons ; }
function ( data , xhc ) { data . TimeUpdated = data . TimeReceived ; return data ; }
function ( movie ) { AnyGood . mainView . renderMovie ( movie ) ; }
function ( ) { reader . onloadend = reader . onerror = null ; callback ( false ) ; }
function ( ) { reader . onloadend = reader . onerror = null ; callback ( true ) ; }
function _getExpires ( expires , callback ) { if ( typeof expires == 'undefined' ) { expires = + new Date ( ) + ( 1000 * 60 * 5 ) callback ( null , expires ) } else callback ( null , expires ) }
function _setTemplates ( tmpl , view ) { view . $el . html ( tmpl ( ) ) ; var contactModalTempl = app . fetchTemplate ( "app/templates/_contact-modal" ) ; $ ( view . el ) . append ( contactModalTempl ) ; }
function out ( keyword , color , str ) { str = keyword [ color ] . bold + ' - ' . grey + str ; console . log ( isatty ? str : str . stripColors ) ; }
function enableDebug ( ) { debugEnabled = true ; }
function debug ( str ) { if ( debugEnabled ) { out ( 'debug' , 'magenta' , str ) ; } }
function send ( name , data , callback ) { var req = this . bufferedRequest ( { path : '/store/' + name , method : 'PUT' } , callback ) ; req . write ( data ) ; req . end ( ) ; }
function delUser ( name , callback ) { this . bufferedRequest ( { path : '/users/' + name , method : 'DELETE' } , callback ) . end ( ) ; }
function ( elem ) { $ ( elem ) . find ( this . selector ) . each ( function ( ) { tinyMCE . execCommand ( 'mceRemoveControl' , true , this . id ) ; } ) ; }
function addNew ( e ) { $ ( 'a[href*="add"] button' ) . trigger ( 'click' ) ; }
function ( value , attr ) { if ( ! self . hasOwnProperty ( attr ) ) { self . addAttribute ( attr , Utils . toDefaultValue ( value ) , { initialLoad : true } ) } }
function ( item ) { if ( ! item ) { if ( isNaN ( selected ) ) { return "" ; } return selected + 1 ; } select ( item ) ; return that [ "public" ] ; }
function ( data , options ) { if ( options . requestType === "initial" ) { self . showError ( { } , { "retryIn" : 0 , "request" : self . request } ) ; } }
function ( data ) { self . lastRequest = { "initial" : true , "data" : data } ; self . render ( ) ; }
function ( ) { self . showError ( { } , { "retryIn" : 0 , "target" : element , "request" : self . moreRequest } ) ; }
function ( data ) { self . lastRequest = { "initial" : true , "data" : data } ; self . render ( ) ; }
function ( properties ) { properties . on ( 'change' , this . render , this ) }
function ( e ) { if ( e && e . toString ( ) . substr ( 0 , existingColumnFamilyException . length ) !== existingColumnFamilyException ) { throw e ; } }
function ( ) { var store2 = new CassandraStore ( { pool : testpool } ) ; }
function ( temp ) { that . applier . requestChange ( 'table' , temp . table ) ; that . applier . requestChange ( 'currentSelection' , temp . currentSelection ) ; }
function SocialUI_providerReady ( ) { SocialShareButton . init ( ) ; }
function SSB_updateButtonEnabledState ( ) { let shareButton = this . shareButton ; if ( shareButton ) shareButton . hidden = ! Social . provider || ! Social . provider . enabled || ! Social . provider . port ; }
function handleResponse ( ok ) { win . dialog ( 'close' ) ; if ( ok && callback ) { callback ( userInput . val ( ) ) ; } win . remove ( ) ; }
function ( params ) { Echo . Events . publish ( prepare ( params ) ) ; }
function ( params ) { Echo . Events . subscribe ( prepare ( params ) ) ; }
function ( match ) { if ( [ 'whitespace' , 'dot' , 'not' ] . indexOf ( t . lastToken ) === - 1 ) { reportError ( 'no whitespace before "' + match + '". found "' + t . lastMatch + '" instead.' ) ; } }
function _markMostRecent ( doc ) { var mruI = findInWorkingSet ( doc . file . fullPath , _workingSetMRUOrder ) ; if ( mruI !== - 1 ) { _workingSetMRUOrder . splice ( mruI , 1 ) ; _workingSetMRUOrder . unshift ( doc . file ) ; } }
function ( ) { return rules !== undefined ; }
function ( ) { return savedText !== undefined ; }
function ( ) { return savedInlineText !== undefined && savedHostText !== undefined ; }
function ( ) { expect ( error . code ) . toBe ( FileError . SECURITY_ERR ) ; }
function ( ) { expect ( entries ) . not . toBe ( null ) ; }
function ( e ) { entries = e ; recreatePlaceholder ( ) ; deferred . resolve ( ) ; }
function ( ) { gotErrorReadingContents = true ; recreatePlaceholder ( ) ; deferred . reject ( ) ; }
function ( ) { expect ( errorCode ) . toBe ( FileError . NOT_FOUND_ERR ) ; }
function ( ) { $listItems = testWindow . $ ( "#open-files-container > ul" ) . children ( ) ; return $listItems . length === 2 ; }
function ( e ) { if ( ! me . isDisabled ( ) ) { if ( false === me . onclick ( ) ) { baidu . event . stop ( e || window . event ) ; } } }
function ( ) { if ( this . length > 1 ) { $ . error ( 'Method jQuery.freetrans.getBounds can only be called on single selectors!' ) ; } return _getBounds ( this . data ( 'freetrans' ) . divs . controls ) ; }
function ( content ) { assert . strictEqual ( node . document . tree . documentElement . innerHTML , content . documentElement . innerHTML ) ; done ( ) ; }
function ( content ) { assert . strictEqual ( node . document . tree . documentElement . innerHTML , content . documentElement . innerHTML ) ; done ( ) ; }
function ( xhr ) { if ( queue && requestQueue [ queue ] ) { requestQueue [ queue ] . clearQueue ( ) ; } if ( $ . isFunction ( fnError ) ) { fnError ( xhr ) ; } }
function ( cb ) { if ( window . name == 'auth_with_primary' ) window . location = 'https://login.persona.org/authenticate_with_primary#complete' ; else window . location = 'https://login.persona.org/sign_in#AUTH_RETURN' ; }
function ( $0 , $1 , $2 ) { if ( $1 ) { uri . param [ 'query' ] [ $1 ] = decodeURIComponent ( $2 ) ; } }
function ( $0 , $1 , $2 ) { if ( $1 ) { uri . param [ 'fragment' ] [ $1 ] = decodeURIComponent ( $2 ) ; } }
function ( condition , label ) { if ( eval ( condition ) ) this . doGotoLabel ( label ) ; }
function ( args ) { if ( this . __fired ) { throw args || new Error ( "Already fired" ) ; } this . __error = Array . prototype . slice . call ( arguments ) ; this . __resolve ( ) ; return this ; }
function ( results ) { callback . call ( this , results ) . then ( p ) ; }
function ( event , ui ) { if ( supports_local_storage ( ) ) { loadLocation ( $ . mobile . pageData . id ) ; } else { } }
function ( ) { this . on ( 'item:click' , this . _updateDistricts , this ) ; REIN . events . on ( 'filter:area' , this . _clearDistricts , this ) ; }
function ( districts ) { var hits = this . collection . filter ( function ( o ) { return _ . indexOf ( districts , o . district ) > - 1 ; } ) ; this . _currentHits . reset ( hits ) ; }
function ( areaId ) { this . _currentHits . reset ( this . collection . filter ( function ( o ) { return o . area === areaId ; } ) , { silent : true } ) ; this . _clearExistingViews ( ) ; }
function ( Y ) { var save = Y . one ( '#id_save' ) ; console . log ( '#id_save' + save ) ; save . on ( "click" , function ( e ) { submit_audio ( ) ; } ) ; }
function gotSharedViewModel ( err , sharedModel ) { res . render ( sharedModel . pageTemplateName , sharedModel ) ; }
function ( ) { var record = getSelectedLayerRecord ( ) ; if ( record ) { this . removeFromSelectControl ( record ) ; this . mapPanel . layers . remove ( record , true ) ; removeLayerAction . disable ( ) ; } }
function ( ) { console . error ( "onShown never fired" , arguments ) ; }
function onLoad ( ) { console . log ( "purplePanel load event" ) ; setTimeout ( loadJSAsync ) ; }
function ( ) { if ( r ++ && r === nth ) { obj . un ( "afterDataDelete" , guid ) ; completed ( ) ; } }
function ( i ) { if ( ! found && i instanceof Array ) { found = true ; data = utility . clone ( i ) ; } }
function ( document ) { assert . strictEqual ( document . content , content . toString ( ) ) ; }
function ( asReference ) { if ( asReference === true ) { return datamap . getAll ( ) ; } else { return $ . extend ( true , [ ] , datamap . getAll ( ) ) ; } }
function ( s ) { return _ . reduce ( s . split ( '.' ) , function ( memo , val ) { return memo += '[' + JSON . stringify ( val ) + ']' ; } , '' ) ; }
function ( ) { if ( screen . width >= 979 ) { $ ( '#add-note-modal' ) . addClass ( 'modal' ) ; $ ( '#add-note-modal' ) . modal ( ) ; } else { $ ( '#modal-note-phone' ) . show ( ) ; } }
function ( key ) { if ( key != 'pairing_key' ) { html += pinned_template ( $ . jStorage . get ( key ) ) ; } }
function parseProgram ( ) { var program ; strict = false ; yieldAllowed = false ; program = { type : Syntax . Program , body : parseProgramElements ( ) } ; return program ; }
function funDecl ( id , params , body ) { return Pattern ( { type : "FunctionDeclaration" , id : id , params : params , body : body , generator : false } ) }
function genFunDecl ( id , params , body ) { return Pattern ( { type : "FunctionDeclaration" , id : id , params : params , body : body , generator : true } ) }
function funExpr ( id , args , body , gen ) { return Pattern ( { type : "FunctionExpression" , id : id , params : args , body : body , generator : false , } ) }
function genFunExpr ( id , args , body ) { return Pattern ( { type : "FunctionExpression" , id : id , params : args , body : body , generator : true } ) }
function ( options ) { if ( options . repo ) delete options . repo ; return $ . ajax ( { url : this . urls [ options . action ] ( options ) , dataType : respType , data : options } ) ; }
function topLoad ( URL ) { pURL = URL ; $ ( "#move" ) . animate ( { "margin-top" : "150%" } , { duration : aTime } ) setTimeout ( "pageLoad()" , aTime ) ; }
function ( ) { var view = new addTeamView ( { collection : Teams } ) ; view . render ( ) ; }
function ( opt_precision ) { this . values = [ ] ; this . precision = 1 ; this . enable3D_ = true ; if ( this . opt_precision ) { this . setPrecision ( ( opt_precision ) ) ; } }
function ( data , textStatus , jqXHR ) { DEBUG . toString ( data ) }
function ( jqXHR , textStatus , errorThrown ) { var alertContent = $ ( "<div title='Game master says'/>" ) . append ( "<p>" + jqXHR . responseText + "</p>" ) ; alertContent . dialog ( { modal : true } ) ; }
function ( ) { data . scroll = jQuery ( this ) . attr ( "value" ) ; }
function ( ) { websockets . configure ( conf ) ; var expectedPath = path . join ( 'components' , 'button2' , 'server' , 'websockets' , 'socket.js' ) ; expect ( global . requireWithContext . mostRecentCall . args [ 0 ] ) . toBe ( expectedPath ) ; }
function ( ) { websockets . configure ( conf ) ; var expectedPath = path . join ( 'components' , 'button2' , 'server' , 'websockets' , 'socket.js' ) ; expect ( socketRegistry . register ) . toHaveBeenCalledWith ( '/button/2.0/example' , expectedPath , conf ) ; }
function ( ) { expect ( translation . translate ( component , 'ro_RO' , 'Send email' ) ) . toEqual ( 'Trimite email' ) ; }
function ( ) { expect ( translation . translate ( component , 'en_US' , 'No translation' ) ) . toEqual ( 'No translation' ) ; }
function ( ) { var message = translation . translate ( component , 'ro_RO' , 'Dear %1$s %2$s,' , undefined , undefined , [ 'Jhon' , 'Doe' ] ) ; expect ( message ) . toEqual ( 'Bună ziua domnule Doe,' ) ; }
function ( url ) { url = $ . path . addSearchParams ( url , window . location . search . replace ( /^\?/ , '' ) ) ; $ ( '.cms-container' ) . loadPanel ( url ) ; }
function ( word , candidate ) { var splitWord = this . _separatePadding ( word ) ; this . _updateCandidateSelection ( splitWord [ 'middle' ] , candidate ) ; }
function ( typename ) { if ( cp_data . itemtypes == null ) throw new Error ( "cp_data.setContentItemTypes() was never called. Does the ModelAdmin inherit from the correct base class?" ) ; return cp_data . itemtypes [ typename ] ; }
function ( model , error ) { console . log ( error , error . responseText ) ; alert ( error ) ; }
function ( ) { getPastedContent ( ) ; Aloha . activeEditable . smartContentChange ( event ) ; }
function ( s ) { speed = s ; }
function ( ) { return "(" + targetX + "," + targetY + ")" ; }
function ( ) { var wrapper = document . getElementById ( "balls" ) ; var dom = document . getElementById ( this . id ) ; wrapper . removeChild ( dom ) ; }
function ( f , e ) { if ( e . getKey ( ) === e . ENTER ) { this . onTrigger2Click ( ) ; } }
function ( ) { host_url = "//localhost:1338/" ; db_url = "mongodb://localhost/lambdaracer" ; app . use ( express . errorHandler ( ) ) ; }
function ( data ) { console . log ( "we have a connect!" ) ; socket . emit ( 'init' , { fbid : lambdaracer . current . fbid } ) ; }
function ( data ) { console . log ( "TEST WAS EMITTED!" ) ; console . log ( data ) ; }
function ( ) { webview . executeJavascript ( "1 + 1" ) ; url = url || config . content ; if ( url ) { webview . setURL ( url ) ; } registerApplicationEvents ( ) ; }
function ( ) { return mockedApplication ; }
function ( condition , code , message ) { if ( condition ) { throw { code : code , msg : message , toString : function ( ) { return name + ' error: ' + message ; } } ; } }
function ( e ) { return _ . isObject ( e ) && _ . size ( e ) === 3 && e . code === code && _ . isString ( e . msg ) && _ . isFunction ( e . toString ) ; }
function ( ) { $chart . parent ( ) . removeClass ( 'nodata' ) ; $chart . addClass ( 'loading' ) ; $btnZoom . addClass ( 'inactive' ) . click ( _pd ) ; }
function ( ) { $chart . parent ( ) . removeClass ( 'nodata' ) ; $chart . addClass ( 'loading' ) ; $btnZoom . addClass ( 'inactive' ) . click ( _pd ) ; }
function ( ) { var c ; S . Env = S . Env || { } ; c = S . Config = S . Config || { } ; c . debug = '@DEBUG@' ; S . __BUILD_TIME = '20120712143240' ; }
function ( ) { var c ; S . Env = S . Env || { } ; c = S . Config = S . Config || { } ; c . debug = '@DEBUG@' ; S . __BUILD_TIME = '20120712143240' ; }
function ( ) { assert_equals ( value , equals , msg ) ; }
function test_equals ( value , equals , msg , properties ) { wp_test ( function ( ) { assert_equals ( value , equals , msg ) ; } , msg , properties ) ; }
function test_greater_than ( value , greater_than , msg , properties ) { wp_test ( function ( ) { assert_true ( value > greater_than , msg ) ; } , msg , properties ) ; }
function ( ) { this . attributes . code = [ ] ; this . attributes . code . push ( "./controllers/index.js" ) ; }
function ( req , res , next ) { res . locals . myCustomData = this . attributes . code ; this . render ( req , res , next ) ; }
function ( obj ) { final [ obj . key ] = obj . value ; }
function ( filepath ) { deepResolve ( self , searchname , filepath , result ) ; }
function ( ) { if ( this . state == 0 ) { this . state = 1 ; return true ; } return false ; }
function ( ) { if ( this . state == 0 ) { this . state = 2 ; return true ; } return false ; }
function ( ) { if ( this . state == 1 ) { this . state = 0 ; return true ; } return false ; }
function ( location ) { var deactivated = this . tiles [ location . join ( ',' ) ] . deactivate ( ) ; if ( deactivated ) { this . active_tiles -- ; } return deactivated ; }
function ( ) { return ( this . active_tiles == this . active_tiles_max ) ; }
function ( ) { player . reset ( ) ; $status . text ( " " ) ; }
function ( ) { Log ( "App: Loading..." ) ; LoadProfiles ( ) ; }
function GetURL ( path ) { return chrome . extension . getURL ( path ) ; }
function ( pluginsToRegister ) { DLog ( "PluginsManager: Registering [" + pluginsToRegister . length + "] plugins" ) ; $ . each ( pluginsToRegister , function ( index , obj ) { RegisterPlugin ( obj ) ; } ) ; }
function GotNotificationRequest ( request ) { DLog ( "BackgroundScript: Got Notification request." ) ; if ( request . actionName == "Show" ) { notificationManager . Show ( request . requestData ) ; } }
function ( e ) { if ( typeof params . progressCallback === 'function' ) { params . progressCallback . call ( x , e . loaded , e . total ) ; } }
function ( settings ) { if ( settings && settings . initial_window_size ) { this . transferWindowSize = settings . initial_window_size ; for ( var streamID in this . streams ) { this . streams [ streamID ] . updateTransferWindowSize ( settings . initial_window_size ) ; } } }
function ( ) { var height = ( ( browserWindow . height ( ) ) - headHeight ) . toString ( ) ; console . log ( height ) ; scroll . css ( "height" , height + "px" ) ; }
function ( ) { if ( $ ( '.sidebar' ) . length ) { var width = ( ( browserWindow . width ( ) ) - sidebarWidth ) . toString ( ) ; content . css ( "width" , width + "px" ) ; } }
function ( ) { resetValidations ( ) ; var dataFile = validateDataFile ( ) ; var edgeLength = validateEdgeLength ( ) ; var advancedIntegers = validateAdvancedIntegers ( ) ; populateProperty ( ) ; return dataFile && edgeLength && advancedIntegers ; }
function ( data ) { comparison_grid . set_columns ( subgrid . cols ) ; comparison_grid . set_mode ( "details" ) ; comparison_grid . show_columns ( subgrid . cols ) ; bind_subgrid_selector ( ) ; draw_grid ( data ) ; }
function ( data ) { comparison_grid . set_columns ( env_select . get_paths ( ) ) ; select_envs ( get_initial_environments ( ) ) ; comparison_grid . set_mode ( "results" ) ; draw_grid ( data ) ; cache . save_state ( comparison_grid , search_params ) ; }
function ( e ) { var track = this . model ; var newDrawStyle = e . srcElement . getAttribute ( 'data-drawstyle' ) ; track . set ( { drawStyle : newDrawStyle } ) ; }
function ( e ) { this . model . toRemove = this ; rover . tracks . remove ( this . model ) ; }
function ( targetId , event ) { console . debug ( "Convex.dispatch" ) ; convex . dispatch ( targetId , event ) ; }
function ( id , value ) { console . debug ( "Convex.setControlValue" ) ; convex . setValue ( id , value ) ; }
function ( value ) { ctx . seen = [ ] ; return formatValue ( ctx , value , ctx . maxDepth ) ; }
function ( res ) { error_callback ( res ) ; }
function mapApp ( name ) { return 'app://' + name + '.' + domain ; }
function ( nParticles ) { Fireworks . Spawner . call ( this ) ; this . _nParticles = nParticles || 1 ; this . _completed = false ; this . start ( ) ; }
function ( rate ) { Fireworks . Spawner . call ( this ) ; this . _rate = rate || 10 ; this . _nToCreate = 1 ; this . start ( ) ; }
function ( touch ) { var touchRecord = new Object ( ) ; for ( var p in touch ) touchRecord [ p ] = touch [ p ] ; return touchRecord ; }
function ( touch ) { var touchRecord = new Object ( ) ; for ( var p in touch ) touchRecord [ p ] = touch [ p ] ; return touchRecord ; }
function ( ) { model . removeComponent ( pathname ) ; }
function ( jqXHR , status , error ) { KIJ2013 . showError ( 'Error Fetching Items: ' + status ) ; }
function ( ) { sigInst . HideWrongTimeNodes ( - 1 ) ; updateButtonLabel ( "Day+" , + 1 ) ; updateButtonLabel ( "Day-" , - 1 ) ; }
function ( ) { sigInst . HideWrongTimeNodes ( + 1 ) ; updateButtonLabel ( "Day+" , 1 ) ; updateButtonLabel ( "Day-" , - 1 ) ; }
function ( ) { if ( this . reHideAddressBarTimeout_ ) clearTimeout ( this . reHideAddressBarTimeout_ ) ; this . reHideAddressBarTimeout_ = null ; }
function ( ) { if ( ! $scope . streaming ) { $scope . streaming = true ; $scope . status = rpc ( 'example.on' ) ; } else { $scope . streaming = false ; $scope . status = rpc ( 'example.off' , 'Too random' ) ; } }
function ( ) { crypto . randomBytes ( 16 , function ( ex , buf ) { var message = 'Message from space: ' + buf ; ss . publish . all ( 'ss-example' , message ) ; } ) ; }
function ( reason ) { console . log ( "Received reason: %s" , reason ) ; console . log ( "Interval Id: %s" , intervalId ) ; clearInterval ( intervalId ) ; res ( "Ignoring SpaceMail" ) ; }
function ( ) { self . move = false ; self . element . removeClass ( 'drag' ) ; }
function attempt ( aPath ) { if ( foundPath ) { return } if ( fs . existsSync ( aPath ) ) { foundPath = aPath } }
function ( i8 ) { this . trans . writeByte ( i8 ) ; }
function ( ) { var i8 = this . readByte ( ) ; if ( i8 == 0 ) { return false ; } return true ; }
function ( rotation ) { this . _super ( rotation ) ; this . SET_DIRTY_RECURSIVELY ( ) ; }
function ( tmxFile , resourcePath ) { var ret = new cc . TMXTiledMap ( ) ; if ( ret . initWithTMXFile ( tmxFile , resourcePath ) ) { return ret ; } return null ; }
function ( tmxFile , resourcePath ) { this . _internalInit ( tmxFile , resourcePath ) ; return this . parseXMLFile ( this . _TMXFileName ) ; }
function ( tileProperties ) { this . _tileProperties . push ( tileProperties ) ; }
function ( tmxFile , resourcePath ) { var ret = new cc . TMXMapInfo ( ) ; if ( ret . initWithTMXFile ( tmxFile , resourcePath ) ) { return ret ; } return null ; }
function ( name ) { this . set ( name , ! this . get ( name ) ) ; }
function ( position , relativeID ) { return this . addMenuItem ( DIVIDER , "" , position , relativeID ) ; }
function ( ) { methods . next . apply ( $this , [ settings . direction ] ) ; }
function ( completeHandler ) { if ( fulfilled || erred ) { completeHandler ( responseArgs . resp ) } else { completeHandlers . push ( completeHandler ) } return this }
function ( completeHandler ) { if ( fulfilled || erred ) { completeHandler ( responseArgs . resp ) } else { completeHandlers . push ( completeHandler ) } return this }
function ( name ) { if ( ! name || names [ name ] ) { return false ; } else { names [ name ] = true ; return true ; } }
function ( ) { var res = [ ] ; for ( user in names ) { res . push ( user ) ; } return res ; }
function ( name ) { if ( names [ name ] ) { delete names [ name ] ; } }
function onDeviceReady ( ) { deviceUUID = device . uuid ; $ . post ( "http://tali.irail.be/REST/Device.php?device=" + deviceUUID , function ( data ) { } ) ; }
function ( effect ) { return this . queue . push ( effect ) ; }
function ( jXHR , textStatus , errorThrown ) { if ( textStatus !== 'abort' ) { alert ( 'Could not load feed. Is reddit down?' ) ; } }
function ( ) { loadVideo ( Number ( $ ( this ) . attr ( 'rel' ) ) ) ; }
function ( jXHR , textStatus , errorThrown ) { if ( textStatus !== 'abort' ) { alert ( 'Could not load data. Is reddit down?' ) ; } }
function isVideo ( video_domain ) { return ( domains . indexOf ( video_domain ) !== - 1 ) ; }
function getChan ( channel ) { for ( var x in channels ) { if ( channels [ x ] . channel === channel || channels [ x ] . feed === channel ) { return x ; } } }
function ytAuto ( state ) { if ( auto ) { if ( state === 0 ) { loadVideo ( 'next' ) ; } else if ( state === - 1 ) { ytTogglePlay ( ) ; } } }
function ytTogglePlay ( ) { if ( yt_player ) { if ( yt_player . getPlayerState ( ) !== 1 ) { yt_player . playVideo ( ) ; } else { yt_player . pauseVideo ( ) ; } } }
function isEmpty ( obj ) { for ( var prop in obj ) { if ( obj . hasOwnProperty ( prop ) ) { return false ; } } return true ; }
function ( $ ) { initUI ( ) ; if ( window . location . toString ( ) . indexOf ( 'starred' ) != - 1 ) { loadStarredArticles ( ) ; } }
function ( opts ) { _ . extend ( LayoutManager . prototype . options , opts ) ; if ( opts . manage ) { Backbone . View . prototype . manage = true ; } }
function ( ) { equal ( this , main . views [ ".left" ] [ 1 ] . views [ ".inner-left" ] , "Nested View render deferred context is View" ) ; start ( ) ; }
function ( ) { ok ( triggered === true , "afterRender is called" ) ; start ( ) ; }
function ( ) { this . $el . html ( "This works now!" ) ; }
function ( ) { this . insertView ( new setup . View ( { msg : "insert" , keep : true } ) ) ; }
function ( context , settings ) { if ( $ ( '.field-name-field-basic-spotlight-items' ) . length ) { var rotation_time = Drupal . settings . spotlight_settings . rotation_time ; $ ( '.field-name-field-basic-spotlight-items' ) . tabs ( ) . tabs ( "rotate" , rotation_time , true ) ; } }
function ( ) { Utils . debug ( "Successfully authenticated user with their corpus server." ) ; c . replicateCorpus ( couchConnection ) ; window . setTimeout ( function ( ) { window . app . storeCurrentDashboardIdsToLocalStorage ( ) ; } , 10000 ) ; }
function ( path ) { var lastdot = lastDotIndex ( path ) ; return lastdot === - 1 ? "" : path . substring ( 0 , lastdot ) ; }
function ( root , segment , path ) { return path === "path3" ? fluid . NO_VALUE : undefined ; }
function ( ) { var result = fluid . model . transform ( oldOptions , transformRules ) ; deepEqual ( result , modernOptions , "Options should be transformed successfully based on the provided rules." ) ; }
function ( ) { var options = fluid . copy ( oldOptions ) ; options . transformOptions = { transformer : "fluid.model.transform" , config : transformRules } ; var that = fluid . tests . testTransformable ( options ) ; checkTransformedOptions ( that ) ; }
function _static ( cb ) { ncp . ncp ( 'static' , 'out' , cb ) ; }
function ( file ) { if ( file . match ( new RegExp ( '\.' + self . ext ) ) ) { _task ( base , file ) ; } }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addStandardDelegate ( this , 0 ) ; }
function ( ) { if ( this . _isAccelerometerEnabled ) { cc . Director . sharedDirector ( ) . getAccelerometer ( ) . setDelegate ( this ) ; } this . _super ( ) ; }
function ( ) { var ret = new cc . Layer ( ) ; if ( ret && ret . init ( ) ) { return ret ; } return null ; }
function ( ) { this . setContentSize ( cc . Director . sharedDirector ( ) . getWinSize ( ) ) ; return true ; }
function ( ) { return cc . SplitCols . create ( 3 , this . _duration / 2.0 ) ; }
function ( child , zOrder , tag ) { cc . Assert ( ( child instanceof cc . MenuItem ) , "Menu only supports MenuItem objects as children" ) ; this . _super ( child , zOrder , tag ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_HANDLER_PRIORITY , true ) ; }
function ( fontSize ) { cc . _fontSize = fontSize ; }
function ( value , target , selector ) { var ret = new cc . MenuItemFont ( ) ; ret . initWithString ( value , target , selector ) ; return ret ; }
function ( item ) { this . initWithTarget ( null , null ) ; this . _subItems = [ ] ; this . _subItems . push ( item ) ; this . _selectedIndex = cc . UINT_MAX ; this . setSelectedIndex ( 0 ) ; return true ; }
function ( ) { if ( ! this . _textureAtlas . getTexture ( ) . hasPremultipliedAlpha ( ) ) { this . _blendFunc . src = cc . GL_SRC_ALPHA ; this . _blendFunc . dst = cc . GL_ONE_MINUS_SRC_ALPHA ; } }
function ( fileImage , capacity ) { if ( ! capacity ) { capacity = cc . DEFAULT_SPRITE_BATCH_CAPACITY ; } var batchNode = new cc . SpriteBatchNode ( ) ; batchNode . initWithFile ( fileImage , capacity ) ; return batchNode ; }
function ( texture , capacity ) { if ( ! capacity ) { capacity = cc . DEFAULT_SPRITE_BATCH_CAPACITY ; } var batchNode = new cc . SpriteBatchNode ( ) ; batchNode . initWithTexture ( texture , capacity ) ; return batchNode ; }
function ( ) { this . _spriteFrames = [ ] ; this . _spriteFramesAliases = [ ] ; this . _loadedFileNames = { } ; }
function ( ) { if ( ! cc . s_sharedSpriteFrameCache ) { cc . s_sharedSpriteFrameCache = new cc . SpriteFrameCache ( ) ; } return cc . s_sharedSpriteFrameCache ; }
function ( ) { cc . s_sharedSpriteFrameCache = null ; }
function ( id , x , y ) { this . _prevPoint = this . _point ; this . _point = new cc . Point ( x || 0 , y || 0 ) ; this . _id = id ; }
function ( touches , event ) { if ( ! this . isMouseDown ) { this . _beginPos = touches [ 0 ] . locationInView ( ) ; } this . isMouseDown = true ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_HANDLER_PRIORITY + 1 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; }
function ( sender ) { var gradient = this . getChildByTag ( cc . TAG_LAYER ) ; gradient . setCompressedInterpolation ( ! gradient . isCompressedInterpolation ( ) ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , cc . CCMENU_HANDLER_PRIORITY + 1 , true ) ; }
function ( dt ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . setPriority ( cc . CCMENU_HANDLER_PRIORITY + 1 , this ) ; this . unscheduleAllSelectors ( ) ; cc . Log ( "Touches allowed again!" ) ; }
function ( sender ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . setPriority ( cc . CCMENU_HANDLER_PRIORITY - 1 , this ) ; this . schedule ( this . allowTouches , 5.0 ) ; cc . Log ( "TOUCHES DISABLED FOR 5 SECONDS" ) ; }
function ( sender ) { this . _disabledItem . setEnabled ( ! this . _disabledItem . isEnabled ( ) ) ; }
function ( sender ) { this . _disabledItem . setEnabled ( ! this . _disabledItem . isEnabled ( ) ) ; this . _disabledItem . stopAllActions ( ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , false ) ; }
function ( ) { this . _super ( ) ; this . setTouchEnabled ( true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; }
function ( ) { this . _super ( ) ; this . setTouchEnabled ( true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addStandardDelegate ( this , 0 ) ; }
function ( ) { this . setTouchEnabled ( true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , false ) ; }
function ( ) { this . setTouchEnabled ( true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . addTargetedDelegate ( this , 0 , true ) ; this . _super ( ) ; }
function ( ) { cc . Director . sharedDirector ( ) . getTouchDispatcher ( ) . removeDelegate ( this ) ; this . _super ( ) ; }
function ( t , s ) { return cc . TransitionJumpZoom . create ( t , s ) ; }
function ( t , s ) { return cc . TransitionFade . create ( t , s ) ; }
function ( touches , event ) { if ( ! this . isMouseDown ) { this . _beginPos = touches [ 0 ] . locationInView ( ) . y ; } this . isMouseDown = true ; }
function ( opacity ) { this . _opacity = opacity ; }
function ( ) { mpdInit ( ) ; }
function ( ) { setTimeout ( mpdInit , 10000 ) ; }
function ( ) { redrawBars ( ) ; redrawBrush ( ) ; return chart ; }
function ( ) { redrawBars ( ) ; redrawBrush ( ) ; return chart ; }
function ( selections ) { selections . transition . restore ( ) ; selections . duration . restore ( ) ; }
function ( p ) { assert . isTrue ( d3 . select ( this ) . attr ( "fill" ) != "" ) ; }
function ( p ) { assert . isTrue ( d3 . select ( this ) . attr ( "d" ) != "" ) ; }
function ( p ) { assert . equal ( d3 . select ( this ) . attr ( "text-anchor" ) , "middle" ) ; }
function ( pieChart ) { resetAllFilters ( ) ; }
function ( ) { screen = new Radiator . Screen ( ) ; ko . applyBindings ( screen , $ ( '#screen' ) [ 0 ] ) ; screen . display ( ) ; }
function finishHandler ( originalValue , replacementString ) { this . _sidebarPane . applyStyleText ( this . _sidebarPane . nameElement . textContent + ": " + this . _sidebarPane . valueElement . textContent , false , false , false ) ; }
function ( date ) { return scope . currentMonth . date . valueOf ( ) == date . getMonthDate ( ) . valueOf ( ) ; }
function ( ) { scope . changeMonth ( 1 ) ; }
function ( ) { scope . changeMonth ( - 1 ) ; }
function ( selector ) { selector . find ( "div.tooltip" ) . remove ( ) ; return selector . find ( ".rel-tooltip" ) . tooltip ( { placement : 'bottom' } ) ; }
function ( selector ) { selector . find ( "div.tooltip" ) . remove ( ) ; return selector . find ( ".rel-tooltip" ) . tooltip ( { placement : 'bottom' } ) ; }
function ( selector ) { selector . find ( "div.tooltip" ) . remove ( ) ; return selector . find ( ".rel-tooltip" ) . tooltip ( { placement : 'bottom' } ) ; }
function ch_answer ( ) { OnCallHandler . currentCall . answer ( ) ; }
function alloc ( ) { var ptr = ref . alloc ( 'pointer' , ref . NULL ) return ptr }
function ( message ) { if ( ! that . isOpen ) { that . checkActivePanels ( message . range ) ; } }
function ( text , isLong ) { return OpenMEAP_Core . doToast ( text , isLong ) ; }
function ( ) { return OpenMEAP_Core . checkForUpdates ( ) ; }
function ( text , isLong ) { alert ( text ) ; }
function ( ) { return ; }
function ( ) { bwg . _loading . resolve ( { success : true } ) ; }
function ( pokemon ) { this . add ( '-end' , pokemon , 'Disable' ) ; }
function ( ) { $input . inputFileThumb ( options ) ; $input . prependTo ( $input . parents ( '.ui-widget-content' ) ) ; }
function setupShareFacebookButton ( ) { var shareButton = $ ( '.fb_share.btn' ) ; shareButton . click ( function ( event ) { $ ( '.fb_share_message' ) . text ( "Connecting to Facebook..." ) ; $ ( '.fb_share_message' ) . show ( ) ; submitFacebookAction ( ) ; } ) ; }
function ( e ) { $ ( this ) . addClass ( self . options . classes . changed ) ; $ ( this . form ) . triggerHandler ( self . options . events . changed , [ this ] ) ; }
function ( e ) { $ ( this ) . addClass ( self . options . classes . modified ) ; $ ( this . form ) . triggerHandler ( self . options . events . modified , [ this ] ) ; }
function ( item ) { var message = item . file + ":" + item . line ; if ( item . function ) message += " in " + item . function ; console . log ( "  " + message ) ; }
function ( ) { var ext = this . filename . match ( /\.[^.]+$/ ) [ 0 ] ; if ( ! ext ) ext = '.js' ; extensions [ ext ] ( this , this . filename ) ; }
function ( target ) { if ( target . volatiles [ 'protect' ] ) { target . removeVolatile ( 'protect' ) ; } }
function ( move ) { if ( move . target === 'foeSide' ) return ; move . accuracy = 0 ; }
function ( e ) { if ( e . orientation === 'portrait' ) { } }
function ( d , v ) { v -= 1 ; d . setMonth ( v ) ; while ( d . getMonth ( ) != v ) d . setDate ( d . getDate ( ) - 1 ) ; return d ; }
function ( id ) { var f = builder . plugins . getPluginsDir ( ) ; f . append ( id ) ; return f ; }
function ( id ) { var f = builder . plugins . getBuilderDir ( ) ; f . append ( "pluginzips" ) ; builder . plugins . createDir ( f ) ; f . append ( id + ".zip" ) ; return f ; }
function ( responseObj ) { if ( responseObj && typeof responseObj == 'object' ) { self . set ( responseObj ) ; callback && callback . call ( self , responseObj ) ; } self . removeEvents ( throwAway ) ; }
function ( ) { this . _attributes = { } ; this . delete_ ( ) ; this . fireEvent ( 'destroy' ) ; }
function ( key , val ) { var cur = this . getConfig ( ) || { } ; cur [ key ] = val ; fs . writeFileSync ( this . path + '/.dpd/deployments.json' , JSON . stringify ( cur ) ) ; }
function Player ( ) { this . article = new Article ( "Greylock" , 2052339 ) ; }
function ( fileName ) { return fs . existsSync ( fileName ) ; }
function ( context , args ) { if ( Smartgraphs . graphingTool . get ( "lineCount" ) === 2 ) { this . get ( 'owner' ) . set ( 'requestedCursorStyle' , 'default' ) ; } return ; }
function ( result ) { $ ( 'span' , $this . parent ( ) ) . text ( result . state ) . removeClass ( ) . addClass ( result . state . toLowerCase ( ) ) ; }
function ( i ) { if ( $ ( this ) . attr ( "var" ) . match ( /^(fn|[^n][^i][^c][^k]name)$/gi ) && sDone != true ) { sDone = true ; return $ ( this ) } }
function ( code ) { var out = "require.define('" + this . moduleName ( ) + "', function(require, module, exports) {\n(function() {\nrequire=hackRequire(require);\n" + code + "\n}).call(module.exports)});\n" ; return out ; }
function ( ) { if ( goog . Disposable . ENABLE_MONITORING ) { this . creationStack = new Error ( ) . stack ; goog . Disposable . instances_ [ goog . getUid ( this ) ] = this ; } }
function ( ) { return this . disposed_ ; }
function ( ) { if ( $ . active === 0 ) { $ ( this ) . hide ( ) ; } }
function ( ) { console . log ( 'Syncing' ) ; this . getidentifierstype ( onlineStore . getAt ( 0 ) . getData ( ) . uuid ) offlineStore . removeAll ( ) ; offlineStore . sync ( ) ; }
function ( response ) { var userInfo = Ext . decode ( response . responseText ) ; USER . uuid = userInfo . person . uuid ; console . log ( userInfo ) ; localStorage . setItem ( 'uuid' , userInfo . person . uuid ) }
function ( date ) { return ! this . isPast ( date ) ; }
function ( ) { var style = this . container . style ; style . MozTransform = GridManager . dirCtrl . translateNext ; this . setTranstionDuration ( style , this . transitionDuration ) ; }
function ( ) { var style = this . container . style ; style . MozTransform = GridManager . dirCtrl . translatePrev ; this . setTranstionDuration ( style , this . transitionDuration ) ; }
function ( ) { KeypadManager . _hold_active = true ; }
function hk_callbarBackAction ( event ) { CallScreen . toggleKeypad ( ) ; }
function ( ) { KeypadManager . _hold_active = true ; }
function cm_toggleKeypad ( ) { KeypadManager . render ( "keyPadVisibleDuringCall" ) ; this . update ( KeypadManager . _phoneNumber ) ; this . views . classList . toggle ( 'show' ) ; }
function cm_updateTimer ( self , startTime ) { var elapsed = new Date ( Date . now ( ) - startTime ) ; CallScreen . callDuration . innerHTML = elapsed . toLocaleFormat ( '%M:%S' ) ; }
function och_syncSpeakerEnabled ( ) { if ( navigator . mozTelephony . speakerEnabled ) { this . speakerButton . classList . add ( 'speak' ) ; } else { this . speakerButton . classList . remove ( 'speak' ) ; } }
function trWait ( ) { CallScreen . screen . removeEventListener ( 'transitionend' , trWait ) ; if ( displayed ) window . close ( ) ; }
function callSetup ( evt ) { window . removeEventListener ( 'load' , callSetup ) ; KeypadManager . init ( ) ; KeypadManager . phoneNumberViewContainer . classList . add ( "no-toolbar" ) ; CallScreen . init ( ) ; OnCallHandler . setup ( ) ; }
function goNext ( transEndCallbck ) { var nextPage = pageHelper . getNext ( ) ; var curPage = pageHelper . getCurrent ( ) ; curPage . moveToBegin ( ) ; nextPage . moveToCenter ( transEndCallbck ) ; pages . current ++ ; updatePaginationBar ( ) ; }
function goPrev ( transEndCallbck ) { var prevPage = pageHelper . getPrevious ( ) ; var curPage = pageHelper . getCurrent ( ) ; curPage . moveToEnd ( ) ; prevPage . moveToCenter ( transEndCallbck ) ; pages . current -- ; updatePaginationBar ( ) ; }
function onAppsReady ( ) { dirCtrl = getDirCtrl ( ) ; HomeState . init ( renderFromDB , renderFromMozApps ) ; localize ( ) ; }
function onkeydown ( event ) { if ( event . keyCode === event . DOM_VK_HOME || event . keyCode === event . DOM_VK_ESCAPE ) { GridManager . setMode ( 'normal' ) ; Permissions . hide ( ) ; } }
function pb_init ( element ) { var scroller = ( typeof element == 'object' ) ? element : document . querySelector ( element ) ; style = scroller . style ; }
function ( fn ) { if ( this . onlySearch ) { throw new Error ( 'can not add search criterias after .toArray or .toValue was called with .only' ) ; } this . searchList . push ( fn ) ; return this ; }
function ( ) { this . onlyFlag = true ; return this ; }
function ( ) { var result = this . toArray ( ) ; if ( result . length === 0 ) { return false ; } else if ( this . onlyFlag ) { return result . shift ( ) ; } else { return result ; } }
function ( value , idx ) { if ( value . id == id ) { this . del ( idx ) ; } }
function ( value , idx ) { if ( value . id == id ) { this . del ( idx ) ; } }
function ( id ) { addWood ( id ) ; }
function ( ) { cdb . log . error ( "there was some problem fetching rows" ) ; self . _fetching = false ; }
function maxY ( ) { return chart . group ( ) . orderNatural ( ) . top ( 1 ) [ 0 ] . value ; }
function maxY ( ) { return chart . group ( ) . orderNatural ( ) . top ( 1 ) [ 0 ] . value ; }
function ( ) { $ ( '#waiting' ) . hide ( ) ; return $ ( '#download' ) . show ( ) ; }
function ( d ) { Window . ellipsis . stop ( ) ; return $ ( '#waiting' ) . fadeOut ( function ( ) { return $ ( '#download' ) . fadeIn ( ) ; } ) ; }
function getAffiliates ( role_id , callback ) { var url = S3 . Ap . concat ( '/pr/role/' + role_id + '.s3json?show_ids=true' ) ; $ . getJSON ( url , callback ) ; }
function Menu ( field_name ) { return $ ( "<ul/>" ) . addClass ( " ui-menu ui-widget ui-widget-content ui-corner-all" ) . attr ( "role" , "listbox" ) . attr ( "aria-activedescendant" , "ui-active-menuitem" ) . data ( "field_name" , field_name ) . on ( "click" , "li.ui-menu-item" , loadNode ) ; }
function ( result ) { expect ( result ) . to . have . length ( 5 ) ; expect ( result . join ( ' ' ) ) . to . be ( 'Adam Alex Matt Paul Rebecca' ) ; done ( ) ; }
function ( data ) { type = data . type ; if ( type && self . isReceiving ) { self . emitEvent ( type , data . event ) ; } }
function ( data ) { capture ( false ) ; self . emitEvent ( 'rcjs:remoteDisconnect' ) ; self . isCapturing = false ; }
function ( type , listener ) { this . rch . addEventListener . call ( this , type , listener ) ; this . listeners . push ( { type : type , listener : listener } ) ; }
function ( event ) { print ( null , 'rcjs:pinchend' , event ) ; $ ( '<div>Pinch</div>' ) . appendTo ( $ ( '#EventList' ) ) ; }
function ( ) { if ( this . _images ) { this . _setState ( 0 , 1 ) ; this . _slideshowCount = 0 ; this . _setSlideshowInterval ( ) ; this . fireEvent ( "start" ) ; } }
function ( ) { goToPage ( currentPage + 1 ) ; that . callbacks ( "onNext" ) ; that . trigger ( "next" ) ; return that ; }
function set_number_of_reps ( number_of_reps ) { $ ( '#profiles-number-of-reps' ) . html ( number_of_reps ) ; if ( number_of_reps === 1 ) { $ ( '#profiles-number-of-reps-plural' ) . html ( '' ) ; } else { $ ( '#profiles-number-of-reps-plural' ) . html ( 's' ) ; } }
function ( ) { $ ( '#profiles_listview' ) . hide ( ) ; $ ( '#profiles_gridview' ) . show ( ) ; hash_set_value ( 'view' , 'grid' ) ; redraw_grid ( ) ; }
function ( map ) { this . map = map ; }
function ( ) { page . content = '<input type="file" id="file">\n' + '<input type="file" id="file2" multiple>' ; page . uploadFile ( "#file" , 'README.md' ) ; page . uploadFile ( "#file2" , 'README.md' ) ; }
function Bitfield ( values , source , extended ) { return Proxy . create ( new BitfieldHandler ( values , source , extended ) , Bitfield . prototype ) ; }
function BitfieldHandler ( values , source , extended ) { this . values = values ; this . source = source ; this . extended = extended ; this . list = Object . keys ( values ) . sort ( ) ; return }
function ( rcvr , key ) { return this . values . hasOwnProperty ( key ) ? get . call ( this , key ) : Bitfield . prototype [ key ] ; }
function ( rcvr , key , val ) { this . values . hasOwnProperty ( key ) ? set . call ( this , key , val ) : ( Bitfield . prototype [ key ] = val ) }
function ( ) { return this . _server . getConstruct ( ) ; }
function ( ) { if ( window . Touch ) { this . element . addEventListener ( 'touchstart' , this , false ) ; } else { this . element . addEventListener ( 'mousedown' , this , false ) ; } this . _touchOnHandle = false ; }
function ( e ) { var target = e . targetTouches [ 0 ] ; this . _touchOnHandle = ( target . target === this . _handleEl ) ; }
function ( d ) { console . log ( 'Dashboard ' + uuid + ' successfully deleted' ) ; cb ( ) ; }
function ( ) { clearDashboards ( ) ; renderDashboards ( ) ; }
function ( d ) { console . log ( 'Graph ' + uuid + ' successfully deleted' ) ; cb ( ) ; }
function ( ) { clearGraphs ( ) ; renderGraphs ( ) ; }
function ( d ) { console . log ( "successfully updated attribute" ) ; cb ( ) ; }
function ( ) { window . scrollTo ( 0 , 0 ) ; return false ; }
function ( ) { window . scrollTo ( 0 , dt . offset ( ) . top - 30 - floating_header_height ) ; return false ; }
function ( report ) { if ( report !== undefined && report . status !== "All fine" ) { console . log ( report . description ) ; console . log ( report . status ) ; } }
function ( ) { var field = $j ( this ) . prev ( 'input' ) . attr ( 'id' ) ; BrowseFileServer ( field ) ; return false ; }
function ( ) { var field = $j ( this ) . prev ( 'input' ) . attr ( 'id' ) ; BrowseServer ( field ) ; return false ; }
function ( ) { this . selectTab ( this . createTab ( this . START_PAGE_URL ) ) ; this . showPageScreen ( ) ; }
function browser_handlePageScreenClicked ( e ) { if ( this . inTransition ) { return ; } if ( this . currentScreen === this . TABS_SCREEN ) { this . showPageScreen ( ) ; } }
function tabSwipe_tap ( ) { if ( this . browser . inTransition ) { return ; } this . browser . selectTab ( this . id ) ; this . browser . showPageScreen ( ) ; }
function places_getTopSites ( maximum , callback ) { this . db . getPlacesByFrecency ( maximum , callback ) ; }
function ( ) { var busy = this . app . store ( 'Busytime' ) ; busy . on ( 'add ' + this . monthId , this . _onBusyAdd ) ; busy . on ( 'remove ' + this . monthId , this . _onBusyRemove ) ; }
function ( ) { var busy = this . app . store ( 'Busytime' ) ; busy . removeEventListener ( 'add ' + this . monthId , this . _onBusyAdd ) ; busy . removeEventListener ( 'remove ' + this . monthId , this . _onBusyRemove ) ; }
function ( id , object ) { var html = template . item . render ( object ) ; this . calendars . insertAdjacentHTML ( 'beforeend' , html ) ; }
function ( id ) { var htmlId = 'calendar-' + id ; var el = document . getElementById ( htmlId ) ; if ( el ) { el . parentNode . removeChild ( el ) ; } }
function ( err , success ) { assert . ok ( ! err , 'should not have an error when deleting db' ) ; assert . ok ( success , 'should be able to delete the db' ) ; done ( ) ; }
function ( ) { var stores = subject . connection . objectStoreNames ; var actualStore ; for ( actualStore in subject . store ) { assert . ok ( ( stores . contains ( actualStore ) ) , actualStore + ' was not created' ) ; } }
function ( ) { assert . ok ( subject . connection ) ; assert . ok ( subject . isOpen ) ; assert . equal ( subject . connection . name , name ) ; finishedOpen = true ; }
function ( ) { View = Calendar . Test . MockView ; }
function ( ) { page = Calendar . Test . FakePage ; subject = new Calendar . Router ( page ) ; page . routes . length = 0 ; }
function ( ) { object = { } ; }
function ( ) { calledWith = arguments ; object . onactiveCalled = true ; }
function ( ) { var tpl = new Template ( '{2} ! {1}' ) ; assert . equal ( tpl . render ( { 1 : '1' , 2 : '2' } ) , '2 ! 1' ) ; }
function ( ) { var tpl = new Template ( '{foo-bar}' ) ; assert . equal ( tpl . render ( { 'foo-bar' : 'fo' } ) , 'fo' ) ; }
function ( ) { var tpl = new Template ( '\nfoo {value}' ) ; assert . equal ( tpl . render ( 'bar' ) , '\nfoo bar' ) ; }
function ( ) { var tpl , input , output ; tpl = new Template ( '{html|s}' ) ; input = '<div class="foo">\'zomg\'</div>' ; output = tpl . render ( { html : input } ) ; assert . equal ( output , input ) ; }
function calculator_backSpace ( ) { this . clearBackspaceTimeout ( ) ; this . startBackspaceTimeout ( ) ; this . stack . splice ( this . stack . length - 1 , 1 ) ; this . updateDisplay ( ) ; }
function calc_errorTimeout ( self ) { self . display . parentNode . classList . remove ( 'error' ) ; self . errorTimeout = null ; }
function ( ) { var output = renderHTML ( 'provider' , { name : 'yahoo' } ) ; assert . include ( output , 'yahoo' ) ; }
function ( ) { dispatched = arguments ; }
function ( ) { requireApp ( 'calendar/js/templates/account.js' ) ; requireApp ( 'calendar/js/presets.js' ) ; requireApp ( 'calendar/js/views/create_account.js' ) ; }
function ( ) { var el = document . querySelector ( subject . selectors . element ) ; assert . ok ( el ) ; assert . equal ( subject . element , el ) ; }
function ( ) { require ( '/shared/js/gesture_detector.js' ) ; requireApp ( 'calendar/js/templates/month.js' ) ; requireApp ( 'calendar/js/views/month_child.js' ) ; }
function ( ) { require ( '/shared/js/gesture_detector.js' ) ; requireApp ( 'calendar/js/templates/month.js' ) ; requireApp ( 'calendar/js/views/month_child.js' ) ; requireApp ( 'calendar/js/views/month.js' ) ; }
function ( ) { requireLib ( 'templates/calendar.js' ) ; requireLib ( 'views/settings.js' ) ; }
function ( ) { assert . instanceOf ( subject , Calendar . View ) ; assert . equal ( subject . app , app ) ; assert . equal ( subject . element , document . querySelector ( '#settings' ) ) ; }
function ( ) { assert . ok ( subject . calendars ) ; }
function ( ) { models = { } ; models [ 1 ] = { name : 'first' , localDisplayed : true , _id : 'one' } ; store . _cached = models ; subject . render ( ) ; children = subject . calendars . children ; }
function al_putAlarmList ( alarm ) { AlarmManager . setEnabled ( alarm , alarm . enabled ) ; self . refresh ( ) ; }
function am_gotAlarm ( alarm ) { self . _onFireAlarm = alarm ; var protocol = window . location . protocol ; var host = window . location . host ; window . open ( protocol + '//' + host + '/onring.html' , 'ring_screen' , 'attention' ) ; }
function am_snoozeHandler ( ) { this . set ( this . _onFireAlarm , true ) ; }
function aev_getDefaultAlarm ( ) { return { id : '' , alarmId : '' , label : 'Alarm' , hour : '10' , minute : '00' , enabled : true , repeat : '0000000' , sound : 'classic.wav' , snooze : 5 , color : 'Darkorange' } ; }
function al_putAlarmList ( alarm ) { AlarmManager . setEnabled ( alarm , alarm . enabled ) ; AlarmList . refresh ( ) ; }
function ( event ) { item . id = event . target . result ; if ( callback ) callback ( item ) ; }
function onError ( ) { saveButton . removeAttribute ( 'disabled' ) ; console . error ( 'Error reloading contact' ) ; if ( ActivityHandler . currentlyHandling ) { ActivityHandler . postCancel ( ) ; } }
function handleBack ( ) { var inActivity = ActivityHandler . currentlyHandling ; if ( inActivity && ActivityHandler . activityName == 'new' ) { ActivityHandler . postCancel ( ) ; } else { navigation . back ( ) ; } }
function ah_postPickSuccess ( number ) { this . _currentActivity . postResult ( { number : number } ) ; this . _currentActivity = null ; }
function ah_postCancel ( ) { this . _currentActivity . postError ( 'canceled' ) ; this . _currentActivity = null ; }
function visibility ( e ) { if ( document . mozHidden ) { if ( ActivityHandler . currentlyHandling ) ActivityHandler . postCancel ( ) ; } }
function ( ) { createThumbnailList ( ) ; photodb . scan ( ) ; document . addEventListener ( 'mozvisibilitychange' , function visibilityChange ( ) { if ( ! document . mozHidden ) { photodb . scan ( ) ; } } ) ; }
function _getKeyCoordinateY ( y ) { var candidatePanel = document . getElementById ( 'keyboard-candidate-panel' ) ; var yBias = 0 ; if ( candidatePanel ) yBias = candidatePanel . clientHeight ; return y - yBias ; }
function kc_onResize ( nWidth , nHeight , fWidth , fHeihgt ) { if ( IMERender . ime . dataset . hidden ) return ; IMERender . resizeUI ( _currentLayout ) ; _updateTargetWindowHeight ( ) ; this . updateLayoutParams ( ) ; }
get anchor ( ) { delete this . _anchor ; return this . _anchor = document . getElementById ( 'views-sublist-anchor' ) ; } ,
function pv_previous ( ) { var songElements = SubListView . anchor . children ; if ( this . currentIndex <= 0 ) return ; this . currentIndex -- ; this . play ( songElements [ this . currentIndex ] . firstElementChild ) ; }
function showBody ( ) { document . documentElement . lang = navigator . mozL10n . language . code ; document . documentElement . dir = navigator . mozL10n . language . direction ; document . body . classList . remove ( 'invisible' ) ; }
function ( event ) { if ( gWifiManager . enabled ) { updateNetworkState ( ) ; if ( event . status == 'connected' ) { gNetworkList . scan ( ) ; } } }
function wifiConnect ( ) { gWifiManager . associate ( network ) ; gNetworkList . display ( network . ssid , _ ( 'shortStatus-connecting' ) ) ; }
function wifiDisconnect ( ) { gWifiManager . forget ( network ) ; gNetworkList . display ( network . ssid , _ ( 'shortStatus-disconnected' ) ) ; }
function onsuccess ( ) { if ( callback ) { callback ( deleteRequest ) ; } }
function onerror ( ) { if ( callback ) { callback ( null ) ; } window . setTimeout ( pendingMgr . deleteFromMsgDB ( msg , callback ) . bind ( pendingMgr ) , 500 ) ; }
function thui_cleanFields ( ) { this . num . value = '' ; this . input . value = '' ; this . updateInputHeight ( ) ; }
get mainScreen ( ) { delete this . mainScreen ; return this . mainScreen = document . getElementById ( 'screen' ) ; } ,
function ( volume ) { self . mute . hidden = ! ! volume ; }
function screenTimeoutChanged ( value ) { self . _idleTimeout = value ; }
function realScreenOff ( ) { navigator . mozPower . screenBrightness = 0 ; navigator . mozPower . screenEnabled = false ; }
function Db ( name ) { this . name = name ; this . _stores = Object . create ( null ) ; Calendar . Responder . call ( this ) ; }
function ( event ) { self . isOpen = true ; self . connection = req . result ; callback ( null , self ) ; self . emit ( 'open' , self ) ; }
function ( error ) { callback ( error , null ) ; self . emit ( 'error' , error ) ; }
function ( ) { callback ( new Error ( 'blocked' ) ) ; }
function ( ) { if ( onsuccess ) onsuccess ( null ) ; }
function ( className ) { if ( className != showSelector ) { dom . hide ( "." + className + ":not(." + showSelector + ")" ) ; } }
function enterEmailState ( ) { if ( ! dom . is ( "#email" , ":disabled" ) ) { this . submit = checkEmail ; showHint ( "start" ) ; } }
function onWindowUnload ( ) { this . publish ( "window_unload" ) ; }
function ( cb ) { window . location = 'https://login.persona.org/sign_in#AUTH_RETURN' ; }
function ( reason ) { window . location = 'https://login.persona.org/sign_in#AUTH_RETURN_CANCEL' ; }
function ( ) { mediator . publish ( "start" , { termsOfService : "https://browserid.org/TOS.html" , privacyPolicy : "https://browserid.org/priv.html" } ) ; ok ( actions . info . doRPInfo . termsOfService , "doRPInfo called with termsOfService set" ) ; ok ( actions . info . doRPInfo . privacyPolicy , "doRPInfo called with privacyPolicy set" ) ; }
function ( ) { createController ( { email : "testuser@testuser.com" } ) ; ok ( $ ( "#newEmail" ) . val ( ) , "testuser@testuser.com" , "email prepopulated" ) ; }
function ( ) { testHelpers . testRPTosPPShown ( ) ; start ( ) ; }
function ( ) { ok ( $ ( "#set_password" ) . length , "set_password template added" ) ; testElementExists ( "#verify_user" ) ; testElementExists ( "#cancel" ) ; testElementNotExists ( "#persona_tospp" ) ; }
function ( ) { createController ( { window : win , add : false , email : "unregistered@testuser.com" , auth_url : "http://testuser.com/sign_in" , requiredEmail : true , personaTOSPP : false } ) ; testElementNotExists ( "#persona_tospp" ) ; }
function ( ) { equal ( win . document . location , "http://testuser.com/sign_in?email=unregistered%40testuser.com" ) ; equal ( messageTriggered , true , "primary_user_authenticating triggered" ) ; start ( ) ; }
function WindowMock ( ) { this . document = new DocumentMock ( ) ; this . sessionStorage = { } ; }
function ( toTest , msg ) { equal ( typeof toTest , "undefined" , msg || "object is undefined" ) ; }
function getXHRObject ( ) { var xhrObject ; if ( window . XMLHttpRequest ) { xhrObject = new XMLHttpRequest ( ) ; } else if ( window . ActiveXObject ) { xhrObject = new ActiveXObject ( 'Microsoft.XM/LHTTP' ) ; } return xhrObject ; }
function ( msg , info ) { info . siteTOSPP = self . siteTOSPP ; startAction ( "doAuthenticate" , info ) ; }
function ( ) { startAction ( "doPickEmail" , { origin : self . hostname , siteTOSPP : self . siteTOSPP && ! user . getOriginEmail ( ) } ) ; }
function ( msg , info ) { info = info || { } ; self . stagedEmail = info . email ; startAction ( false , "doResetPassword" , info ) ; }
function ( callback ) { for ( var i = 0 ; i < this . length ; i ++ ) { var key = this . _keys [ i ] ; callback ( key , this . _values [ key ] ) ; } }
function ( callback ) { for ( var i = 0 ; i < this . length ; i ++ ) { callback ( this . _keys [ i ] ) ; } }
function ( callback ) { for ( var i = 0 ; i < this . length ; i ++ ) { var key = this . _keys [ i ] ; callback ( this . _values [ key ] ) ; } }
function ( ) { console . log ( "mpd socket closed." ) ; mpdInit ( ) ; }
function ( text ) { Echo . Utils . addCSS ( this . substitute ( text ) , "plugins-" + this . name ) ; }
function ( html , action , anchor ) { html = this . substitute ( $ . isFunction ( html ) ? html ( ) : html ) ; this . component . extendTemplate . call ( this . component , html , action , anchor ) ; }
function ( labels ) { Echo . Labels . set ( labels , "Plugins." + plugin . name , true ) ; }
function ( label ) { return Echo . Labels . get ( label , "Plugins." + plugin . name ) ; }
function ( step ) { knob . set ( "text" , maps . underdog [ Math . abs ( step ) ] ) ; }
function ( step ) { knob . set ( "text" , maps . points [ step ] ) ; }
function ( ) { this . renderPage ( function ( ) { return new app . pages . Category ( ) } ) }
function ( cp , w , h ) { this . tree . innerCt . setWidth ( w ) ; this . tree . innerCt . setHeight ( h ) ; }
function ( ) { deal_hvs ( ) deal_networks ( ) }
function ( retryDelay , maxRetry ) { this . set ( 'retry' , true ) ; this . set ( 'maxRetry' , maxRetry ) ; this . set ( 'retryDelay' , _ . ms ( retryDelay ) ) ; return this ; }
function install ( ) { echo ( "Installing Deployd..." ) ; npm . commands . install ( [ 'https://github.com/deployd/deployd/tarball/master' ] , finished ) ; }
function ( storyboard ) { console . log ( "Ci sto dentro" ) ; setupScene ( $ ( "#canvas" ) . width ( ) , $ ( "#canvas" ) . height ( ) , storyboard ) ; }
function setupScene ( width , height , storyboard ) { init ( width , height , storyboard ) ; saveOriginalState ( ) ; meshesStartingState ( ) ; renderingAnimate ( ) ; }
function pause ( ) { console . log ( "PAUSE" ) ; for ( var i in tweens ) { tweens [ i ] . stop ( ) ; ispaused = true ; isanimating = false ; } }
function play ( ) { console . log ( "PLAY" ) ; playFrom ( ) ; if ( ! isanimating || ispaused ) { for ( var i in tweens ) { tweens [ i ] . start ( ) ; } isanimating = true ; } }
function rwAnimation ( ) { console . log ( "RW" ) ; stop ( ) ; }
function ( ) { $ ( "#toAnnotate" ) . annotateImage ( { getUrl : "/api/public/tags.json?filename=" + postfilename , saveUrl : "/tags/save" , deleteUrl : "/tags/delete" , editable : true } ) ; }
function ( editable , image ) { var cancel = $ ( '<a class="btn btn-mini btn-spacer">Cancel</a>' ) ; cancel . click ( function ( ) { editable . destroy ( ) ; image . mode = 'view' ; } ) ; editable . form . append ( cancel ) ; }
function ( ) { addBinding ( ) ; sakai . api . Util . getTemplates ( constructWorlds ) ; }
function ( groupid , canLeave ) { if ( ! canLeave ) { $ ( '.mymemberships_leave[data-sakai-entityid="' + groupid + '"]' ) . addClass ( 'mymemberhips_disabled_leave' ) ; } }
function ( leaveAllowed ) { $ . each ( leaveAllowed , function ( groupid , canLeave ) { if ( ! canLeave ) { $ ( '.mymemberships_leave[data-sakai-entityid="' + groupid + '"]' ) . addClass ( 'mymemberhips_disabled_leave' ) ; } } ) ; }
function ( i , group ) { idArr . push ( $ ( group ) . data ( 'groupid' ) ) ; titleArr . push ( $ ( group ) . data ( 'grouptitle' ) ) ; }
function ( ) { if ( $ ( '#mymemberships_items li:visible' ) . length === 0 ) { render ( { entry : [ ] } ) ; } }
function ( ) { $ ( '#mymemberships_select_checkbox' ) . removeAttr ( 'checked' ) ; }
function ( ) { $ . bbq . pushState ( { 'ls' : 'list' } ) ; }
function ( ) { $ . bbq . pushState ( { 'ls' : 'grid' } ) ; }
function ( ) { if ( $ ( topnavUserOptionsLoginFields ) . is ( ':visible' ) ) { $ ( topnavUserOptionsLoginFields ) . hide ( ) ; } else { $ ( topnavUserOptionsLoginFields ) . show ( ) ; $ ( topnavUseroptionsLoginFieldsUsername ) . focus ( ) ; } }
function ( index , item ) { $ ( item ) . attr ( 'href' , $ . param . querystring ( $ ( item ) . attr ( 'href' ) , { 'url' : redirectURL } ) ) ; }
function ( ) { $ ( '#topnavigation_user_messages_container .s3d-dropdown-menu' ) . hide ( ) ; $ ( '#topnavigation_messages_container' ) . removeClass ( 'selected' ) ; }
function ( e ) { if ( $openPopover . length ) { $openPopover . prev ( ) . removeClass ( 'selected' ) ; $openPopover . attr ( 'aria-hidden' , 'true' ) ; $openPopover . hide ( ) ; $openPopover = false ; } }
function ( ) { if ( $openMenu . length ) { $openMenu . find ( 'a' ) . blur ( ) ; } }
function ( ) { $ ( this ) . trigger ( 'mouseover' ) ; mouseOverSignIn = true ; $ ( topnavUserOptionsLoginFields ) . trigger ( 'click' ) ; $ ( topnavigationlogin ) . addClass ( topnavigationForceSubmenuDisplayTitle ) ; }
function ( ) { if ( $ ( '#navigation_anon_signup_link:focus' ) . length ) { $ ( '#navigation_anon_signup_link:focus' ) . blur ( ) ; } closeMenu ( ) ; closePopover ( ) ; $ ( topnavUserOptionsLoginFields ) . show ( ) ; }
function ( ) { sakai . api . Widgets . widgetLoader . insertWidgets ( tuid ) ; }
function got ( obj , key ) { return arguments . length > 2 ? hasSome ( got , obj , Array . coerce ( arguments , 1 ) ) : key in Object ( obj ) ; }
function got ( obj , key ) { return arguments . length > 2 ? hasSome ( got , obj , Array . coerce ( arguments , 1 ) ) : key in Object ( obj ) ; }
function ( Response ) { $ ( '#accounts' ) . append ( Response . result ) ; $ ( '#accounts .account:last' ) . hide ( ) . fadeIn ( 'fast' ) ; }
function ( err , value ) { if ( ERR ( err , callback ) ) return ; callback ( null , { lastEdited : value } ) ; }
function ( cookie ) { var curr_uid = cookie . value ; $ . post ( 'http://redpill.herokuapp.com/register?userid=' + curr_uid , function ( response ) { self . updateUnreadNotifCount ( ) ; } ) ; }
function ( ) { alert ( 'One or more network requests failed.  ' + TRY_AGAIN_MSG ) ; }
function checkNetworkState ( networkState ) { if ( networkState == Connection . NONE ) { alert ( "Network is unavailable.  " + TRY_AGAIN_MSG ) } else { fetchData ( ) ; } }
function ( jqXHR , textStatus , errorThrown ) { console . log ( "Twitter API error: " + textStatus ) ; twitterData = ERROR_FLAG ; }
function ( jqXHR , textStatus , errorThrown ) { console . log ( "Yahoo API error: " + textStatus ) ; rssFeedData = ERROR_FLAG ; trailStatusData = { } ; trailStatusData . title = ERROR_MSG_NO_DATA ; trailStatusData . updatedDate = "N/A" ; }
function ( jqXHR , textStatus , errorThrown ) { console . log ( "Google Calendar API error: " + textStatus ) ; calendarData = ERROR_FLAG ; }
function test ( ) { waitForExplicitFinish ( ) ; setPermission ( testPageURL1 , "indexedDB" ) ; setPermission ( testPageURL2 , "indexedDB" ) ; executeSoon ( test1 ) ; }
function test3 ( ) { Components . classes [ "@mozilla.org/privatebrowsing;1" ] . getService ( Components . interfaces . nsIPrivateBrowsingService ) . removeDataFromDomain ( domains [ 1 ] ) ; setPermission ( testPageURL4 , "indexedDB" ) ; executeSoon ( test4 ) ; }
function ( limitedQuota ) { SimpleTest . waitForExplicitFinish ( ) ; allowIndexedDB ( ) ; if ( limitedQuota ) { denyUnlimitedQuota ( ) ; } else { allowUnlimitedQuota ( ) ; } clearAllDatabases ( function ( ) { testGenerator . next ( ) ; } ) ; }
function ( ) { testGenerator . close ( ) ; SimpleTest . finish ( ) ; }
function finishTest ( ) { resetUnlimitedQuota ( ) ; resetIndexedDB ( ) ; SimpleTest . executeSoon ( function ( ) { testGenerator . close ( ) ; SimpleTest . finish ( ) ; } ) ; }
function allowIndexedDB ( url ) { addPermission ( "indexedDB" , true , url ) ; }
function test ( ) { waitForExplicitFinish ( ) ; removePermission ( testPageURL , "indexedDB" ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; removePermission ( testPageURL , "indexedDB" ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; setPermission ( testPageURL , "indexedDB" ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL , "indexedDB" ) ; removePermission ( testPageURL , "indexedDB-unlimited" ) ; Services . prefs . setIntPref ( "dom.indexedDB.warningQuota" , 2 ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL , "indexedDB" ) ; removePermission ( testPageURL , "indexedDB-unlimited" ) ; Services . prefs . setIntPref ( "dom.indexedDB.warningQuota" , 2 ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL , "indexedDB" ) ; removePermission ( testPageURL , "indexedDB-unlimited" ) ; Services . prefs . setIntPref ( "dom.indexedDB.warningQuota" , 2 ) ; executeSoon ( test1 ) ; }
function test ( ) { waitForExplicitFinish ( ) ; requestLongerTimeout ( 10 ) ; setPermission ( testPageURL , "indexedDB" ) ; removePermission ( testPageURL , "indexedDB-unlimited" ) ; Services . prefs . setIntPref ( "dom.indexedDB.warningQuota" , 2 ) ; executeSoon ( test1 ) ; }
function ( evt ) { if ( evt . keyCode != KEYCODES . SPACE ) { return } this . interactionsView . invokePane ( ) ; }
function ( evt ) { if ( evt . keyCode != KEYCODES . ESC ) { return } this . interactionsView . hidePane ( ) ; }
function ( e ) { e . preventDefault ( ) ; OT_UI . add ( this , 'contextual_help' ) ; }
function thlui_init ( ) { this . delNumList = [ ] ; }
function ( ) { var sel = $ ( this ) ; if ( sel . hasClass ( 'wiki-l10n' ) ) { location . href = sel . val ( ) ; } else { this . form . submit ( ) ; } }
function ( event ) { this . event = event ; }
function onEventClicked ( e ) { event . preventDefault ( ) ; currentEventTrace = $ ( e . currentTarget ) . data ( 'trace' ) ; setupTree ( $tree ) ; }
function ( ) { console . log ( 123 ) ; CubeViz_Main_Module . registerDataStructureDefinition ( ) ; }
function ( event ) { $ ( event . target ) . trigger ( "dataStructureDefinitionClicked.CubeViz" ) ; }
function ( event ) { $ ( event . target ) . trigger ( "dataSetClicked.CubeViz" ) ; }
function ( ) { getAlerts ( service , filter , refresh ) ; }
function ( ) { getAlerts ( service , filter , refresh ) ; }
function ( ) { this . callParent ( arguments ) ; }
function ( ) { this . control ( { 'berkas_jra_list' : { itemdblclick : this . list_itemdblclick , selectionchange : this . list_selectionchange } } ) }
function ( v , r , idx ) { if ( r . get ( "tipe_file" ) != 0 ) { Earsip . win_viewer . down ( '#download' ) . hide ( ) ; Earsip . win_viewer . do_open ( r ) ; } }
function ( ) { var template = $ ( this . model . getTemplate ( ) ) . html ( ) ; if ( ! template ) { throw "Please specify template" ; } return _ . template ( template , null , { variable : 'data' } ) ; }
function ( ) { this . controller . _handleMaxChange ( ) ; }
function LinkedList ( ) { this . head = null ; this . tail = null ; this . count = 0 ; }
function ( ) { equal ( realModifiers ( 'BUGFOO LINUX LION WIN DEBUG SLOW' ) , 'SLOW' ) ; equal ( realModifiers ( 'BUGFOO LUCID MAC XP RELEASE SKIP' ) , 'SKIP' ) ; equal ( realModifiers ( 'BUGFOO' ) , '' ) ; }
function ( result ) { if ( result && typeof result . Errors != "undefined" ) { callback ( new Error ( result . Errors . Error . Message ) , result ) } else { callback ( null , result ) } }
function ( err , resources ) { if ( err ) { return callback ( err ) ; } cb ( config , resources ) ; }
function ( ) { editor . currentMode . afterActivation ( editor ) ; }
function ( editor ) { align ( editor , 'left' ) ; }
function ( editor ) { align ( editor , 'right' ) ; }
function ( editor ) { align ( editor , 'center' ) ; }
function ( ) { start ( ) ; ok ( previewButton . is ( '.on' ) , 'preview on' ) ; ok ( changeMode . val ( ) === 'haml' , 'The datamode should stay the same, was ' + changeMode . val ( ) ) ; }
function to fetch data
function ( ) { return '/' ; }
function ( err ) { if ( err ) { if ( err . stack ) console . warn ( '\n' + err . stack ) ; else console . warn ( '\n' + err . message ) ; } task . emit ( 'finished' ) ; }
function ( ) { return pokeHoles ( image , img . width ) ; }
function ( connection , data ) { transportLogic . ajaxSend ( connection , data , "serverSentEvents" ) ; }
function ( connection ) { if ( connection && connection . eventSource ) { connection . eventSource . close ( ) ; connection . eventSource = null ; } }
function ( main ) { return this . found || ( this . found = fs . existsSync ( this + main ) ) ; }
function ( self , err ) { if ( err ) { this . error = err ; } else { this . size = fs . statSync ( this . tmp_name ) . size ; } -- self . i || self . callback ( ) ; }
function ( ) { doRecord ( ) ; }
function ( event ) { console . log ( "Voice Btn clicked" ) ; renderActField ( ) ; }
function ( ) { close ( { otherWindows : true , type : 'otherWindows' } ) }
function ( msg ) { this . statusEl . text ( msg ) ; this . debug ( msg ) ; }
function ( msg ) { if ( console && console . log ) console . log ( msg ) ; }
function ( ) { var el = $ ( this ) ; var seekid = el . data ( "seekid" ) ; C4 . send ( "CANCEL_SEEK " + C4 . padId ( seekid ) ) ; }
function ( ) { var el = $ ( this ) ; var seekid = el . data ( "seekid" ) ; C4 . send ( "ACCEPT_SEEK " + C4 . padId ( seekid ) ) ; }
function ( event ) { var ui = { item : this . active || $ ( event . target ) . closest ( ".ui-menu-item" ) } ; this . collapseAll ( event , true ) ; this . _trigger ( "select" , event , ui ) ; }
function ( ) { var message = { message : $ ( 'react_message' ) . value } ; if ( message . message . strip ( ) !== '' ) { this . request ( this . postMessageUrl , message ) ; } }
function styleOnload ( node , callback ) { if ( node . attachEvent || global . opera ) { node . attachEvent ( 'onload' , callback ) } else { setTimeout ( function ( ) { poll ( node , callback ) } , 0 ) } }
function styleOnload ( node , callback ) { if ( node . attachEvent || global . opera ) { node . attachEvent ( 'onload' , callback ) } else { setTimeout ( function ( ) { poll ( node , callback ) } , 0 ) } }
function ( e ) { e . stopPropagation ( ) ; popover . stop ( true , true ) . show ( ) ; }
function ( ) { this . model . set ( "username" , $ ( ".username" ) . val ( ) ) ; $ ( ".confirm-password" ) . show ( ) ; $ ( ".password" ) . focus ( ) ; }
function Property$isDefinedBy ( mtype ) { return this . _containingType === mtype || mtype . isSubclassOf ( this . _containingType ) ; }
function Property$get_isCalculated ( ) { return this . _isCalculated ; }
function Property$isDefinedBy ( mtype ) { return this . _containingType === mtype || mtype . isSubclassOf ( this . _containingType ) ; }
function Property$get_isCalculated ( ) { return this . _isCalculated ; }
function Property$isDefinedBy ( mtype ) { return this . _containingType === mtype || mtype . isSubclassOf ( this . _containingType ) ; }
function Property$get_isCalculated ( ) { return this . _isCalculated ; }
function show_batch ( ) { var batch_id = $ ( '#spawn' ) . attr ( 'data-id' ) ; $ . getScript ( 'batches/' + batch_id + '.js' ) ; }
function ( src ) { var dest = targetConfig . dest + '/' + src . replace ( basePath , "" ) ; copy ( src , dest ) ; }
function ( recv_buf , flushCallback ) { this . send_buf = '' ; this . recv_buf = recv_buf || '' ; this . flushCallback = flushCallback ; }
function ( ) { this . flushCallback ( this . send_buf ) ; }
function ( name , messageType , seqid ) { throw new Error ( "TJSONProtocol: Message not supported" ) ; }
function ( ) { return ! ! getValueFromScope ( this . elementStack [ 0 ] ) ; }
function ( data ) { assert ( data . ok ) ; done ( ) }
function ( e ) { Utils . debug ( "There was an error fetching the session. Loading defaults..." + e ) ; s . set ( "sessionFields" , self . get ( "corpus" ) . get ( "sessionFields" ) . clone ( ) ) ; }
function removeIncompleteTask ( id ) { return removeTask ( id , incompleteTasks , "incompleteTasks" ) ; }
function removeCompleteTask ( id ) { return removeTask ( id , completeTasks , "completeTasks" ) ; }
function stop ( ) { console . log ( plasmoid . popupIcon ) tomatoidTimer . totalSeconds = 0 ; tomatoidTimer . running = false ; inPomodoro = false ; inBreak = false ; }
function ( data ) { launchSmallPopup ( i18n ( "smallpopup.group.rename.title" ) , data , i18n ( "action.rename" ) , 'validate' ) ; }
function ( data ) { hideThinking ( ) ; launchSmallPopup ( i18n ( "smallpopup.fmessage.rename.title" , messageSection ) , data , i18n ( "action.rename" ) , 'validate' ) ; }
function ( result ) { if ( result && typeof result . Errors !== 'undefined' ) { callback ( result . Errors . Error . Message , result , res ) ; } else { callback ( null , result , res ) ; } }
function ( ) { if ( this . _cf != undefined ) return this . _cf . length ( ) ; return this . _f . length ; }
function ( ) { return '[DisplayFragment (f.name = "' + this . _f . getName ( ) + '")]' ; }
function ( i ) { if ( this . children . length == 0 ) return 0 ; i = i % this . children . length ; if ( i < 0 ) return i + this . children . length ; return i ; }
function ( err ) { console . log ( err ) ; console . log ( "Socket error, restarting." ) setStateToError ( ) ; setTimeout ( function ( ) { process . exit ( 1 ) ; } , 30000 ) ; }
function ( ) { process . exit ( 1 ) ; }
function ( ) { console . log ( "Reconnect failed, restarting." ) ; setStateToError ( ) ; setTimeout ( function ( ) { process . exit ( 1 ) ; } , 30000 ) ; }
function ( e ) { $ ( '.SplitCellBackground' , this ) . trigger ( 'mouseover' ) ; e . stopPropagation ( ) ; }
function ( e ) { $ ( '.SplitCellBackground' , this ) . mouseout ( ) ; e . stopPropagation ( ) ; }
function setSTDOUT ( bool ) { this . logger . set ( 'level' , bool ? - 1 : Logger . levels . log ) ; return this . standardOutput = ! ! bool ; }
function ( ) { var square = new Square ( ) ; square . middleware . push ( noop ) ; expect ( square . has ( noop ) ) . to . equal ( true ) ; }
function ( ) { it ( 'should require the given plugin by name' ) ; it ( 'should for the plugin in multiple locations' ) ; it ( 'should proxy the configuration to the plugin' ) ; it ( 'should merge the configuration with the supplied options' ) ; it ( 'should log an critical error when it fails' ) ; }
function ( ) { if ( ! this . has ( "Body" ) ) throw new Error ( "Must have body to move around!" ) ; this . bind ( "MoveFinished" , this . _movePointReached ) ; this . bind ( "EnterFrame" , this . _updateNavigation ) ; return this ; }
function ( ) { this . _currentGoal = null ; this . _pendingPath = null ; }
function ( ) { this . requires ( "NavigationHandle" ) ; }
function ( ) { return new PathFinder ( this . Semantics ) ; }
function ( world ) { WorldPathSemantics . $super . call ( this ) ; this . _world = world ; }
function ( current , dest ) { throw ( "Not implemented!" ) ; }
function ( ) { start ( ) ; assert . strictEqual ( actualEventCount , 90 ) ; assert . ok ( actualStartedAt . sameMonth ( { year : 2012 , month : 3 } ) , "actual=" + actualStartedAt ) ; }
function ( ) { if ( this . _data === undefined ) { this . _data = new cdb . admin . CartoDBTableData ( null , { name : this . get ( 'id' ) } ) ; } return this . _data ; }
function ( ) { this . table = new cdb . admin . CartoDBTableMetadata ( { id : table_id } ) ; this . columns = this . table . data ( ) ; this . map = new cdb . geo . Map ( ) ; }
function ime_show ( inputType ) { debug ( 'Show. Input type: ' + inputType ) ; var layout = IMELayouts . JP ; if ( inputType === '' || inputType === 'text' || inputType === 'textarea' ) { layout = _currLayout ; } _glue . alterKeyboard ( layout ) ; }
function ( ) { this . initContainer ( ) ; if ( this . container . style . display == "none" ) { this . show ( ) ; } else { this . hide ( ) ; } }
function ( ) { if ( ! this . container ) return ; this . container . style . display = "none" ; Tr8n . Utils . showFlash ( ) ; }
function ( ) { this . initContainer ( ) ; if ( this . container . style . display == "none" ) { this . show ( ) ; } else { this . hide ( ) ; } }
function ( ) { if ( ! this . container ) return ; this . container . style . display = "none" ; Tr8n . Utils . showFlash ( ) ; }
function ( ) { _ . bindAll ( this , 'onFormSubmit' , 'onSubmitSuccess' ) ; this . form = new Kaleidos . Form ( { el : this . $ ( "form" ) } ) ; }
function ( counter ) { if ( counter > 0 ) { self . unread_count += counter ; $ ( "#unread_count" ) . text ( self . unread_count + " unread" ) ; $ ( "#unread_count" ) . removeClass ( "no_unread" ) ; } }
function ( e ) { console . log ( "Exception during GCM request: " + e ) ; callback ( "request error" , null ) ; }
function ( data ) { inpho . semantics . renderQueryResult ( elt , query , data ) ; }
function ( ) { isPlaying = true ; _this . embedPlayer . duration = vid . duration ; $ ( vid ) . unbind ( playBindStr ) ; }
function ( evt ) { var data = self . getData ( ) ; var value = $ ( this ) . val ( ) ; if ( data ) data . value = value ; this . _value = value ; }
function ( win , fail ) { return promise . then ( win , fail ) ; }
function ( fn , args , resolve ) { var value ; try { value = apply . call ( fn , this , args ) ; } catch ( e ) { value = e ; } resolve ( value ) ; }
function ( options , callback ) { this . request ( { method : 'POST' , path : '/_replicate' , body : options } , callback ) ; }
function ( ) { document . addEventListener ( "keydown" , this , false ) ; document . addEventListener ( "keyup" , this , false ) ; }
function ( r ) { if ( r == name ) return r ; }
function ( ) { return equal ( self . id ( this ) , self . id ( def ) ) ; }
function ( i ) { if ( equal ( self . id ( $ ( this ) . data ( "select2-data" ) ) , self . opts . element . val ( ) ) ) { selected = i ; return false ; } }
function ( ) { if ( indexOf ( self . id ( this ) , ids ) < 0 ) { ids . push ( self . id ( this ) ) ; filtered . push ( this ) ; } }
function ( ) { data . push ( self . id ( this ) ) ; }
function ( err , val , flags ) { assert . equal ( 'world' , val ) ; assert . equal ( 'flagshere' , flags ) ; assert . equal ( null , err ) ; callbn += 1 ; }
function ( err , val ) { assert . equal ( true , val ) ; assert . equal ( null , err ) ; callbn += 1 ; }
function ( err , val ) { assert . equal ( null , err ) ; assert . equal ( true , val ) ; callbn += 1 ; }
function ( err , val ) { assert . equal ( undefined , val ) ; assert . equal ( "MemJS SET: " + errors [ 3 ] , err . message ) ; callbn += 1 ; }
