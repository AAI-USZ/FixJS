function (Handlebars,depth0,helpers,partials,data) {  helpers = helpers || Handlebars.helpers; partials = partials || Handlebars.partials;  var buffer = "", stack1, stack2, foundHelper, tmp1, self=this, functionType="function", helperMissing=helpers.helperMissing, undef=void 0, escapeExpression=this.escapeExpression;function program1(depth0,data) {    var buffer = "", stack1;  buffer += "scale(";  foundHelper = helpers.scale;  stack1 = foundHelper || depth0.scale;  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1['x']);  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "scale.x", { hash: {} }); }  buffer += escapeExpression(stack1) + ", ";  foundHelper = helpers.scale;  stack1 = foundHelper || depth0.scale;  stack1 = (stack1 === null || stack1 === undefined || stack1 === false ? stack1 : stack1['y']);  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "scale.y", { hash: {} }); }  buffer += escapeExpression(stack1) + ")";  return buffer;}function program3(depth0,data) {    var buffer = "", stack1;  buffer += "scale(";  foundHelper = helpers.scale;  stack1 = foundHelper || depth0.scale;  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "scale", { hash: {} }); }  buffer += escapeExpression(stack1) + ")";  return buffer;}function program5(depth0,data) {    var buffer = "", stack1;  buffer += "scale(";  foundHelper = helpers.scale;  stack1 = foundHelper || depth0.scale;  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "scale", { hash: {} }); }  buffer += escapeExpression(stack1) + ")";  return buffer;}  buffer += "<div class=\"componentContainer\" style=\"top: ";  foundHelper = helpers['y'];  stack1 = foundHelper || depth0['y'];  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "y", { hash: {} }); }  buffer += escapeExpression(stack1) + "px; left: ";  foundHelper = helpers['x'];  stack1 = foundHelper || depth0['x'];  if(typeof stack1 === functionType) { stack1 = stack1.call(depth0, { hash: {} }); }  else if(stack1=== undef) { stack1 = helperMissing.call(depth0, "x", { hash: {} }); }  buffer += escapeExpression(stack1) + "px;-webkit-transform: ";  foundHelper = helpers.scale;  stack1 = foundHelper || depth0.scale;  stack2 = helpers['if'];  tmp1 = self.program(1, program1, data);  tmp1.hash = {};  tmp1.fn = tmp1;  tmp1.inverse = self.noop;  stack1 = stack2.call(depth0, stack1, tmp1);  if(stack1 || stack1 === 0) { buffer += stack1; }  buffer += ";-moz-transform: ";  foundHelper = helpers.scale;  stack1 = foundHelper || depth0.scale;  stack2 = helpers['if'];  tmp1 = self.program(3, program3, data);  tmp1.hash = {};  tmp1.fn = tmp1;  tmp1.inverse = self.noop;  stack1 = stack2.call(depth0, stack1, tmp1);  if(stack1 || stack1 === 0) { buffer += stack1; }  buffer += ";transform: ";  foundHelper = helpers.scale;  stack1 = foundHelper || depth0.scale;  stack2 = helpers['if'];  tmp1 = self.program(5, program5, data);  tmp1.hash = {};  tmp1.fn = tmp1;  tmp1.inverse = self.noop;  stack1 = stack2.call(depth0, stack1, tmp1);  if(stack1 || stack1 === 0) { buffer += stack1; }  buffer += "\">";  stack1 = depth0;  stack1 = self.invokePartial(partials.TransformContainer, 'TransformContainer', stack1, helpers, partials);;  if(stack1 || stack1 === 0) { buffer += stack1; }  return buffer;}