function(){},error:function(a){this.log(a,"error")},info:function(a){this.log(a,"info")},verbose:function(a){this.log(a,"verbose")},warn:function(a){this.log(a,"warn")},deprecate:function(a){this.log(a,"deprecate")}},function(){var a;Ext.isFunction(null!=(a=Ext.Logger)?a.log:void 0)?this.log=Ext.bind(Ext.Logger.log,Ext.Logger):Ext.isFunction(Ext.log)&&(this.log=function(a,b){null==b&&(b="info");"deprecate"===b&&(b="warn");
Ext.log({msg:a,level:b})})});Ext.define("Deft.util.Function",{alternateClassName:["Deft.Function"],statics:{spread:function(a,c){return function(b){Ext.isArray(b)||Ext.Error.raise({msg:"Error spreading passed Array over target function arguments: passed a non-Array."});return a.apply(c,b)}},memoize:function(a,c,b){var d;d={};return function(e){var f;f=Ext.isFunction(b)?b.apply(c,arguments):e;f in d||(d[f]=a.apply(c,arguments));return d[f]}}}